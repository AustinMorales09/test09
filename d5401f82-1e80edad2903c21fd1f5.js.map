{"version":3,"file":"d5401f82-1e80edad2903c21fd1f5.js","mappings":"2JAKA,MAAMA,EAAUC,EAAQ,OAClB,aAAEC,GAAiBD,EAAQ,QAE3B,aAAEE,GAAiBH,EAEnBI,EAAcF,EAAaC,GAEjCE,EAAAA,GAAAA,IAASC,EAAAA,IAAkBC,KAAK,CAC9BC,YAAa,KACbC,IAAKL,EAKLM,UAAW,CACT,CAACN,GAAc,CACbO,aAAa,CAAD,EAOZC,SAAS,CAAD,EAORC,MAAM,CAAD,EAOLC,SAAS,CAAD,EAORC,MAAM,CAAD,GAQPC,GAAI,CACFL,aAAa,CAAD,4i/DACZC,SAAS,CAAD,66HACRC,MAAM,CAAD,0iyFACLC,SAAS,CAAD,gaACRC,MAAM,CAAD,4rDAGTE,GAAI,CAAC,eAAgB,WAAY,QAAS,WAAY,SACtDC,UAAW,eACXC,eAAe,EAGfC,cAAe,CACbC,aAAa,GAEfC,MAAO,CACLC,aAAa,GAEfC,YAAY,IAGdnB,EAAAA,GAAKoB,UAAYtB,EAEjB,IAAeE,EAAI,E","sources":["webpack://@freecodecamp/client/./i18n/config.js"],"sourcesContent":["/* global preval */\n\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nconst envData = require('../config/env.json');\nconst { i18nextCodes } = require('../../shared/config/i18n');\n\nconst { clientLocale } = envData;\n\nconst i18nextCode = i18nextCodes[clientLocale];\n\ni18n.use(initReactI18next).init({\n  fallbackLng: 'en',\n  lng: i18nextCode,\n  // we only load one language since each language will have it's own server\n  // They need to be evaluated ahead of time, to prevent Webpack from bundling\n  // the entire locales directory. To avoid double imports when the locale is\n  // english, we simply export nothing from the preval\n  resources: {\n    [i18nextCode]: {\n      translations: preval`\n      const envData = require('../config/env.json');\n      const { clientLocale } = envData;\n      if (clientLocale !== 'english') {\n        module.exports = require('./locales/' + clientLocale + '/translations.json');\n      }\n    `,\n      trending: preval`\n      const envData = require('../config/env.json');\n      const { clientLocale } = envData;\n      if (clientLocale !== 'english') {\n        module.exports = require('./locales/' + clientLocale + '/trending.json');\n      }\n    `,\n      intro: preval`\n      const envData = require('../config/env.json');\n      const { clientLocale } = envData;\n      if (clientLocale !== 'english') {\n        module.exports = require('./locales/' + clientLocale + '/intro.json');\n      }\n    `,\n      metaTags: preval`\n      const envData = require('../config/env.json');\n      const { clientLocale } = envData;\n      if (clientLocale !== 'english') {\n        module.exports = require('./locales/' + clientLocale + '/meta-tags.json');\n      }\n    `,\n      links: preval`\n      const envData = require('../config/env.json');\n      const { clientLocale } = envData;\n      if (clientLocale !== 'english') {\n        module.exports = require('./locales/' + clientLocale + '/links.json');\n      }\n    `\n    },\n    en: {\n      translations: preval`module.exports = require('./locales/english/translations.json')`,\n      trending: preval`module.exports = require('./locales/english/trending.json')`,\n      intro: preval`module.exports = require('./locales/english/intro.json')`,\n      metaTags: preval`module.exports = require('./locales/english/meta-tags.json')`,\n      links: preval`module.exports = require('./locales/english/links.json')`\n    }\n  },\n  ns: ['translations', 'trending', 'intro', 'metaTags', 'links'],\n  defaultNS: 'translations',\n  returnObjects: true,\n  // Uncomment the next line for debug logging\n  // debug: true,\n  interpolation: {\n    escapeValue: false\n  },\n  react: {\n    useSuspense: true\n  },\n  returnNull: false\n});\n\ni18n.languages = clientLocale;\n\nexport default i18n;\n"],"names":["envData","require","i18nextCodes","clientLocale","i18nextCode","i18n","initReactI18next","init","fallbackLng","lng","resources","translations","trending","intro","metaTags","links","en","ns","defaultNS","returnObjects","interpolation","escapeValue","react","useSuspense","returnNull","languages"],"sourceRoot":""}
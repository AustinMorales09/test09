/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js":
/*!***********************************************************************************!*\
  !*** ../../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js ***!
  \***********************************************************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../../node_modules/.pnpm/pyodide@0.23.3/node_modules/pyodide/pyodide.js":
/*!**********************************************************************************!*\
  !*** ../../../node_modules/.pnpm/pyodide@0.23.3/node_modules/pyodide/pyodide.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var __dirname = "/";
/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "../../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js");
!function(global,factory){ true?factory(exports):0}(this,(function(exports){"use strict";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self&&self;var errorStackParser={exports:{}},stackframe={exports:{}};!function(module,exports){module.exports=function(){function _isNumber(n){return!isNaN(parseFloat(n))&&isFinite(n)}function _capitalize(str){return str.charAt(0).toUpperCase()+str.substring(1)}function _getter(p){return function(){return this[p]}}var booleanProps=["isConstructor","isEval","isNative","isToplevel"],numericProps=["columnNumber","lineNumber"],stringProps=["fileName","functionName","source"],arrayProps=["args"],objectProps=["evalOrigin"],props=booleanProps.concat(numericProps,stringProps,arrayProps,objectProps);function StackFrame(obj){if(obj)for(var i=0;i<props.length;i++)void 0!==obj[props[i]]&&this["set"+_capitalize(props[i])](obj[props[i]])}StackFrame.prototype={getArgs:function(){return this.args},setArgs:function(v){if("[object Array]"!==Object.prototype.toString.call(v))throw new TypeError("Args must be an Array");this.args=v},getEvalOrigin:function(){return this.evalOrigin},setEvalOrigin:function(v){if(v instanceof StackFrame)this.evalOrigin=v;else{if(!(v instanceof Object))throw new TypeError("Eval Origin must be an Object or StackFrame");this.evalOrigin=new StackFrame(v)}},toString:function(){var fileName=this.getFileName()||"",lineNumber=this.getLineNumber()||"",columnNumber=this.getColumnNumber()||"",functionName=this.getFunctionName()||"";return this.getIsEval()?fileName?"[eval] ("+fileName+":"+lineNumber+":"+columnNumber+")":"[eval]:"+lineNumber+":"+columnNumber:functionName?functionName+" ("+fileName+":"+lineNumber+":"+columnNumber+")":fileName+":"+lineNumber+":"+columnNumber}},StackFrame.fromString=function(str){var argsStartIndex=str.indexOf("("),argsEndIndex=str.lastIndexOf(")"),functionName=str.substring(0,argsStartIndex),args=str.substring(argsStartIndex+1,argsEndIndex).split(","),locationString=str.substring(argsEndIndex+1);if(0===locationString.indexOf("@"))var parts=/@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString,""),fileName=parts[1],lineNumber=parts[2],columnNumber=parts[3];return new StackFrame({functionName:functionName,args:args||void 0,fileName:fileName,lineNumber:lineNumber||void 0,columnNumber:columnNumber||void 0})};for(var i=0;i<booleanProps.length;i++)StackFrame.prototype["get"+_capitalize(booleanProps[i])]=_getter(booleanProps[i]),StackFrame.prototype["set"+_capitalize(booleanProps[i])]=function(p){return function(v){this[p]=Boolean(v)}}(booleanProps[i]);for(var j=0;j<numericProps.length;j++)StackFrame.prototype["get"+_capitalize(numericProps[j])]=_getter(numericProps[j]),StackFrame.prototype["set"+_capitalize(numericProps[j])]=function(p){return function(v){if(!_isNumber(v))throw new TypeError(p+" must be a Number");this[p]=Number(v)}}(numericProps[j]);for(var k=0;k<stringProps.length;k++)StackFrame.prototype["get"+_capitalize(stringProps[k])]=_getter(stringProps[k]),StackFrame.prototype["set"+_capitalize(stringProps[k])]=function(p){return function(v){this[p]=String(v)}}(stringProps[k]);return StackFrame}()}(stackframe),function(module,exports){var StackFrame,FIREFOX_SAFARI_STACK_REGEXP,CHROME_IE_STACK_REGEXP,SAFARI_NATIVE_CODE_REGEXP;module.exports=(StackFrame=stackframe.exports,FIREFOX_SAFARI_STACK_REGEXP=/(^|@)\S+:\d+/,CHROME_IE_STACK_REGEXP=/^\s*at .*(\S+:\d+|\(native\))/m,SAFARI_NATIVE_CODE_REGEXP=/^(eval@)?(\[native code])?$/,{parse:function(error){if(void 0!==error.stacktrace||void 0!==error["opera#sourceloc"])return this.parseOpera(error);if(error.stack&&error.stack.match(CHROME_IE_STACK_REGEXP))return this.parseV8OrIE(error);if(error.stack)return this.parseFFOrSafari(error);throw new Error("Cannot parse given Error object")},extractLocation:function(urlLike){if(-1===urlLike.indexOf(":"))return[urlLike];var parts=/(.+?)(?::(\d+))?(?::(\d+))?$/.exec(urlLike.replace(/[()]/g,""));return[parts[1],parts[2]||void 0,parts[3]||void 0]},parseV8OrIE:function(error){return error.stack.split("\n").filter((function(line){return!!line.match(CHROME_IE_STACK_REGEXP)}),this).map((function(line){line.indexOf("(eval ")>-1&&(line=line.replace(/eval code/g,"eval").replace(/(\(eval at [^()]*)|(,.*$)/g,""));var sanitizedLine=line.replace(/^\s+/,"").replace(/\(eval code/g,"(").replace(/^.*?\s+/,""),location=sanitizedLine.match(/ (\(.+\)$)/);sanitizedLine=location?sanitizedLine.replace(location[0],""):sanitizedLine;var locationParts=this.extractLocation(location?location[1]:sanitizedLine),functionName=location&&sanitizedLine||void 0,fileName=["eval","<anonymous>"].indexOf(locationParts[0])>-1?void 0:locationParts[0];return new StackFrame({functionName:functionName,fileName:fileName,lineNumber:locationParts[1],columnNumber:locationParts[2],source:line})}),this)},parseFFOrSafari:function(error){return error.stack.split("\n").filter((function(line){return!line.match(SAFARI_NATIVE_CODE_REGEXP)}),this).map((function(line){if(line.indexOf(" > eval")>-1&&(line=line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g,":$1")),-1===line.indexOf("@")&&-1===line.indexOf(":"))return new StackFrame({functionName:line});var functionNameRegex=/((.*".+"[^@]*)?[^@]*)(?:@)/,matches=line.match(functionNameRegex),functionName=matches&&matches[1]?matches[1]:void 0,locationParts=this.extractLocation(line.replace(functionNameRegex,""));return new StackFrame({functionName:functionName,fileName:locationParts[0],lineNumber:locationParts[1],columnNumber:locationParts[2],source:line})}),this)},parseOpera:function(e){return!e.stacktrace||e.message.indexOf("\n")>-1&&e.message.split("\n").length>e.stacktrace.split("\n").length?this.parseOpera9(e):e.stack?this.parseOpera11(e):this.parseOpera10(e)},parseOpera9:function(e){for(var lineRE=/Line (\d+).*script (?:in )?(\S+)/i,lines=e.message.split("\n"),result=[],i=2,len=lines.length;i<len;i+=2){var match=lineRE.exec(lines[i]);match&&result.push(new StackFrame({fileName:match[2],lineNumber:match[1],source:lines[i]}))}return result},parseOpera10:function(e){for(var lineRE=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,lines=e.stacktrace.split("\n"),result=[],i=0,len=lines.length;i<len;i+=2){var match=lineRE.exec(lines[i]);match&&result.push(new StackFrame({functionName:match[3]||void 0,fileName:match[2],lineNumber:match[1],source:lines[i]}))}return result},parseOpera11:function(error){return error.stack.split("\n").filter((function(line){return!!line.match(FIREFOX_SAFARI_STACK_REGEXP)&&!line.match(/^Error created at/)}),this).map((function(line){var argsRaw,tokens=line.split("@"),locationParts=this.extractLocation(tokens.pop()),functionCall=tokens.shift()||"",functionName=functionCall.replace(/<anonymous function(: (\w+))?>/,"$2").replace(/\([^)]*\)/g,"")||void 0;functionCall.match(/\(([^)]*)\)/)&&(argsRaw=functionCall.replace(/^[^(]+\(([^)]*)\)$/,"$1"));var args=void 0===argsRaw||"[arguments not available]"===argsRaw?void 0:argsRaw.split(",");return new StackFrame({functionName:functionName,args:args,fileName:locationParts[0],lineNumber:locationParts[1],columnNumber:locationParts[2],source:line})}),this)}})}(errorStackParser);var ErrorStackParser=errorStackParser.exports;const IN_NODE="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node&&void 0===process.browser;let nodeUrlMod,nodeFetch,nodePath,nodeVmMod,nodeFsPromisesMod,resolvePath,pathSep,loadBinaryFile,loadScript;if(resolvePath=IN_NODE?function(path,base){return nodePath.resolve(base||".",path)}:function(path,base){return void 0===base&&(base=location),new URL(path,base).toString()},IN_NODE||(pathSep="/"),loadBinaryFile=IN_NODE?async function(path,_file_sub_resource_hash){if(path.startsWith("file://")&&(path=path.slice("file://".length)),path.includes("://")){let response=await nodeFetch(path);if(!response.ok)throw new Error(`Failed to load '${path}': request failed.`);return new Uint8Array(await response.arrayBuffer())}{const data=await nodeFsPromisesMod.readFile(path);return new Uint8Array(data.buffer,data.byteOffset,data.byteLength)}}:async function(path,subResourceHash){const url=new URL(path,location);let options=subResourceHash?{integrity:subResourceHash}:{},response=await fetch(url,options);if(!response.ok)throw new Error(`Failed to load '${url}': request failed.`);return new Uint8Array(await response.arrayBuffer())},globalThis.document)loadScript=async url=>await import(/* webpackIgnore: true */url);else if(globalThis.importScripts)loadScript=async url=>{try{globalThis.importScripts(url)}catch(e){if(!(e instanceof TypeError))throw e;await import(/* webpackIgnore: true */url)}};else{if(!IN_NODE)throw new Error("Cannot determine runtime environment");loadScript=async function(url){url.startsWith("file://")&&(url=url.slice("file://".length));url.includes("://")?nodeVmMod.runInThisContext(await(await nodeFetch(url)).text()):await import(/* webpackIgnore: true */nodeUrlMod.pathToFileURL(url).href)}}function __values(o){var s="function"==typeof Symbol&&Symbol.iterator,m=s&&o[s],i=0;if(m)return m.call(o);if(o&&"number"==typeof o.length)return{next:function(){return o&&i>=o.length&&(o=void 0),{value:o&&o[i++],done:!o}}};throw new TypeError(s?"Object is not iterable.":"Symbol.iterator is not defined.")}function __asyncValues(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,m=o[Symbol.asyncIterator];return m?m.call(o):(o=__values(o),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i);function verb(n){i[n]=o[n]&&function(v){return new Promise((function(resolve,reject){(function(resolve,reject,d,v){Promise.resolve(v).then((function(v){resolve({value:v,done:d})}),reject)})(resolve,reject,(v=o[n](v)).done,v.value)}))}}}const getFsHandles=async dirHandle=>{const handles=[];await async function collect(curDirHandle){var e_1,_a;try{for(var _c,_b=__asyncValues(curDirHandle.values());!(_c=await _b.next()).done;){const entry=_c.value;handles.push(entry),"directory"===entry.kind&&await collect(entry)}}catch(e_1_1){e_1={error:e_1_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&await _a.call(_b)}finally{if(e_1)throw e_1.error}}}(dirHandle);const result=new Map;result.set(".",dirHandle);for(const handle of handles){const relativePath=(await dirHandle.resolve(handle)).join("/");result.set(relativePath,handle)}return result};function initializeFileSystem(Module,config){let stdLibURL;stdLibURL=null!=config.stdLibURL?config.stdLibURL:config.indexURL+"python_stdlib.zip",function(Module,stdlibURL){const stdlibPromise=loadBinaryFile(stdlibURL);Module.preRun.push((()=>{const pymajor=Module._py_version_major(),pyminor=Module._py_version_minor();Module.FS.mkdirTree("/lib"),Module.FS.mkdirTree(`/lib/python${pymajor}.${pyminor}/site-packages`),Module.addRunDependency("install-stdlib"),stdlibPromise.then((stdlib=>{Module.FS.writeFile(`/lib/python${pymajor}${pyminor}.zip`,stdlib)})).catch((e=>{console.error("Error occurred while installing the standard library:"),console.error(e)})).finally((()=>{Module.removeRunDependency("install-stdlib")}))}))}(Module,stdLibURL),function(Module,path){Module.preRun.push((function(){try{Module.FS.mkdirTree(path)}catch(e){console.error(`Error occurred while making a home directory '${path}':`),console.error(e),console.error("Using '/' for a home directory instead"),path="/"}Module.ENV.HOME=path,Module.FS.chdir(path)}))}(Module,config.homedir),function(Module,mounts){Module.preRun.push((()=>{for(const mount of mounts)Module.FS.mkdirTree(mount),Module.FS.mount(Module.FS.filesystems.NODEFS,{root:mount},mount)}))}(Module,config._node_mounts),Module.preRun.push((()=>function(module){const FS=module.FS,MEMFS=module.FS.filesystems.MEMFS,PATH=module.PATH,nativeFSAsync={DIR_MODE:16895,FILE_MODE:33279,mount:function(mount){if(!mount.opts.fileSystemHandle)throw new Error("opts.fileSystemHandle is required");return MEMFS.mount.apply(null,arguments)},syncfs:async(mount,populate,callback)=>{try{const local=nativeFSAsync.getLocalSet(mount),remote=await nativeFSAsync.getRemoteSet(mount),src=populate?remote:local,dst=populate?local:remote;await nativeFSAsync.reconcile(mount,src,dst),callback(null)}catch(e){callback(e)}},getLocalSet:mount=>{let entries=Object.create(null);function isRealDir(p){return"."!==p&&".."!==p}function toAbsolute(root){return p=>PATH.join2(root,p)}let check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));for(;check.length;){let path=check.pop(),stat=FS.stat(path);FS.isDir(stat.mode)&&check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path))),entries[path]={timestamp:stat.mtime,mode:stat.mode}}return{type:"local",entries:entries}},getRemoteSet:async mount=>{const entries=Object.create(null),handles=await getFsHandles(mount.opts.fileSystemHandle);for(const[path,handle]of handles)"."!==path&&(entries[PATH.join2(mount.mountpoint,path)]={timestamp:"file"===handle.kind?(await handle.getFile()).lastModifiedDate:new Date,mode:"file"===handle.kind?nativeFSAsync.FILE_MODE:nativeFSAsync.DIR_MODE});return{type:"remote",entries:entries,handles:handles}},loadLocalEntry:path=>{const node=FS.lookupPath(path).node,stat=FS.stat(path);if(FS.isDir(stat.mode))return{timestamp:stat.mtime,mode:stat.mode};if(FS.isFile(stat.mode))return node.contents=MEMFS.getFileDataAsTypedArray(node),{timestamp:stat.mtime,mode:stat.mode,contents:node.contents};throw new Error("node type not supported")},storeLocalEntry:(path,entry)=>{if(FS.isDir(entry.mode))FS.mkdirTree(path,entry.mode);else{if(!FS.isFile(entry.mode))throw new Error("node type not supported");FS.writeFile(path,entry.contents,{canOwn:!0})}FS.chmod(path,entry.mode),FS.utime(path,entry.timestamp,entry.timestamp)},removeLocalEntry:path=>{var stat=FS.stat(path);FS.isDir(stat.mode)?FS.rmdir(path):FS.isFile(stat.mode)&&FS.unlink(path)},loadRemoteEntry:async handle=>{if("file"===handle.kind){const file=await handle.getFile();return{contents:new Uint8Array(await file.arrayBuffer()),mode:nativeFSAsync.FILE_MODE,timestamp:file.lastModifiedDate}}if("directory"===handle.kind)return{mode:nativeFSAsync.DIR_MODE,timestamp:new Date};throw new Error("unknown kind: "+handle.kind)},storeRemoteEntry:async(handles,path,entry)=>{const parentDirHandle=handles.get(PATH.dirname(path)),handle=FS.isFile(entry.mode)?await parentDirHandle.getFileHandle(PATH.basename(path),{create:!0}):await parentDirHandle.getDirectoryHandle(PATH.basename(path),{create:!0});if("file"===handle.kind){const writable=await handle.createWritable();await writable.write(entry.contents),await writable.close()}handles.set(path,handle)},removeRemoteEntry:async(handles,path)=>{const parentDirHandle=handles.get(PATH.dirname(path));await parentDirHandle.removeEntry(PATH.basename(path)),handles.delete(path)},reconcile:async(mount,src,dst)=>{let total=0;const create=[];Object.keys(src.entries).forEach((function(key){const e=src.entries[key],e2=dst.entries[key];(!e2||FS.isFile(e.mode)&&e.timestamp.getTime()>e2.timestamp.getTime())&&(create.push(key),total++)})),create.sort();const remove=[];if(Object.keys(dst.entries).forEach((function(key){src.entries[key]||(remove.push(key),total++)})),remove.sort().reverse(),!total)return;const handles="remote"===src.type?src.handles:dst.handles;for(const path of create){const relPath=PATH.normalize(path.replace(mount.mountpoint,"/")).substring(1);if("local"===dst.type){const handle=handles.get(relPath),entry=await nativeFSAsync.loadRemoteEntry(handle);nativeFSAsync.storeLocalEntry(path,entry)}else{const entry=nativeFSAsync.loadLocalEntry(path);await nativeFSAsync.storeRemoteEntry(handles,relPath,entry)}}for(const path of remove)if("local"===dst.type)nativeFSAsync.removeLocalEntry(path);else{const relPath=PATH.normalize(path.replace(mount.mountpoint,"/")).substring(1);await nativeFSAsync.removeRemoteEntry(handles,relPath)}}};module.FS.filesystems.NATIVEFS_ASYNC=nativeFSAsync}(Module)))}function finalizeBootstrap(API,config){API.runPythonInternal_dict=API._pyodide._base.eval_code("{}"),API.importlib=API.runPythonInternal("import importlib; importlib");let import_module=API.importlib.import_module;API.sys=import_module("sys"),API.sys.path.insert(0,config.homedir),API.os=import_module("os");let globals=API.runPythonInternal("import __main__; __main__.__dict__"),builtins=API.runPythonInternal("import builtins; builtins.__dict__");var builtins_dict;API.globals=(builtins_dict=builtins,new Proxy(globals,{get:(target,symbol)=>"get"===symbol?key=>{let result=target.get(key);return void 0===result&&(result=builtins_dict.get(key)),result}:"has"===symbol?key=>target.has(key)||builtins_dict.has(key):Reflect.get(target,symbol)}));let importhook=API._pyodide._importhook;importhook.register_js_finder(),importhook.register_js_module("js",config.jsglobals);let pyodide=API.makePublicAPI();return importhook.register_js_module("pyodide_js",pyodide),API.pyodide_py=import_module("pyodide"),API.pyodide_code=import_module("pyodide.code"),API.pyodide_ffi=import_module("pyodide.ffi"),API.package_loader=import_module("pyodide._package_loader"),API.sitepackages=API.package_loader.SITE_PACKAGES.__str__(),API.dsodir=API.package_loader.DSO_DIR.__str__(),API.defaultLdLibraryPath=[API.dsodir,API.sitepackages],API.os.environ.__setitem__("LD_LIBRARY_PATH",API.defaultLdLibraryPath.join(":")),pyodide.pyodide_py=API.pyodide_py,pyodide.globals=API.globals,pyodide}async function loadPyodide(options={}){await async function(){if(!IN_NODE)return;if(nodeUrlMod=(await __webpack_require__.e(/*! import() */ "_148e").then(__webpack_require__.t.bind(__webpack_require__, /*! url */ "?148e", 23))).default,nodeFsPromisesMod=await __webpack_require__.e(/*! import() */ "_7977").then(__webpack_require__.t.bind(__webpack_require__, /*! fs/promises */ "?7977", 23)),nodeFetch=globalThis.fetch?fetch:(await __webpack_require__.e(/*! import() */ "node_modules_pnpm_node-fetch_2_7_0_node_modules_node-fetch_browser_js").then(__webpack_require__.t.bind(__webpack_require__, /*! node-fetch */ "../../../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/browser.js", 23))).default,nodeVmMod=(await __webpack_require__.e(/*! import() */ "_bf79").then(__webpack_require__.t.bind(__webpack_require__, /*! vm */ "?bf79", 23))).default,nodePath=await __webpack_require__.e(/*! import() */ "_0e99").then(__webpack_require__.t.bind(__webpack_require__, /*! path */ "?0e99", 23)),pathSep=nodePath.sep,"undefined"!="function")return;const node_modules={fs:await __webpack_require__.e(/*! import() */ "_8b49").then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ "?8b49", 23)),crypto:await __webpack_require__.e(/*! import() */ "_c04c").then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ "?c04c", 23)),ws:await __webpack_require__.e(/*! import() */ "_8e35").then(__webpack_require__.t.bind(__webpack_require__, /*! ws */ "?8e35", 23)),child_process:await __webpack_require__.e(/*! import() */ "_3f74").then(__webpack_require__.t.bind(__webpack_require__, /*! child_process */ "?3f74", 23))};globalThis.require=function(mod){return node_modules[mod]}}();let indexURL=options.indexURL||function(){if(true)return __dirname;let err;try{throw new Error}catch(e){err=e}let fileName=ErrorStackParser.parse(err)[0].fileName;const indexOfLastSlash=fileName.lastIndexOf(pathSep);if(-1===indexOfLastSlash)throw new Error("Could not extract indexURL path from pyodide module location");return fileName.slice(0,indexOfLastSlash)}();indexURL=resolvePath(indexURL),indexURL.endsWith("/")||(indexURL+="/"),options.indexURL=indexURL;const default_config={fullStdLib:!1,jsglobals:globalThis,stdin:globalThis.prompt?globalThis.prompt:void 0,homedir:"/home/pyodide",lockFileURL:indexURL+"repodata.json",args:[],_node_mounts:[]},config=Object.assign(default_config,options),Module=function(){let Module={noImageDecoding:!0,noAudioDecoding:!0,noWasmDecoding:!1,preRun:[],quit:(status,toThrow)=>{throw Module.exited={status:status,toThrow:toThrow},toThrow}};return Module}();Module.print=config.stdout,Module.printErr=config.stderr,Module.arguments=config.args;const API={config:config};Module.API=API,initializeFileSystem(Module,config);const moduleLoaded=new Promise((r=>Module.postRun=r));if(Module.locateFile=path=>config.indexURL+path,"function"!=typeof _createPyodideModule){const scriptSrc=`${config.indexURL}pyodide.asm.js`;await loadScript(scriptSrc)}if(await _createPyodideModule(Module),await moduleLoaded,Module.exited)throw Module.exited.toThrow;if("0.23.3"!==API.version)throw new Error(`Pyodide version does not match: '0.23.3' <==> '${API.version}'. If you updated the Pyodide version, make sure you also updated the 'indexURL' parameter passed to loadPyodide.`);Module.locateFile=path=>{throw new Error("Didn't expect to load any more file_packager files!")};let[err,captured_stderr]=API.rawRun("import _pyodide_core");err&&Module.API.fatal_loading_error("Failed to import _pyodide_core\n",captured_stderr);const pyodide=finalizeBootstrap(API,config);if(pyodide.version.includes("dev")||API.setCdnUrl(`https://cdn.jsdelivr.net/pyodide/v${pyodide.version}/full/`),await API.packageIndexReady,API._pyodide._importhook.register_module_not_found_hook(API._import_name_to_package_name,API.repodata_unvendored_stdlibs_and_test),"0.23.3"!==API.repodata_info.version)throw new Error("Lock file version doesn't match Pyodide version");return API.package_loader.init_loaded_packages(),config.fullStdLib&&await pyodide.loadPackage(API.repodata_unvendored_stdlibs),API.initializeStreams(config.stdin,config.stdout,config.stderr),pyodide}globalThis.loadPyodide=loadPyodide,exports.loadPyodide=loadPyodide,exports.version="0.23.3",Object.defineProperty(exports,"__esModule",{value:!0})}));
//# sourceMappingURL=pyodide.js.map


/***/ }),

/***/ "../../../node_modules/.pnpm/@freecodecamp+curriculum-helpers@3.4.0/node_modules/@freecodecamp/curriculum-helpers/dist/index.mjs":
/*!***************************************************************************************************************************************!*\
  !*** ../../../node_modules/.pnpm/@freecodecamp+curriculum-helpers@3.4.0/node_modules/@freecodecamp/curriculum-helpers/dist/index.mjs ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSHelp: () => (/* binding */ N),
/* harmony export */   concatRegex: () => (/* binding */ b),
/* harmony export */   escapeRegExp: () => (/* binding */ R),
/* harmony export */   getFunctionParams: () => (/* binding */ C),
/* harmony export */   isCalledWithNoArgs: () => (/* binding */ L),
/* harmony export */   python: () => (/* binding */ O),
/* harmony export */   removeCssComments: () => (/* binding */ S),
/* harmony export */   removeHtmlComments: () => (/* binding */ w),
/* harmony export */   removeJSComments: () => (/* binding */ G),
/* harmony export */   removeWhiteSpace: () => (/* binding */ x)
/* harmony export */ });
var e={d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)},n={};e.d(n,{Z5:()=>y,yS:()=>m,Nt:()=>h,jX:()=>v,US:()=>E,Hg:()=>g,ep:()=>c,gu:()=>u,Gs:()=>_,Sc:()=>p});const t=(e,n={})=>{const t=!0===n.safe||!0===n.keepProtected;let r=!1;const s=e=>{let i,o,a="";if("nodes"in e)for(const l of e.nodes)switch(l.type){case"block":if(n.first&&!0===r){a+=s(l);break}if(!0===n.preserveNewlines){i=s(l),o=i.split("\n"),a+="\n".repeat(o.length-1);break}if(!0===t&&!0===l.protected){a+=s(l);break}r=!0;break;case"line":if(n.first&&!0===r){a+=l.value;break}!0===t&&!0===l.protected&&(a+=l.value),r=!0;break;default:a+=l.value||""}return a};return s(e)};class r{constructor(e){this.type=e.type,this.value=e.value,this.match=e.match,this.newline=e.newline||""}get protected(){return Boolean(this.match&&"!"===this.match[1])}}class s extends r{constructor(e){super(e),this.nodes=(null==e?void 0:e.nodes)||[]}push(e){this.nodes.push(e)}get protected(){return this.nodes.length>0&&!0===this.nodes[0].protected}}const i={ada:{LINE_REGEX:/^--.*/},apl:{LINE_REGEX:/^⍝.*/},applescript:{BLOCK_OPEN_REGEX:/^\(\*/,BLOCK_CLOSE_REGEX:/^\*\)/},csharp:{LINE_REGEX:/^\/\/.*/},haskell:{BLOCK_OPEN_REGEX:/^\{-/,BLOCK_CLOSE_REGEX:/^-\}/,LINE_REGEX:/^--.*/},javascript:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},lua:{BLOCK_OPEN_REGEX:/^--\[\[/,BLOCK_CLOSE_REGEX:/^\]\]/,LINE_REGEX:/^--.*/},matlab:{BLOCK_OPEN_REGEX:/^%{/,BLOCK_CLOSE_REGEX:/^%}/,LINE_REGEX:/^%.*/},perl:{LINE_REGEX:/^#.*/},php:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^(#|\/\/).*?(?=\?>|\n)/},ruby:{BLOCK_OPEN_REGEX:/^=begin/,BLOCK_CLOSE_REGEX:/^=end/,LINE_REGEX:/^#.*/},shebang:{LINE_REGEX:/^#!.*/},python:{BLOCK_OPEN_REGEX:/^"""/,BLOCK_CLOSE_REGEX:/^"""/,LINE_REGEX:/^#.*/},c:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},css:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},java:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},js:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},less:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},pascal:{BLOCK_OPEN_REGEX:/^\(\*/,BLOCK_CLOSE_REGEX:/^\*\)/},ocaml:{BLOCK_OPEN_REGEX:/^\(\*/,BLOCK_CLOSE_REGEX:/^\*\)/},sass:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},sql:{LINE_REGEX:/^--.*/},swift:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},ts:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/},typscript:{BLOCK_OPEN_REGEX:/^\/\*\*?(!?)/,BLOCK_CLOSE_REGEX:/^\*\/(\n?)/,LINE_REGEX:/^\/\/(!?).*/}},o=/^\\./,a=/^(['"`])((?:\\\1|[^\1])*?)(\1)/,l=/^\r*\n/,f=(e,n={})=>{var t;if("string"!=typeof e)throw new TypeError("Expected input to be a string");const f=new s({type:"root",nodes:[],value:""}),d=[f],u=(n.language||"javascript").toLowerCase(),c=i[u];if(void 0===c)throw new Error(`Language "${u}" is not supported by strip-comments`);const{LINE_REGEX:_,BLOCK_OPEN_REGEX:p,BLOCK_CLOSE_REGEX:h}=c;let E,m,g=f,y=e,v=!1;[p,h].filter((e=>void 0!==e)).every((e=>'^"""'===e.source))&&(v=!0);const N=(e=y[0]||"")=>(y=y.slice(e.length),e),b=(e,n="text")=>{const t=e.exec(y);if(t)return N(t[0]),{type:n,value:t[0],match:t}},R=e=>{m&&"text"===m.type&&"text"===e.type?m.value=m.value?m.value+e.value:e.value:(g.push(e),"nodes"in e&&e.nodes&&(d.push(e),g=e),m=e)},C=()=>{if("root"===g.type)throw new SyntaxError("Unclosed block comment");d.pop(),g=d[d.length-1]};for(;""!==y;)(E=b(o,"text"))?R(new s(E)):"block"===g.type||m&&/\w$/.test(null!==(t=m.value)&&void 0!==t?t:"")||v&&y.startsWith('"""')||!(E=b(a,"text"))?(E=b(l,"newline"))?R(new r(E)):!p||!n.block||v&&"block"===g.type||!(E=b(p,"open"))?h&&"block"===g.type&&n.block&&(E=b(h,"close"))?(E.newline=E.match[1]||"",R(new r(E)),C()):_&&"block"!==g.type&&n.line&&(E=b(_,"line"))||(E=b(/^[a-zABD-Z0-9\t ]+/,"text"))?R(new r(E)):R(new r({type:"text",value:N(y[0])})):(R(new s({type:"block"})),R(new r(E))):R(new r(E));return f},d=(e,n)=>{const r=Object.assign(Object.assign({},n),{block:!0,line:!0});return t(f(e,r),r)};function u(e){return e.replace(/<!--[\s\S]*?(-->|$)/g,"")}function c(e){return e.replace(/\/\*[\s\S]+?\*\//g,"")}function _(e){try{return d(e)}catch(n){return e}}function p(e){return e.replace(/\s/g,"")}function h(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function E(e,n){var t;const r=d(n),s=`^\\s*?${h(e)}\\(\\s*?\\)`,i=null!==(t=new RegExp(s,"gm").exec(r))&&void 0!==t?t:[];return Boolean(i.length)}function m(...e){const n=e.map((e=>new RegExp(e).source)).join("");return new RegExp(n)}d.block=(e,n)=>{const r=Object.assign(Object.assign({},n),{block:!0});return t(f(e,r),r)},d.line=(e,n)=>{const r=Object.assign(Object.assign({},n),{line:!0});return t(f(e,r),r)},d.first=(e,n)=>{const r=Object.assign(Object.assign({},n),{block:!0,line:!0,first:!0});return t(f(e,r),r)},d.parse=f;const g={astHelpers:'import ast\n\n# A chainable class that allows us to call functions on the result of parsing a string\n\n\nclass Node:\n    def __init__(self, tree=None):\n        if isinstance(tree, str):\n            self.tree = ast.parse(tree)\n        elif isinstance(tree, ast.AST) or tree == None:\n            self.tree = tree\n        else:\n            raise TypeError("Node must be initialized with a string or AST")\n\n    def __getitem__(self, i):\n        if getattr(self.tree, "__getitem__", False):\n            return Node(self.tree[i])\n        elif getattr(self.tree, "body", False):\n            return Node(self.tree.body[i])\n        else:\n            raise IndexError("Empty Nodes cannot be indexed.")\n\n    def __len__(self):\n        if getattr(self.tree, "__len__", False):\n            return len(self.tree)\n        if self.tree is None:\n            return 0\n        if not hasattr(self.tree, "body"):\n            return 1\n        return len(self.tree.body)\n\n    def __eq__(self, other):\n        if not isinstance(other, Node):\n            return False\n        if self.tree == None:\n            return other.tree == None\n        if other.tree == None:\n            return False\n        return ast.dump(self.tree, include_attributes=True) == ast.dump(\n            other.tree, include_attributes=True\n        )\n\n    def __repr__(self):\n        if self.tree == None:\n            return "Node:\\nNone"\n        return "Node:\\n" + ast.dump(self.tree, indent=2)\n\n    def __str__(self):\n        if self.tree == None:\n            return "# no ast"\n        return ast.unparse(self.tree)\n\n    def _has_body(self):\n        return bool(getattr(self.tree, "body", False))\n\n    # "find" functions return a new node with the result of the find\n    # function. In this case, it returns a new node with the function\n    # definition (if it exists)\n\n    def find_function(self, func):\n        if not self._has_body():\n            return Node()\n        for node in self.tree.body:\n            if isinstance(node, ast.FunctionDef):\n                if node.name == func:\n                    return Node(node)\n        return Node()\n\n    def find_functions(self, func):\n        return [\n            node\n            for node in self._find_all((ast.FunctionDef, ast.AsyncFunctionDef))\n            if node.tree.name == func\n        ]\n\n    def find_async_function(self, func):\n        if not self._has_body():\n            return Node()\n        for node in self.tree.body:\n            if isinstance(node, ast.AsyncFunctionDef):\n                if node.name == func:\n                    return Node(node)\n        return Node()\n\n    def find_awaits(self):\n        return [\n            node\n            for node in self._find_all(ast.Expr)\n            if isinstance(node.tree.value, ast.Await)\n        ]\n\n    def has_args(self, arg_str):\n        if not isinstance(self.tree, (ast.FunctionDef, ast.AsyncFunctionDef)):\n            return False\n        dec_list = (f"@{Node(node)}" for node in self.tree.decorator_list)\n        dec_str = "\\n".join(dec_list) + "\\n" if dec_list else ""\n        if id := getattr(self.tree.returns, "id", False):\n            returns = f" -> {id}"\n        elif val := getattr(self.tree.returns, "value", False):\n            returns = f" -> \'{val}\'"\n        else:\n            returns = ""\n        async_kw = ""\n        if isinstance(self.tree, ast.AsyncFunctionDef):\n            async_kw = "async "\n        body_lines = str(self.find_body()).split("\\n")\n        new_body = "".join([f"\\n  {line}" for line in body_lines])\n        func_str = (\n            f"{dec_str}{async_kw}def {self.tree.name}({arg_str}){returns}:{new_body}"\n        )\n        return self.is_equivalent(func_str)\n\n    # returns_str is the annotation of the type returned by the function\n    def has_returns(self, returns_str):\n        if not isinstance(self.tree, (ast.FunctionDef, ast.AsyncFunctionDef)):\n            return False\n        if isinstance(self.tree.returns, ast.Name):\n            return returns_str == self.tree.returns.id\n        elif isinstance(self.tree.returns, ast.Constant):\n            return returns_str == self.tree.returns.value\n        return False\n\n    def find_body(self):\n        if not isinstance(self.tree, ast.AST):\n            return Node()\n        if not hasattr(self.tree, "body"):\n            return Node()\n        return Node(ast.Module(self.tree.body, []))\n\n    # find the return statement of a function\n    def find_return(self):\n        if return_list := self._find_all(ast.Return):\n            return return_list[0]\n        return Node()\n\n    def has_return(self, return_value):\n        return self.find_return().is_equivalent(f"return {return_value}")\n\n    def find_imports(self):\n        return self._find_all((ast.Import, ast.ImportFrom))\n\n    def find_comps(self):\n        return [\n            node\n            for node in self._find_all(ast.Expr)\n            if isinstance(\n                node.tree.value,\n                (ast.ListComp, ast.SetComp, ast.GeneratorExp, ast.DictComp),\n            )\n        ]\n\n    def _find_comp(\n        self, classes=(ast.ListComp, ast.SetComp, ast.GeneratorExp, ast.DictComp)\n    ):\n        if isinstance(self.tree, classes):\n            return Node(self.tree)\n        elif isinstance(self.tree, (ast.Assign, ast.AnnAssign, ast.Return)):\n            if isinstance(self.tree.value, classes):\n                return Node(self.tree.value)\n            return Node()\n\n    # find a list of iterables of a comprehension/generator expression\n    def find_comp_iters(self):\n        if not (node := self._find_comp()):\n            return []\n        return [Node(gen.iter) for gen in node.tree.generators]\n\n    # find a list of targets (iteration variables) of a comprehension/generator expression\n    def find_comp_targets(self):\n        if not (node := self._find_comp()):\n            return []\n        return [Node(gen.target) for gen in node.tree.generators]\n\n    # find the key of a dictionary comprehension\n    def find_comp_key(self):\n        if not (node := self._find_comp(ast.DictComp)):\n            return Node()\n        return Node(node.tree.key)\n\n    # find the expression evaluated for a comprehension/generator expression\n    # which is the value of the key in case of a dictionary comprehension\n    def find_comp_expr(self):\n        if not (node := self._find_comp()):\n            return Node()\n        if isinstance(node.tree, (ast.ListComp, ast.SetComp, ast.GeneratorExp)):\n            return Node(node.tree.elt)\n        elif isinstance(node.tree, ast.DictComp):\n            return Node(node.tree.value)\n\n    # find a list of `IfExpr`s at the end of the comprehension/generator expression\n    def find_comp_ifs(self):\n        if not (node := self._find_comp()):\n            return []\n        return [\n            Node(gen.ifs[i])\n            for gen in node.tree.generators\n            for i in range(len(gen.ifs))\n        ]\n\n    # "has" functions return a boolean indicating whether whatever is being\n    # searched for exists. In this case, it returns True if the variable exists.\n\n    def has_variable(self, name):\n        return self.find_variable(name) != Node()\n\n    def has_import(self, import_str):\n        return any(\n            import_node.is_equivalent(import_str) for import_node in self.find_imports()\n        )\n\n    # find a list of function calls of the \'name\' function\n    def find_calls(self, name):\n        call_list = []\n        for node in self._find_all(ast.Expr):\n            if func := getattr(node.tree.value, "func", False):\n                if isinstance(func, ast.Name) and func.id == name:\n                    call_list.append(Node(node.tree.value))\n                elif isinstance(func, ast.Attribute) and func.attr == name:\n                    call_list.append(Node(node.tree.value))\n        return call_list\n\n    def has_call(self, call):\n        return any(node.is_equivalent(call) for node in self._find_all(ast.Expr))\n\n    def find_call_args(self):\n        if not isinstance(self.tree, ast.Call):\n            return []\n        return [Node(arg) for arg in self.tree.args]\n\n    def has_stmt(self, node_str):\n        if not self._has_body():\n            return False\n        return any(Node(node).is_equivalent(node_str) for node in self.tree.body)\n\n    def find_variable(self, name):\n        if not self._has_body():\n            return Node()\n        for node in self.tree.body:\n            if isinstance(node, ast.Assign):\n                for target in node.targets:\n                    if isinstance(target, ast.Name):\n                        if target.id == name:\n                            return Node(node)\n                    if isinstance(target, ast.Attribute):\n                        names = name.split(".")\n                        if target.value.id == names[0] and target.attr == names[1]:\n                            return Node(node)\n            elif isinstance(node, ast.AnnAssign):\n                if isinstance(node.target, ast.Name):\n                    if node.target.id == name:\n                        return Node(node)\n        return Node()\n\n    # find variable incremented or decremented using += or -=\n    def find_aug_variable(self, name):\n        if not self._has_body():\n            return Node()\n        for node in self.tree.body:\n            if isinstance(node, ast.AugAssign):\n                if isinstance(node.target, ast.Name):\n                    if node.target.id == name:\n                        return Node(node)\n        return Node()\n\n    def get_variable(self, name):\n        var = self.find_variable(name)\n        if var != Node():\n            return var.tree.value.value\n        else:\n            return None\n\n    def has_function(self, name):\n        return self.find_function(name) != Node()\n\n    def has_class(self, name):\n        return self.find_class(name) != Node()\n\n    def has_decorators(self, *args):\n        # the order of args does matter\n        if not isinstance(self.tree, (ast.FunctionDef, ast.AsyncFunctionDef)):\n            return False\n        dec_list = (Node(node) for node in self.tree.decorator_list)\n        return all(any(dec.is_equivalent(arg) for dec in dec_list) for arg in args)\n\n    # Checks if the current scope contains a "pass" statement\n\n    def has_pass(self):\n        if isinstance(self.tree, (ast.If, ast.While, ast.For)):\n            return False\n        if getattr(self.tree, "body", False):\n            return any(isinstance(node, ast.Pass) for node in self.tree.body)\n        return False\n\n    # Checks the variable, name, is in the current scope and is an integer\n\n    def is_integer(self):\n        if not isinstance(self.tree, ast.Assign):\n            return False\n        return type(self.tree.value.value) == type(1)\n\n    def value_is_call(self, name):\n        if not isinstance(self.tree, ast.Assign):\n            return False\n        call = self.tree.value\n        if isinstance(call, ast.Call):\n            return call.func.id == name\n        return False\n\n    # Loosely compares the code in target_str with the code represented by the\n    # Node\'s AST. If the two codes are semantically equivalent (i.e. the same if\n    # you ignore formatting and context) then this returns True, otherwise\n    # False.\n    #\n    # Ignoring context means that the following comparison is True despite the\n    # fact that the AST of `cond_node` is `Constant(value=True)` and `True`\n    # compiles to `Module(body=[Expr(value=Constant(value=True))],\n    # type_ignores=[])`:\n    #\n    # node = Node("if True:\\n  pass") cond_node =\n    # node.find_ifs()[0].find_conditions()[0] cond_node.is_equivalent("True")\n\n    def is_equivalent(self, target_str):\n        # Setting the tree to None is used to represent missing elements. Such\n        # as the condition of a final else clause. It is, therefore, not\n        # equivalent to any string.\n        if self.tree == None:\n            return False\n        code_str = ast.unparse(self.tree)\n\n        # Why parse and unparse again? Because of an edge case when comparing\n        # the `target_str` "\'True\'" with the test in "if \'True\':". These should\n        # be equivalent, but the condition unparses to "\'True\'", while the\n        # `target_str` becomes \'"""True"""\' when parsed and unparsed again.\n\n        # By parsing and unparsing `code_str` we get \'"""True"""\' and the\n        # comparison returns True as expected.\n        return ast.unparse(ast.parse(code_str)) == ast.unparse(ast.parse(target_str))\n\n    def is_empty(self):\n        return self.tree == None\n\n    # Finds the class definition with the given name\n\n    def find_class(self, class_name):\n        if not self._has_body():\n            return Node()\n        for node in self.tree.body:\n            if isinstance(node, ast.ClassDef):\n                if node.name == class_name:\n                    return Node(node)\n        return Node()\n\n    def inherits_from(self, *args):\n        if not isinstance(self.tree, ast.ClassDef):\n            return False\n        if not self.tree.bases:\n            return False\n        id_list = [node.id for node in self.tree.bases]\n        return all(arg in id_list for arg in args)\n\n    # Find an array of conditions in an if statement\n\n    def find_ifs(self):\n        return self._find_all(ast.If)\n\n    def _find_all(self, ast_type):\n        return [Node(node) for node in self.tree.body if isinstance(node, ast_type)]\n\n    def find_whiles(self):\n        return self._find_all(ast.While)\n\n    def find_for_loops(self):\n        return self._find_all(ast.For)\n\n    def find_for_vars(self):\n        if not isinstance(self.tree, ast.For):\n            return Node()\n        return Node(self.tree.target)\n\n    def find_for_iter(self):\n        if not isinstance(self.tree, ast.For):\n            return Node()\n        return Node(self.tree.iter)\n\n    def find_if(self, if_str):\n        if_list = self._find_all(ast.If)\n        for if_statement in if_list:\n            if if_statement.find_conditions()[0].is_equivalent(if_str):\n                return if_statement\n        return Node()\n\n    def find_while(self, while_str):\n        while_list = self._find_all(ast.While)\n        for while_loop in while_list:\n            if while_loop.find_conditions()[0].is_equivalent(while_str):\n                return while_loop\n        return Node()\n\n    def find_for(self, target_str, iter_str):\n        for_list = self._find_all(ast.For)\n        for for_loop in for_list:\n            if for_loop.find_for_vars().is_equivalent(\n                target_str\n            ) and for_loop.find_for_iter().is_equivalent(iter_str):\n                return for_loop\n        return Node()\n\n    # Find an array of bodies in if/elif statement and while or for loops\n\n    def find_bodies(self):\n        def _find_bodies(tree):\n            if not isinstance(tree, (ast.If, ast.While, ast.For)):\n                return []\n            if tree.orelse == []:\n                return [tree.body]\n            if isinstance(tree.orelse[0], (ast.If, ast.While, ast.For)):\n                return [tree.body] + _find_bodies(tree.orelse[0])\n\n            return [tree.body] + [tree.orelse]\n\n        return [Node(ast.Module(body, [])) for body in _find_bodies(self.tree)]\n\n    # Find an array of conditions in if/elif statement or while loop\n\n    def find_conditions(self):\n        def _find_conditions(tree):\n            if not isinstance(tree, (ast.If, ast.While)):\n                return []\n            test = tree.test\n            if tree.orelse == []:\n                return [test]\n            if isinstance(tree.orelse[0], (ast.If, ast.While)):\n                return [test] + _find_conditions(tree.orelse[0])\n\n            return [test, None]\n\n        return [Node(test) for test in _find_conditions(self.tree)]\n\n    # Returs a Boolean indicating if the statements passed as arguments\n    # are found in the same order in the tree (statements can be non-consecutive)\n    def is_ordered(self, *args):\n        if not self._has_body():\n            return False\n        if len(args) < 2:\n            return False\n        arg_dict = {key: None for key in range(len(args))}\n        for i, node in enumerate(self.tree.body):\n            for j, arg in enumerate(args):\n                if Node(node).is_equivalent(arg):\n                    arg_dict[j] = i\n                    break\n        if None in arg_dict.values():\n            return False\n        return all(arg_dict[n] < arg_dict[n + 1] for n in range(len(arg_dict) - 1))\n\n\n# Exception formatting functions. Currently bundled with the Node class, until\n# we improve the testing, building and CI so that they can easily handle\n# multiple files.\n\n\ndef drop_until(*, traces, filename):\n    from itertools import dropwhile\n\n    return list(\n        dropwhile(lambda line: not line.startswith(f\'  File "{filename}"\'), traces)\n    )\n\n\ndef build_message(*, traces, exception_list):\n    return "".join(["Traceback (most recent call last):\\n"] + traces + exception_list)\n\n\ndef _replace_startswith(string, old, new):\n    if string.startswith(old):\n        return new + string[len(old) :]\n    return string\n\n\ndef format_exception(*, exception, traceback, filename, new_filename=None):\n    if new_filename is None:\n        new_filename = filename\n    from traceback import format_exception_only, format_tb\n\n    # The trace up to "filename" are the frames that are not part of the user\'s\n    # code so we drop them.\n    traces = drop_until(traces=format_tb(traceback), filename=filename)\n    renamed_traces = [\n        _replace_startswith(trace, f\'  File "{filename}"\', f\'  File "{new_filename}"\')\n        for trace in traces\n    ]\n    renamed_exception = [\n        _replace_startswith(e, f\'  File "{filename}"\', f\'  File "{new_filename}"\')\n        for e in format_exception_only(exception)\n    ]\n    return build_message(traces=renamed_traces, exception_list=renamed_exception)\n',getDef(e,n){const t=new RegExp(`\\n?(?<function_indentation> *?)def +${n} *\\((?<function_parameters>[^\\)]*)\\)\\s*:\\s*?\\n?(?<function_body>.*?)(?=\\n\\k<function_indentation>[\\w#]|$)`,"s").exec(e);if(t){const{function_parameters:e,function_body:n,function_indentation:r}=t.groups,s=r.replace(/\n+/,"");return{def:t[0].replace(/^\n/,""),function_parameters:e,function_body:n,function_indentation:s.length}}return null},removeComments:e=>e.replace(/\/\/.*|\/\*[\s\S]*?\*\/|(#.*$)/gm,""),getBlock(e,n){const t=n instanceof RegExp?n.source:n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),r=new RegExp(`\\n?(?<block_indentation> *?)(?<block_condition>${t})\\s*:\\s*?\\n(?<block_body>(\\k<block_indentation> +[^\\n]*| *\\n)+)(\n|$)`,"sm").exec(e);if(r){const{block_body:e,block_indentation:n,block_condition:t}=r.groups;return{block_body:e,block_condition:t,block_indentation:n.replace(/\n+/g,"").length}}return null}};class y{constructor(e){this.doc=e}_getStyleRules(){const e=this.getStyleSheet();return this.styleSheetToCssRulesArray(e).filter((e=>e.type===CSSRule.STYLE_RULE))}getStyleDeclarations(e){var n;return null===(n=this._getStyleRules())||void 0===n?void 0:n.filter((n=>(null==n?void 0:n.selectorText)===e)).map((e=>e.style))}getStyle(e){var n;const t=null===(n=this._getStyleRules().find((n=>(null==n?void 0:n.selectorText)===e)))||void 0===n?void 0:n.style;return t?(t.getPropVal=(e,n=!1)=>n?t.getPropertyValue(e).replace(/\s+/g,""):t.getPropertyValue(e),t):null}getStyleAny(e){for(const n of e){const e=this.getStyle(n);if(e)return e}return null}getStyleRule(e){var n;const t=null===(n=this._getStyleRules())||void 0===n?void 0:n.find((n=>(null==n?void 0:n.selectorText)===e));return t?Object.assign(Object.assign({},t),{isDeclaredAfter:e=>(e=>n=>{var t,r,s,i;const o=(null===(r=Array.from((null===(t=e.parentStyleSheet)||void 0===t?void 0:t.cssRules)||[]))||void 0===r?void 0:r.filter((e=>e.type===CSSRule.STYLE_RULE))).find((e=>(null==e?void 0:e.selectorText)===n));return!!o&&Array.from((null===(s=e.parentStyleSheet)||void 0===s?void 0:s.cssRules)||[]).indexOf(e)>Array.from((null===(i=null==o?void 0:o.parentStyleSheet)||void 0===i?void 0:i.cssRules)||[]).indexOf(o)})(t)(e)}):null}getCSSRules(e){const n=this.getStyleSheet(),t=this.styleSheetToCssRulesArray(n);switch(e){case"media":return t.filter((e=>e.type===CSSRule.MEDIA_RULE));case"fontface":return t.filter((e=>e.type===CSSRule.FONT_FACE_RULE));case"import":return t.filter((e=>e.type===CSSRule.IMPORT_RULE));case"keyframes":return t.filter((e=>e.type===CSSRule.KEYFRAMES_RULE));default:return t}}isPropertyUsed(e){return this._getStyleRules().some((n=>{var t;return null===(t=n.style)||void 0===t?void 0:t.getPropertyValue(e)}))}getRuleListsWithinMedia(e){const n=this.getCSSRules("media"),t=null==n?void 0:n.find((n=>{var t;return(null===(t=null==n?void 0:n.media)||void 0===t?void 0:t.mediaText)===e})),r=null==t?void 0:t.cssRules;return Array.from(r||[])}getStyleSheet(){var e,n,t,r,s;const i=null===(e=this.doc)||void 0===e?void 0:e.querySelector("link[href*='styles']"),o=null===(n=this.doc)||void 0===n?void 0:n.querySelector("style.fcc-injected-styles"),a=null===(t=this.doc)||void 0===t?void 0:t.querySelector("style:not([class]):not([media])");return(null===(s=null===(r=null==i?void 0:i.sheet)||void 0===r?void 0:r.cssRules)||void 0===s?void 0:s.length)?i.sheet:o?o.sheet:a?a.sheet:null}styleSheetToCssRulesArray(e){return Array.from((null==e?void 0:e.cssRules)||[])}selectorsFromSelector(e){const n=this.doc.querySelectorAll(e),t=Array.from(n).map((e=>{const n=[],t=[],r=[];for(;e.parentNode;){let s=e.tagName.toLowerCase();Array.from(e.parentNode.children).filter((n=>n.tagName===e.tagName)).length>1&&(s+=`:nth-child(${Array.from(e.parentNode.childNodes).indexOf(e)+1})`),n.unshift(s),t.unshift(s),r.push([n.join(" > "),t.join(" ")]),e=e.parentNode}return r.flat()})).flat();return[...new Set(t)]}}function v(e){const n=e.match(/(?:function\s*[^(]*\(([^)]*)\))/)||e.match(/(?:\b(?:const|let|var)\s*\w+\s*=\s*(?:function)?\s*\(([^)]*)\))/)||e.match(/=\s+([^)]*)=>/);return n?(n[1]||n[2]||n[3]||n[4]).split(",").map((e=>{const n=e.trim().split("="),t=n.length>1?n[1].replace(/['"]/g,"").trim():void 0;return{name:n[0].trim(),defaultValue:t}})):[]}var N=n.Z5,b=n.yS,R=n.Nt,C=n.jX,L=n.US,O=n.Hg,S=n.ep,w=n.gu,G=n.Gs,x=n.Sc;
//# sourceMappingURL=index.mjs.map

/***/ }),

/***/ "../../../node_modules/.pnpm/pyodide@0.23.3/node_modules/pyodide/package.json":
/*!************************************************************************************!*\
  !*** ../../../node_modules/.pnpm/pyodide@0.23.3/node_modules/pyodide/package.json ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"pyodide","version":"0.23.3","description":"The Pyodide JavaScript package","keywords":["python","webassembly"],"homepage":"https://github.com/pyodide/pyodide","repository":{"type":"git","url":"https://github.com/pyodide/pyodide"},"bugs":{"url":"https://github.com/pyodide/pyodide/issues"},"license":"Apache-2.0","devDependencies":{"@rollup/plugin-commonjs":"^21.0.1","@rollup/plugin-node-resolve":"^13.1.3","@types/assert":"^1.5.6","@types/emscripten":"^1.39.5","@types/expect":"^24.3.0","@types/mocha":"^9.1.0","@types/node":"^17.0.25","@types/node-fetch":"^2.6.1","@types/ws":"^8.5.3","chai":"^4.3.6","chai-as-promised":"^7.1.1","cross-env":"^7.0.3","dts-bundle-generator":"^6.7.0","error-stack-parser":"^2.1.4","express":"^4.17.3","mocha":"^9.0.2","npm-run-all":"^4.1.5","nyc":"^15.1.0","prettier":"^2.2.1","rollup":"^2.48.0","rollup-plugin-terser":"^7.0.2","rollup-plugin-ts":"^2.0.5","terser":"^5.7.0","ts-mocha":"^9.0.2","tsd":"^0.24.1","typedoc":"^0.22.15","typescript":"^4.6.4"},"main":"pyodide.js","exports":{".":{"require":"./pyodide.js","import":"./pyodide.mjs"},"./pyodide.asm.wasm":"./pyodide.asm.wasm","./pyodide.asm.js":"./pyodide.asm.js","./python_stdlib.zip":"./python_stdlib.zip","./pyodide.mjs":"./pyodide.mjs","./pyodide.js":"./pyodide.js","./package.json":"./package.json","./repodata.json":"./repodata.json"},"files":["pyodide.asm.js","pyodide.asm.wasm","python_stdlib.zip","pyodide.mjs","pyodide.js.map","pyodide.mjs.map","pyodide.d.ts","ffi.d.ts","repodata.json","console.html"],"browser":{"child_process":false,"crypto":false,"fs":false,"fs/promises":false,"path":false,"url":false,"vm":false,"ws":false},"scripts":{"test":"npm-run-all test:*","test:unit":"cross-env TEST_NODE=1 ts-mocha -p tsconfig.test.json test/unit/**/*.test.ts","test:node":"cross-env TEST_NODE=1 mocha test/integration/**/*.test.js","test:browser":"mocha test/integration/**/*.test.js","coverage":"cross-env TEST_NODE=1 npm-run-all coverage:*","coverage:build":"nyc npm run test:node"},"mocha":{"bail":false,"timeout":30000,"full-trace":true,"inline-diffs":true,"check-leaks":false,"global":["pyodide","page","chai"],"file":["test/conftest.js"]},"nyc":{"reporter":["html","text-summary"],"include":["*.ts"],"all":true,"clean":true,"cache":false,"instrument":false,"checkCoverage":true,"statements":95,"functions":95,"branches":80,"lines":95},"tsd":{"compilerOptions":{"lib":["ES2017","DOM"]}},"dependencies":{"base-64":"^1.0.0","node-fetch":"^2.6.1","ws":"^8.5.0"},"types":"./pyodide.d.ts"}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "-" + {"_148e":"b2ac95e7ae259e8a418a","_7977":"db849b9b7065573d872e","node_modules_pnpm_node-fetch_2_7_0_node_modules_node-fetch_browser_js":"937e362e014b78019c76","_bf79":"0207c26b4b0be05e6802","_0e99":"9d4cb7d5628d33a9cb24","_8b49":"0b717090779d2efa1545","_c04c":"04dc33699f618d22b1fb","_8e35":"808822fbc0e4ca9f80ff","_3f74":"de2ee31e3a915e4c722b"}[chunkId] + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "@freecodecamp/browser-scripts:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/js/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"python-worker": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_freecodecamp_browser_scripts"] = self["webpackChunk_freecodecamp_browser_scripts"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**************************!*\
  !*** ./python-worker.ts ***!
  \**************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var pyodide_pyodide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pyodide/pyodide.js */ "../../../node_modules/.pnpm/pyodide@0.23.3/node_modules/pyodide/pyodide.js");
/* harmony import */ var pyodide_pyodide_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pyodide_pyodide_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var pyodide_package_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pyodide/package.json */ "../../../node_modules/.pnpm/pyodide@0.23.3/node_modules/pyodide/package.json");
/* harmony import */ var _freecodecamp_curriculum_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @freecodecamp/curriculum-helpers */ "../../../node_modules/.pnpm/@freecodecamp+curriculum-helpers@3.4.0/node_modules/@freecodecamp/curriculum-helpers/dist/index.mjs");
// We have to specify pyodide.js because we need to import that file (not .mjs)
// and 'import' defaults to .mjs



const ctx = self;
let pyodide = null;
// Since messages are buffered, it needs to be possible to discard 'run'
// messages. Otherwise messages could build up while the worker is busy (for
// example, while loading pyodide) and the work would try to process them in
// sequence. Instead, it will ignore messages until it receives a 'listen'
// message and will inform the client every time it starts ignoring messages.
let ignoreRunMessages = true;
async function setupPyodide() {
  if (pyodide) return pyodide;
  pyodide = await (0,pyodide_pyodide_js__WEBPACK_IMPORTED_MODULE_0__.loadPyodide)({
    // TODO: host this ourselves
    indexURL: "https://cdn.jsdelivr.net/pyodide/v".concat(pyodide_package_json__WEBPACK_IMPORTED_MODULE_1__.version, "/full/")
  });

  // We freeze this to prevent learners from getting the worker into a
  // weird state. NOTE: this has to come after pyodide is loaded, because
  // pyodide modifies self while loading.
  Object.freeze(self);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
  pyodide.FS.writeFile('/home/pyodide/ast_helpers.py', _freecodecamp_curriculum_helpers__WEBPACK_IMPORTED_MODULE_2__.python.astHelpers, {
    encoding: 'utf8'
  });
  ignoreRunMessages = true;
  postMessage({
    type: 'stopped'
  });
}
function resetPyodide() {
  if (pyodide) pyodide = null;
  void setupPyodide();
}
void setupPyodide();
function initRunPython() {
  if (!pyodide) throw new Error('pyodide not loaded');
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  const str = pyodide.globals.get('str');
  function print() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    const text = args.map(x => str(x)).join(' ');
    postMessage({
      type: 'print',
      text
    });
  }
  function input(text) {
    // TODO: send unique ids to the main thread and the service worker, so we
    // can have multiple concurrent input requests.
    postMessage({
      type: 'input',
      text
    });
    const request = new XMLHttpRequest();
    request.open('POST', '/python/intercept-input/', false);
    request.send(null);

    // We want to raise a KeyboardInterrupt if the user cancels. To do that,
    // this function returns a JS object with the 'type' property set to
    // 'cancel'. Then the python code can actually raise the exception.
    return JSON.parse(request.responseText);
  }

  // I tried setting jsglobals here, to provide 'input' and 'print' to python,
  // without having to modify the global window object. However, it didn't work
  // because pyodide needs access to that object. Instead, I used
  // registerJsModule when setting up runPython.

  // Make print available to python
  pyodide.registerJsModule('jscustom', {
    print,
    input
  });
  // Create fresh globals each time user code is run.
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  const globals = pyodide.globals.get('dict')();
  // Some tests rely on __name__ being set to __main__ and we new dicts do not
  // have this set by default.
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  globals.set('__name__', '__main__');
  // The runPython helper is a shortcut for running python code with our
  // custom globals.
  const runPython = pyCode => pyodide.runPython(pyCode, {
    globals
  });
  runPython("\n  import jscustom\n  from jscustom import print\n  from jscustom import input\n  def __wrap(func):\n    def fn(*args):\n      data = func(*args)\n      if data.type == 'cancel':\n        raise KeyboardInterrupt(data.value)\n      return data.value\n    return fn\n  input = __wrap(input)\n  ");

  // Exposing sys.last_value can create memory leaks, so this just returns a
  // string instead of the actual exception. args[0] is what was passed to the
  // exception constructor. In our case, that's the id we want.
  // TODO: I'm using 'join' to make sure we're not leaking a reference to the
  // exception. This might be excessive, but I don't know enough about pyodide
  // to be sure.
  runPython("\n  import sys\n  def __get_reset_id():\n    if sys.last_value and sys.last_value.args:\n      return \"\".join(str(sys.last_value.args[0]))\n    else:\n      return \"\"\n  ");
  runPython("\ndef print_exception():\n    from ast_helpers import format_exception\n    formatted = format_exception(exception=sys.last_value, traceback=sys.last_traceback, filename=\"<exec>\", new_filename=\"main.py\")\n    print(formatted)\n");
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  const printException = globals.get('print_exception');

  // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  const getResetId = globals.get('__get_reset_id');
  return {
    runPython,
    getResetId,
    globals,
    printException
  };
}
ctx.onmessage = e => {
  const {
    data
  } = e;
  if (data.type === 'listen') {
    handleListenRequest();
  } else if (data.type === 'cancel') {
    handleCancelRequest(data);
  } else {
    handleRunRequest(data);
  }
};

// This lets the client know that there is nothing to cancel.
function handleCancelRequest(_ref) {
  let {
    value
  } = _ref;
  postMessage({
    type: 'is-alive',
    text: value
  });
}
function handleListenRequest() {
  ignoreRunMessages = false;
}
function handleRunRequest(data) {
  try {
    if (ignoreRunMessages) return;
    const code = (data.code.contents || '').slice();
    // TODO: use reset-terminal for clarity?
    postMessage({
      type: 'reset'
    });
    const {
      runPython,
      getResetId,
      globals,
      printException
    } = initRunPython();
    // use pyodide.runPythonAsync if we want top-level await
    try {
      runPython(code);
    } catch (e) {
      const err = e;
      // the formatted exception is printed to the terminal
      printException();
      // but the full error is logged to the console for debugging
      console.error(err);
      const resetId = getResetId();
      // TODO: if a user raises a KeyboardInterrupt with a custom message this
      // will be treated as a reset, the client will resend their code and this
      // will loop. Can we fix that? Perhaps by using a custom exception?
      if (err.type === 'KeyboardInterrupt' && resetId) {
        // If the client sends a lot of run messages, it's easy for them to build
        // up while the worker is busy. As such, we both ignore any queued run
        // messages...
        ignoreRunMessages = true;
        // ...and tell the client that we're ignoring them.
        postMessage({
          type: 'stopped',
          text: getResetId()
        });
      }
    } finally {
      getResetId.destroy();
      printException.destroy();
      globals.destroy();
    }
  } catch (e) {
    // This should only be reach if pyodide crashes, but it's helpful to log
    // the error in case it's something else.
    console.error(e);
    void resetPyodide();
  }
}
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
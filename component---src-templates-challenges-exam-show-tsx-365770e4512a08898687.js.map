{"version":3,"file":"component---src-templates-challenges-exam-show-tsx-365770e4512a08898687.js","mappings":"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","sources":["webpack://@freecodecamp/client/../node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.dom.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-combine-extensions@2.0.0/node_modules/micromark-util-combine-extensions/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-encode@2.0.0/node_modules/micromark-util-encode/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-character@2.0.1/node_modules/micromark-util-character/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-sanitize-uri@2.0.0/node_modules/micromark-util-sanitize-uri/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/compile.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.0/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/content.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/document.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-subtokenize@2.0.0/node_modules/micromark-util-subtokenize/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/content.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/flow.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/text.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-resolve-all@2.0.0/node_modules/micromark-util-resolve-all/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/create-tokenizer.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/list.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-factory-destination@2.0.0/node_modules/micromark-factory-destination/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-factory-label@2.0.0/node_modules/micromark-factory-label/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-factory-title@2.0.0/node_modules/micromark-factory-title/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-factory-whitespace@2.0.0/node_modules/micromark-factory-whitespace/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/definition.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-html-tag-name@2.0.0/node_modules/micromark-util-html-tag-name/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/label-end.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-util-classify-character@2.0.0/node_modules/micromark-util-classify-character/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/attention.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/constructs.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/autolink.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/html-text.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark-core-commonmark@2.0.0/node_modules/micromark-core-commonmark/lib/code-text.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/parse.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/preprocess.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/index.js","webpack://@freecodecamp/client/../node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/postprocess.js","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/exit-exam-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/finish-exam-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/exam-results.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/missing-prerequisites.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/foundational-c-sharp-survey.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/survey-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/components/foundational-c-sharp-survey-alert.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/exam/show.tsx"],"sourcesContent":["/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i');\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';';\n  element.innerHTML = characterReference;\n  const char = element.textContent;\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false;\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char;\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport { splice } from 'micromark-util-chunked';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {};\n  let index = -1;\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index]);\n  }\n  return all;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {});\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook];\n    /** @type {string} */\n    let code;\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = [];\n        const value = right[code];\n        constructs(\n        // @ts-expect-error Looks like a list.\n        left[code], Array.isArray(value) ? value : value ? [value] : []);\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1;\n  /** @type {Array<unknown>} */\n  const before = [];\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;\n    (list[index].add === 'after' ? existing : before).push(list[index]);\n  }\n  splice(existing, 0, 0, before);\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {};\n  let index = -1;\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index]);\n  }\n  return handlers;\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook;\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;\n    const left = maybe || (all[hook] = {});\n    const right = extension[hook];\n    /** @type {keyof Handles} */\n    let type;\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type];\n      }\n    }\n  }\n}","const characterReferences = {\n  '\"': 'quot',\n  '&': 'amp',\n  '<': 'lt',\n  '>': 'gt'\n};\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace);\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';';\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, ' ')\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u);\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code);\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD';\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * While micromark is a lexer/tokenizer, the common case of going from markdown\n * to html is currently built in as this module, even though the parts can be\n * used separately to build ASTs, CSTs, or many other output formats.\n *\n * Having an HTML compiler built in is useful because it allows us to check for\n * compliancy to CommonMark, the de facto norm of markdown, specified in roughly\n * 600 input/output cases.\n *\n * This module has an interface that accepts lists of events instead of the\n * whole at once, however, because markdown can’t be truly streaming, we buffer\n * events before processing and outputting the final result.\n */\n\n/**\n * @typedef {import('micromark-util-types').Compile} Compile\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').CompileData} CompileData\n * @typedef {import('micromark-util-types').CompileOptions} CompileOptions\n * @typedef {import('micromark-util-types').Definition} Definition\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedHtmlExtension} NormalizedHtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef Media\n * @property {boolean | undefined} [image]\n * @property {string | undefined} [labelId]\n * @property {string | undefined} [label]\n * @property {string | undefined} [referenceId]\n * @property {string | undefined} [destination]\n * @property {string | undefined} [title]\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { push } from 'micromark-util-chunked';\nimport { combineHtmlExtensions } from 'micromark-util-combine-extensions';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { encode as _encode } from 'micromark-util-encode';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * These two are allowlists of safe protocols for full URLs in respectively the\n * `href` (on `<a>`) and `src` (on `<img>`) attributes.\n * They are based on what is allowed on GitHub,\n * <https://github.com/syntax-tree/hast-util-sanitize/blob/9275b21/lib/github.json#L31>\n */\nconst protocolHref = /^(https?|ircs?|mailto|xmpp)$/i;\nconst protocolSrc = /^https?$/i;\n\n/**\n * @param {CompileOptions | null | undefined} [options]\n * @returns {Compile}\n */\nexport function compile(options) {\n  const settings = options || {};\n\n  /**\n   * Tags is needed because according to markdown, links and emphasis and\n   * whatnot can exist in images, however, as HTML doesn’t allow content in\n   * images, the tags are ignored in the `alt` attribute, but the content\n   * remains.\n   *\n   * @type {boolean | undefined}\n   */\n  let tags = true;\n\n  /**\n   * An object to track identifiers to media (URLs and titles) defined with\n   * definitions.\n   *\n   * @type {Record<string, Definition>}\n   */\n  const definitions = {};\n\n  /**\n   * A lot of the handlers need to capture some of the output data, modify it\n   * somehow, and then deal with it.\n   * We do that by tracking a stack of buffers, that can be opened (with\n   * `buffer`) and closed (with `resume`) to access them.\n   *\n   * @type {Array<Array<string>>}\n   */\n  const buffers = [[]];\n\n  /**\n   * As we can have links in images and the other way around, where the deepest\n   * ones are closed first, we need to track which one we’re in.\n   *\n   * @type {Array<Media>}\n   */\n  const mediaStack = [];\n\n  /**\n   * Same as `mediaStack` for tightness, which is specific to lists.\n   * We need to track if we’re currently in a tight or loose container.\n   *\n   * @type {Array<boolean>}\n   */\n  const tightStack = [];\n\n  /** @type {HtmlExtension} */\n  const defaultHandlers = {\n    enter: {\n      blockQuote: onenterblockquote,\n      codeFenced: onentercodefenced,\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: onentercodeindented,\n      codeText: onentercodetext,\n      content: onentercontent,\n      definition: onenterdefinition,\n      definitionDestinationString: onenterdefinitiondestinationstring,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: onenteremphasis,\n      htmlFlow: onenterhtmlflow,\n      htmlText: onenterhtml,\n      image: onenterimage,\n      label: buffer,\n      link: onenterlink,\n      listItemMarker: onenterlistitemmarker,\n      listItemValue: onenterlistitemvalue,\n      listOrdered: onenterlistordered,\n      listUnordered: onenterlistunordered,\n      paragraph: onenterparagraph,\n      reference: buffer,\n      resource: onenterresource,\n      resourceDestinationString: onenterresourcedestinationstring,\n      resourceTitleString: buffer,\n      setextHeading: onentersetextheading,\n      strong: onenterstrong\n    },\n    exit: {\n      atxHeading: onexitatxheading,\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: onexitblockquote,\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: onexitflowcode,\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onresumedrop,\n      codeFlowValue: onexitcodeflowvalue,\n      codeIndented: onexitflowcode,\n      codeText: onexitcodetext,\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: onexitdefinition,\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: onexitemphasis,\n      hardBreakEscape: onexithardbreak,\n      hardBreakTrailing: onexithardbreak,\n      htmlFlow: onexithtml,\n      htmlFlowData: onexitdata,\n      htmlText: onexithtml,\n      htmlTextData: onexitdata,\n      image: onexitmedia,\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: onexitmedia,\n      listOrdered: onexitlistordered,\n      listUnordered: onexitlistunordered,\n      paragraph: onexitparagraph,\n      reference: onresumedrop,\n      referenceString: onexitreferencestring,\n      resource: onresumedrop,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      setextHeading: onexitsetextheading,\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: onexitstrong,\n      thematicBreak: onexitthematicbreak\n    }\n  };\n\n  /**\n   * Combine the HTML extensions with the default handlers.\n   * An HTML extension is an object whose fields are either `enter` or `exit`\n   * (reflecting whether a token is entered or exited).\n   * The values at such objects are names of tokens mapping to handlers.\n   * Handlers are called, respectively when a token is opener or closed, with\n   * that token, and a context as `this`.\n   */\n  const handlers = /** @type {NormalizedHtmlExtension} */\n  combineHtmlExtensions([defaultHandlers].concat(settings.htmlExtensions || []));\n\n  /**\n   * Handlers do often need to keep track of some state.\n   * That state is provided here as a key-value store (an object).\n   *\n   * @type {CompileData}\n   */\n  const data = {\n    tightStack,\n    definitions\n  };\n\n  /**\n   * The context for handlers references a couple of useful functions.\n   * In handlers from extensions, those can be accessed at `this`.\n   * For the handlers here, they can be accessed directly.\n   *\n   * @type {Omit<CompileContext, 'sliceSerialize'>}\n   */\n  const context = {\n    lineEndingIfNeeded,\n    options: settings,\n    encode,\n    raw,\n    tag,\n    buffer,\n    resume,\n    setData,\n    getData\n  };\n\n  /**\n   * Generally, micromark copies line endings (`'\\r'`, `'\\n'`, `'\\r\\n'`) in the\n   * markdown document over to the compiled HTML.\n   * In some cases, such as `> a`, CommonMark requires that extra line endings\n   * are added: `<blockquote>\\n<p>a</p>\\n</blockquote>`.\n   * This variable hold the default line ending when given (or `undefined`),\n   * and in the latter case will be updated to the first found line ending if\n   * there is one.\n   */\n  let lineEndingStyle = settings.defaultLineEnding;\n\n  // Return the function that handles a slice of events.\n  return compile;\n\n  /**\n   * Deal w/ a slice of events.\n   * Return either the empty string if there’s nothing of note to return, or the\n   * result when done.\n   *\n   * @param {Array<Event>} events\n   * @returns {string}\n   */\n  function compile(events) {\n    let index = -1;\n    let start = 0;\n    /** @type {Array<number>} */\n    const listStack = [];\n    // As definitions can come after references, we need to figure out the media\n    // (urls and titles) defined by them before handling the references.\n    // So, we do sort of what HTML does: put metadata at the start (in head), and\n    // then put content after (`body`).\n    /** @type {Array<Event>} */\n    let head = [];\n    /** @type {Array<Event>} */\n    let body = [];\n    while (++index < events.length) {\n      // Figure out the line ending style used in the document.\n      if (!lineEndingStyle && (events[index][1].type === 'lineEnding' || events[index][1].type === 'lineEndingBlank')) {\n        // @ts-expect-error Hush, it’s a line ending.\n        lineEndingStyle = events[index][2].sliceSerialize(events[index][1]);\n      }\n\n      // Preprocess lists to infer whether the list is loose or not.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          prepareList(events.slice(listStack.pop(), index));\n        }\n      }\n\n      // Move definitions to the front.\n      if (events[index][1].type === 'definition') {\n        if (events[index][0] === 'enter') {\n          body = push(body, events.slice(start, index));\n          start = index;\n        } else {\n          head = push(head, events.slice(start, index + 1));\n          start = index + 1;\n        }\n      }\n    }\n    head = push(head, body);\n    head = push(head, events.slice(start));\n    index = -1;\n    const result = head;\n\n    // Handle the start of the document, if defined.\n    if (handlers.enter.null) {\n      handlers.enter.null.call(context);\n    }\n\n    // Handle all events.\n    while (++index < events.length) {\n      const handles = handlers[result[index][0]];\n      const kind = result[index][1].type;\n      const handle = handles[kind];\n      if (hasOwnProperty.call(handles, kind) && handle) {\n        handle.call(Object.assign({\n          sliceSerialize: result[index][2].sliceSerialize\n        }, context), result[index][1]);\n      }\n    }\n\n    // Handle the end of the document, if defined.\n    if (handlers.exit.null) {\n      handlers.exit.null.call(context);\n    }\n    return buffers[0].join('');\n  }\n\n  /**\n   * Figure out whether lists are loose or not.\n   *\n   * @param {Array<Event>} slice\n   * @returns {undefined}\n   */\n  function prepareList(slice) {\n    const length = slice.length;\n    let index = 0; // Skip open.\n    let containerBalance = 0;\n    let loose = false;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index < length) {\n      const event = slice[index];\n      if (event[1]._container) {\n        atMarker = undefined;\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n      } else switch (event[1].type) {\n        case 'listItemPrefix':\n          {\n            if (event[0] === 'exit') {\n              atMarker = true;\n            }\n            break;\n          }\n        case 'linePrefix':\n          {\n            // Ignore\n\n            break;\n          }\n        case 'lineEndingBlank':\n          {\n            if (event[0] === 'enter' && !containerBalance) {\n              if (atMarker) {\n                atMarker = undefined;\n              } else {\n                loose = true;\n              }\n            }\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n    }\n    slice[0][1]._loose = loose;\n  }\n\n  /**\n   * @type {CompileContext['setData']}\n   */\n  function setData(key, value) {\n    // @ts-expect-error: assume `value` is omitted (`undefined` is passed) only\n    // if allowed.\n    data[key] = value;\n  }\n\n  /**\n   * @type {CompileContext['getData']}\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /** @type {CompileContext['buffer']} */\n  function buffer() {\n    buffers.push([]);\n  }\n\n  /** @type {CompileContext['resume']} */\n  function resume() {\n    const buf = buffers.pop();\n    return buf.join('');\n  }\n\n  /** @type {CompileContext['tag']} */\n  function tag(value) {\n    if (!tags) return;\n    setData('lastWasTag', true);\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /** @type {CompileContext['raw']} */\n  function raw(value) {\n    setData('lastWasTag');\n    buffers[buffers.length - 1].push(value);\n  }\n\n  /**\n   * Output an extra line ending.\n   *\n   * @returns {undefined}\n   */\n  function lineEnding() {\n    raw(lineEndingStyle || '\\n');\n  }\n\n  /** @type {CompileContext['lineEndingIfNeeded']} */\n  function lineEndingIfNeeded() {\n    const buffer = buffers[buffers.length - 1];\n    const slice = buffer[buffer.length - 1];\n    const previous = slice ? slice.charCodeAt(slice.length - 1) : null;\n    if (previous === 10 || previous === 13 || previous === null) {\n      return;\n    }\n    lineEnding();\n  }\n\n  /** @type {CompileContext['encode']} */\n  function encode(value) {\n    return getData('ignoreEncode') ? value : _encode(value);\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @returns {undefined}\n   */\n  function onresumedrop() {\n    resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ol');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistunordered(token) {\n    tightStack.push(!token._loose);\n    lineEndingIfNeeded();\n    tag('<ul');\n    setData('expectFirstItem', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectFirstItem')) {\n      const value = Number.parseInt(this.sliceSerialize(token), 10);\n      if (value !== 1) {\n        tag(' start=\"' + encode(String(value)) + '\"');\n      }\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterlistitemmarker() {\n    if (getData('expectFirstItem')) {\n      tag('>');\n    } else {\n      onexitlistitem();\n    }\n    lineEndingIfNeeded();\n    tag('<li>');\n    setData('expectFirstItem');\n    // “Hack” to prevent a line ending from showing up if the item is empty.\n    setData('lastWasTag');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ol>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistunordered() {\n    onexitlistitem();\n    tightStack.pop();\n    lineEnding();\n    tag('</ul>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitlistitem() {\n    if (getData('lastWasTag') && !getData('slurpAllLineEndings')) {\n      lineEndingIfNeeded();\n    }\n    tag('</li>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterblockquote() {\n    tightStack.push(false);\n    lineEndingIfNeeded();\n    tag('<blockquote>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitblockquote() {\n    tightStack.pop();\n    lineEndingIfNeeded();\n    tag('</blockquote>');\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterparagraph() {\n    if (!tightStack[tightStack.length - 1]) {\n      lineEndingIfNeeded();\n      tag('<p>');\n    }\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitparagraph() {\n    if (tightStack[tightStack.length - 1]) {\n      setData('slurpAllLineEndings', true);\n    } else {\n      tag('</p>');\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodefenced() {\n    lineEndingIfNeeded();\n    tag('<pre><code');\n    setData('fencesCount', 0);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const value = resume();\n    tag(' class=\"language-' + value + '\"');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    const count = getData('fencesCount') || 0;\n    if (!count) {\n      tag('>');\n      setData('slurpOneLineEnding', true);\n    }\n    setData('fencesCount', count + 1);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercodeindented() {\n    lineEndingIfNeeded();\n    tag('<pre><code>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitflowcode() {\n    const count = getData('fencesCount');\n\n    // One special case is if we are inside a container, and the fenced code was\n    // not closed (meaning it runs to the end).\n    // In that case, the following line ending, is considered *outside* the\n    // fenced code and block quote by micromark, but CM wants to treat that\n    // ending as part of the code.\n    if (count !== undefined && count < 2 && data.tightStack.length > 0 && !getData('lastWasTag')) {\n      lineEnding();\n    }\n\n    // But in most cases, it’s simpler: when we’ve seen some data, emit an extra\n    // line ending when needed.\n    if (getData('flowCodeSeenData')) {\n      lineEndingIfNeeded();\n    }\n    tag('</code></pre>');\n    if (count !== undefined && count < 2) lineEndingIfNeeded();\n    setData('flowCodeSeenData');\n    setData('fencesCount');\n    setData('slurpOneLineEnding');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterimage() {\n    mediaStack.push({\n      image: true\n    });\n    tags = undefined; // Disallow tags.\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlink() {\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabeltext(token) {\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlabel() {\n    mediaStack[mediaStack.length - 1].label = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitreferencestring(token) {\n    mediaStack[mediaStack.length - 1].referenceId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresource() {\n    buffer(); // We can have line endings in the resource, ignore them.\n    mediaStack[mediaStack.length - 1].destination = '';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterresourcedestinationstring() {\n    buffer();\n    // Ignore encoding the result, as we’ll first percent encode the url and\n    // encode manually after.\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcedestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitresourcetitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitmedia() {\n    let index = mediaStack.length - 1; // Skip current.\n    const media = mediaStack[index];\n    const id = media.referenceId || media.labelId;\n    const context = media.destination === undefined ? definitions[normalizeIdentifier(id)] : media;\n    tags = true;\n    while (index--) {\n      if (mediaStack[index].image) {\n        tags = undefined;\n        break;\n      }\n    }\n    if (media.image) {\n      tag('<img src=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolSrc) + '\" alt=\"');\n      raw(media.label);\n      tag('\"');\n    } else {\n      tag('<a href=\"' + sanitizeUri(context.destination, settings.allowDangerousProtocol ? undefined : protocolHref) + '\"');\n    }\n    tag(context.title ? ' title=\"' + context.title + '\"' : '');\n    if (media.image) {\n      tag(' />');\n    } else {\n      tag('>');\n      raw(media.label);\n      tag('</a>');\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinition() {\n    buffer();\n    mediaStack.push({});\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    resume();\n    mediaStack[mediaStack.length - 1].labelId = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterdefinitiondestinationstring() {\n    buffer();\n    setData('ignoreEncode', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    mediaStack[mediaStack.length - 1].destination = resume();\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    mediaStack[mediaStack.length - 1].title = resume();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinition() {\n    const media = mediaStack[mediaStack.length - 1];\n    const id = normalizeIdentifier(media.labelId);\n    resume();\n    if (!hasOwnProperty.call(definitions, id)) {\n      definitions[id] = mediaStack[mediaStack.length - 1];\n    }\n    mediaStack.pop();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentercontent() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    // Exit for further sequences.\n    if (getData('headingRank')) return;\n    setData('headingRank', this.sliceSerialize(token).length);\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onentersetextheading() {\n    buffer();\n    setData('slurpAllLineEndings');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('slurpAllLineEndings', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheading() {\n    tag('</h' + getData('headingRank') + '>');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    setData('headingRank', this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    const value = resume();\n    lineEndingIfNeeded();\n    tag('<h' + getData('headingRank') + '>');\n    raw(value);\n    tag('</h' + getData('headingRank') + '>');\n    setData('slurpAllLineEndings');\n    setData('headingRank');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdata(token) {\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitlineending(token) {\n    if (getData('slurpAllLineEndings')) {\n      return;\n    }\n    if (getData('slurpOneLineEnding')) {\n      setData('slurpOneLineEnding');\n      return;\n    }\n    if (getData('inCodeText')) {\n      raw(' ');\n      return;\n    }\n    raw(encode(this.sliceSerialize(token)));\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeflowvalue(token) {\n    raw(encode(this.sliceSerialize(token)));\n    setData('flowCodeSeenData', true);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexithardbreak() {\n    tag('<br />');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtmlflow() {\n    lineEndingIfNeeded();\n    onenterhtml();\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexithtml() {\n    setData('ignoreEncode');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterhtml() {\n    if (settings.allowDangerousHtml) {\n      setData('ignoreEncode', true);\n    }\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenteremphasis() {\n    tag('<em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onenterstrong() {\n    tag('<strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onentercodetext() {\n    setData('inCodeText', true);\n    tag('<code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitcodetext() {\n    setData('inCodeText');\n    tag('</code>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitemphasis() {\n    tag('</em>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitstrong() {\n    tag('</strong>');\n  }\n\n  /**\n   * @returns {undefined}\n   */\n  function onexitthematicbreak() {\n    lineEndingIfNeeded();\n    tag('<hr />');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @param {Token} token\n   * @returns {undefined}\n   */\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    let value = this.sliceSerialize(token);\n\n    // @ts-expect-error `decodeNamedCharacterReference` can return false for\n    // invalid named character references, but everything we’ve tokenized is\n    // valid.\n    value = getData('characterReferenceType') ? decodeNumericCharacterReference(value, getData('characterReferenceType') === 'characterReferenceMarkerNumeric' ? 10 : 16) : decodeNamedCharacterReference(value);\n    raw(encode(value));\n    setData('characterReferenceType');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri(uri, settings.allowDangerousProtocol ? undefined : protocolHref) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    const uri = this.sliceSerialize(token);\n    tag('<a href=\"' + sanitizeUri('mailto:' + uri) + '\">');\n    raw(encode(uri));\n    tag('</a>');\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 ||\n  // Noncharacters.\n  code > 64975 && code < 65008 /* eslint-disable no-bitwise */ || (code & 65535) === 65535 || (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n  // Out of range\n  code > 1114111) {\n    return '\\uFFFD';\n  }\n  return String.fromCharCode(code);\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, contentStart, 'linePrefix');\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow'));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, 'linePrefix')(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */ // eslint-disable-next-line complexity\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events[index];\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === 'chunkFlow' && events[index - 1][1].type === 'listItemPrefix') {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'lineEndingBlank') {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === 'content') {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break;\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n        if (otherEvent[1].type === 'lineEnding' || otherEvent[1].type === 'lineEndingBlank') {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank';\n            }\n            otherEvent[1].type = 'lineEnding';\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        splice(events, lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1];\n  const context = events[eventIndex][2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.unshift([start, start + slice.length - 1]);\n    splice(events, start, 2, slice);\n  }\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content');\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent');\n    effects.exit('content');\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit('chunkContent');\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, prefixed, 'linePrefix');\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), 'linePrefix')));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEndingBlank');\n    effects.consume(code);\n    effects.exit('lineEndingBlank');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)\n  };\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter('data');\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data');\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === 'lineEnding') && events[eventIndex - 1][1].type === 'data') {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? 'lineSuffix' : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = [];\n  let index = -1;\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll;\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n  return events;\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    } = point;\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) /* c8 ignore next 1 */ ? handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // @ts-expect-error Looks like a construct.\n      handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = '\\r';\n          break;\n        }\n      case -4:\n        {\n          value = '\\n';\n          break;\n        }\n      case -3:\n        {\n          value = '\\r' + '\\n';\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? ' ' : '\\t';\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = ' ';\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak');\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak');\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit('thematicBreakSequence');\n    return markdownSpace(code) ? factorySpace(effects, atBreak, 'whitespace')(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? 'listUnordered' : 'listOrdered');\n    if (kind === 'listUnordered' ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix');\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix');\n        effects.enter('listItemValue');\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit('listItemValue');\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker');\n    effects.consume(code);\n    effects.exit('listItemMarker');\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace');\n      effects.consume(code);\n      effects.exit('listItemPrefixWhitespace');\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit('listItemPrefix'), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, 'listItemIndent', self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'listItemIndent', self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'listItemIndent' && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, 'listItemPrefixWhitespace', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === 'listItemPrefixWhitespace' ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atBreak, 'linePrefix');\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n    return ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition');\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, 'definitionLabel', 'definitionLabelMarker', 'definitionLabelString')(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, 'definitionDestination', 'definitionDestinationLiteral', 'definitionDestinationLiteralMarker', 'definitionDestinationRaw', 'definitionDestinationString')(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, 'whitespace')(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition');\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, 'definitionTitle', 'definitionTitleMarker', 'definitionTitleString')(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented');\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter('codeFlowValue');\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented');\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'linePrefix' && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === 'whitespace') {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === 'atxHeadingSequence' && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === 'whitespace')) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading');\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence');\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence');\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading');\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText');\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit('atxHeadingSequence');\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText';\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== 'lineEnding' && self.events[index][1].type !== 'linePrefix' && self.events[index][1].type !== 'content') {\n        paragraph = self.events[index][1].type === 'paragraph';\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine');\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence');\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit('setextHeadingLineSequence');\n    return markdownSpace(code) ? factorySpace(effects, after, 'lineSuffix')(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'search', 'section', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea'];","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow');\n    effects.enter('htmlFlowData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData');\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter('htmlFlowData');\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow');\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === 'linePrefix' ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit('codeFencedFenceSequence');\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, 'whitespace')(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence');\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, metaBefore, 'whitespace')(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, 'linePrefix', initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter('codeFlowValue');\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence');\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence');\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence');\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue');\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape');\n    effects.enter('escapeMarker');\n    effects.consume(code);\n    effects.exit('escapeMarker');\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue');\n      effects.consume(code);\n      effects.exit('characterEscapeValue');\n      effects.exit('characterEscape');\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, ok, 'linePrefix');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === 'labelImage' || token.type === 'labelLink' || token.type === 'labelEnd') {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);\n      token.type = 'data';\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === 'link' || token.type === 'labelLink' && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === 'labelImage' || token.type === 'labelLink') && !token._balanced) {\n        open = index;\n        if (token.type !== 'labelLink') {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === 'labelImage' || self.events[index][1].type === 'labelLink') && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter('labelEnd');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelEnd');\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource');\n    effects.enter('resourceMarker');\n    effects.consume(code);\n    effects.exit('resourceMarker');\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, 'resourceDestination', 'resourceDestinationLiteral', 'resourceDestinationLiteralMarker', 'resourceDestinationRaw', 'resourceDestinationString', 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, 'resourceTitle', 'resourceTitleMarker', 'resourceTitleString')(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker');\n      effects.consume(code);\n      effects.exit('resourceMarker');\n      effects.exit('resource');\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, 'reference', 'referenceMarker', 'referenceString')(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference');\n    effects.enter('referenceMarker');\n    effects.consume(code);\n    effects.exit('referenceMarker');\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker');\n      effects.consume(code);\n      effects.exit('referenceMarker');\n      effects.exit('reference');\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage');\n    effects.enter('labelImageMarker');\n    effects.consume(code);\n    effects.exit('labelImageMarker');\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker');\n      effects.consume(code);\n      effects.exit('labelMarker');\n      effects.exit('labelImage');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText');\n    effects.enter('htmlTextData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit('htmlTextData');\n      effects.exit('htmlText');\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData');\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData');\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelLink');\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape');\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === 'lineEnding' || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === 'lineEnding' || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding';\n        events[tailExitIndex][1].type = 'codeTextPadding';\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === 'lineEnding') {\n      events[enter][1].type = 'codeTextData';\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === 'characterEscape';\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText');\n    effects.enter('codeTextSequence');\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit('codeTextSequence');\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence');\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return between;\n    }\n\n    // Data.\n    effects.enter('codeTextData');\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit('codeTextData');\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence');\n      effects.exit('codeText');\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData';\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport { createTokenizer } from './create-tokenizer.js';\nimport * as defaultConstructs from './constructs.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Options} Options\n * @typedef {import('micromark-util-types').Value} Value\n */\n\nimport { compile } from './lib/compile.js';\nimport { parse } from './lib/parse.js';\nimport { postprocess } from './lib/postprocess.js';\nimport { preprocess } from './lib/preprocess.js';\nexport { compile } from './lib/compile.js';\nexport { parse } from './lib/parse.js';\nexport { postprocess } from './lib/postprocess.js';\nexport { preprocess } from './lib/preprocess.js';\n\n/**\n * Compile markdown to HTML.\n *\n * > Note: which encodings are supported depends on the engine.\n * > For info on Node.js, see:\n * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n *\n * @overload\n * @param {Value} value\n *   Markdown to parse (`string` or `Uint8Array`).\n * @param {Encoding | null | undefined} encoding\n *   Character encoding to understand `value` as when it’s a `Uint8Array`\n *   (`string`, default: `'utf8'`).\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Compiled HTML.\n *\n * @overload\n * @param {Value} value\n *   Markdown to parse (`string` or `Uint8Array`).\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Compiled HTML.\n *\n * @param {Value} value\n *   Markdown to parse (`string` or `Uint8Array`).\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding to understand `value` as when it’s a `Uint8Array`\n *   (`string`, default: `'utf8'`).\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Compiled HTML.\n */\nexport function micromark(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compile(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","// Package Utilities\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal } from '@freecodecamp/ui';\n\n// Local Utilities\nimport { closeModal } from '../../redux/actions';\nimport { isExitExamModalOpenSelector } from '../../redux/selectors';\nimport { Spacer } from '../../../../components/helpers';\n\n// Types\ninterface ExitExamModalProps {\n  closeExitExamModal: () => void;\n  isExitExamModalOpen: boolean;\n  exitExam: () => void;\n}\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isExitExamModalOpenSelector,\n  (isExitExamModalOpen: boolean) => ({\n    isExitExamModalOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeExitExamModal: () => closeModal('exitExam')\n    },\n    dispatch\n  );\n\n// Component\nfunction ExitExamModal({\n  closeExitExamModal,\n  isExitExamModalOpen,\n  exitExam\n}: ExitExamModalProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      onClose={closeExitExamModal}\n      open={isExitExamModalOpen}\n      variant='danger'\n    >\n      <Modal.Header closeButtonClassNames='close'>\n        {t('learn.exam.exit-header')}\n      </Modal.Header>\n      <Modal.Body>\n        <div className='text-center'>{t('learn.exam.exit')}</div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          data-cy='exit-exam-modal-deny'\n          block={true}\n          variant='primary'\n          onClick={closeExitExamModal}\n        >\n          {t('learn.exam.exit-no')}\n        </Button>\n        <Spacer size='xxSmall' />\n        <Button\n          data-cy='exit-exam-modal-confirm'\n          block={true}\n          variant='danger'\n          onClick={exitExam}\n        >\n          {t('learn.exam.exit-yes')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nExitExamModal.displayName = 'ExitExamModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExitExamModal);\n","// Package Utilities\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Modal } from '@freecodecamp/ui';\n\n// Local Utilities\nimport { closeModal } from '../../redux/actions';\nimport { isFinishExamModalOpenSelector } from '../../redux/selectors';\nimport { Spacer } from '../../../../components/helpers';\n\n// Types\ninterface FinishExamModalProps {\n  closeFinishExamModal: () => void;\n  isFinishExamModalOpen: boolean;\n  finishExam: () => void;\n}\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isFinishExamModalOpenSelector,\n  (isFinishExamModalOpen: boolean) => ({\n    isFinishExamModalOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeFinishExamModal: () => closeModal('finishExam')\n    },\n    dispatch\n  );\n\n// Component\nfunction FinishExamModal({\n  closeFinishExamModal,\n  isFinishExamModalOpen,\n  finishExam\n}: FinishExamModalProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <Modal onClose={closeFinishExamModal} open={isFinishExamModalOpen}>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('learn.exam.finish-header')}\n      </Modal.Header>\n      <Modal.Body>\n        <div className='text-center'>{t('learn.exam.finish')}</div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          data-cy='finish-exam-modal-confirm'\n          block={true}\n          size='medium'\n          variant='primary'\n          onClick={finishExam}\n        >\n          {t('learn.exam.finish-yes')}\n        </Button>\n        <Spacer size='xxSmall' />\n        <Button\n          data-cy='finish-exam-modal-deny'\n          block={true}\n          size='medium'\n          variant='primary'\n          onClick={closeFinishExamModal}\n        >\n          {t('learn.exam.finish-no')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nFinishExamModal.displayName = 'FinishExamModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishExamModal);\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@freecodecamp/ui';\n\nimport Spacer from '../../../../components/helpers/spacer';\nimport { formatSecondsToTime } from '../../../../utils/format-seconds';\nimport { GeneratedExamResults } from '../../../../redux/prop-types';\n\ninterface ExamResultsProps {\n  dashedName: string;\n  examResults: GeneratedExamResults;\n  exitExam: () => void;\n  title: string;\n}\n\nfunction ExamResults({\n  dashedName,\n  examResults,\n  exitExam,\n  title\n}: ExamResultsProps): JSX.Element {\n  const { t } = useTranslation();\n\n  const {\n    numberOfCorrectAnswers,\n    examTimeInSeconds,\n    numberOfQuestionsInExam,\n    passed,\n    percentCorrect\n  } = examResults;\n\n  // keep this formatting\n  const downloadContent = `${title}: ${\n    passed ? t('learn.exam.passed') : t('learn.exam.not-passed')\n  }\n\n${t('learn.exam.number-of-questions', { n: numberOfQuestionsInExam })}\n${t('learn.exam.correct-answers', { n: numberOfCorrectAnswers })}\n${t('learn.exam.percent-correct', { n: percentCorrect })}\n${t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })}\n`;\n\n  const blob = new Blob([downloadContent], {\n    type: 'text/plain'\n  });\n  const downloadURL = URL.createObjectURL(blob);\n\n  useEffect(() => {\n    return () => {\n      URL.revokeObjectURL(downloadURL);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const examResultsMessage = passed\n    ? t('learn.exam.passed-message')\n    : t('learn.exam.not-passed-message');\n\n  // TODO: Add share button\n  return (\n    <div className='exam-results-wrapper'>\n      <div\n        className='exam-results-header'\n        data-playwright-test-label='exam-results-header'\n      >\n        {t('learn.exam.results-header', { title })}\n      </div>\n      <hr />\n      <Spacer size='medium' />\n\n      <div\n        className='exam-results-message'\n        data-playwright-test-label='exam-results-message'\n      >\n        {examResultsMessage}\n      </div>\n      <Spacer size='medium' />\n      <div className='exam-results'>\n        <div data-playwright-test-label='exam-results-question-results'>\n          {t('learn.exam.question-results', {\n            n: numberOfCorrectAnswers,\n            q: numberOfQuestionsInExam\n          })}\n        </div>\n        <div>|</div>\n        <div data-playwright-test-label='exam-results-percent-results'>\n          {t('learn.exam.percent-results', {\n            p: percentCorrect\n          })}\n        </div>\n        <div>|</div>\n        <div data-playwright-test-label='exam-time'>\n          {t('learn.exam.time', { t: formatSecondsToTime(examTimeInSeconds) })}\n        </div>\n      </div>\n      <Spacer size='medium' />\n      <Spacer size='medium' />\n      <div className='exam-results-buttons'>\n        <Button\n          block={true}\n          variant='primary'\n          data-playwright-test-label='download-exam-results'\n          download={`${dashedName}.txt`}\n          href={downloadURL}\n        >\n          {t('learn.download-results')}\n        </Button>\n        <Spacer size='xxSmall' />\n        <Button\n          block={true}\n          variant='primary'\n          data-cy='exit-exam'\n          data-playwright-test-label='exit-exam'\n          onClick={exitExam}\n        >\n          {t('buttons.exit')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nExamResults.displayName = 'ExamResults';\n\nexport default ExamResults;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\n\nimport Spacer from '../../../../components/helpers/spacer';\nimport {\n  AllChallengeNode,\n  PrerequisiteChallenge\n} from '../../../../redux/prop-types';\nimport { Link } from '../../../../components/helpers';\n\ninterface MissingPrerequisitesProps {\n  missingPrerequisites: PrerequisiteChallenge[];\n}\n\nfunction MissingPrerequisites({\n  missingPrerequisites\n}: MissingPrerequisitesProps): JSX.Element {\n  const { t } = useTranslation();\n  const { challengeEdges } = useAllPrerequisiteChallenges();\n\n  const allPrerequisiteChallenges: PrerequisiteChallenge[] = challengeEdges.map(\n    ({ node }) => ({\n      id: node.challenge.id,\n      title: node.challenge.title,\n      slug: node.challenge.fields.slug\n    })\n  );\n\n  const newMissingPrerequisites: PrerequisiteChallenge[] =\n    missingPrerequisites.map(missing => {\n      const matchingPrerequisite = allPrerequisiteChallenges.find(\n        matching => matching.id === missing.id\n      );\n      return matchingPrerequisite || missing;\n    });\n\n  return (\n    <Alert variant='danger'>\n      <p>{t('learn.exam.not-qualified')}</p>\n      <Spacer size='small' />\n      <ul>\n        {newMissingPrerequisites.map(({ title, id, slug }) =>\n          slug ? (\n            <li key={id}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          ) : (\n            <li key={id}>{title}</li>\n          )\n        )}\n      </ul>\n    </Alert>\n  );\n}\n\nMissingPrerequisites.displayName = 'MissingPrerequisites';\n\nexport default MissingPrerequisites;\n\nconst useAllPrerequisiteChallenges = () => {\n  const {\n    allChallengeNode: { edges: challengeEdges }\n  }: {\n    allChallengeNode: AllChallengeNode;\n  } = useStaticQuery(graphql`\n    query getPrerequisiteChallenges {\n      allChallengeNode(\n        filter: {\n          challenge: {\n            id: {\n              in: [\n                \"647f85d407d29547b3bee1bb\"\n                \"647f87dc07d29547b3bee1bf\"\n                \"647f882207d29547b3bee1c0\"\n                \"647f867a07d29547b3bee1bc\"\n                \"647f877f07d29547b3bee1be\"\n                \"647f86ff07d29547b3bee1bd\"\n              ]\n            }\n          }\n        }\n      ) {\n        edges {\n          node {\n            challenge {\n              title\n              id\n              fields {\n                slug\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return { challengeEdges };\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal } from '@freecodecamp/ui';\n\nimport { SurveyResults, SurveyResponse } from '../../../../redux/prop-types';\nimport { Spacer } from '../../../../components/helpers';\nimport { setIsProcessing, submitSurvey } from '../../../../redux/actions';\nimport { closeModal } from '../../redux/actions';\nimport { isProcessingSelector } from '../../../../redux/selectors';\n\ninterface FoundationalCSharpSurveyProps {\n  closeSurveyModal: () => void;\n  submitSurvey: (arg0: SurveyResults) => void;\n  isProcessing: boolean;\n  setIsProcessing: (arg0: boolean) => void;\n}\n\ninterface SurveyState {\n  questionIndex: number;\n  responseIndex: null | number;\n}\n\nconst mapStateToProps = createSelector(\n  isProcessingSelector,\n  (isProcessing: boolean) => ({\n    isProcessing\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeSurveyModal: () => closeModal('survey'),\n      setIsProcessing,\n      submitSurvey\n    },\n    dispatch\n  );\n\nfunction FoundationalCSharpSurvey({\n  closeSurveyModal,\n  submitSurvey,\n  setIsProcessing,\n  isProcessing\n}: FoundationalCSharpSurveyProps): JSX.Element {\n  const { t } = useTranslation();\n\n  // submit English values to server and save those to database\n  const englishTitle = t('survey.foundational-c-sharp.title', { lng: 'en' });\n  const englishSurvey = [\n    {\n      question: t('survey.foundational-c-sharp.q1.q', { lng: 'en' }),\n      options: [\n        t('survey.foundational-c-sharp.q1.o1', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q1.o2', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q1.o3', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q1.o4', { lng: 'en' })\n      ]\n    },\n    {\n      question: t('survey.foundational-c-sharp.q2.q', { lng: 'en' }),\n      options: [\n        t('survey.foundational-c-sharp.q2.o1', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o2', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o3', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o4', { lng: 'en' }),\n        t('survey.foundational-c-sharp.q2.o5', { lng: 'en' })\n      ]\n    }\n  ];\n\n  // display survey in i18n\n  const i18nSurvey = [\n    {\n      question: t('survey.foundational-c-sharp.q1.q'),\n      options: [\n        t('survey.foundational-c-sharp.q1.o1'),\n        t('survey.foundational-c-sharp.q1.o2'),\n        t('survey.foundational-c-sharp.q1.o3'),\n        t('survey.foundational-c-sharp.q1.o4')\n      ]\n    },\n    {\n      question: t('survey.foundational-c-sharp.q2.q'),\n      options: [\n        t('survey.foundational-c-sharp.q2.o1'),\n        t('survey.foundational-c-sharp.q2.o2'),\n        t('survey.foundational-c-sharp.q2.o3'),\n        t('survey.foundational-c-sharp.q2.o4'),\n        t('survey.foundational-c-sharp.q2.o5')\n      ]\n    }\n  ];\n\n  const emptySurvey: SurveyState[] = i18nSurvey.map((question, i) => ({\n    questionIndex: i,\n    responseIndex: null\n  }));\n\n  const [surveyResponses, setSurveyResponses] = useState(emptySurvey);\n\n  function handleOptionChange(questionIndex: number, responseIndex: number) {\n    const newSurveyResponses = Array.from(surveyResponses);\n    newSurveyResponses[questionIndex].responseIndex = responseIndex;\n    setSurveyResponses(newSurveyResponses);\n  }\n\n  function createSurveyResults() {\n    setIsProcessing(true);\n\n    // convert responses to English before submitting\n    const englishResponses: SurveyResponse[] = surveyResponses.map(r => ({\n      question: englishSurvey[r.questionIndex].question,\n      response:\n        englishSurvey[r.questionIndex].options[r.responseIndex as number]\n    }));\n\n    const surveyResults = {\n      title: englishTitle,\n      responses: englishResponses\n    };\n\n    submitSurvey(surveyResults);\n  }\n\n  const cantSubmitSurvey = surveyResponses.some(q => q.responseIndex === null);\n\n  return (\n    <>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('survey.foundational-c-sharp.title')}\n      </Modal.Header>\n      <Modal.Body>\n        {i18nSurvey.map((question, i) => (\n          <div key={i}>\n            <Spacer size='medium' />\n            <div>{question.question}</div>\n            <Spacer size='small' />\n            <div className='video-quiz-options'>\n              {question.options.map((option, j) => (\n                <label className='video-quiz-option-label' key={j}>\n                  <input\n                    checked={surveyResponses[i].responseIndex === j}\n                    className='sr-only'\n                    name={question.question}\n                    onChange={() => handleOptionChange(i, j)}\n                    type='radio'\n                    value={option}\n                  />{' '}\n                  <span className='video-quiz-input-visible'>\n                    {surveyResponses[i].responseIndex === j ? (\n                      <span className='video-quiz-selected-input' />\n                    ) : null}\n                  </span>\n                  {option}{' '}\n                </label>\n              ))}\n            </div>\n          </div>\n        ))}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          block={true}\n          size='medium'\n          variant='primary'\n          data-cy='submit-csharp-survey-btn'\n          disabled={cantSubmitSurvey || isProcessing}\n          onClick={createSurveyResults}\n        >\n          {t('survey.misc.submit')}\n        </Button>\n        <Spacer size='xxSmall' />\n        <Button\n          block={true}\n          size='medium'\n          variant='primary'\n          disabled={isProcessing}\n          onClick={closeSurveyModal}\n        >\n          {t('survey.misc.exit')}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n}\n\nFoundationalCSharpSurvey.displayName = 'FoundationalCSharpSurvey';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoundationalCSharpSurvey);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Modal } from '@freecodecamp/ui';\n\nimport { closeModal } from '../../redux/actions';\nimport { isSurveyModalOpenSelector } from '../../redux/selectors';\nimport { isProcessingSelector } from '../../../../redux/selectors';\nimport FoundationalCSharpSurvey from './foundational-c-sharp-survey';\n\ninterface SurveyModalProps {\n  closeSurveyModal: () => void;\n  isProcessing: boolean;\n  isSurveyModalOpen: boolean;\n}\n\nconst mapStateToProps = createSelector(\n  isProcessingSelector,\n  isSurveyModalOpenSelector,\n  (isProcessing: boolean, isSurveyModalOpen: boolean) => ({\n    isProcessing,\n    isSurveyModalOpen\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeSurveyModal: () => closeModal('survey')\n    },\n    dispatch\n  );\n\nfunction SurveyModal({\n  closeSurveyModal,\n  isSurveyModalOpen,\n  isProcessing\n}: SurveyModalProps): JSX.Element {\n  return (\n    <Modal\n      onClose={() => (isProcessing ? '' : closeSurveyModal())}\n      open={isSurveyModalOpen}\n    >\n      <FoundationalCSharpSurvey />\n    </Modal>\n  );\n}\n\nSurveyModal.displayName = 'SurveyModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SurveyModal);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { useTranslation } from 'react-i18next';\nimport { Panel, Button } from '@freecodecamp/ui';\nimport { openModal } from '../../redux/actions';\nimport Spacer from '../../../../components/helpers/spacer';\nimport SurveyModal from './survey-modal';\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      openSurveyModal: () => openModal('survey')\n    },\n    dispatch\n  );\n\ninterface FoudationalCSharpSurveyAlertProps {\n  openSurveyModal: () => void;\n}\n\nfunction FoundationalCSharpSurveyAlert({\n  openSurveyModal\n}: FoudationalCSharpSurveyAlertProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <Panel variant='info' data-playwright-test-label='c-sharp-survey-alert'>\n      <Panel.Heading>{t('survey.foundational-c-sharp.title')}</Panel.Heading>\n      <Panel.Body className='text-center'>\n        <p>{t('survey.misc.two-questions')}</p>\n        <Spacer size='small' />\n        <Button\n          block={true}\n          variant='info'\n          data-cy='start-csharp-survey-btn'\n          onClick={openSurveyModal}\n          type='button'\n        >\n          {t('survey.misc.take')}\n        </Button>\n        <SurveyModal />\n      </Panel.Body>\n    </Panel>\n  );\n}\n\nFoundationalCSharpSurveyAlert.displayName = 'FoundationalCSharpSurveyAlert';\n\nexport default connect(null, mapDispatchToProps)(FoundationalCSharpSurveyAlert);\n","// Package Utilities\nimport { graphql, navigate } from 'gatsby';\n\nimport React, { Component, RefObject } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Alert, Row, Button } from '@freecodecamp/ui';\nimport { micromark } from 'micromark';\n\n// Local Utilities\nimport Spacer from '../../../components/helpers/spacer';\nimport LearnLayout from '../../../components/layouts/learn';\nimport ChallengeTitle from '../components/challenge-title';\nimport PrismFormatted from '../components/prism-formatted';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport Hotkeys from '../components/hotkeys';\nimport { clearExamResults, startExam, stopExam } from '../../../redux/actions';\nimport {\n  completedChallengesSelector,\n  completedSurveysSelector,\n  isSignedInSelector,\n  examInProgressSelector,\n  examResultsSelector\n} from '../../../redux/selectors';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  closeModal,\n  submitChallenge,\n  setUserCompletedExam,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport { getGenerateExam } from '../../../utils/ajax';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport {\n  ChallengeNode,\n  ChallengeMeta,\n  CompletedChallenge,\n  UserExamQuestion,\n  UserExam,\n  GeneratedExamResults,\n  GeneratedExamQuestion,\n  PrerequisiteChallenge,\n  SurveyResults,\n  Test\n} from '../../../redux/prop-types';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport { formatSecondsToTime } from '../../../utils/format-seconds';\nimport ExitExamModal from './components/exit-exam-modal';\nimport FinishExamModal from './components/finish-exam-modal';\nimport ExamResults from './components/exam-results';\nimport MissingPrerequisites from './components/missing-prerequisites';\nimport FoundationalCSharpSurveyAlert from './components/foundational-c-sharp-survey-alert';\n\nimport './exam.css';\n\n// Redux\nconst mapStateToProps = createSelector(\n  completedChallengesSelector,\n  completedSurveysSelector,\n  isChallengeCompletedSelector,\n  isSignedInSelector,\n  examInProgressSelector,\n  examResultsSelector,\n  (\n    completedChallenges: CompletedChallenge[],\n    completedSurveys: SurveyResults[],\n    isChallengeCompleted: boolean,\n    isSignedIn: boolean,\n    examInProgress: boolean,\n    examResults: GeneratedExamResults | null\n  ) => ({\n    completedChallenges,\n    completedSurveys,\n    isChallengeCompleted,\n    isSignedIn,\n    examInProgress,\n    examResults\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      challengeMounted,\n      createFlashMessage,\n      openExitExamModal: () => openModal('exitExam'),\n      closeExitExamModal: () => closeModal('exitExam'),\n      openFinishExamModal: () => openModal('finishExam'),\n      closeFinishExamModal: () => closeModal('finishExam'),\n      startExam,\n      stopExam,\n      setUserCompletedExam,\n      clearExamResults,\n      submitChallenge,\n      initTests,\n      updateChallengeMeta,\n      updateSolutionFormValues\n    },\n    dispatch\n  );\n\n// Types\ninterface ShowExamProps {\n  challengeMounted: (arg0: string) => void;\n  completedChallenges: CompletedChallenge[];\n  completedSurveys: SurveyResults[];\n  clearExamResults: () => void;\n  createFlashMessage: typeof createFlashMessage;\n  data: { challengeNode: ChallengeNode };\n  examInProgress: boolean;\n  examResults: GeneratedExamResults | null;\n  initTests: (arg0: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isSignedIn: boolean;\n  openExitExamModal: () => void;\n  closeExitExamModal: () => void;\n  openFinishExamModal: () => void;\n  closeFinishExamModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  startExam: () => void;\n  stopExam: () => void;\n  submitChallenge: () => void;\n  setUserCompletedExam: (arg0: UserExam) => void;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n}\n\ninterface ShowExamState {\n  currentQuestionIndex: number;\n  examTimeInSeconds: number;\n  generatedExamQuestions: GeneratedExamQuestion[];\n  userExamQuestions: UserExamQuestion[];\n  showResults: boolean;\n}\n\nfunction convertMd(md: string): string {\n  return micromark(md);\n}\n\nclass ShowExam extends Component<ShowExamProps, ShowExamState> {\n  static displayName: string;\n  private container: RefObject<HTMLElement> | undefined = React.createRef();\n  timerInterval!: NodeJS.Timeout;\n\n  constructor(props: ShowExamProps) {\n    super(props);\n    this.state = {\n      currentQuestionIndex: 0,\n      generatedExamQuestions: [],\n      examTimeInSeconds: 0,\n      userExamQuestions: [],\n      showResults: false\n    };\n\n    this.runExam = this.runExam.bind(this);\n    this.goToPreviousQuestion = this.goToPreviousQuestion.bind(this);\n    this.goToNextQuestion = this.goToNextQuestion.bind(this);\n    this.selectAnswer = this.selectAnswer.bind(this);\n    this.finishExam = this.finishExam.bind(this);\n    this.exitExam = this.exitExam.bind(this);\n    this.cleanUp = this.cleanUp.bind(this);\n  }\n\n  componentDidMount(): void {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            challengeType,\n            helpCategory,\n            title\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = this.props;\n    initTests(tests);\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n\n    this.container?.current?.focus();\n  }\n\n  componentWillUnmount() {\n    this.cleanUp();\n    this.props.stopExam();\n  }\n\n  stopWindowClose = (event: Event) => {\n    event.preventDefault();\n    alert(this.props.t('misc.navigation-warning'));\n  };\n\n  stopBrowserBack = (event: Event) => {\n    event.preventDefault();\n    window.history.forward();\n    alert(this.props.t('misc.navigation-warning'));\n  };\n\n  runExam = async () => {\n    // TODO: show loader\n    const {\n      createFlashMessage,\n      data: {\n        challengeNode: {\n          challenge: { id: challengeId }\n        }\n      }\n    } = this.props;\n\n    const generateExamResponse = await getGenerateExam(challengeId);\n    const { response, data } = generateExamResponse;\n\n    if (response.status === 200) {\n      const { generatedExam = [] } = data;\n      const emptyUserExamQuestions = generatedExam.map(q => {\n        return {\n          id: q.id,\n          question: q.question,\n          answer: { id: null, answer: null }\n        };\n      }) as UserExamQuestion[];\n\n      this.setState(\n        {\n          generatedExamQuestions: generatedExam,\n          userExamQuestions: emptyUserExamQuestions\n        },\n        () => {\n          this.timerInterval = setInterval(() => {\n            this.setState({\n              examTimeInSeconds: this.state.examTimeInSeconds + 1\n            });\n          }, 1000);\n\n          this.props.startExam();\n\n          window.addEventListener('beforeunload', this.stopWindowClose);\n          window.addEventListener('unload', this.stopWindowClose);\n          window.addEventListener('popstate', this.stopBrowserBack);\n        }\n      );\n    } else {\n      createFlashMessage({\n        type: 'danger',\n        message: FlashMessages.GenerateExamError\n      });\n    }\n  };\n\n  selectAnswer = (index: number, id: string, answer: string): void => {\n    const newUserExamQuestions = Array.from(this.state.userExamQuestions);\n    newUserExamQuestions[index].answer.id = id;\n    newUserExamQuestions[index].answer.answer = answer;\n    this.setState({\n      userExamQuestions: newUserExamQuestions\n    });\n  };\n\n  goToPreviousQuestion = () => {\n    this.setState({\n      currentQuestionIndex: this.state.currentQuestionIndex - 1\n    });\n  };\n\n  goToNextQuestion = () => {\n    this.setState({\n      currentQuestionIndex: this.state.currentQuestionIndex + 1\n    });\n  };\n\n  cleanUp = () => {\n    clearInterval(this.timerInterval);\n    this.setState({\n      examTimeInSeconds: 0,\n      currentQuestionIndex: 0\n    });\n\n    window.removeEventListener('beforeunload', this.stopWindowClose);\n    window.removeEventListener('unload', this.stopWindowClose);\n    window.removeEventListener('popstate', this.stopBrowserBack);\n\n    this.props.clearExamResults();\n    this.props.closeExitExamModal();\n    this.props.closeFinishExamModal();\n  };\n\n  finishExam = () => {\n    // TODO: show loader\n    this.cleanUp();\n\n    const { setUserCompletedExam, submitChallenge } = this.props;\n    const { userExamQuestions, examTimeInSeconds } = this.state;\n\n    setUserCompletedExam({ userExamQuestions, examTimeInSeconds });\n    submitChallenge();\n  };\n\n  exitExam = () => {\n    this.cleanUp();\n\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { blockHashSlug }\n          }\n        }\n      },\n      stopExam\n    } = this.props;\n    stopExam();\n    void navigate(blockHashSlug);\n  };\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            block,\n            dashedName,\n            description,\n            fields: { blockName },\n            instructions,\n            prerequisites,\n            superBlock,\n            title,\n            translationPending\n          }\n        }\n      },\n      examInProgress,\n      examResults,\n      completedChallenges,\n      completedSurveys,\n      isChallengeCompleted,\n      openExitExamModal,\n      openFinishExamModal,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      t\n    } = this.props;\n\n    const {\n      examTimeInSeconds,\n      currentQuestionIndex,\n      generatedExamQuestions,\n      userExamQuestions\n    } = this.state;\n\n    let missingPrerequisites: PrerequisiteChallenge[] = [];\n    if (prerequisites) {\n      missingPrerequisites = prerequisites?.filter(\n        prerequisite =>\n          !completedChallenges.find(({ id }) => prerequisite.id === id)\n      );\n    }\n\n    const surveyCompleted = completedSurveys.some(\n      s => s.title === 'Foundational C# with Microsoft Survey'\n    );\n    const prerequisitesComplete = missingPrerequisites.length === 0;\n    const qualifiedForExam = prerequisitesComplete && surveyCompleted;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )}: ${title}`;\n    const windowTitle = `${blockNameTitle} | freeCodeCamp.org`;\n\n    // TODO: If already taken exam, show different messages\n\n    return examInProgress ? (\n      <Container>\n        <Row>\n          <Spacer size='medium' />\n          <Col md={10} mdOffset={1} sm={10} smOffset={1} xs={12}>\n            {examResults ? (\n              <ExamResults\n                dashedName={dashedName}\n                title={title}\n                examResults={examResults}\n                exitExam={this.exitExam}\n              />\n            ) : (\n              <div className='exam-wrapper'>\n                <div className='exam-header'>\n                  <div data-playwright-test-label='exam-show-title'>\n                    {title}\n                  </div>\n                  <span>|</span>\n                  <div\n                    data-cy='exam-time'\n                    data-playwright-test-label='exam-show-question-time'\n                  >\n                    {t('learn.exam.time', {\n                      t: formatSecondsToTime(examTimeInSeconds)\n                    })}\n                  </div>\n                  <span>|</span>\n                  <div>\n                    {t('learn.exam.questions', {\n                      n: currentQuestionIndex + 1,\n                      t: generatedExamQuestions.length\n                    })}\n                  </div>\n                </div>\n                <hr />\n                <Spacer size='medium' />\n\n                <div className='exam-questions'>\n                  <PrismFormatted\n                    text={convertMd(\n                      generatedExamQuestions[currentQuestionIndex].question\n                    )}\n                  />\n\n                  <Spacer size='large' />\n                  <div className='exam-answers'>\n                    {generatedExamQuestions[currentQuestionIndex].answers.map(\n                      ({ answer, id }) => (\n                        <label className='exam-answer-label' key={id}>\n                          <input\n                            checked={\n                              userExamQuestions[currentQuestionIndex].answer\n                                .id === id\n                            }\n                            className='sr-only'\n                            name={id}\n                            onChange={() =>\n                              this.selectAnswer(\n                                currentQuestionIndex,\n                                id,\n                                answer\n                              )\n                            }\n                            type='radio'\n                            value={id}\n                          />{' '}\n                          <span className='exam-answer-input-visible'>\n                            {userExamQuestions[currentQuestionIndex].answer\n                              .id === id ? (\n                              <span className='exam-answer-input-selected' />\n                            ) : null}\n                          </span>\n                          <PrismFormatted text={convertMd(answer)} />\n                        </label>\n                      )\n                    )}\n                  </div>\n                </div>\n                <Spacer size='large' />\n\n                <div className='exam-buttons'>\n                  <Button\n                    block={true}\n                    className='exam-button'\n                    disabled={currentQuestionIndex <= 0}\n                    variant='primary'\n                    data-cy='previous-exam-question-btn'\n                    onClick={this.goToPreviousQuestion}\n                  >\n                    {t('buttons.previous-question')}\n                  </Button>\n\n                  {currentQuestionIndex ===\n                  generatedExamQuestions.length - 1 ? (\n                    <Button\n                      block={true}\n                      disabled={\n                        !userExamQuestions[currentQuestionIndex].answer.id\n                      }\n                      className='exam-button'\n                      variant='primary'\n                      data-cy='finish-exam-btn'\n                      onClick={openFinishExamModal}\n                    >\n                      {t('buttons.finish-exam')}\n                    </Button>\n                  ) : (\n                    <Button\n                      block={true}\n                      disabled={\n                        !userExamQuestions[currentQuestionIndex].answer.id\n                      }\n                      className='exam-button'\n                      variant='primary'\n                      data-cy='next-exam-question-btn'\n                      onClick={this.goToNextQuestion}\n                    >\n                      {t('buttons.next-question')}\n                    </Button>\n                  )}\n                </div>\n\n                <Spacer size='medium' />\n\n                <div className='exam-buttons'>\n                  <Button\n                    block={true}\n                    className='exam-button'\n                    variant='primary'\n                    data-cy='exit-exam-btn'\n                    onClick={openExitExamModal}\n                  >\n                    {t('buttons.exit-exam')}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </Col>\n          <ExitExamModal exitExam={this.exitExam} />\n          <FinishExamModal finishExam={this.finishExam} />\n        </Row>\n      </Container>\n    ) : (\n      <Hotkeys\n        containerRef={this.container}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet title={windowTitle} />\n          <Container>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <Spacer size='medium' />\n\n                {qualifiedForExam ? (\n                  <Alert data-cy='qualified-for-exam-alert' variant='info'>\n                    <p>{t('learn.exam.qualified')}</p>\n                  </Alert>\n                ) : (\n                  <>\n                    {!prerequisitesComplete ? (\n                      <MissingPrerequisites\n                        missingPrerequisites={missingPrerequisites}\n                      />\n                    ) : (\n                      <FoundationalCSharpSurveyAlert />\n                    )}\n                  </>\n                )}\n                <PrismFormatted text={description} />\n                <Spacer size='medium' />\n                <PrismFormatted text={instructions} />\n\n                <Button\n                  block={true}\n                  variant='primary'\n                  data-cy='start-exam-btn'\n                  disabled={!qualifiedForExam}\n                  // `this.runExam` being an async callback is acceptable\n                  //eslint-disable-next-line @typescript-eslint/no-misused-promises\n                  onClick={this.runExam}\n                >\n                  {t('buttons.click-start-exam')}\n                </Button>\n              </Col>\n              <CompletionModal />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Container>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nShowExam.displayName = 'ShowExam';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowExam));\n\n// GraphQL\nexport const query = graphql`\n  query ExamChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        block\n        challengeType\n        dashedName\n        description\n        fields {\n          blockHashSlug\n          blockName\n          tests {\n            text\n            testString\n          }\n        }\n        helpCategory\n        id\n        instructions\n        prerequisites {\n          id\n          title\n        }\n        superBlock\n        title\n        translationPending\n      }\n    }\n  }\n`;\n"],"names":["document","createElement","decodeNamedCharacterReference","value","characterReference","innerHTML","char","textContent","charCodeAt","length","splice","list","start","remove","items","end","parameters","chunkStart","Array","from","unshift","slice","push","hasOwnProperty","syntaxExtension","all","extension","hook","left","call","undefined","right","code","constructs","isArray","existing","index","before","add","htmlExtension","type","characterReferences","replace","normalizeIdentifier","toLowerCase","toUpperCase","unicodePunctuationInternal","regexCheck","asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodeWhitespace","regex","test","String","fromCharCode","sanitizeUri","url","protocol","result","skip","next","encodeURIComponent","join","normalizeUri","colon","indexOf","questionMark","numberSign","slash","protocolHref","protocolSrc","compile","options","settings","tags","definitions","buffers","mediaStack","tightStack","handlers","htmlExtensions","combineHtmlExtensions","enter","blockQuote","lineEndingIfNeeded","tag","codeFenced","setData","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","content","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","htmlFlow","onenterhtml","htmlText","image","label","link","listItemMarker","getData","onexitlistitem","listItemValue","token","Number","parseInt","this","sliceSerialize","encode","listOrdered","_loose","listUnordered","paragraph","reference","resource","destination","resourceDestinationString","resourceTitleString","setextHeading","strong","exit","atxHeading","atxHeadingSequence","autolinkEmail","uri","raw","autolinkProtocol","allowDangerousProtocol","pop","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","base","decodeNumericCharacterReference","onexitflowcode","codeFencedFence","count","resume","onresumedrop","codeFlowValue","codeTextData","data","id","labelId","title","hardBreakEscape","onexithardbreak","hardBreakTrailing","onexithtml","htmlFlowData","htmlTextData","onexitmedia","labelText","lineEnding","referenceString","referenceId","setextHeadingLineSequence","setextHeadingText","thematicBreak","concat","context","lineEndingStyle","defaultLineEnding","events","listStack","head","body","prepareList","null","handles","kind","handle","Object","assign","atMarker","containerBalance","loose","event","_container","key","previous","media","allowDangerousHtml","factorySpace","effects","ok","max","limit","POSITIVE_INFINITY","size","prefix","consume","tokenize","contentStart","attempt","parser","contentInitial","lineStart","contentType","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","point","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","includes","blankLine","after","partial","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","marker","sequence","initialSize","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","heading","htmlBlockNames","htmlRawNames","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","numeric","characterEscape","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","unicodePunctuation","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","parse","extensions","combineExtensions","search","micromark","encoding","postprocess","atCarriageReturn","match","endPosition","toString","TextDecoder","decode","lastIndex","exec","Math","ceil","preprocess","mapStateToProps","createSelector","isExitExamModalOpenSelector","isExitExamModalOpen","ExitExamModal","_ref","closeExitExamModal","exitExam","t","useTranslation","React","Modal","onClose","variant","Header","closeButtonClassNames","Body","className","Footer","Button","block","onClick","Spacer","displayName","connect","dispatch","bindActionCreators","closeModal","isFinishExamModalOpenSelector","isFinishExamModalOpen","FinishExamModal","closeFinishExamModal","finishExam","ExamResults","dashedName","examResults","numberOfCorrectAnswers","examTimeInSeconds","numberOfQuestionsInExam","passed","percentCorrect","downloadContent","n","formatSecondsToTime","blob","Blob","downloadURL","URL","createObjectURL","useEffect","revokeObjectURL","examResultsMessage","q","p","download","href","MissingPrerequisites","missingPrerequisites","challengeEdges","useAllPrerequisiteChallenges","allPrerequisiteChallenges","_ref2","node","challenge","slug","newMissingPrerequisites","missing","find","matching","Alert","_ref3","Link","to","allChallengeNode","edges","useStaticQuery","isProcessingSelector","isProcessing","FoundationalCSharpSurvey","closeSurveyModal","submitSurvey","setIsProcessing","englishTitle","lng","englishSurvey","question","i18nSurvey","emptySurvey","i","questionIndex","responseIndex","surveyResponses","setSurveyResponses","useState","cantSubmitSurvey","some","option","j","checked","onChange","newSurveyResponses","handleOptionChange","disabled","englishResponses","r","response","responses","isSurveyModalOpenSelector","isSurveyModalOpen","SurveyModal","FoundationalCSharpSurveyAlert","openSurveyModal","Panel","Heading","openModal","completedChallengesSelector","completedSurveysSelector","isChallengeCompletedSelector","isSignedInSelector","examInProgressSelector","examResultsSelector","completedChallenges","completedSurveys","isChallengeCompleted","isSignedIn","examInProgress","convertMd","md","ShowExam","Component","constructor","props","super","container","stopWindowClose","preventDefault","alert","stopBrowserBack","window","history","forward","runExam","async","createFlashMessage","challengeNode","challengeId","generateExamResponse","getGenerateExam","status","generatedExam","emptyUserExamQuestions","answer","setState","generatedExamQuestions","userExamQuestions","timerInterval","setInterval","startExam","addEventListener","message","FlashMessages","GenerateExamError","selectAnswer","newUserExamQuestions","goToPreviousQuestion","currentQuestionIndex","goToNextQuestion","cleanUp","clearInterval","removeEventListener","clearExamResults","setUserCompletedExam","submitChallenge","blockHashSlug","stopExam","navigate","showResults","bind","componentDidMount","_this$container","_this$container$curre","challengeMounted","tests","challengeType","helpCategory","pageContext","challengeMeta","initTests","updateChallengeMeta","focus","componentWillUnmount","render","description","blockName","instructions","prerequisites","superBlock","translationPending","openExitExamModal","openFinishExamModal","nextChallengePath","prevChallengePath","filter","prerequisite","surveyCompleted","s","prerequisitesComplete","qualifiedForExam","windowTitle","Container","Row","Col","mdOffset","sm","smOffset","xs","PrismFormatted","answers","Hotkeys","containerRef","LearnLayout","Helmet","ChallengeTitle","isCompleted","CompletionModal","HelpModal","challengeTitle","challengeBlock","updateSolutionFormValues","withTranslation"],"sourceRoot":""}
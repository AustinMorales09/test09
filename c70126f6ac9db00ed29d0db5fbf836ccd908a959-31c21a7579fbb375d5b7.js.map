{"version":3,"file":"c70126f6ac9db00ed29d0db5fbf836ccd908a959-31c21a7579fbb375d5b7.js","mappings":"+OAAA,MAAMA,EAAeC,GAAgBC,KAAKC,aAAa,SAASC,OAAOH,GAK1DI,EAAwBC,GACnCN,EAAYM,EAJiB,K,wFCc/B,SAASC,EAAgBC,GAOe,IAPd,WACxBC,EAAU,MACVC,EAAK,QACLC,EAAO,YACPC,EAAW,WACXC,EAAU,MACVC,EAAQ,MACcN,EACtB,MAAM,EAAEO,IAAMC,EAAAA,EAAAA,MACRC,EACJR,GAAcG,EAAc,OAASD,EAAU,UAAY,SAEvDO,EAAUN,EAAW,GACpBG,EAAE,sBACLN,EAAU,GACLM,EAAE,qBACLJ,EAAO,GACFI,EAAE,oBAAmB,GACrBA,EAAE,gBAEb,OACEI,EAAAA,cAACC,EAAAA,GAAK,CAACC,QAASJ,EAAOK,UAAU,uBAC/BH,EAAAA,cAAA,SAAID,GACJC,EAAAA,cAACI,EAAAA,GAAM,CAACC,KAAM,WACdL,EAAAA,cAAA,OAAKG,UAAU,6BACXb,GAAcG,IACdO,EAAAA,cAACM,IAAO,CACNH,UAAU,qBACVI,MAAM,UACNC,OAAO,OACPC,KAAK,eAGRjB,GACCQ,EAAAA,cAAA,WACEA,EAAAA,cAAA,SAAIJ,EAAE,qBACLF,GACCM,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAIJ,EAAE,4BAENI,EAAAA,cAACU,EAAAA,GAAI,CACHP,UAAU,MACVQ,IAAI,aACJC,SAAS,EACTC,GAAG,eAEFjB,EAAE,+BAMZD,GAASK,EAAAA,cAAA,SAAIL,IAEhBK,EAAAA,cAAA,OAAKG,UAAU,+BACZR,GACCK,EAAAA,cAAA,UAAQc,KAAK,SAASX,UAAU,mBAAmBY,QAASxB,GACzDK,EAAE,uBAMf,CAEAR,EAAiB4B,YAAc,mBAE/B,Q,UCjFA,MAAMC,EACJC,GAEAlB,EAAAA,cAAA,MAAAmB,OAAAC,OAAA,CACEC,GAAG,eACHC,QAAQ,gBACRC,MAAM,6BACNC,WAAW,+BACXC,KAAK,MACL,kBAAgB,sBACZP,GAEJlB,EAAAA,cAAA,SAAOqB,GAAG,sBAAqB,WAC/BrB,EAAAA,cAAA,SACEA,EAAAA,cAAA,QAAM0B,EAAE,4sCAKdT,EAAYD,YAAc,cAE1B,QCbA,MAAM,gBAAEW,GAAwDC,EAuChE,MA9BsBvC,IAGyB,IAHxB,YACrBwC,EAAW,eACXC,GACmBzC,EACnB,IAAKsC,IAAoBG,IAAmBC,EAAAA,GAAaC,WACvD,OAAO,KAGT,MAMMC,EAAI,mEAHO,eAAkBH,IAHrB,cAAiBH,IAKd,iBAAoBI,EAAAA,GAAaC,YADjC,oCAIjB,OACEhC,EAAAA,cAAA,KACEG,UAAU,6BACV,2BAAyB,uBACzB8B,KAAMA,EACNlB,QAASA,IAAMc,EAAY,CAAEK,gBAAiBC,EAAAA,GAAgBC,UAC9DC,IAAI,aACJC,OAAO,UAEPtC,EAAAA,cAACiB,EAAW,MACV,E,iCCqBO,MAAMsB,UAAiCC,EAAAA,UAGpDC,WAAAA,GAAA,SAAAC,WACA,KACAC,MAAQ,CACNC,cAAaC,OAAOC,OACpBC,gBAAgB,GAChB,KA6DFC,aAAe,KACbC,KAAKC,SAAS,CAAEN,aAAa,IAC7BK,KAAK/B,MAAMiC,QAAQ,CACnB,CA5DF,+BAAOC,CACLlC,EACAyB,GAEA,MAAM,eAAEI,GAAmB7B,EAC3B,OAAI6B,IAAmBJ,EAAMI,eACpB,CAAEA,eAAgBA,GAEpB,IACT,CAEAM,iBAAAA,GACEJ,KAAKK,WAAWL,KAAK/B,MAAM6B,gBAAgB,EAC7C,CAEAQ,oBAAAA,IACEC,EAAAA,EAAAA,GAAc,aAChB,CAEAC,kBAAAA,CAAmBC,GAWfA,EAAUX,iBAAmBE,KAAKN,MAAMI,gBACxCW,EAAU5D,MAAMS,QAAU0C,KAAK/B,MAAMpB,MAAMS,OAC3CmD,EAAU5D,MAAM6D,UAAYV,KAAK/B,MAAMpB,MAAM6D,SAC7CD,EAAU5D,MAAM8D,SAAWX,KAAK/B,MAAMpB,MAAM8D,QAC5CF,EAAUG,gBAAkBZ,KAAK/B,MAAM2C,gBAGvCZ,KAAKC,SAAS,CAAEN,aAAa,IAC7BK,KAAKK,WAAWL,KAAKN,MAAMI,gBAAgB,GAE/C,CAEAO,UAAAA,CAAWQ,EAAuBC,GAC5BA,IAAcP,EAAAA,EAAAA,GAAc,cAChC,MAAMQ,EAAmBf,KAAK/B,MAAM2C,cAAgB,QAAU,GAC9D,IAAII,EAAO,cAAiBhB,KAAK/B,MAAMgD,SAAQ,oBAAoBF,EAAgB,wEAC/EF,IAAcG,GAAW,oCAE7BE,EAAAA,EAAAA,GACE,cACA,EAAK,gCAC2BF,EAChChB,KAAKD,aACL,SAEJ,CAOAoB,qBAAAA,CACEC,EACAC,GAEA,OAAOA,EAAQC,MAAMC,UAAUC,MAAMC,GAM5BzB,KAAK/B,MAAMyD,UAAUD,EAASL,IAEzC,CAEAO,MAAAA,GACE,MAAM,YACJhC,EAAW,eACXG,GACqDE,KAAKN,OACtD,UACJgC,EAAS,QACTE,EAAO,SACPC,EAAQ,mBACRC,EAAkB,YAClBC,EAAW,MACXlF,GACEmD,KAAK/B,MAET,IAAK0B,EAAa,OAAO5C,EAAAA,cAAAA,EAAAA,SAAA,MAIzB,MAAMiF,EAAmCpC,OAAOC,OAAOoC,QAAQC,OAC7D,QACA,CACEnF,MAAK,EACLoF,SACF,IAIF,OACEpF,EAAAA,cAACiF,EAAM,CACLD,YAAajC,EAAiB,KAAOiC,EACrCD,mBAAoBhC,EAAiBgC,EAAqB,KAC1DJ,UACE5B,EACI,CACEsB,EACAC,IACGK,EAAUN,EAAMC,GACrB,CACED,EAIAC,IACGrB,KAAKmB,sBAAsBC,EAAMC,GAE5CQ,SAAUA,EACVD,QAASA,EACT/E,MAAOA,GAGb,EA1ImByC,EAUZvB,YAAc,2BC3BvB,MAAM,eACJqE,EAAc,cACdC,GAEA1D,EAKF,MAAM2D,UAAqB/C,EAAAA,UAOzBC,WAAAA,CAAYvB,GACVsE,MAAMtE,GAAO,KANfyB,MAA2B,CACzBxD,OAAQsG,EAAAA,GAAgB3D,eACxB4D,SAAUD,EAAAA,GAAgBE,iBAC1BC,OAAQ,KAIV,CAEA,+BAAOxC,CACLlC,GAEA,MAAM,eAAEY,EAAc,iBAAE6D,GAAqBzE,EAc7C,MAAO,KATH2E,EAAAA,EAAAA,IACF/D,EACA6D,EACAG,EAAAA,GAAkBR,GAAiB,YAOvC,CAEAV,MAAAA,GACE,MAAM,SAAEc,EAAQ,OAAEE,EAAM,OAAEzG,GAAW8D,KAAKN,OACpC,EAAE/C,EAAC,MAAEmG,EAAK,gBAAEC,EAAe,cAAEnC,GAAkBZ,KAAK/B,MACpD6B,EAA8B,aAAb2C,EACjBO,EAAcF,IAAUG,EAAAA,EAAOC,MAAQ,QAAU,OACvD,OAAKd,EAKHrF,EAAAA,cAAA,OAAKG,UAAW,4BACdH,EAAAA,cAACuC,EAAwB,CACvB2B,SAAUmB,EACVL,YAAaA,CACXX,EACAC,IAUOA,EAAQC,MAAM6B,OAAO,CAC1BC,eAAgB,CACd,CACElH,OAAQ,CACNmH,cAAe,MACfC,OAAQpH,EAAS,KAAKqH,gBAMhCzB,mBAAoBA,CAClBV,EACAC,IAMOA,EAAQR,aAAasC,OAAO,CACjCK,QAASb,IAGb/B,cAAeA,EACfmC,gBAAiBA,EACjBjD,eAAgBA,EAChB4B,UAAYN,IACVpB,KAAK/B,MAAMW,YAAY,CACrBK,gBAAiBC,EAAAA,GAAgBuE,OACjCrC,QACA,EAEJS,SAAUA,KACR7B,KAAK/B,MAAMyF,sBAAsB,CAC/BlH,aAAa,EACbH,YAAY,EACZE,SAAS,EACTG,MAAOC,EAAE,sBACT,EAEJiF,QAASA,KACP5B,KAAK/B,MAAM0F,wBAAwB,UACnC3D,KAAK/B,MAAMyF,sBAAsB,CAC/BlH,aAAa,EACbH,YAAY,EACZE,SAAS,EACTG,MAAOC,EAAE,qBACT,EAEJuD,OAAQA,IAAMF,KAAK/B,MAAM0F,wBAAwB,UACjDhB,OAAQA,EACR9F,MAAO,CACL6D,SAAS,EACTC,OAAQ,GACRrD,MAAO0F,MAzEN,IA8EX,EAnHIV,EACGvE,YAAc,eAqHvB,MAAM6F,GAAkBC,EAAAA,EAAAA,IACtBC,EAAAA,GACAC,EAAAA,IACA,CAAA3H,EAA0C4H,KAAoB,IAA7D,WAAEC,GAAqC7H,EAAA,MAA4B,CAClE6H,aACAD,cACD,IAGH1B,EAAavE,YAAc,eAE3B,OAAemG,EAAAA,EAAAA,IAAQN,EAAvB,EAAwCO,EAAAA,EAAAA,KAAAA,CAAkB7B,I,UC3J3C,SAAS8B,EAAchI,GAMN,IANO,MACrC0G,EAAK,EACLnG,EAAC,sBACD+G,EAAqB,YACrB9E,EAAW,WACXvC,GACcD,EACd,MAAOiI,EAAmBC,IAAyBC,EAAAA,EAAAA,WAAS,IACrDC,EAAcC,IAAiBF,EAAAA,EAAAA,WAAS,IACxCG,EAAuBC,IAC5BJ,EAAAA,EAAAA,UAAgC,CAC9B,CACEK,YAAa,aACbC,UAAU,EACVnI,MAAO,MAET,CACEkI,YAAa,aACbC,UAAU,EACVnI,MAAO,QAGPoI,EAAqBJ,EAAsBK,OAC/CC,IAAA,IAAC,SAAEH,EAAQ,MAAEnI,GAAOsI,EAAA,OAAKH,IAAanI,CAAK,IAEvCuI,EAAeT,GAAgBnI,EAC/B6I,GAASC,EAAAA,EAAAA,aACTC,GAAWC,EAAAA,EAAAA,eAEjB,SAASC,EACPC,GAIA,MAAM,YAAEX,EAAW,MAAElI,EAAK,SAAEmI,GAAaU,EACzCZ,EACED,EAAsBc,KAAIC,GACpBA,EAAQb,cAAgBA,EACnB,CAAEA,cAAalI,QAAOmI,YACxBY,IAGb,CAEA,MAAMC,EAAU,CACd7I,MAAO,CACL8I,KAAM,CACJC,SAAU,OACVtI,MAAUwF,IAAUG,EAAAA,EAAOC,MAAQ,OAAS,UAC5C,gBAAiB,CACf5F,MAAM,cAoCRuI,EAAuBC,MAC3BC,EACAC,IAEId,EACKA,EAAOe,mBAAmBF,EAAc,CAC7CG,eAAgBF,IAGb,CAAEtJ,MAAO,CAAEmB,KAAM,oBAG1B,OACEd,EAAAA,cAAA,QACEG,UAAU,gBACViJ,SAAUZ,IA7COO,WAEnB,GADAM,EAAEC,kBACGvB,EAAoB,OAAOR,GAAsB,GAGtD,GAFKA,GAAsB,IAEtBW,GAAgBC,GAAUE,EAAU,CACvC,MAAMkB,EAAclB,EAASmB,WAAWC,EAAAA,mBACxC,GAAIF,EAAa,CACf7B,GAAc,GACd,MAAM,cAAEuB,EAAa,MAAEtJ,SAAgBwI,EAAOuB,oBAAoB,CAChE5I,KAAM,OACN6I,KAAMJ,IAEJ5J,EACFgH,EAAsB,CACpBlH,aAAa,EACbH,YAAY,EACZE,SAAS,EACTG,MAAOC,EAAE,uBAEFqJ,GACTpH,EAAY,CACVK,gBAAiBC,EAAAA,GAAgByH,WACjCC,gBAAiBZ,EAAc5H,GAC/ByH,wBAEN,CACF,CACOpB,GAAc,EAAM,EAiBDoC,CAAatB,EAAO,GAE5CxI,EAAAA,cAAA,OACEG,UAAS,qBACNmH,EAA2C,GAAvB,uBAGvBtH,EAAAA,cAACyJ,EAAAA,kBAAiB,CAChBtJ,UAAU,oCACV4J,SAAUxB,EACVI,QAASA,IAEX3I,EAAAA,cAACgK,EAAAA,kBAAiB,CAChB7J,UAAU,oCACV4J,SAAUxB,EACVI,QAASA,KAGb3I,EAAAA,cAAA,OAAKG,UAAW,gBACZmH,GAAqBtH,EAAAA,cAAA,SAAIJ,EAAE,uBAE/BI,EAAAA,cAAA,UACEG,UAAU,uBACV8J,UAAW9B,IAAWE,GAAYH,EAClC,UAAQ,+BACRpH,KAAK,UAEJlB,EAAE,mBAIX,CC5IA,MAAMsK,EAAgB7K,IASK,IATJ,OACrB8I,EAAM,MACNgC,EAAK,OACLhL,EAAM,MACN4G,EAAK,oBACLqE,EAAmB,YACnBvI,EAAW,sBACX8E,EAAqB,wBACrBC,GACmBvH,EACnB,MAAOgL,EAAOC,IAAY9C,EAAAA,EAAAA,UAAuB,OAC1C+C,EAAgBC,IAAqBhD,EAAAA,EAAAA,UAC1C,OAEKiD,EAAgBC,IAA2BlD,EAAAA,EAAAA,WAAS,IAE3DmD,EAAAA,EAAAA,YAAU,KACR,IAAKxC,EACH,OAGF,MAAMyC,EAAKzC,EAAOoC,eAAe,CAC/BM,QAAS,KACTC,SAAU,MACVC,MAAO,CAAEZ,QAAOhL,UAChB6L,kBAAkB,EAClBC,mBAAmB,EACnBC,eAAgB,CAAC,iBAwBnB,OArBAN,EAAGO,GAAG,SAAS3C,IACb,MAAM,MAAE6B,EAAK,WAAEe,EAAU,UAAEC,GAAc7C,EACzC8B,EAASD,GACT7B,EAAMV,SAAS,WACfjG,EAAY,CACVK,gBAAiBC,EAAAA,GAAgBmJ,OACjCjB,QACAe,aACAC,aACA,IAGCT,EAAGH,iBAAiBhG,MAAK8G,IACxBA,GACFf,EAAkBI,GAClBF,GAAwB,IAExBA,GAAwB,EAC1B,IAGK,KACLF,EAAkB,MAClBE,GAAwB,EAAM,CAC/B,GACA,CAACP,EAAOhL,EAAQgJ,EAAQtG,EAAa+E,IAWxC,OACE5G,EAAAA,cAAA,QAAMG,UAAU,gBACbsK,GAAkBF,GACjBvK,EAAAA,cAACwL,EAAAA,4BAA2B,CAC1BzK,QAASA,KACHsJ,GAbZ1D,EAAsB,CACpBlH,aAAa,EACbH,YAAY,EACZE,SAAS,EACTG,MAAOyK,GAWD,EAEFqB,QAASA,IAAM7E,EAAwB,UACvC+B,QAAS,CACP7I,MAAO,CACL4L,qBAAsB,CACpB5K,KAAM,UACNiF,MAAOA,IAAUG,EAAAA,EAAOC,MAAQ,QAAU,OAC1CvC,OAAQ,SAGZ2G,oBAID,EAII,SAASoB,EAAqBzK,GAC3C,OACElB,EAAAA,cAAC4L,EAAAA,iBAAgB,MACd3D,IAAA,IAAC,OAAEE,GAAmCF,EAAA,OACrCjI,EAAAA,cAACkK,EAAa/I,OAAAC,OAAA,CAAC+G,OAAQA,GAAYjH,GAAS,GAIpD,C,yBC/GA,MATyB2K,IAErB7L,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC8L,EAAAA,EAAe,CAACC,KAAMC,EAAAA,MAAU,MCwEvC,MAAMnF,GAAkBC,EAAAA,EAAAA,IACtBE,EAAAA,GACAiF,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACApF,EAAAA,GACAqF,EAAAA,IACA,CACEnF,EACAvH,EACAwH,EACAmF,EAAkChN,EAElCiN,KAAyC,IADzC,MAAEC,EAAK,MAAExG,GAAyC1G,EAAA,MAE9C,CACJK,aACAwH,aACAD,cACAoF,oBACAE,QACAxG,QACAuG,sBACD,IAGGE,EAAqB,CACzBC,WAAU,KACVC,wBACF,MAEMC,EAAuBA,IAEzB3M,EAAAA,cAAA,OAAKG,UAAU,oDACbH,EAAAA,cAACM,IAAO,CACNH,UAAU,yBACVK,OAAO,OACPC,KAAK,gBAMb,MAAMmM,UAAmBpK,EAAAA,UAEvBC,WAAAA,CAAYvB,GACVsE,MAAMtE,GAAO,KAmCfW,YAAcoG,IAQY,IARX,gBACb/F,EAAe,KACfmC,EAAI,WACJ+G,EAAU,UACVC,EAAS,MACThB,EAAK,gBACLR,EAAe,qBACff,GACYb,EACZ,MAAM,eAAEnG,EAAgB6D,iBAAkBD,GAAazC,KAAKN,OACtD,eAAEkK,EAAc,MAAEN,EAAK,uBAAEO,GAA2B7J,KAAK/B,MACzD/B,EAAS2N,GAA0BhL,EAEzCmB,KAAK/B,MAAMuL,WAAW,CACpBvK,kBACA2K,iBACA1N,SACAuG,WACArB,OACAgG,QACAkC,MAAOA,GAASnB,EAChB3K,KAAM4K,EACNxB,kBACAf,yBAEE7F,KAAK/B,MAAM6L,kBAAkB9J,KAAK/B,MAAM6L,kBAAkB,EA1D9D,MAAMC,EAA2CvH,EAAAA,GAEjDxC,KAAKN,MAAQ,IAAKqK,GAElB/J,KAAK0D,sBAAwB1D,KAAK0D,sBAAsBsG,KAAKhK,MAC7DA,KAAKiK,cAAgBjK,KAAKiK,cAAcD,KAAKhK,MAC7CA,KAAKpB,YAAcoB,KAAKpB,YAAYoL,KAAKhK,MACzCA,KAAK2D,wBAA0B3D,KAAK2D,wBAAwBqG,KAAKhK,KACnE,CAEAM,oBAAAA,GACEN,KAAKiK,eACP,CAEAvG,qBAAAA,CAAsBwG,GAEpBtK,OAAOuK,SAAS,EAAG,GACnBnK,KAAK/B,MAAMwL,wBAAwB,IAC9BzJ,KAAK/B,MAAMmL,qBACXc,GAEP,CAEAvG,uBAAAA,CAAwByG,GACtBpK,KAAK/B,MAAMwL,wBAAwB,IAC9BzJ,KAAK/B,MAAMmL,kBACdiB,QAAS,IACJrK,KAAK/B,MAAMmL,kBAAkBiB,QAChC,CAACD,IAAW,IAGlB,CA8BAH,aAAAA,GACE,OAAOjK,KAAK/B,MAAMwL,wBAAwB,IAAKa,EAAAA,IACjD,CAEAC,iBAAAA,GACE,MAAQ1L,eAAgB2L,EAAa,iBAAE9H,GAAqB1C,KAAKN,OAE/D0J,mBAAmB,QAAEiB,EAAO,WAAEhO,GAAY,aAC1CoO,EAAY,MACZ3H,EAAK,EACLnG,EAAC,cACDiE,EAAa,WACbnE,EAAU,WACVwH,EAAU,WACVyG,EAAU,uBACVb,EAAsB,oBACtBR,GACErJ,KAAK/B,MACHY,EACJgL,GAA0BW,EACtBG,EAAgBF,GAA8B3H,EAC9C8H,EAAiBjO,EAAE,wBAAyB,CAChDkO,IAAKhM,ET/MoB,MSgNzB,IAEIiM,EAA2BzB,EAAoB0B,QAAU,EAEzDC,EACJvO,IAAemE,IAAkBqD,IAAe6G,EAE5CG,EACJlO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SACGJ,EAAE,2BAA4B,CAC7BkO,IAAK5O,EAAqB4C,MAI9B9B,EAAAA,cAAA,UACEc,KAAK,SACLX,UAAU,qBACVY,QAAS4M,GAER/N,EAAE,wBAUT,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKG,UANHwN,EAAmB,2BACnB9J,EAAsB,uBACnB,IAIiCqK,GACtClO,EAAAA,cAACI,EAAAA,EAAM,CAACC,KAAMsN,EAAa,QAAU,WACrC3N,EAAAA,cAAA,YACE,6BAA2B,gBAC3BG,UAAW,oCAEXH,EAAAA,cAAA,cACEA,EAAAA,cAAC6L,EAAgB,MAChBjM,EAAE,2BAGJ0N,EAAQnF,QAAUmF,EAAQxK,QAAU9C,EAAAA,cAAC2M,EAAoB,MAC1D3M,EAAAA,cAACmO,EAAc,CACbhP,OAAQ2C,EACR8E,wBAAyB3D,KAAK2D,wBAC9BuD,MAAO0D,EACPlH,sBAAuB1D,KAAK0D,sBAC5B9E,YAAaoB,KAAKpB,YAClBuI,oBAAqBxK,EAAE,yBACvBmG,MAAO6H,IAET5N,EAAAA,cAACuF,EAAY,CACXzD,eAAgBA,EAChB6D,iBAAkBA,EAClBiB,wBAAyB3D,KAAK2D,wBAC9B/E,YAAaoB,KAAKpB,YAClBgC,cAAeoK,EACfjI,gBAAiBsH,EAAQxK,OACzB6D,sBAAuB1D,KAAK0D,sBAC5BZ,MAAO6H,MAENN,EAAQnF,SAAWmF,EAAQxK,SAC5B9C,EAAAA,cAACoO,EAAa,CACZvM,YAAaoB,KAAKpB,YAClBC,eAAgBA,IAGnBmM,GACCjO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKG,UAAU,aAAaP,EAAE,mBAC9BI,EAAAA,cAACqH,EAAc,CACbV,sBAAuB1D,KAAK0D,sBAC5B9E,YAAaoB,KAAKpB,YAClBvC,WAAYA,EACZM,EAAGA,EACHmG,MAAO6H,MAOrB,CAEAS,cAAAA,GACE,OACErO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,WAAMiD,KAAKuK,qBAGjB,CAEA5I,MAAAA,GACE,MACEyH,mBAAmB,WAAE/M,EAAU,QAAEE,EAAO,MAAEG,EAAK,YAAEF,GAAa,cAC9DoE,EAAa,WACbnE,GACEuD,KAAK/B,MAET,OAAI1B,GAAWG,EAEXK,EAAAA,cAACZ,EAAgB,CACfE,WAAYA,EACZG,YAAaA,EACbD,QAASA,EACTG,MAAOA,EACPD,WAAYA,EACZH,MAAO0D,KAAKiK,gBAOhBlN,EAAAA,cAAAA,EAAAA,SAAA,MACIV,GAAcG,IACdO,EAAAA,cAACZ,EAAgB,CACfE,WAAYA,EACZG,YAAaA,EACbD,QAASA,EACTG,MAAOA,EACPD,WAAYA,EACZH,MAAO0D,KAAKiK,gBAGhBlN,EAAAA,cAAA,OAAKG,UAAWb,GAAcG,EAAc,OAAS,IAClDoE,EAAgBZ,KAAKuK,oBAAsBvK,KAAKoL,kBAIzD,EA7NIzB,EACG5L,YAAc,aA+NvB4L,EAAW5L,YAAc,aAEzB,OAAemG,EAAAA,EAAAA,IACbN,EACA2F,EAFF,EAGEpF,EAAAA,EAAAA,KAAAA,CAAkBwF,IC/TpB,SAAS0B,EAAajP,GAUlB,IAVmB,eACrByC,EAAc,kBACdyM,EAAiB,kBACjBC,EAAiB,mBACjBC,GAMDpP,EACC,MAAM,EAAEO,IAAMC,EAAAA,EAAAA,MAMd,OAFA6O,EAAAA,EAAAA,IAAW,wBAGT1O,EAAAA,cAAC2O,EAAAA,GAAG,CACFxO,UAAW,2CACX,6BAA2B,0BAE3BH,EAAAA,cAAC4O,EAAAA,GAAG,CAACC,GAAI,IACP7O,EAAAA,cAAA,SACGJ,EAAE,yBAA0B,CAC3BkO,IAAK5O,EAAqB4C,MAG9B9B,EAAAA,cAACI,EAAAA,GAAM,CAACC,KAAK,UACbL,EAAAA,cAAC8O,EAAAA,GAAI,CACH3O,UAAW,mBACX4O,aAAcjN,EAAe0E,WAC7BwI,cApBWzI,IACjBgI,EAAkBU,OAAO1I,GAAyB,GAqB5CvG,EAAAA,cAACkP,EAAAA,GAAQ,CAAC/O,UAAU,aACjBgP,EAAAA,GAAoB1G,KAAIlC,GACvBvG,EAAAA,cAACoP,EAAAA,GAAW,CACVzO,IAAK4F,EACLA,MAAOA,EAAMC,WACbzF,QAASA,IAAMwN,EAAkBhI,IAClC,IACGrH,EAAqBqH,OAI7BvG,EAAAA,cAACI,EAAAA,GAAM,CAACC,KAAK,UACZ8O,EAAAA,GAAoB1G,KAAIlC,IACvB,MAAMuH,EAAM5O,EAAqB4C,GAC3BuN,EV3EhBxQ,EU2EiDiD,EV7EpB,IADI,IU+EvB,MAAMwN,EAAsB1P,EAAE,yBAA0B,CACtDkO,MACAuB,UAGF,OACErP,EAAAA,cAACuP,EAAAA,GAAW,CACV5O,IAAK4F,EACLpG,UAAU,cACVoG,MAAOA,EAAMC,YAEbxG,EAAAA,cAAA,SAAIsP,GACQ,KAIpBtP,EAAAA,cAAA,UACEG,UAAU,oDACVW,KAAK,SACL,UAAQ,iCACRC,QAASA,IAAMyN,GAAkB,IAG7B5O,EADH6O,EACK,yBACA,mBAERzO,EAAAA,cAACI,EAAAA,GAAM,CAACC,KAAK,YAIrB,CAEA,SAASmP,EAAevH,GAYpB,IAZqB,iBACvB8E,EAAgB,cAChBlJ,EAAa,kBACb2K,EAAiB,eACjB1M,EAAc,eACd+K,GAOD5E,EACC,OACEjI,EAAAA,cAAC2O,EAAAA,GAAG,KACF3O,EAAAA,cAAC4O,EAAAA,GAAG,CAACC,GAAI,IACP7O,EAAAA,cAAC4M,EAAU,CACTG,iBAAkBA,EAClBlJ,cAAeA,EACfgJ,eAAgBA,EAChBc,WAAYA,IAAMa,GAAkB,GACpC1B,uBAAwBhL,IAE1B9B,EAAAA,cAACI,EAAAA,GAAM,CAACC,KAAK,YAIrB,CAwCA,MAtCoEoP,IAM7D,IAN8D,iBACnE1C,EAAgB,uBAChB2C,EAAsB,cACtB7L,EAAa,eACbgJ,EAAc,mBACd4B,GACDgB,EACC,MAAO3N,EAAgByM,IAAqB/G,EAAAA,EAAAA,UAASmI,EAAAA,KAE9CC,EAAgBpB,IAAqBhH,EAAAA,EAAAA,WAAS,GAMrD,OAJAmD,EAAAA,EAAAA,YAAU,KACJ+E,GAAwBA,GAAwBE,EAAe,GAClE,CAACA,EAAgBF,IAGlB1P,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,MAAU4P,GAAkB,CAAEzP,UAAW,QACvCH,EAAAA,cAACsO,EAAa,CACZxM,eAAgBA,EAChByM,kBAAmBA,EACnBC,kBAAmBA,EACnBC,mBAAoBA,KAGxBzO,EAAAA,cAAA,OAAW4P,GAAkB,CAAEzP,UAAW,QACxCH,EAAAA,cAACwP,EAAe,CACd1N,eAAgBA,EAChBiL,iBAAkBA,EAClByB,kBAAmBA,EACnB3K,cAAeA,EACfgJ,eAAgBA,KAGnB,C,wBC/KA,SAAS1I,EACd9C,EACA0H,EACA8G,EACAC,EACAC,GAEA,MAAMC,EAAIC,SAASC,cAAc,UACjCF,EAAElP,KAAO,kBACTkP,EAAE3O,GAAKA,EACP2O,EAAEjH,MAAQA,EACViH,EAAEF,OAASA,EACXE,EAAEH,IAAMA,EACRG,EAAED,KAAOA,EACTE,SAASE,qBAAqB,QAAQ,GAAGC,YAAYJ,EACvD,CAEO,SAASxM,EAAcnC,GAC5B,MAAMgP,EAASJ,SAASK,eAAejP,GACnCgP,GACFA,EAAOE,QAEX,C","sources":["webpack://@freecodecamp/client/./src/components/Donation/utils.ts","webpack://@freecodecamp/client/./src/components/Donation/donate-completion.tsx","webpack://@freecodecamp/client/./src/assets/images/components/patreon-logo.tsx","webpack://@freecodecamp/client/./src/components/Donation/patreon-button.tsx","webpack://@freecodecamp/client/./src/components/Donation/paypal-button-script-loader.tsx","webpack://@freecodecamp/client/./src/components/Donation/paypal-button.tsx","webpack://@freecodecamp/client/./src/components/Donation/stripe-card-form.tsx","webpack://@freecodecamp/client/./src/components/Donation/wallets-button.tsx","webpack://@freecodecamp/client/./src/components/Donation/security-lock-icon.tsx","webpack://@freecodecamp/client/./src/components/Donation/donate-form.tsx","webpack://@freecodecamp/client/./src/components/Donation/multi-tier-donation-form.tsx","webpack://@freecodecamp/client/./src/utils/script-loaders.ts"],"sourcesContent":["const numToCommas = (num: number) => Intl.NumberFormat('en-US').format(num);\nconst EDUCATION_HOURS_PER_DOLLAR = 50;\nexport const CENTS_IN_DOLLAR = 100;\nexport const convertToTimeContributed = (amount: number) =>\n  numToCommas((amount / CENTS_IN_DOLLAR) * EDUCATION_HOURS_PER_DOLLAR);\nexport const formattedAmountLabel = (amount: number) =>\n  numToCommas(amount / CENTS_IN_DOLLAR);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-spinkit';\nimport { Alert } from '@freecodecamp/ui';\n\nimport { Link, Spacer } from '../helpers';\n\ntype DonateCompletionProps = {\n  error: string | null;\n  processing: boolean;\n  redirecting: boolean;\n  reset: () => unknown;\n  success: boolean;\n  isSignedIn: boolean;\n};\n\nfunction DonateCompletion({\n  processing,\n  reset,\n  success,\n  redirecting,\n  isSignedIn,\n  error = null\n}: DonateCompletionProps): JSX.Element {\n  const { t } = useTranslation();\n  const style =\n    processing || redirecting ? 'info' : success ? 'success' : 'danger';\n\n  const heading = redirecting\n    ? `${t('donate.redirecting')}`\n    : processing\n      ? `${t('donate.processing')}`\n      : success\n        ? `${t('donate.thank-you')}`\n        : `${t('donate.error')}`;\n\n  return (\n    <Alert variant={style} className='donation-completion'>\n      <b>{heading}</b>\n      <Spacer size={'medium'} />\n      <div className='donation-completion-body'>\n        {(processing || redirecting) && (\n          <Spinner\n            className='user-state-spinner'\n            color='#0a0a23'\n            fadeIn='none'\n            name='line-scale'\n          />\n        )}\n        {success && (\n          <div>\n            <p>{t('donate.free-tech')}</p>\n            {isSignedIn && (\n              <>\n                <p>{t('donate.visit-supporters')}</p>\n\n                <Link\n                  className='btn'\n                  key='supporters'\n                  sameTab={false}\n                  to='/supporters'\n                >\n                  {t('buttons.go-to-supporters')}\n                </Link>\n              </>\n            )}\n          </div>\n        )}\n        {error && <p>{error}</p>}\n      </div>\n      <div className='donation-completion-buttons'>\n        {error && (\n          <button type='button' className='try-again-button' onClick={reset}>\n            {t('buttons.try-again')}\n          </button>\n        )}\n      </div>\n    </Alert>\n  );\n}\n\nDonateCompletion.displayName = 'DonateCompletion';\n\nexport default DonateCompletion;\n","import React from 'react';\n\nconst PatreonLogo = (\n  props: JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>\n): JSX.Element => (\n  <svg\n    id='patreon-logo'\n    viewBox='10 0 2560 356'\n    xmlns='http://www.w3.org/2000/svg'\n    xmlnsXlink='http://www.w3.org/1999/xlink'\n    role='img'\n    aria-labelledby='patreon-logo-label'\n    {...props}\n  >\n    <title id='patreon-logo-label'>Patreon</title>\n    <g>\n      <path d='M1536.54 72.449v76.933h128.24v61.473h-128.24v74.51h128.24v62.921h-206.64V9.529h206.64v62.92h-128.24M2070.82 178.907c0-55.652-37.76-107.434-99.21-107.434-61.95 0-99.21 51.782-99.21 107.434s37.26 107.435 99.21 107.435c61.45 0 99.21-51.783 99.21-107.435zm-278.77 0c0-92.916 66.79-178.093 179.56-178.093 112.26 0 179.05 85.177 179.05 178.093 0 92.916-66.79 178.093-179.05 178.093-112.77 0-179.56-85.177-179.56-178.093zM186.32 131.97c0-31.46-21.299-58.563-54.206-58.563H78.398v117.109h53.716c32.907 0 54.206-27.086 54.206-58.546zM0 9.529h141.788c75.016 0 123.417 56.628 123.417 122.441s-48.401 122.423-123.417 122.423h-63.39v93.893H0V9.529zM492.17 106.314l-41.621 139.382h82.266L492.17 106.314zm73.081 241.972-13.054-41.134H431.69l-13.072 41.134h-83.73L455.882 9.529h72.105l122.442 338.757h-85.178zM782.055 77.277H705.61V9.529h231.793v67.748h-76.951v271.009h-78.397V77.277M2485.08 230.202V9.529h77.91v338.757h-81.78l-121.97-217.78v217.78h-78.4V9.529h81.78l122.46 220.673M1245.68 131.97c0-31.46-21.3-58.563-54.21-58.563h-53.72v117.109h53.72c32.91 0 54.21-27.086 54.21-58.546zM1059.36 9.529h142.29c75 0 123.4 56.628 123.4 122.441 0 47.425-25.17 89.517-67.28 109.369l67.77 106.947h-90.98l-60.03-93.893h-36.78v93.893h-78.39V9.529z' />\n    </g>\n  </svg>\n);\n\nPatreonLogo.displayName = 'PatreonLogo';\n\nexport default PatreonLogo;\n","import React from 'react';\nimport {\n  DonationAmount,\n  donationUrls,\n  PaymentProvider\n} from '../../../../shared/config/donation-settings';\nimport envData from '../../../config/env.json';\nimport PatreonLogo from '../../assets/images/components/patreon-logo';\nimport { PostPayment } from './types';\n\nconst { patreonClientId }: { patreonClientId: string | null } = envData as {\n  patreonClientId: string | null;\n};\n\ninterface PatreonButtonProps {\n  postPayment: (arg0: PostPayment) => void;\n  donationAmount: DonationAmount;\n}\n\nconst PatreonButton = ({\n  postPayment,\n  donationAmount\n}: PatreonButtonProps): JSX.Element | null => {\n  if (!patreonClientId || !donationAmount || !donationUrls.successUrl) {\n    return null;\n  }\n\n  const clientId = `&client_id=${patreonClientId}`;\n\n  // current Patreon pledge flow does not support custom amounts, it must be a tier\n  const pledgeLevel = `$&min_cents=${donationAmount}`;\n  const v2Params = '&scope=identity%20identity[email]';\n  const redirectUri = `&redirect_uri=${donationUrls.successUrl}`;\n  const href = `https://www.patreon.com/oauth2/become-patron?response_type=code${pledgeLevel}${clientId}${redirectUri}${v2Params}`;\n\n  return (\n    <a\n      className='patreon-button link-button'\n      data-patreon-widget-type='become-patron-button'\n      href={href}\n      onClick={() => postPayment({ paymentProvider: PaymentProvider.Patreon })}\n      rel='noreferrer'\n      target='_blank'\n    >\n      <PatreonLogo />\n    </a>\n  );\n};\n\nexport default PatreonButton;\n","/* eslint-disable camelcase */\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { scriptLoader, scriptRemover } from '../../utils/script-loaders';\n\nimport type { DonationApprovalData } from './types';\n\ntype PayPalButtonScriptLoaderProps = {\n  isMinimalForm: boolean | undefined;\n  clientId: string;\n  createOrder: (\n    data: unknown,\n    actions: {\n      order: {\n        create: (arg0: {\n          purchase_units: {\n            amount: { currency_code: string; value: string };\n          }[];\n        }) => unknown;\n      };\n    }\n  ) => unknown;\n  createSubscription: (\n    data: unknown,\n    actions: {\n      subscription: { create: (arg0: { plan_id: string | null }) => unknown };\n    }\n  ) => unknown;\n  isSubscription: boolean;\n  onApprove: (\n    data: DonationApprovalData,\n    actions?: { order: { capture: () => Promise<unknown> } }\n  ) => unknown;\n  isPaypalLoading: boolean;\n  onCancel: () => unknown;\n  onError: () => unknown;\n  onLoad: () => void;\n  style: {\n    color: string;\n    height: number;\n    tagline: boolean;\n  };\n  planId: string | null;\n};\n\ntype PayPalButtonScriptLoaderState = {\n  isSdkLoaded: boolean;\n  isSubscription: boolean;\n};\n\ndeclare global {\n  interface Window {\n    paypal: {\n      Buttons: {\n        driver: (\n          react: string,\n          { React, ReactDOM }: { React: unknown; ReactDOM: unknown }\n        ) => unknown;\n        [key: string]: unknown;\n      };\n      [key: string]: unknown;\n    };\n  }\n}\n\nexport default class PayPalButtonScriptLoader extends Component<\n  PayPalButtonScriptLoaderProps,\n  PayPalButtonScriptLoaderState\n> {\n  // Lint says that paypal does not exist on window\n  state = {\n    isSdkLoaded: window.paypal ? true : false,\n    isSubscription: true\n  };\n\n  static displayName = 'PayPalButtonScriptLoader';\n\n  static getDerivedStateFromProps(\n    props: PayPalButtonScriptLoaderProps,\n    state: PayPalButtonScriptLoaderState\n  ): { isSubscription: boolean } | null {\n    const { isSubscription } = props;\n    if (isSubscription !== state.isSubscription) {\n      return { isSubscription: isSubscription };\n    }\n    return null;\n  }\n\n  componentDidMount(): void {\n    this.loadScript(this.props.isSubscription, true);\n  }\n\n  componentWillUnmount(): void {\n    scriptRemover('paypal-sdk');\n  }\n\n  componentDidUpdate(prevProps: {\n    isSubscription: boolean;\n    style: {\n      color: string;\n      height: number;\n      tagline: boolean;\n    };\n    isMinimalForm: boolean | undefined;\n  }): void {\n    // We need to load a new script if any of the following changes.\n    if (\n      prevProps.isSubscription !== this.state.isSubscription ||\n      prevProps.style.color !== this.props.style.color ||\n      prevProps.style.tagline !== this.props.style.tagline ||\n      prevProps.style.height !== this.props.style.height ||\n      prevProps.isMinimalForm !== this.props.isMinimalForm\n    ) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ isSdkLoaded: false });\n      this.loadScript(this.state.isSubscription, true);\n    }\n  }\n\n  loadScript(subscription: boolean, deleteScript: boolean | undefined): void {\n    if (deleteScript) scriptRemover('paypal-sdk');\n    const allowCardPayment = this.props.isMinimalForm ? 'card,' : '';\n    let queries = `?client-id=${this.props.clientId}&disable-funding=${allowCardPayment}credit,bancontact,blik,eps,giropay,ideal,mybank,p24,sepa,sofort,venmo`;\n    if (subscription) queries += '&vault=true&intent=subscription';\n\n    scriptLoader(\n      'paypal-sdk',\n      true,\n      `https://www.paypal.com/sdk/js${queries}`,\n      this.onScriptLoad,\n      'paypal'\n    );\n  }\n\n  onScriptLoad = (): void => {\n    this.setState({ isSdkLoaded: true });\n    this.props.onLoad();\n  };\n\n  captureOneTimePayment(\n    data: unknown,\n    actions: { order: { capture: () => Promise<unknown> } }\n  ): unknown {\n    return actions.order.capture().then((details: unknown) => {\n      // TODO: this looks like a bug (it probably should not be passing details)\n      // but the api does not care what data it gets (yet). If we start to use\n      // that, this will need to be changed.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return this.props.onApprove(details, data);\n    });\n  }\n\n  render(): JSX.Element {\n    const {\n      isSdkLoaded,\n      isSubscription\n    }: { isSdkLoaded: boolean; isSubscription: boolean } = this.state;\n    const {\n      onApprove,\n      onError,\n      onCancel,\n      createSubscription,\n      createOrder,\n      style\n    } = this.props;\n\n    if (!isSdkLoaded) return <></>;\n\n    // TODO: fill in the full list of props instead of any\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const Button: React.ComponentType<any> = window.paypal.Buttons.driver(\n      'react',\n      {\n        React,\n        ReactDOM\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) as React.ComponentType<any>;\n\n    return (\n      <Button\n        createOrder={isSubscription ? null : createOrder}\n        createSubscription={isSubscription ? createSubscription : null}\n        onApprove={\n          isSubscription\n            ? (\n                data: DonationApprovalData,\n                actions: { order: { capture: () => Promise<unknown> } }\n              ) => onApprove(data, actions)\n            : (\n                data: {\n                  [key: string]: unknown;\n                  error: string | null;\n                },\n                actions: { order: { capture: () => Promise<unknown> } }\n              ) => this.captureOneTimePayment(data, actions)\n        }\n        onCancel={onCancel}\n        onError={onError}\n        style={style}\n      />\n    );\n  }\n}\n","import React, { Component, Ref } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport {\n  paypalConfigurator,\n  paypalConfigTypes,\n  defaultDonation,\n  PaymentProvider,\n  type DonationDuration,\n  type DonationAmount\n} from '../../../../shared/config/donation-settings';\nimport envData from '../../../config/env.json';\nimport { userSelector, signInLoadingSelector } from '../../redux/selectors';\nimport { Themes } from '../settings/theme';\nimport { DonationApprovalData, PostPayment } from './types';\nimport PayPalButtonScriptLoader from './paypal-button-script-loader';\n\ntype PaypalButtonProps = {\n  donationAmount: DonationAmount;\n  donationDuration: DonationDuration;\n  isDonating: boolean;\n  onDonationStateChange: ({\n    redirecting,\n    processing,\n    success,\n    error\n  }: {\n    redirecting: boolean;\n    processing: boolean;\n    success: boolean;\n    error: string | null;\n  }) => void;\n  isPaypalLoading: boolean;\n  t: (label: string) => string;\n  ref?: Ref<PaypalButton>;\n  theme: Themes;\n  isSubscription?: boolean;\n  handlePaymentButtonLoad: (provider: 'stripe' | 'paypal') => void;\n  isMinimalForm: boolean | undefined;\n  postPayment: (arg0: PostPayment) => void;\n};\n\ntype PaypalButtonState = {\n  amount: number;\n  duration: string;\n  planId: string | null;\n};\n\nconst {\n  paypalClientId,\n  deploymentEnv\n}: { paypalClientId: string | null; deploymentEnv: 'staging' | 'live' } =\n  envData as {\n    paypalClientId: string | null;\n    deploymentEnv: 'staging' | 'live';\n  };\n\nclass PaypalButton extends Component<PaypalButtonProps, PaypalButtonState> {\n  static displayName = 'PaypalButton';\n  state: PaypalButtonState = {\n    amount: defaultDonation.donationAmount,\n    duration: defaultDonation.donationDuration,\n    planId: null\n  };\n  constructor(props: PaypalButtonProps) {\n    super(props);\n  }\n\n  static getDerivedStateFromProps(\n    props: Readonly<PaypalButtonProps>\n  ): PaypalButtonState {\n    const { donationAmount, donationDuration } = props;\n    const configurationObj: {\n      amount: DonationAmount;\n      duration: DonationDuration;\n      planId: string | null;\n    } = paypalConfigurator(\n      donationAmount,\n      donationDuration,\n      paypalConfigTypes[deploymentEnv || 'staging']\n    );\n    // re-implement it as a deep comparison.\n    // if (state === configurationObj) {\n    //   return null;\n    // }\n    return { ...configurationObj };\n  }\n\n  render(): JSX.Element | null {\n    const { duration, planId, amount } = this.state;\n    const { t, theme, isPaypalLoading, isMinimalForm } = this.props;\n    const isSubscription = duration !== 'one-time';\n    const buttonColor = theme === Themes.Night ? 'white' : 'gold';\n    if (!paypalClientId) {\n      return null;\n    }\n\n    return (\n      <div className={'paypal-buttons-container'}>\n        <PayPalButtonScriptLoader\n          clientId={paypalClientId}\n          createOrder={(\n            data: unknown,\n            actions: {\n              order: {\n                create: (arg0: {\n                  purchase_units: {\n                    amount: { currency_code: string; value: string };\n                  }[];\n                }) => unknown;\n              };\n            }\n          ) => {\n            return actions.order.create({\n              purchase_units: [\n                {\n                  amount: {\n                    currency_code: 'USD',\n                    value: (amount / 100).toString()\n                  }\n                }\n              ]\n            });\n          }}\n          createSubscription={(\n            data: unknown,\n            actions: {\n              subscription: {\n                create: (arg0: { plan_id: string | null }) => unknown;\n              };\n            }\n          ) => {\n            return actions.subscription.create({\n              plan_id: planId\n            });\n          }}\n          isMinimalForm={isMinimalForm}\n          isPaypalLoading={isPaypalLoading}\n          isSubscription={isSubscription}\n          onApprove={(data: DonationApprovalData) => {\n            this.props.postPayment({\n              paymentProvider: PaymentProvider.Paypal,\n              data\n            });\n          }}\n          onCancel={() => {\n            this.props.onDonationStateChange({\n              redirecting: false,\n              processing: false,\n              success: false,\n              error: t('donate.failed-pay')\n            });\n          }}\n          onError={() => {\n            this.props.handlePaymentButtonLoad('paypal');\n            this.props.onDonationStateChange({\n              redirecting: false,\n              processing: false,\n              success: false,\n              error: t('donate.try-again')\n            });\n          }}\n          onLoad={() => this.props.handlePaymentButtonLoad('paypal')}\n          planId={planId}\n          style={{\n            tagline: false,\n            height: 43,\n            color: buttonColor\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createSelector(\n  userSelector,\n  signInLoadingSelector,\n  ({ isDonating }: { isDonating: boolean }, showLoading: boolean) => ({\n    isDonating,\n    showLoading\n  })\n);\n\nPaypalButton.displayName = 'PaypalButton';\n\nexport default connect(mapStateToProps)(withTranslation()(PaypalButton));\n","import {\n  CardNumberElement,\n  CardExpiryElement,\n  useStripe,\n  useElements\n} from '@stripe/react-stripe-js';\nimport type {\n  StripeCardNumberElementChangeEvent,\n  StripeCardExpiryElementChangeEvent\n} from '@stripe/stripe-js';\nimport React, { useState } from 'react';\n\nimport { PaymentProvider } from '../../../../shared/config/donation-settings';\nimport { Themes } from '../settings/theme';\nimport { DonationApprovalData, PostPayment } from './types';\n\ninterface FormPropTypes {\n  onDonationStateChange: (donationState: DonationApprovalData) => void;\n  postPayment: (arg0: PostPayment) => void;\n  t: (label: string) => string;\n  theme: Themes;\n  processing: boolean;\n}\n\ninterface Element {\n  elementType: 'cardNumber' | 'cardExpiry';\n  complete: boolean;\n  error?: null | { type: 'validation_error'; code: string; message: string };\n}\n\ntype PaymentInfoValidation = Element[];\n\nexport default function StripeCardForm({\n  theme,\n  t,\n  onDonationStateChange,\n  postPayment,\n  processing\n}: FormPropTypes): JSX.Element {\n  const [isSubmissionValid, setSubmissionValidity] = useState(true);\n  const [isTokenizing, setTokenizing] = useState(false);\n  const [paymentInfoValidation, setPaymentValidity] =\n    useState<PaymentInfoValidation>([\n      {\n        elementType: 'cardNumber',\n        complete: false,\n        error: null\n      },\n      {\n        elementType: 'cardExpiry',\n        complete: false,\n        error: null\n      }\n    ]);\n  const isPaymentInfoValid = paymentInfoValidation.every(\n    ({ complete, error }) => complete && !error\n  );\n  const isSubmitting = isTokenizing || processing;\n  const stripe = useStripe();\n  const elements = useElements();\n\n  function handleInputChange(\n    event:\n      | StripeCardNumberElementChangeEvent\n      | StripeCardExpiryElementChangeEvent\n  ) {\n    const { elementType, error, complete } = event;\n    setPaymentValidity(\n      paymentInfoValidation.map(element => {\n        if (element.elementType === elementType)\n          return { elementType, error, complete };\n        return element;\n      })\n    );\n  }\n\n  const options = {\n    style: {\n      base: {\n        fontSize: '18px',\n        color: `${theme === Themes.Night ? '#fff' : '#0a0a23'}`,\n        '::placeholder': {\n          color: `#858591`\n        }\n      }\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!isPaymentInfoValid) return setSubmissionValidity(false);\n    else setSubmissionValidity(true);\n\n    if (!isSubmitting && stripe && elements) {\n      const cardElement = elements.getElement(CardNumberElement);\n      if (cardElement) {\n        setTokenizing(true);\n        const { paymentMethod, error } = await stripe.createPaymentMethod({\n          type: 'card',\n          card: cardElement\n        });\n        if (error) {\n          onDonationStateChange({\n            redirecting: false,\n            processing: false,\n            success: false,\n            error: t('donate.went-wrong')\n          });\n        } else if (paymentMethod)\n          postPayment({\n            paymentProvider: PaymentProvider.StripeCard,\n            paymentMethodId: paymentMethod.id,\n            handleAuthentication\n          });\n      }\n    }\n    return setTokenizing(false);\n  };\n  const handleAuthentication = async (\n    clientSecret: string,\n    paymentMethod: string\n  ) => {\n    if (stripe) {\n      return stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethod\n      });\n    }\n    return { error: { type: 'StripeNotLoaded' } };\n  };\n\n  return (\n    <form\n      className='donation-form'\n      onSubmit={event => void handleSubmit(event)}\n    >\n      <div\n        className={`donation-elements${\n          !isSubmissionValid ? ' failed-submission' : ''\n        }`}\n      >\n        <CardNumberElement\n          className='form-control donate-input-element'\n          onChange={handleInputChange}\n          options={options}\n        />\n        <CardExpiryElement\n          className='form-control donate-input-element'\n          onChange={handleInputChange}\n          options={options}\n        />\n      </div>\n      <div className={'form-status'}>\n        {!isSubmissionValid && <p>{t('donate.valid-card')}</p>}\n      </div>\n      <button\n        className='confirm-donation-btn'\n        disabled={!stripe || !elements || isSubmitting}\n        data-cy='donation-confirmation-button'\n        type='submit'\n      >\n        {t('buttons.donate')}\n      </button>\n    </form>\n  );\n}\n","import {\n  PaymentRequestButtonElement,\n  ElementsConsumer\n} from '@stripe/react-stripe-js';\nimport type { Token, PaymentRequest, Stripe } from '@stripe/stripe-js';\nimport React, { useState, useEffect } from 'react';\n\nimport { Themes } from '../settings/theme';\nimport { PaymentProvider } from '../../../../shared/config/donation-settings';\nimport { DonationApprovalData, PostPayment } from './types';\n\ninterface WrapperProps {\n  label: string;\n  amount: number;\n  theme: Themes;\n  postPayment: (arg0: PostPayment) => void;\n  onDonationStateChange: (donationState: DonationApprovalData) => void;\n  refreshErrorMessage: string;\n  handlePaymentButtonLoad: (provider: 'stripe' | 'paypal') => void;\n}\ninterface WalletsButtonProps extends WrapperProps {\n  stripe: Stripe | null;\n}\n\nconst WalletsButton = ({\n  stripe,\n  label,\n  amount,\n  theme,\n  refreshErrorMessage,\n  postPayment,\n  onDonationStateChange,\n  handlePaymentButtonLoad\n}: WalletsButtonProps) => {\n  const [token, setToken] = useState<Token | null>(null);\n  const [paymentRequest, setPaymentRequest] = useState<PaymentRequest | null>(\n    null\n  );\n  const [canMakePayment, checkPaymentPossibility] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const pr = stripe.paymentRequest({\n      country: 'US',\n      currency: 'usd',\n      total: { label, amount },\n      requestPayerName: true,\n      requestPayerEmail: true,\n      disableWallets: ['browserCard']\n    });\n\n    pr.on('token', event => {\n      const { token, payerEmail, payerName } = event;\n      setToken(token);\n      event.complete('success');\n      postPayment({\n        paymentProvider: PaymentProvider.Stripe,\n        token,\n        payerEmail,\n        payerName\n      });\n    });\n\n    void pr.canMakePayment().then(canMakePaymentRes => {\n      if (canMakePaymentRes) {\n        setPaymentRequest(pr);\n        checkPaymentPossibility(true);\n      } else {\n        checkPaymentPossibility(false);\n      }\n    });\n\n    return () => {\n      setPaymentRequest(null);\n      checkPaymentPossibility(false);\n    };\n  }, [label, amount, stripe, postPayment, handlePaymentButtonLoad]);\n\n  const displayRefreshError = (): void => {\n    onDonationStateChange({\n      redirecting: false,\n      processing: false,\n      success: false,\n      error: refreshErrorMessage\n    });\n  };\n\n  return (\n    <form className='wallets-form'>\n      {canMakePayment && paymentRequest && (\n        <PaymentRequestButtonElement\n          onClick={() => {\n            if (token) {\n              displayRefreshError();\n            }\n          }}\n          onReady={() => handlePaymentButtonLoad('stripe')}\n          options={{\n            style: {\n              paymentRequestButton: {\n                type: 'default',\n                theme: theme === Themes.Night ? 'light' : 'dark',\n                height: '43px'\n              }\n            },\n            paymentRequest\n          }}\n        />\n      )}\n    </form>\n  );\n};\n\nexport default function InjectedCheckoutForm(props: WrapperProps): JSX.Element {\n  return (\n    <ElementsConsumer>\n      {({ stripe }: { stripe: Stripe | null }) => (\n        <WalletsButton stripe={stripe} {...props} />\n      )}\n    </ElementsConsumer>\n  );\n}\n","import React from 'react';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst SecurityLockIcon = (): JSX.Element => {\n  return (\n    <>\n      <FontAwesomeIcon icon={faLock} />\n      &nbsp;&nbsp;\n    </>\n  );\n};\n\nexport default SecurityLockIcon;\n","/* eslint-disable @typescript-eslint/unbound-method */\nimport type { Token } from '@stripe/stripe-js';\nimport React, { Component } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport Spinner from 'react-spinkit';\nimport { createSelector } from 'reselect';\nimport type { TFunction } from 'i18next';\n\nimport {\n  defaultDonation,\n  DonationAmount,\n  type DonationConfig\n} from '../../../../shared/config/donation-settings';\nimport { defaultDonationFormState } from '../../redux';\nimport { updateDonationFormState, postCharge } from '../../redux/actions';\nimport {\n  isSignedInSelector,\n  userSelector,\n  isDonatingSelector,\n  signInLoadingSelector,\n  donationFormStateSelector,\n  completedChallengesSelector\n} from '../../redux/selectors';\nimport Spacer from '../helpers/spacer';\nimport { Themes } from '../settings/theme';\nimport { DonateFormState } from '../../redux/types';\nimport type { CompletedChallenge } from '../../redux/prop-types';\nimport { CENTS_IN_DOLLAR, formattedAmountLabel } from './utils';\nimport DonateCompletion from './donate-completion';\nimport PatreonButton from './patreon-button';\nimport PaypalButton from './paypal-button';\nimport StripeCardForm from './stripe-card-form';\nimport WalletsWrapper from './wallets-button';\nimport SecurityLockIcon from './security-lock-icon';\nimport {\n  PaymentProvider,\n  PaymentContext,\n  PostPayment,\n  HandleAuthentication,\n  DonationApprovalData\n} from './types';\n\nimport './donation.css';\n\ntype DonateFormComponentState = DonationConfig;\n\ntype PostCharge = (data: {\n  paymentProvider: PaymentProvider;\n  paymentContext: PaymentContext;\n  amount: number;\n  duration: string;\n  data?: DonationApprovalData;\n  token?: Token;\n  email?: string;\n  name?: string | undefined;\n  paymentMethodId?: string;\n  handleAuthentication?: HandleAuthentication;\n}) => void;\n\ntype DonateFormProps = {\n  postCharge: PostCharge;\n  defaultTheme?: Themes;\n  email: string;\n  handleProcessing?: () => void;\n  editAmount?: () => void;\n  selectedDonationAmount?: DonationAmount;\n  donationFormState: DonateFormState;\n  isMinimalForm?: boolean;\n  isSignedIn: boolean;\n  isDonating: boolean;\n  showLoading: boolean;\n  t: TFunction;\n  theme: Themes;\n  updateDonationFormState: (state: DonationApprovalData) => unknown;\n  paymentContext: PaymentContext;\n  completedChallenges: CompletedChallenge[];\n};\n\nconst mapStateToProps = createSelector(\n  signInLoadingSelector,\n  isSignedInSelector,\n  isDonatingSelector,\n  donationFormStateSelector,\n  userSelector,\n  completedChallengesSelector,\n  (\n    showLoading: DonateFormProps['showLoading'],\n    isSignedIn: DonateFormProps['isSignedIn'],\n    isDonating: DonateFormProps['isDonating'],\n    donationFormState: DonateFormState,\n    { email, theme }: { email: string; theme: Themes },\n    completedChallenges: CompletedChallenge[]\n  ) => ({\n    isSignedIn,\n    isDonating,\n    showLoading,\n    donationFormState,\n    email,\n    theme,\n    completedChallenges\n  })\n);\n\nconst mapDispatchToProps = {\n  postCharge,\n  updateDonationFormState\n};\n\nconst PaymentButtonsLoader = () => {\n  return (\n    <div className=' donation-completion donation-completion-loading'>\n      <Spinner\n        className='script-loading-spinner'\n        fadeIn='none'\n        name='line-scale'\n      />\n    </div>\n  );\n};\n\nclass DonateForm extends Component<DonateFormProps, DonateFormComponentState> {\n  static displayName = 'DonateForm';\n  constructor(props: DonateFormProps) {\n    super(props);\n\n    const initialAmountAndDuration: DonationConfig = defaultDonation;\n\n    this.state = { ...initialAmountAndDuration };\n\n    this.onDonationStateChange = this.onDonationStateChange.bind(this);\n    this.resetDonation = this.resetDonation.bind(this);\n    this.postPayment = this.postPayment.bind(this);\n    this.handlePaymentButtonLoad = this.handlePaymentButtonLoad.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.resetDonation();\n  }\n\n  onDonationStateChange(donationState: DonationApprovalData) {\n    // scroll to top\n    window.scrollTo(0, 0);\n    this.props.updateDonationFormState({\n      ...this.props.donationFormState,\n      ...donationState\n    });\n  }\n\n  handlePaymentButtonLoad(provider: 'stripe' | 'paypal') {\n    this.props.updateDonationFormState({\n      ...this.props.donationFormState,\n      loading: {\n        ...this.props.donationFormState.loading,\n        [provider]: false\n      }\n    });\n  }\n\n  postPayment = ({\n    paymentProvider,\n    data,\n    payerEmail,\n    payerName,\n    token,\n    paymentMethodId,\n    handleAuthentication\n  }: PostPayment): void => {\n    const { donationAmount, donationDuration: duration } = this.state;\n    const { paymentContext, email, selectedDonationAmount } = this.props;\n    const amount = selectedDonationAmount || donationAmount;\n\n    this.props.postCharge({\n      paymentProvider,\n      paymentContext,\n      amount,\n      duration,\n      data,\n      token,\n      email: email || payerEmail,\n      name: payerName,\n      paymentMethodId,\n      handleAuthentication\n    });\n    if (this.props.handleProcessing) this.props.handleProcessing();\n  };\n\n  resetDonation() {\n    return this.props.updateDonationFormState({ ...defaultDonationFormState });\n  }\n\n  renderButtonGroup() {\n    const { donationAmount: defaultAmount, donationDuration } = this.state;\n    const {\n      donationFormState: { loading, processing },\n      defaultTheme,\n      theme,\n      t,\n      isMinimalForm,\n      isSignedIn,\n      isDonating,\n      editAmount,\n      selectedDonationAmount,\n      completedChallenges\n    } = this.props;\n    const donationAmount: DonationAmount =\n      selectedDonationAmount || defaultAmount;\n    const priorityTheme = defaultTheme ? defaultTheme : theme;\n    const walletlabel = `${t('donate.wallet-label-1', {\n      usd: donationAmount / CENTS_IN_DOLLAR\n    })}:`;\n\n    const threeChallengesCompleted = completedChallenges.length >= 3;\n\n    const showMinimalPayments =\n      isSignedIn && (isMinimalForm || !isDonating) && threeChallengesCompleted;\n\n    const confirmationWithEditAmount = (\n      <>\n        <b>\n          {t('donate.confirm-multitier', {\n            usd: formattedAmountLabel(donationAmount)\n          })}\n        </b>\n\n        <button\n          type='button'\n          className='edit-amount-button'\n          onClick={editAmount}\n        >\n          {t('donate.edit-amount')}\n        </button>\n      </>\n    );\n\n    const confirmationClass = () => {\n      if (editAmount) return 'edit-amount-confirmation';\n      if (isMinimalForm) return 'donation-label-modal';\n      return '';\n    };\n    return (\n      <>\n        <div className={confirmationClass()}>{confirmationWithEditAmount}</div>\n        <Spacer size={editAmount ? 'small' : 'medium'} />\n        <fieldset\n          data-playwright-test-label='donation-form'\n          className={'donate-btn-group security-legend'}\n        >\n          <legend>\n            <SecurityLockIcon />\n            {t('donate.secure-donation')}\n          </legend>\n\n          {loading.stripe && loading.paypal && <PaymentButtonsLoader />}\n          <WalletsWrapper\n            amount={donationAmount}\n            handlePaymentButtonLoad={this.handlePaymentButtonLoad}\n            label={walletlabel}\n            onDonationStateChange={this.onDonationStateChange}\n            postPayment={this.postPayment}\n            refreshErrorMessage={t('donate.refresh-needed')}\n            theme={priorityTheme}\n          />\n          <PaypalButton\n            donationAmount={donationAmount}\n            donationDuration={donationDuration}\n            handlePaymentButtonLoad={this.handlePaymentButtonLoad}\n            postPayment={this.postPayment}\n            isMinimalForm={showMinimalPayments}\n            isPaypalLoading={loading.paypal}\n            onDonationStateChange={this.onDonationStateChange}\n            theme={priorityTheme}\n          />\n          {(!loading.stripe || !loading.paypal) && (\n            <PatreonButton\n              postPayment={this.postPayment}\n              donationAmount={donationAmount}\n            />\n          )}\n          {showMinimalPayments && (\n            <>\n              <div className='separator'>{t('donate.or-card')}</div>\n              <StripeCardForm\n                onDonationStateChange={this.onDonationStateChange}\n                postPayment={this.postPayment}\n                processing={processing}\n                t={t}\n                theme={priorityTheme}\n              />\n            </>\n          )}\n        </fieldset>\n      </>\n    );\n  }\n\n  renderPageForm() {\n    return (\n      <>\n        <div>{this.renderButtonGroup()}</div>\n      </>\n    );\n  }\n\n  render() {\n    const {\n      donationFormState: { processing, success, error, redirecting },\n      isMinimalForm,\n      isSignedIn\n    } = this.props;\n\n    if (success || error) {\n      return (\n        <DonateCompletion\n          processing={processing}\n          redirecting={redirecting}\n          success={success}\n          error={error}\n          isSignedIn={isSignedIn}\n          reset={this.resetDonation}\n        />\n      );\n    }\n\n    // keep payment provider elements on DOM during processing and redirect to avoid errors.\n    return (\n      <>\n        {(processing || redirecting) && (\n          <DonateCompletion\n            processing={processing}\n            redirecting={redirecting}\n            success={success}\n            error={error}\n            isSignedIn={isSignedIn}\n            reset={this.resetDonation}\n          />\n        )}\n        <div className={processing || redirecting ? 'hide' : ''}>\n          {isMinimalForm ? this.renderButtonGroup() : this.renderPageForm()}\n        </div>\n      </>\n    );\n  }\n}\n\nDonateForm.displayName = 'DonateForm';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(DonateForm));\n","import React, { useState, useEffect } from 'react';\nimport {\n  Tabs,\n  TabsContent,\n  TabsTrigger,\n  TabsList,\n  Col,\n  Row\n} from '@freecodecamp/ui';\nimport { useFeature } from '@growthbook/growthbook-react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '../helpers';\n\nimport {\n  PaymentContext,\n  subscriptionAmounts,\n  defaultTierAmount,\n  type DonationAmount\n} from '../../../../shared/config/donation-settings'; // You can further extract these into separate components and import them\nimport { Themes } from '../settings/theme';\nimport { formattedAmountLabel, convertToTimeContributed } from './utils';\nimport DonateForm from './donate-form';\n\ntype MultiTierDonationFormProps = {\n  setShowHeaderAndFooter?: (show: boolean) => void;\n  handleProcessing?: () => void;\n  paymentContext: PaymentContext;\n  isMinimalForm?: boolean;\n  defaultTheme?: Themes;\n  isAnimationEnabled?: boolean;\n};\nfunction SelectionTabs({\n  donationAmount,\n  setDonationAmount,\n  setShowDonateForm,\n  isAnimationEnabled\n}: {\n  donationAmount: DonationAmount;\n  setDonationAmount: React.Dispatch<React.SetStateAction<DonationAmount>>;\n  setShowDonateForm: React.Dispatch<React.SetStateAction<boolean>>;\n  isAnimationEnabled?: boolean;\n}) {\n  const { t } = useTranslation();\n  const switchTab = (value: string): void => {\n    setDonationAmount(Number(value) as DonationAmount);\n  };\n  useFeature('aa-test-in-component');\n\n  return (\n    <Row\n      className={'donate-btn-group donation-tier-selection'}\n      data-playwright-test-label='donation-tier-selector'\n    >\n      <Col xs={12}>\n        <b>\n          {t('donate.confirm-monthly', {\n            usd: formattedAmountLabel(donationAmount)\n          })}\n        </b>\n        <Spacer size='small' />\n        <Tabs\n          className={'donate-btn-group'}\n          defaultValue={donationAmount.toString()}\n          onValueChange={switchTab}\n        >\n          <TabsList className='nav-lists'>\n            {subscriptionAmounts.map(value => (\n              <TabsTrigger\n                key={value}\n                value={value.toString()}\n                onClick={() => setDonationAmount(value)}\n              >\n                ${formattedAmountLabel(value)}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n          <Spacer size='small' />\n          {subscriptionAmounts.map(value => {\n            const usd = formattedAmountLabel(donationAmount);\n            const hours = convertToTimeContributed(donationAmount);\n            const donationDescription = t('donate.your-donation-2', {\n              usd,\n              hours\n            });\n\n            return (\n              <TabsContent\n                key={value}\n                className='tab-content'\n                value={value.toString()}\n              >\n                <p>{donationDescription}</p>\n              </TabsContent>\n            );\n          })}\n        </Tabs>\n        <button\n          className='text-center confirm-donation-btn donate-btn-group'\n          type='submit'\n          data-cy='donation-tier-selection-button'\n          onClick={() => setShowDonateForm(true)}\n        >\n          {isAnimationEnabled\n            ? t('buttons.confirm-amount')\n            : t('buttons.donate')}\n        </button>\n        <Spacer size='medium' />\n      </Col>\n    </Row>\n  );\n}\n\nfunction DonationFormRow({\n  handleProcessing,\n  isMinimalForm,\n  setShowDonateForm,\n  donationAmount,\n  paymentContext\n}: {\n  handleProcessing?: () => void;\n  isMinimalForm?: boolean;\n  setShowDonateForm: React.Dispatch<React.SetStateAction<boolean>>;\n  donationAmount: DonationAmount;\n  paymentContext: PaymentContext;\n}) {\n  return (\n    <Row>\n      <Col xs={12}>\n        <DonateForm\n          handleProcessing={handleProcessing}\n          isMinimalForm={isMinimalForm}\n          paymentContext={paymentContext}\n          editAmount={() => setShowDonateForm(false)}\n          selectedDonationAmount={donationAmount}\n        />\n        <Spacer size='medium' />\n      </Col>\n    </Row>\n  );\n}\n\nconst MultiTierDonationForm: React.FC<MultiTierDonationFormProps> = ({\n  handleProcessing,\n  setShowHeaderAndFooter,\n  isMinimalForm,\n  paymentContext,\n  isAnimationEnabled\n}) => {\n  const [donationAmount, setDonationAmount] = useState(defaultTierAmount);\n\n  const [showDonateForm, setShowDonateForm] = useState(false);\n\n  useEffect(() => {\n    if (setShowHeaderAndFooter) setShowHeaderAndFooter(!showDonateForm);\n  }, [showDonateForm, setShowHeaderAndFooter]);\n\n  return (\n    <>\n      <div {...(showDonateForm && { className: 'hide' })}>\n        <SelectionTabs\n          donationAmount={donationAmount}\n          setDonationAmount={setDonationAmount}\n          setShowDonateForm={setShowDonateForm}\n          isAnimationEnabled={isAnimationEnabled}\n        />\n      </div>\n      <div {...(!showDonateForm && { className: 'hide' })}>\n        <DonationFormRow\n          donationAmount={donationAmount}\n          handleProcessing={handleProcessing}\n          setShowDonateForm={setShowDonateForm}\n          isMinimalForm={isMinimalForm}\n          paymentContext={paymentContext}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default MultiTierDonationForm;\n","export function scriptLoader(\n  id: string,\n  async: boolean,\n  src: string,\n  onload: (() => void) | null,\n  text: string\n): void {\n  const s = document.createElement('script');\n  s.type = 'text/javascript';\n  s.id = id;\n  s.async = async;\n  s.onload = onload;\n  s.src = src;\n  s.text = text;\n  document.getElementsByTagName('head')[0].appendChild(s);\n}\n\nexport function scriptRemover(id: string): void {\n  const script = document.getElementById(id);\n  if (script) {\n    script.remove();\n  }\n}\n"],"names":["numToCommas","num","Intl","NumberFormat","format","formattedAmountLabel","amount","DonateCompletion","_ref","processing","reset","success","redirecting","isSignedIn","error","t","useTranslation","style","heading","React","Alert","variant","className","Spacer","size","Spinner","color","fadeIn","name","Link","key","sameTab","to","type","onClick","displayName","PatreonLogo","props","Object","assign","id","viewBox","xmlns","xmlnsXlink","role","d","patreonClientId","envData","postPayment","donationAmount","donationUrls","successUrl","href","paymentProvider","PaymentProvider","Patreon","rel","target","PayPalButtonScriptLoader","Component","constructor","arguments","state","isSdkLoaded","window","paypal","isSubscription","onScriptLoad","this","setState","onLoad","getDerivedStateFromProps","componentDidMount","loadScript","componentWillUnmount","scriptRemover","componentDidUpdate","prevProps","tagline","height","isMinimalForm","subscription","deleteScript","allowCardPayment","queries","clientId","scriptLoader","captureOneTimePayment","data","actions","order","capture","then","details","onApprove","render","onError","onCancel","createSubscription","createOrder","Button","Buttons","driver","ReactDOM","paypalClientId","deploymentEnv","PaypalButton","super","defaultDonation","duration","donationDuration","planId","paypalConfigurator","paypalConfigTypes","theme","isPaypalLoading","buttonColor","Themes","Night","create","purchase_units","currency_code","value","toString","plan_id","Paypal","onDonationStateChange","handlePaymentButtonLoad","mapStateToProps","createSelector","userSelector","signInLoadingSelector","showLoading","isDonating","connect","withTranslation","StripeCardForm","isSubmissionValid","setSubmissionValidity","useState","isTokenizing","setTokenizing","paymentInfoValidation","setPaymentValidity","elementType","complete","isPaymentInfoValid","every","_ref2","isSubmitting","stripe","useStripe","elements","useElements","handleInputChange","event","map","element","options","base","fontSize","handleAuthentication","async","clientSecret","paymentMethod","confirmCardPayment","payment_method","onSubmit","e","preventDefault","cardElement","getElement","CardNumberElement","createPaymentMethod","card","StripeCard","paymentMethodId","handleSubmit","onChange","CardExpiryElement","disabled","WalletsButton","label","refreshErrorMessage","token","setToken","paymentRequest","setPaymentRequest","canMakePayment","checkPaymentPossibility","useEffect","pr","country","currency","total","requestPayerName","requestPayerEmail","disableWallets","on","payerEmail","payerName","Stripe","canMakePaymentRes","PaymentRequestButtonElement","onReady","paymentRequestButton","InjectedCheckoutForm","ElementsConsumer","SecurityLockIcon","FontAwesomeIcon","icon","faLock","isSignedInSelector","isDonatingSelector","donationFormStateSelector","completedChallengesSelector","donationFormState","completedChallenges","email","mapDispatchToProps","postCharge","updateDonationFormState","PaymentButtonsLoader","DonateForm","paymentContext","selectedDonationAmount","handleProcessing","initialAmountAndDuration","bind","resetDonation","donationState","scrollTo","provider","loading","defaultDonationFormState","renderButtonGroup","defaultAmount","defaultTheme","editAmount","priorityTheme","walletlabel","usd","threeChallengesCompleted","length","showMinimalPayments","confirmationWithEditAmount","WalletsWrapper","PatreonButton","renderPageForm","SelectionTabs","setDonationAmount","setShowDonateForm","isAnimationEnabled","useFeature","Row","Col","xs","Tabs","defaultValue","onValueChange","Number","TabsList","subscriptionAmounts","TabsTrigger","hours","donationDescription","TabsContent","DonationFormRow","_ref3","setShowHeaderAndFooter","defaultTierAmount","showDonateForm","src","onload","text","s","document","createElement","getElementsByTagName","appendChild","script","getElementById","remove"],"sourceRoot":""}
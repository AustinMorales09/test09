{"version":3,"file":"component---src-pages-update-email-tsx-d9d432b2846273cb7c09.js","mappings":"qNA2BA,MAHA,SAAkBA,GAChB,MAAuB,iBAATA,KAAsB,EAAAC,EAAA,GAAQD,KAAU,EAAAE,EAAA,GAAaF,IApBrD,oBAoB+D,OAAWA,EAC1F,E,4JCOA,MAAMG,GAAkBC,EAAAA,EAAAA,IACtBC,EAAAA,IACAC,IAAA,IAAC,MAAEC,EAAK,cAAEC,GAA0DF,EAAA,MAAM,CACxEG,YAAaF,GAASC,EACvB,IAMH,SAASE,EAAWC,GAAsD,IAArD,WAAEF,EAAU,EAAEG,EAAC,cAAEC,GAAiCF,EACrE,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,IAgB7C,SAASC,IACP,OAAIC,EAAAA,GAAaC,KAAKL,GACbM,IAAQN,GAAc,UAAY,QAEpC,IACT,CAEA,OACEO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,aAAQT,EAAE,uBAAuB,wBAEnCS,EAAAA,cAACE,EAAAA,GAAS,KACRF,EAAAA,cAACG,EAAAA,GAAM,CAACC,KAAK,WACbJ,EAAAA,cAAA,MACEK,UAAU,cACV,6BAA2B,wBAE1Bd,EAAE,wBAELS,EAAAA,cAACM,EAAAA,GAAG,KACFN,EAAAA,cAACO,EAAAA,GAAG,CAACC,GAAI,EAAGC,SAAU,GACpBT,EAAAA,cAACM,EAAAA,GAAG,KACFN,EAAAA,cAAA,QACEU,SAtCd,SAAsBC,GACpBA,EAAMC,iBACNpB,EAAcC,EAChB,EAoCc,6BAA2B,qBAE3BO,EAAAA,cAACa,EAAAA,GAAS,CACRR,UAAU,qBACVS,gBAAiBlB,KAEjBI,EAAAA,cAACe,EAAAA,GAAY,CAACC,QAAQ,cACnBzB,EAAE,eAELS,EAAAA,cAACiB,EAAAA,GAAW,CACVC,GAAG,aACHC,SA7ClB,SAAkBR,GAChB,MAAMS,EAAgBT,EAAMU,OAAO1C,MACnC,OAAK2C,EAASF,IAGd1B,EAAc0B,GACP,MAHE,IAIX,EAuCkBG,YAAY,wBACZC,UAAU,EACVC,KAAK,WAGTzB,EAAAA,cAAC0B,EAAAA,GAAM,CACLC,OAAO,EACPvB,KAAK,QACLwB,QAAQ,UACRC,SAAwC,YAA9BjC,IACV6B,KAAK,UAGDlC,EADHH,EACK,uBACA,0BAGVY,EAAAA,cAAA,KAAGK,UAAU,eACXL,EAAAA,cAAC8B,EAAAA,KAAI,CAACC,GAAG,YAAYxC,EAAE,0BAQvC,CAEAF,EAAY2C,YAAc,eAE1B,OAAeC,EAAAA,EAAAA,IACbnD,GAxF0BoD,IAC1BC,EAAAA,EAAAA,IAAmB,CAAE3C,cAAc,MAAG0C,IAsFxC,EAGEE,EAAAA,EAAAA,KAAAA,CAAkB/C,G","sources":["webpack://@freecodecamp/client/../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isString.js","webpack://@freecodecamp/client/./src/pages/update-email.tsx"],"sourcesContent":["import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;\n}\nexport default isString;","import { Link } from 'gatsby';\nimport { isString } from 'lodash-es';\nimport React, { useState, type FormEvent, type ChangeEvent } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport isEmail from 'validator/lib/isEmail';\nimport {\n  Container,\n  FormGroup,\n  FormControl,\n  ControlLabel,\n  Col,\n  Row,\n  Button\n} from '@freecodecamp/ui';\n\nimport { Spacer } from '../components/helpers';\nimport './update-email.css';\nimport { userSelector } from '../redux/selectors';\nimport { updateMyEmail } from '../redux/settings/actions';\nimport { maybeEmailRE } from '../utils';\n\ninterface UpdateEmailProps {\n  isNewEmail: boolean;\n  t: TFunction;\n  updateMyEmail: (e: string) => void;\n}\n\nconst mapStateToProps = createSelector(\n  userSelector,\n  ({ email, emailVerified }: { email: string; emailVerified: boolean }) => ({\n    isNewEmail: !email || emailVerified\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ updateMyEmail }, dispatch);\n\nfunction UpdateEmail({ isNewEmail, t, updateMyEmail }: UpdateEmailProps) {\n  const [emailValue, setEmailValue] = useState('');\n\n  function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n    updateMyEmail(emailValue);\n  }\n\n  function onChange(event: ChangeEvent<HTMLInputElement>) {\n    const newEmailValue = event.target.value;\n    if (!isString(newEmailValue)) {\n      return null;\n    }\n    setEmailValue(newEmailValue);\n    return null;\n  }\n\n  function getEmailValidationState() {\n    if (maybeEmailRE.test(emailValue)) {\n      return isEmail(emailValue) ? 'success' : 'error';\n    }\n    return null;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('misc.update-email-1')} | freeCodeCamp.org</title>\n      </Helmet>\n      <Container>\n        <Spacer size='medium' />\n        <h2\n          className='text-center'\n          data-playwright-test-label='update-email-heading'\n        >\n          {t('misc.update-email-2')}\n        </h2>\n        <Row>\n          <Col sm={6} smOffset={3}>\n            <Row>\n              <form\n                onSubmit={handleSubmit}\n                data-playwright-test-label='update-email-form'\n              >\n                <FormGroup\n                  className='update-email-field'\n                  validationState={getEmailValidationState()}\n                >\n                  <ControlLabel htmlFor='emailInput'>\n                    {t('misc.email')}\n                  </ControlLabel>\n                  <FormControl\n                    id='emailInput'\n                    onChange={onChange}\n                    placeholder='camperbot@example.com'\n                    required={true}\n                    type='email'\n                  />\n                </FormGroup>\n                <Button\n                  block={true}\n                  size='large'\n                  variant='primary'\n                  disabled={getEmailValidationState() !== 'success'}\n                  type='submit'\n                >\n                  {isNewEmail\n                    ? t('buttons.update-email')\n                    : t('buttons.verify-email')}\n                </Button>\n              </form>\n              <p className='text-center'>\n                <Link to='/signout'>{t('buttons.sign-out')}</Link>\n              </p>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nUpdateEmail.displayName = 'Update-Email';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(UpdateEmail));\n"],"names":["value","isArray","isObjectLike","mapStateToProps","createSelector","userSelector","_ref","email","emailVerified","isNewEmail","UpdateEmail","_ref2","t","updateMyEmail","emailValue","setEmailValue","useState","getEmailValidationState","maybeEmailRE","test","isEmail","React","Helmet","Container","Spacer","size","className","Row","Col","sm","smOffset","onSubmit","event","preventDefault","FormGroup","validationState","ControlLabel","htmlFor","FormControl","id","onChange","newEmailValue","target","_isString","placeholder","required","type","Button","block","variant","disabled","Link","to","displayName","connect","dispatch","bindActionCreators","withTranslation"],"sourceRoot":""}
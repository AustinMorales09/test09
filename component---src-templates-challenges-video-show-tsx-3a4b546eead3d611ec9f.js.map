{"version":3,"file":"component---src-templates-challenges-video-show-tsx-3a4b546eead3d611ec9f.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-description.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/video/show.tsx"],"sourcesContent":["import React from 'react';\n\nimport PrismFormatted from './prism-formatted';\nimport './challenge-description.css';\n\ntype Challenge = {\n  block?: string;\n  description?: string;\n  instructions?: string;\n  superBlock?: string;\n};\n\nfunction ChallengeDescription(challenge: Challenge): JSX.Element {\n  const sbClass = challenge.superBlock ? challenge.superBlock : '';\n  const bClass = challenge.block ? challenge.block : '';\n\n  return (\n    <div\n      className={`challenge-instructions ${sbClass} ${bClass}`}\n      data-playwright-test-label='challenge-description'\n    >\n      {challenge.description && <PrismFormatted text={challenge.description} />}\n      {challenge.instructions && (\n        <>\n          <hr />\n          <PrismFormatted text={challenge.instructions} />\n        </>\n      )}\n      <hr />\n    </div>\n  );\n}\n\nChallengeDescription.displayName = 'ChallengeDescription';\n\nexport default ChallengeDescription;\n","// Package Utilities\nimport { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport { ObserveKeys } from 'react-hotkeys';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Button } from '@freecodecamp/ui';\n\n// Local Utilities\nimport Loader from '../../../components/helpers/loader';\nimport Spacer from '../../../components/helpers/spacer';\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\nimport ChallengeDescription from '../components/challenge-description';\nimport Hotkeys from '../components/hotkeys';\nimport VideoPlayer from '../components/video-player';\nimport ChallengeTitle from '../components/challenge-title';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport PrismFormatted from '../components/prism-formatted';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\n\n// Styles\nimport '../video.css';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion'),\n      openHelpModal: () => openModal('help')\n    },\n    dispatch\n  );\n\n// Types\ninterface ShowVideoProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  description: string;\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  openCompletionModal: () => void;\n  openHelpModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\ninterface ShowVideoState {\n  subtitles: string;\n  downloadURL: string | null;\n  selectedOption: number | null;\n  answer: number;\n  showWrong: boolean;\n  videoIsLoaded: boolean;\n}\n\n// Component\nclass ShowVideo extends Component<ShowVideoProps, ShowVideoState> {\n  static displayName: string;\n  private container: React.RefObject<HTMLElement> = React.createRef();\n\n  constructor(props: ShowVideoProps) {\n    super(props);\n    this.state = {\n      subtitles: '',\n      downloadURL: null,\n      selectedOption: null,\n      answer: 1,\n      showWrong: false,\n      videoIsLoaded: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount(): void {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = this.props;\n    initTests(tests);\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n    this.container.current?.focus();\n  }\n\n  componentDidUpdate(prevProps: ShowVideoProps): void {\n    const {\n      data: {\n        challengeNode: {\n          challenge: { title: prevTitle }\n        }\n      }\n    } = prevProps;\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { title: currentTitle, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    if (prevTitle !== currentTitle) {\n      updateChallengeMeta({\n        ...challengeMeta,\n        title: currentTitle,\n        challengeType,\n        helpCategory\n      });\n      challengeMounted(challengeMeta.id);\n    }\n  }\n\n  handleSubmit(solution: number, openCompletionModal: () => void) {\n    if (solution - 1 === this.state.selectedOption) {\n      this.setState({\n        showWrong: false\n      });\n      openCompletionModal();\n    } else {\n      this.setState({\n        showWrong: true\n      });\n    }\n  }\n\n  handleOptionChange = (\n    changeEvent: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    this.setState({\n      showWrong: false,\n      selectedOption: parseInt(changeEvent.target.value, 10)\n    });\n  };\n\n  onVideoLoad = () => {\n    this.setState({\n      videoIsLoaded: true\n    });\n  };\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            title,\n            challengeType,\n            description,\n            superBlock,\n            block,\n            translationPending,\n            videoId,\n            videoLocaleIds,\n            bilibiliIds,\n            fields: { blockName },\n            question: { text, answers, solution }\n          }\n        }\n      },\n      openCompletionModal,\n      openHelpModal,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      t,\n      isChallengeCompleted\n    } = this.props;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )} - ${title}`;\n\n    const feedback =\n      this.state.selectedOption !== null\n        ? answers[this.state.selectedOption].feedback\n        : undefined;\n\n    return (\n      <Hotkeys\n        executeChallenge={() => {\n          this.handleSubmit(solution, openCompletionModal);\n        }}\n        containerRef={this.container}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet\n            title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n          />\n          <Container>\n            <Row>\n              <Spacer size='medium' />\n              <ChallengeTitle\n                isCompleted={isChallengeCompleted}\n                translationPending={translationPending}\n              >\n                {title}\n              </ChallengeTitle>\n\n              {challengeType === challengeTypes.video && (\n                <Col lg={10} lgOffset={1} md={10} mdOffset={1}>\n                  <div className='video-wrapper'>\n                    {!this.state.videoIsLoaded ? (\n                      <div className='video-placeholder-loader'>\n                        <Loader />\n                      </div>\n                    ) : null}\n                    <VideoPlayer\n                      bilibiliIds={bilibiliIds}\n                      onVideoLoad={this.onVideoLoad}\n                      title={title}\n                      videoId={videoId}\n                      videoIsLoaded={this.state.videoIsLoaded}\n                      videoLocaleIds={videoLocaleIds}\n                    />\n                  </div>\n                </Col>\n              )}\n\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <ChallengeDescription description={description} />\n                <PrismFormatted className={'line-numbers'} text={text} />\n                <Spacer size='medium' />\n                <ObserveKeys>\n                  <div className='video-quiz-options'>\n                    {answers.map(({ answer }, index) => (\n                      // answers are static and have no natural id property, so\n                      // index should be fine as a key:\n                      <label\n                        className='video-quiz-option-label'\n                        key={index}\n                        htmlFor={`mc-question-${index}`}\n                      >\n                        <input\n                          checked={this.state.selectedOption === index}\n                          className='sr-only'\n                          name='quiz'\n                          onChange={this.handleOptionChange}\n                          type='radio'\n                          value={index}\n                          id={`mc-question-${index}`}\n                        />{' '}\n                        <span className='video-quiz-input-visible'>\n                          {this.state.selectedOption === index ? (\n                            <span className='video-quiz-selected-input' />\n                          ) : null}\n                        </span>\n                        <PrismFormatted\n                          className={'video-quiz-option'}\n                          text={answer.replace(/^<p>|<\\/p>$/g, '')}\n                          useSpan\n                          noAria\n                        />\n                      </label>\n                    ))}\n                  </div>\n                </ObserveKeys>\n                <Spacer size='medium' />\n                <div\n                  style={{\n                    textAlign: 'center'\n                  }}\n                >\n                  {this.state.showWrong ? (\n                    <span>\n                      {feedback ? (\n                        <PrismFormatted\n                          className={'multiple-choice-feedback'}\n                          text={feedback}\n                        />\n                      ) : (\n                        t('learn.wrong-answer')\n                      )}\n                    </span>\n                  ) : (\n                    <span>{t('learn.check-answer')}</span>\n                  )}\n                </div>\n                <Spacer size='medium' />\n                <Button\n                  block={true}\n                  variant='primary'\n                  onClick={() =>\n                    this.handleSubmit(solution, openCompletionModal)\n                  }\n                >\n                  {t('buttons.check-answer')}\n                </Button>\n                <Spacer size='xxSmall' />\n                <Button block={true} variant='primary' onClick={openHelpModal}>\n                  {t('buttons.ask-for-help')}\n                </Button>\n                <Spacer size='large' />\n              </Col>\n              <CompletionModal />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Container>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nShowVideo.displayName = 'ShowVideo';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowVideo));\n\nexport const query = graphql`\n  query VideoChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        videoId\n        videoLocaleIds {\n          espanol\n          italian\n          portuguese\n        }\n        bilibiliIds {\n          aid\n          bvid\n          cid\n        }\n        title\n        description\n        challengeType\n        helpCategory\n        superBlock\n        block\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n        question {\n          text\n          answers {\n            answer\n            feedback\n          }\n          solution\n        }\n        translationPending\n      }\n    }\n  }\n`;\n"],"names":["ChallengeDescription","challenge","sbClass","superBlock","bClass","block","React","className","description","PrismFormatted","text","instructions","displayName","mapStateToProps","createSelector","isChallengeCompletedSelector","isChallengeCompleted","ShowVideo","Component","constructor","props","super","container","handleOptionChange","changeEvent","this","setState","showWrong","selectedOption","parseInt","target","value","onVideoLoad","videoIsLoaded","state","subtitles","downloadURL","answer","handleSubmit","bind","componentDidMount","_this$container$curre","challengeMounted","data","challengeNode","fields","tests","title","challengeType","helpCategory","pageContext","challengeMeta","initTests","updateChallengeMeta","id","current","focus","componentDidUpdate","prevProps","prevTitle","currentTitle","solution","openCompletionModal","render","translationPending","videoId","videoLocaleIds","bilibiliIds","blockName","question","answers","openHelpModal","nextChallengePath","prevChallengePath","t","blockNameTitle","feedback","undefined","Hotkeys","executeChallenge","containerRef","LearnLayout","Helmet","Container","Row","Spacer","size","ChallengeTitle","isCompleted","challengeTypes","video","Col","lg","lgOffset","md","mdOffset","Loader","VideoPlayer","sm","smOffset","xs","ObserveKeys","map","_ref","index","key","htmlFor","checked","name","onChange","type","replace","useSpan","noAria","style","textAlign","Button","variant","onClick","CompletionModal","HelpModal","challengeTitle","challengeBlock","connect","dispatch","bindActionCreators","updateSolutionFormValues","openModal","withTranslation"],"sourceRoot":""}
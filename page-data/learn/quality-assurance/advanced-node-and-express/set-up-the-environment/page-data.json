{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/quality-assurance/advanced-node-and-express/set-up-the-environment",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301566,"title":"Set up the Environment","description":"<section id=\"description\">\n<p>The following challenges will make use of the <code>chat.pug</code> file. So, in your <code>routes.js</code> file, add a GET route pointing to <code>/chat</code> which makes use of <code>ensureAuthenticated</code>, and renders <code>chat.pug</code>, with <code>{ user: req.user }</code> passed as an argument to the response. Now, alter your existing <code>/auth/github/callback</code> route to set the <code>req.session.user_id = req.user.id</code>, and redirect to <code>/chat</code>.</p>\n<p><code>socket.io@~2.3.0</code> has already been added as a dependency, so require/instantiate it in your server as follows with <code>http</code> (comes built-in with Nodejs):</p>\n<pre><code class=\"language-javascript\">const http = require('http').createServer(app);\nconst io = require('socket.io')(http);\n</code></pre>\n<p>Now that the <em>http</em> server is mounted on the <em>express app</em>, you need to listen from the <em>http</em> server. Change the line with <code>app.listen</code> to <code>http.listen</code>.</p>\n<p>The first thing needing to be handled is listening for a new connection from the client. The <dfn>on</dfn> keyword does just that- listen for a specific event. It requires 2 arguments: a string containing the title of the event that's emitted, and a function with which the data is passed through. In the case of our connection listener, use <code>socket</code> to define the data in the second argument. A socket is an individual client who is connected.</p>\n<p>To listen for connections to your server, add the following within your database connection:</p>\n<pre><code class=\"language-javascript\">io.on('connection', socket => {\n  console.log('A user has connected');\n});\n</code></pre>\n<p>Now for the client to connect, you just need to add the following to your <code>client.js</code> which is loaded by the page after you've authenticated:</p>\n<pre><code class=\"language-js\">/*global io*/\nlet socket = io();\n</code></pre>\n<p>The comment suppresses the error you would normally see since 'io' is not defined in the file. You have already added a reliable CDN to the Socket.IO library on the page in <code>chat.pug</code>.</p>\n<p>Now try loading up your app and authenticate and you should see in your server console <code>A user has connected</code>.</p>\n<p><strong>Note:</strong><code>io()</code> works only when connecting to a socket hosted on the same url/server. For connecting to an external socket hosted elsewhere, you would use <code>io.connect('URL');</code>.</p>\n<p>Submit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#set-up-the-environment-6\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.</p>\n</section>","instructions":null,"challengeType":2,"helpCategory":"JavaScript","superBlock":"quality-assurance","block":"advanced-node-and-express","translationPending":false,"fields":{"blockName":"advanced-node-and-express","slug":"/learn/quality-assurance/advanced-node-and-express/set-up-the-environment","tests":[{"text":"<p><code>socket.io</code> should be a dependency.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/package.json\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'socket.io',\n    'Your project should list \"socket.io\" as a dependency'\n  );\n}"},{"text":"<p>You should correctly require and instantiate <code>http</code> as <code>http</code>.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /http.*=.*require.*('|\")http\\1/s,\n    'Your project should list \"http\" as a dependency'\n  );\n}"},{"text":"<p>You should correctly require and instantiate <code>socket.io</code> as <code>io</code>.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /io.*=.*require.*('|\")socket.io\\1.*http/s,\n    'You should correctly require and instantiate socket.io as io.'\n  );\n}"},{"text":"<p>Socket.IO should be listening for connections.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /io.on.*('|\")connection\\1.*socket/s,\n    'io should listen for \"connection\" and socket should be the 2nd arguments variable'\n  );\n}"},{"text":"<p>Your client should connect to your server.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/public/client.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /socket.*=.*io/s,\n    'Your client should be connection to server with the connection defined as socket'\n  );\n}"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/quality-assurance/#advanced-node-and-express","dashedName":"set-up-the-environment","certification":"quality-assurance","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"quality-assurance","block":"advanced-node-and-express","isFirstStep":false,"template":null,"required":[],"nextBlock":"advanced-node-and-express","nextChallengePath":"/learn/quality-assurance/advanced-node-and-express/communicate-by-emitting","prevChallengePath":"/learn/quality-assurance/advanced-node-and-express/implementation-of-social-authentication-iii","id":"589fc830f9fc0f352b528e74"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":2,"challengeFiles":[]}},"slug":"/learn/quality-assurance/advanced-node-and-express/set-up-the-environment"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
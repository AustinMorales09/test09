{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/quality-assurance/advanced-node-and-express/serialization-of-a-user-object",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301563,"title":"Serialization of a User Object","description":"<section id=\"description\">\n<p>Serialization and deserialization are important concepts in regard to authentication. To serialize an object means to convert its contents into a small <em>key</em> that can then be deserialized into the original object. This is what allows us to know who has communicated with the server without having to send the authentication data, like the username and password, at each request for a new page.</p>\n<p>To set this up properly, you need to have a serialize function and a deserialize function. In Passport, these can be created with:</p>\n<pre><code class=\"language-javascript\">passport.serializeUser(cb);\npassport.deserializeUser(cb);\n</code></pre>\n<p>The callback function passed to <code>serializeUser</code> is called with two arguments: the full user object, and a callback used by passport.</p>\n<p>The callback expects two arguments: An error, if any, and a unique key to identify the user that should be returned in the callback. You will use the user's <code>_id</code> in the object. This is guaranteed to be unique, as it is generated by MongoDB.</p>\n<p>Similarly, <code>deserializeUser</code> is called with two arguments: the unique key, and a callback function.</p>\n<p>This callback expects two arguments: An error, if any, and the full user object. To get the full user object, make a query search for a Mongo <code>_id</code>, as shown below:</p>\n<pre><code class=\"language-javascript\">passport.serializeUser((user, done) => {\n  done(null, user._id);\n});\n\npassport.deserializeUser((id, done) => {\n  myDataBase.findOne({ _id: new ObjectID(id) }, (err, doc) => {\n    done(null, null);\n  });\n});\n</code></pre>\n<p>Add the two functions above to your server. The <code>ObjectID</code> class comes from the <code>mongodb</code> package. <code>mongodb@~3.6.0</code> has already been added as a dependency. Declare this class with:</p>\n<pre><code class=\"language-javascript\">const { ObjectID } = require('mongodb');\n</code></pre>\n<p>The <code>deserializeUser</code> will throw an error until you set up the database connection. So, for now, comment out the <code>myDatabase.findOne</code> call, and just call <code>done(null, null)</code> in the <code>deserializeUser</code> callback function.</p>\n<p>Submit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#serialization-of-a-user-object-4\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.</p>\n</section>","instructions":null,"challengeType":2,"helpCategory":"JavaScript","superBlock":"quality-assurance","block":"advanced-node-and-express","translationPending":false,"fields":{"blockName":"advanced-node-and-express","slug":"/learn/quality-assurance/advanced-node-and-express/serialization-of-a-user-object","tests":[{"text":"<p>You should serialize the user object correctly.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /passport.serializeUser/gi,\n    'You should have created your passport.serializeUser function'\n  );\n  assert.match(\n    data,\n    /null,\\s*user._id/gi,\n    'There should be a callback in your serializeUser with (null, user._id)'\n  );\n}"},{"text":"<p>You should deserialize the user object correctly.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /passport.deserializeUser/gi,\n    'You should have created your passport.deserializeUser function'\n  );\n  assert.match(\n    data,\n    /null,\\s*null/gi,\n    'There should be a callback in your deserializeUser with (null, null) for now'\n  );\n}"},{"text":"<p>MongoDB should be a dependency.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/package.json\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const packJson = await res.json();\n  assert.property(\n    packJson.dependencies,\n    'mongodb',\n    'Your project should list \"mongodb\" as a dependency'\n  );\n}"},{"text":"<p>Mongodb should be properly required including the ObjectId.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')mongodb\\1/gi,\n    'You should have required mongodb'\n  );\n  assert.match(\n    data,\n    /new ObjectID.*id/gi,\n    'Even though the block is commented out, you should use new ObjectID(id) for when we add the database'\n  );\n}"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/quality-assurance/#advanced-node-and-express","dashedName":"serialization-of-a-user-object","certification":"quality-assurance","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"quality-assurance","block":"advanced-node-and-express","isFirstStep":false,"template":null,"required":[],"nextBlock":"advanced-node-and-express","nextChallengePath":"/learn/quality-assurance/advanced-node-and-express/implement-the-serialization-of-a-passport-user","prevChallengePath":"/learn/quality-assurance/advanced-node-and-express/set-up-passport","id":"5895f70cf9fc0f352b528e66"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":2,"challengeFiles":[]}},"slug":"/learn/quality-assurance/advanced-node-and-express/serialization-of-a-user-object"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/quality-assurance/advanced-node-and-express/how-to-use-passport-strategies",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301555,"title":"How to Use Passport Strategies","description":"<section id=\"description\">\n<p>In the <code>index.pug</code> file supplied, there is a login form. It is hidden because of the inline JavaScript <code>if showLogin</code> with the form indented after it.</p>\n<p>In the <code>res.render</code> for that page, add a new variable to the object, <code>showLogin: true</code>. When you refresh your page, you should then see the form! This form is set up to <strong>POST</strong> on <code>/login</code>. So, this is where you should set up to accept the POST request and authenticate the user.</p>\n<p>For this challenge, you should add the route <code>/login</code> to accept a POST request. To authenticate on this route, you need to add a middleware to do so before then sending a response. This is done by just passing another argument with the middleware before with your response. The middleware to use is <code>passport.authenticate('local')</code>.</p>\n<p><code>passport.authenticate</code> can also take some options as an argument such as <code>{ failureRedirect: '/' }</code> which is incredibly useful, so be sure to add that in as well. Add a response after using the middleware (which will only be called if the authentication middleware passes) that redirects the user to <code>/profile</code>. Add that route, as well, and make it render the view <code>profile.pug</code>.</p>\n<p>If the authentication was successful, the user object will be saved in <code>req.user</code>.</p>\n<p>At this point, if you enter a username and password in the form, it should redirect to the home page <code>/</code>, and the console of your server should display <code>'User {USERNAME} attempted to log in.'</code>, since we currently cannot login a user who isn't registered.</p>\n<p>Submit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#how-to-use-passport-strategies-7\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.</p>\n</section>","instructions":null,"challengeType":2,"helpCategory":"JavaScript","superBlock":"quality-assurance","block":"advanced-node-and-express","translationPending":false,"fields":{"blockName":"advanced-node-and-express","slug":"/learn/quality-assurance/advanced-node-and-express/how-to-use-passport-strategies","tests":[{"text":"<p>All steps should be correctly implemented in <code>server.js</code>.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /showLogin:( |)true/,\n    'You should be passing the variable \"showLogin\" as true to your render function for the homepage'\n  );\n  assert.match(\n    data,\n    /failureRedirect:( |)('|\")\\/('|\")/,\n    'Your code should include a failureRedirect to the \"/\" route'\n  );\n  assert.match(\n    data,\n    /login[^]*post[^]*local/,\n    'You should have a route for login which accepts a POST and passport.authenticates local'\n  );\n}"},{"text":"<p>A POST request to <code>/login</code> should correctly redirect to <code>/</code>.</p>","testString":"async (getUserInput) => {\n  const url = new URL(\"/login\", getUserInput(\"url\"));\n  const res = await fetch(url, { method: 'POST' });\n  const data = await res.text();\n  assert.match(\n    data,\n    /Looks like this page is being rendered from Pug into HTML!/,\n    'A login attempt at this point should redirect to the homepage since we do not have any registered users'\n  );\n}"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/quality-assurance/#advanced-node-and-express","dashedName":"how-to-use-passport-strategies","certification":"quality-assurance","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"quality-assurance","block":"advanced-node-and-express","isFirstStep":false,"template":null,"required":[],"nextBlock":"advanced-node-and-express","nextChallengePath":"/learn/quality-assurance/advanced-node-and-express/create-new-middleware","prevChallengePath":"/learn/quality-assurance/advanced-node-and-express/authentication-strategies","id":"5895f70df9fc0f352b528e69"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":2,"challengeFiles":[]}},"slug":"/learn/quality-assurance/advanced-node-and-express/how-to-use-passport-strategies"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
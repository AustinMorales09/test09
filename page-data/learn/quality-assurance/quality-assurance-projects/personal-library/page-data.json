{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/quality-assurance/quality-assurance-projects/personal-library",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301571,"title":"Personal Library","description":"<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://personal-library.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://personal-library.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-library\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-library\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>","instructions":"<section id=\"instructions\">\n<ol>\n<li>Add your MongoDB connection string to <code>.env</code> without quotes as <code>DB</code>\nExample: <code>DB=mongodb://admin:pass@1234.mlab.com:1234/fccpersonallib</code></li>\n<li>In your <code>.env</code> file set <code>NODE_ENV</code> to <code>test</code>, without quotes</li>\n<li>You need to create all routes within <code>routes/api.js</code></li>\n<li>You will create all functional tests in <code>tests/2_functional-tests.js</code></li>\n</ol>\n</section>","challengeType":4,"helpCategory":"JavaScript","superBlock":"quality-assurance","block":"quality-assurance-projects","translationPending":false,"fields":{"blockName":"quality-assurance-projects","slug":"/learn/quality-assurance/quality-assurance-projects/personal-library","tests":[{"text":"<p>You can provide your own project, not the example URL.</p>","testString":"(getUserInput) => {\n  assert(\n    !/.*\\/personal-library\\.freecodecamp\\.rocks/.test(getUserInput('url'))\n  );\n};"},{"text":"<p>You can send a <b>POST</b> request to <code>/api/books</code> with <code>title</code> as part of the form data to add a book.  The returned response will be an object with the <code>title</code> and a unique <code>_id</code> as keys.  If <code>title</code> is not included in the request, the returned response should be the string <code>missing required field title</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let data1 = await $.post(getUserInput('url') + '/api/books', {\n      title: 'Faux Book 1'\n    });\n    assert.isObject(data1);\n    assert.property(data1, 'title');\n    assert.equal(data1.title, 'Faux Book 1');\n    assert.property(data1, '_id');\n    let data2 = await $.post(getUserInput('url') + '/api/books');\n    assert.isString(data2);\n    assert.equal(data2, 'missing required field title');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <b>GET</b> request to <code>/api/books</code> and receive a JSON response representing all the books. The JSON response will be an array of objects with each object (book) containing <code>title</code>, <code>_id</code>, and <code>commentcount</code> properties.</p>","testString":"async (getUserInput) => {\n  try {\n    let url = getUserInput('url') + '/api/books';\n    let a = $.post(url, { title: 'Faux Book A' });\n    let b = $.post(url, { title: 'Faux Book B' });\n    let c = $.post(url, { title: 'Faux Book C' });\n    await Promise.all([a, b, c]).then(async () => {\n      let data = await $.get(url);\n      assert.isArray(data);\n      assert.isAtLeast(data.length, 3);\n      data.forEach((book) => {\n        assert.isObject(book);\n        assert.property(book, 'title');\n        assert.isString(book.title);\n        assert.property(book, '_id');\n        assert.property(book, 'commentcount');\n        assert.isNumber(book.commentcount);\n      });\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <b>GET</b> request to <code>/api/books/{_id}</code> to retrieve a single object of a book containing the properties <code>title</code>, <code>_id</code>, and a <code>comments</code> array (empty array if no comments present). If no book is found, return the string <code>no book exists</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let url = getUserInput('url') + '/api/books';\n    let noBook = await $.get(url + '/5f665eb46e296f6b9b6a504d');\n    assert.isString(noBook);\n    assert.equal(noBook, 'no book exists');\n    let sampleBook = await $.post(url, { title: 'Faux Book Alpha' });\n    assert.isObject(sampleBook);\n    let bookId = sampleBook._id;\n    let bookQuery = await $.get(url + '/' + bookId);\n    assert.isObject(bookQuery);\n    assert.property(bookQuery, 'title');\n    assert.equal(bookQuery.title, 'Faux Book Alpha');\n    assert.property(bookQuery, 'comments');\n    assert.isArray(bookQuery.comments);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <b>POST</b> request containing <code>comment</code> as the form body data to <code>/api/books/{_id}</code> to add a comment to a book. The returned response will be the books object similar to <b>GET</b> <code>/api/books/{_id}</code> request in an earlier test. If <code>comment</code> is not included in the request, return the string <code>missing required field comment</code>. If no book is found, return the string <code>no book exists</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let url = getUserInput('url') + '/api/books';\n    let commentTarget = await $.post(url, { title: 'Notable Book' });\n    assert.isObject(commentTarget);\n    let bookId = commentTarget._id;\n    let bookCom1 = await $.post(url + '/' + bookId, {\n      comment: 'This book is fab!'\n    });\n    let bookCom2 = await $.post(url + '/' + bookId, {\n      comment: 'I did not care for it'\n    });\n    assert.isObject(bookCom2);\n    assert.property(bookCom2, '_id');\n    assert.property(bookCom2, 'title');\n    assert.property(bookCom2, 'comments');\n    assert.lengthOf(bookCom2.comments, 2);\n    bookCom2.comments.forEach((comment) => {\n      assert.isString(comment);\n      assert.oneOf(comment, ['This book is fab!', 'I did not care for it']);\n    });\n    let commentErr = await $.post(url + '/' + bookId);\n    assert.isString(commentErr);\n    assert.equal(commentErr, 'missing required field comment');\n    let failingComment = await $.post(url + '/5f665eb46e296f6b9b6a504d', {\n      comment: 'Never Seen Comment'\n    });\n    assert.isString(failingComment);\n    assert.equal(failingComment, 'no book exists');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <b>DELETE</b> request to <code>/api/books/{_id}</code> to delete a book from the collection. The returned response will be the string <code>delete successful</code> if successful. If no book is found, return the string <code>no book exists</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let url = getUserInput('url') + '/api/books';\n    let deleteTarget = await $.post(url, { title: 'Deletable Book' });\n    assert.isObject(deleteTarget);\n    let bookId = deleteTarget._id;\n    let doDelete = await $.ajax({ url: url + '/' + bookId, type: 'DELETE' });\n    assert.isString(doDelete);\n    assert.equal(doDelete, 'delete successful');\n    let failingDelete = await $.ajax({\n      url: url + '/5f665eb46e296f6b9b6a504d',\n      type: 'DELETE'\n    });\n    assert.isString(failingDelete);\n    assert.equal(failingDelete, 'no book exists');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <b>DELETE</b> request to <code>/api/books</code> to delete all books in the database. The returned response will be the string <code>complete delete successful</code> if successful.</p>","testString":"async (getUserInput) => {\n  try {\n    const deleteAll = await $.ajax({\n      url: getUserInput('url') + '/api/books',\n      type: 'DELETE'\n    });\n    assert.isString(deleteAll);\n    assert.equal(deleteAll, 'complete delete successful');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>All 10 functional tests required are complete and passing.</p>","testString":"async (getUserInput) => {\n  try {\n    const getTests = await $.get(getUserInput('url') + '/_api/get-tests');\n    assert.isArray(getTests);\n    assert.isAtLeast(getTests.length, 10, 'At least 10 tests passed');\n    getTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/quality-assurance/#quality-assurance-projects","dashedName":"personal-library","certification":"quality-assurance","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"quality-assurance","block":"quality-assurance-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"quality-assurance-projects","nextChallengePath":"/learn/quality-assurance/quality-assurance-projects/sudoku-solver","prevChallengePath":"/learn/quality-assurance/quality-assurance-projects/issue-tracker","id":"587d824a367417b2b2512c43"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":4,"challengeFiles":[]}},"slug":"/learn/quality-assurance/quality-assurance-projects/personal-library"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
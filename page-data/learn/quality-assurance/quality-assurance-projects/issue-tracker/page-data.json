{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/quality-assurance/quality-assurance-projects/issue-tracker",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301569,"title":"Issue Tracker","description":"<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://issue-tracker.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://issue-tracker.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-issuetracker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-issuetracker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>","instructions":"<section id=\"instructions\">\n<ul>\n<li>Complete the necessary routes in <code>/routes/api.js</code></li>\n<li>Create all of the functional tests in <code>tests/2_functional-tests.js</code></li>\n<li>Copy the <code>sample.env</code> file to <code>.env</code> and set the variables appropriately</li>\n<li>To run the tests automatically, add <code>NODE_ENV=test</code> in your <code>.env</code> file</li>\n<li>To run the tests in the console, use the command <code>npm run test</code></li>\n</ul>\n<p>Write the following tests in <code>tests/2_functional-tests.js</code>:</p>\n<ul>\n<li>Create an issue with every field: POST request to <code>/api/issues/{project}</code></li>\n<li>Create an issue with only required fields: POST request to <code>/api/issues/{project}</code></li>\n<li>Create an issue with missing required fields: POST request to <code>/api/issues/{project}</code></li>\n<li>View issues on a project: GET request to <code>/api/issues/{project}</code></li>\n<li>View issues on a project with one filter: GET request to <code>/api/issues/{project}</code></li>\n<li>View issues on a project with multiple filters: GET request to <code>/api/issues/{project}</code></li>\n<li>Update one field on an issue: PUT request to <code>/api/issues/{project}</code></li>\n<li>Update multiple fields on an issue: PUT request to <code>/api/issues/{project}</code></li>\n<li>Update an issue with missing <code>_id</code>: PUT request to <code>/api/issues/{project}</code></li>\n<li>Update an issue with no fields to update: PUT request to <code>/api/issues/{project}</code></li>\n<li>Update an issue with an invalid <code>_id</code>: PUT request to <code>/api/issues/{project}</code></li>\n<li>Delete an issue: DELETE request to <code>/api/issues/{project}</code></li>\n<li>Delete an issue with an invalid <code>_id</code>: DELETE request to <code>/api/issues/{project}</code></li>\n<li>Delete an issue with missing <code>_id</code>: DELETE request to <code>/api/issues/{project}</code></li>\n</ul>\n</section>","challengeType":4,"helpCategory":"JavaScript","superBlock":"quality-assurance","block":"quality-assurance-projects","translationPending":false,"fields":{"blockName":"quality-assurance-projects","slug":"/learn/quality-assurance/quality-assurance-projects/issue-tracker","tests":[{"text":"<p>You can provide your own project, not the example URL.</p>","testString":"(getUserInput) => {\n  assert(!/.*\\/issue-tracker\\.freecodecamp\\.rocks/.test(getUserInput('url')));\n};"},{"text":"<p>You can send a <code>POST</code> request to <code>/api/issues/{projectname}</code> with form data containing the required fields <code>issue_title</code>, <code>issue_text</code>, <code>created_by</code>, and optionally <code>assigned_to</code> and <code>status_text</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let test_data = {\n      issue_title: 'Faux Issue Title',\n      issue_text: 'Functional Test - Required Fields Only',\n      created_by: 'fCC'\n    };\n    const data = await $.post(\n      getUserInput('url') + '/api/issues/fcc-project',\n      test_data\n    );\n    assert.isObject(data);\n    assert.nestedInclude(data, test_data);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>The <code>POST</code> request to <code>/api/issues/{projectname}</code> will return the created object, and must include all of the submitted fields. Excluded optional fields will be returned as empty strings. Additionally, include <code>created_on</code> (date/time), <code>updated_on</code> (date/time), <code>open</code> (boolean, <code>true</code> for open - default value, <code>false</code> for closed), and <code>_id</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let test_data = {\n      issue_title: 'Faux Issue Title 2',\n      issue_text: 'Functional Test - Every field filled in',\n      created_by: 'fCC',\n      assigned_to: 'Chai and Mocha'\n    };\n    const data = await $.post(\n      getUserInput('url') + '/api/issues/fcc-project',\n      test_data\n    );\n    assert.isObject(data);\n    assert.nestedInclude(data, test_data);\n    assert.property(data, 'created_on');\n    assert.isNumber(Date.parse(data.created_on));\n    assert.property(data, 'updated_on');\n    assert.isNumber(Date.parse(data.updated_on));\n    assert.property(data, 'open');\n    assert.isBoolean(data.open);\n    assert.isTrue(data.open);\n    assert.property(data, '_id');\n    assert.isNotEmpty(data._id);\n    assert.property(data, 'status_text');\n    assert.isEmpty(data.status_text);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>If you send a <code>POST</code> request to <code>/api/issues/{projectname}</code> without the required fields, returned will be the error <code>{ error: 'required field(s) missing' }</code></p>","testString":"async (getUserInput) => {\n  try {\n    let test_data = { created_by: 'fCC' };\n    const data = await $.post(getUserInput('url') + '/api/issues/fcc-project', {\n      created_by: 'fCC'\n    });\n    assert.isObject(data);\n    assert.property(data, 'error');\n    assert.equal(data.error, 'required field(s) missing');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <code>GET</code> request to <code>/api/issues/{projectname}</code> for an array of all issues for that specific <code>projectname</code>, with all the fields present for each issue.</p>","testString":"async (getUserInput) => {\n  try {\n    let test_data = { issue_text: 'Get Issues Test', created_by: 'fCC' };\n    const url =\n      getUserInput('url') +\n      '/api/issues/get_issues_test_' +\n      Date.now().toString().substring(7);\n    const data1 = await $.post(\n      url,\n      Object.assign(test_data, { issue_title: 'Faux Issue 1' })\n    );\n    assert.isObject(data1);\n    const data2 = await $.post(\n      url,\n      Object.assign(test_data, { issue_title: 'Faux Issue 2' })\n    );\n    assert.isObject(data2);\n    const data3 = await $.post(\n      url,\n      Object.assign(test_data, { issue_title: 'Faux Issue 3' })\n    );\n    assert.isObject(data3);\n    const getIssues = await $.get(url);\n    assert.isArray(getIssues);\n    assert.lengthOf(getIssues, 3);\n    let re = new RegExp('Faux Issue \\\\d');\n    getIssues.forEach((issue) => {\n      assert.property(issue, 'issue_title');\n      assert.match(issue.issue_title, re);\n      assert.property(issue, 'issue_text');\n      assert.property(issue, 'created_by');\n      assert.property(issue, 'assigned_to');\n      assert.property(issue, 'status_text');\n      assert.property(issue, 'open');\n      assert.property(issue, 'created_on');\n      assert.property(issue, 'updated_on');\n      assert.property(issue, '_id');\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <code>GET</code> request to <code>/api/issues/{projectname}</code> and filter the request by also passing along any field and value as a URL query (ie. <code>/api/issues/{project}?open=false</code>). You can pass one or more field/value pairs at once.</p>","testString":"async (getUserInput) => {\n  try {\n    let test_data = {\n      issue_title: 'To be Filtered',\n      issue_text: 'Filter Issues Test'\n    };\n    const url =\n      getUserInput('url') +\n      '/api/issues/get_issues_test_' +\n      Date.now().toString().substring(7);\n    const data1 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' })\n    );\n    const data2 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Alice', assigned_to: 'Bob' })\n    );\n    const data3 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Alice', assigned_to: 'Eric' })\n    );\n    const data4 = await $.post(\n      url,\n      Object.assign(test_data, { created_by: 'Carol', assigned_to: 'Eric' })\n    );\n    const getSingle = await $.get(url + '?created_by=Alice');\n    assert.isArray(getSingle);\n    assert.lengthOf(getSingle, 3);\n    const getMultiple = await $.get(url + '?created_by=Alice&assigned_to=Bob');\n    assert.isArray(getMultiple);\n    assert.lengthOf(getMultiple, 2);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <code>PUT</code> request to <code>/api/issues/{projectname}</code> with an <code>_id</code> and one or more fields to update. On success, the <code>updated_on</code> field should be updated, and returned should be <code>{  result: 'successfully updated', '_id': _id }</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let initialData = {\n      issue_title: 'Issue to be Updated',\n      issue_text: 'Functional Test - Put target',\n      created_by: 'fCC'\n    };\n    const url = getUserInput('url') + '/api/issues/fcc-project';\n    const itemToUpdate = await $.post(url, initialData);\n    const updateSuccess = await $.ajax({\n      url: url,\n      type: 'PUT',\n      data: { _id: itemToUpdate._id, issue_text: 'New Issue Text' }\n    });\n    assert.isObject(updateSuccess);\n    assert.deepEqual(updateSuccess, {\n      result: 'successfully updated',\n      _id: itemToUpdate._id\n    });\n    const getUpdatedId = await $.get(url + '?_id=' + itemToUpdate._id);\n    assert.isArray(getUpdatedId);\n    assert.isObject(getUpdatedId[0]);\n    assert.isAbove(\n      Date.parse(getUpdatedId[0].updated_on),\n      Date.parse(getUpdatedId[0].created_on)\n    );\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>When the <code>PUT</code> request sent to <code>/api/issues/{projectname}</code> does not include an <code>_id</code>, the return value is <code>{ error: 'missing _id' }</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    const url = getUserInput('url') + '/api/issues/fcc-project';\n    const badUpdate = await $.ajax({ url: url, type: 'PUT' });\n    assert.isObject(badUpdate);\n    assert.property(badUpdate, 'error');\n    assert.equal(badUpdate.error, 'missing _id');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>When the <code>PUT</code> request sent to <code>/api/issues/{projectname}</code> does not include update fields, the return value is <code>{ error: 'no update field(s) sent', '_id': _id }</code>. On any other error, the return value is <code>{ error: 'could not update', '_id': _id }</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    const url = getUserInput('url') + '/api/issues/fcc-project';\n    const badUpdate = await $.ajax({\n      url: url,\n      type: 'PUT',\n      data: { _id: '5f665eb46e296f6b9b6a504d' }\n    });\n    assert.deepEqual(badUpdate, {\n      error: 'no update field(s) sent',\n      _id: '5f665eb46e296f6b9b6a504d'\n    });\n    const badIdUpdate = await $.ajax({\n      url: url,\n      type: 'PUT',\n      data: { _id: '5f665eb46e296f6b9b6a504d', issue_text: 'New Issue Text' }\n    });\n    assert.deepEqual(badIdUpdate, {\n      error: 'could not update',\n      _id: '5f665eb46e296f6b9b6a504d'\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>You can send a <code>DELETE</code> request to <code>/api/issues/{projectname}</code> with an <code>_id</code> to delete an issue. If no <code>_id</code> is sent, the return value is <code>{ error: 'missing _id' }</code>. On success, the return value is <code>{ result: 'successfully deleted', '_id': _id }</code>. On failure, the return value is <code>{ error: 'could not delete', '_id': _id }</code>.</p>","testString":"async (getUserInput) => {\n  try {\n    let initialData = {\n      issue_title: 'Issue to be Deleted',\n      issue_text: 'Functional Test - Delete target',\n      created_by: 'fCC'\n    };\n    const url = getUserInput('url') + '/api/issues/fcc-project';\n    const itemToDelete = await $.post(url, initialData);\n    assert.isObject(itemToDelete);\n    const deleteSuccess = await $.ajax({\n      url: url,\n      type: 'DELETE',\n      data: { _id: itemToDelete._id }\n    });\n    assert.isObject(deleteSuccess);\n    assert.deepEqual(deleteSuccess, {\n      result: 'successfully deleted',\n      _id: itemToDelete._id\n    });\n    const noId = await $.ajax({ url: url, type: 'DELETE' });\n    assert.isObject(noId);\n    assert.deepEqual(noId, { error: 'missing _id' });\n    const badIdDelete = await $.ajax({\n      url: url,\n      type: 'DELETE',\n      data: { _id: '5f665eb46e296f6b9b6a504d', issue_text: 'New Issue Text' }\n    });\n    assert.isObject(badIdDelete);\n    assert.deepEqual(badIdDelete, {\n      error: 'could not delete',\n      _id: '5f665eb46e296f6b9b6a504d'\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>All 14 functional tests are complete and passing.</p>","testString":"async (getUserInput) => {\n  try {\n    const getTests = await $.get(getUserInput('url') + '/_api/get-tests');\n    assert.isArray(getTests);\n    assert.isAtLeast(getTests.length, 14, 'At least 14 tests passed');\n    getTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/quality-assurance/#quality-assurance-projects","dashedName":"issue-tracker","certification":"quality-assurance","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"quality-assurance","block":"quality-assurance-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"quality-assurance-projects","nextChallengePath":"/learn/quality-assurance/quality-assurance-projects/personal-library","prevChallengePath":"/learn/quality-assurance/quality-assurance-projects/metric-imperial-converter","id":"587d8249367417b2b2512c42"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":4,"challengeFiles":[]}},"slug":"/learn/quality-assurance/quality-assurance-projects/issue-tracker"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/quality-assurance/quality-assurance-projects/sudoku-solver",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":462357,"title":"Sudoku Solver","description":"<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://sudoku-solver.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://sudoku-solver.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freecodecamp/boilerplate-project-sudoku-solver\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freecodecamp/boilerplate-project-sudoku-solver\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>","instructions":"<section id=\"instructions\">\n<ul>\n<li>All puzzle logic can go into <code>/controllers/sudoku-solver.js</code>\n<ul>\n<li>The <code>validate</code> function should take a given puzzle string and check it to see if it has 81 valid characters for the input.</li>\n<li>The <code>check</code> functions should be validating against the <em>current</em> state of the board.</li>\n<li>The <code>solve</code> function should handle solving any given valid puzzle string, not just the test inputs and solutions. You are expected to write out the logic to solve this.</li>\n</ul>\n</li>\n<li>All routing logic can go into <code>/routes/api.js</code></li>\n<li>See the <code>puzzle-strings.js</code> file in <code>/controllers</code> for some sample puzzles your application should solve</li>\n<li>To run the challenge tests on this page, set <code>NODE_ENV</code> to <code>test</code> without quotes in the <code>.env</code> file</li>\n<li>To run the tests in the console, use the command <code>npm run test</code>.</li>\n</ul>\n<p>Write the following tests in <code>tests/1_unit-tests.js</code>:</p>\n<ul>\n<li>Logic handles a valid puzzle string of 81 characters</li>\n<li>Logic handles a puzzle string with invalid characters (not 1-9 or <code>.</code>)</li>\n<li>Logic handles a puzzle string that is not 81 characters in length</li>\n<li>Logic handles a valid row placement</li>\n<li>Logic handles an invalid row placement</li>\n<li>Logic handles a valid column placement</li>\n<li>Logic handles an invalid column placement</li>\n<li>Logic handles a valid region (3x3 grid) placement</li>\n<li>Logic handles an invalid region (3x3 grid) placement</li>\n<li>Valid puzzle strings pass the solver</li>\n<li>Invalid puzzle strings fail the solver</li>\n<li>Solver returns the expected solution for an incomplete puzzle</li>\n</ul>\n<p>Write the following tests in <code>tests/2_functional-tests.js</code></p>\n<ul>\n<li>Solve a puzzle with valid puzzle string: POST request to <code>/api/solve</code></li>\n<li>Solve a puzzle with missing puzzle string: POST request to <code>/api/solve</code></li>\n<li>Solve a puzzle with invalid characters: POST request to <code>/api/solve</code></li>\n<li>Solve a puzzle with incorrect length: POST request to <code>/api/solve</code></li>\n<li>Solve a puzzle that cannot be solved: POST request to <code>/api/solve</code></li>\n<li>Check a puzzle placement with all fields: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with single placement conflict: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with multiple placement conflicts: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with all placement conflicts: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with missing required fields: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with invalid characters: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with incorrect length: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with invalid placement coordinate: POST request to <code>/api/check</code></li>\n<li>Check a puzzle placement with invalid placement value: POST request to <code>/api/check</code></li>\n</ul>\n</section>","challengeType":4,"helpCategory":"JavaScript","superBlock":"quality-assurance","block":"quality-assurance-projects","translationPending":false,"fields":{"blockName":"quality-assurance-projects","slug":"/learn/quality-assurance/quality-assurance-projects/sudoku-solver","tests":[{"text":"<p>You should provide your own project, not the example URL.</p>","testString":"(getUserInput) => {\n  const url = getUserInput('url');\n  assert(!/.*\\/sudoku-solver\\.freecodecamp\\.rocks/.test(getUserInput('url')));\n};"},{"text":"<p>You can <code>POST</code> <code>/api/solve</code> with form data containing <code>puzzle</code> which will be a string containing a combination of numbers (1-9) and periods <code>.</code> to represent empty spaces. The returned object will contain a <code>solution</code> property with the solved puzzle.</p>","testString":"async (getUserInput) => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output =\n    '769235418851496372432178956174569283395842761628713549283657194516924837947381625';\n  const data = await fetch(getUserInput('url') + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'solution');\n  assert.equal(parsed.solution, output);\n};"},{"text":"<p>If the object submitted to <code>/api/solve</code> is missing <code>puzzle</code>, the returned value will be <code>{ error: 'Required field missing' }</code></p>","testString":"async (getUserInput) => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Required field missing';\n  const data = await fetch(getUserInput('url') + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ notpuzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"},{"text":"<p>If the puzzle submitted to <code>/api/solve</code> contains values which are not numbers or periods, the returned value will be <code>{ error: 'Invalid characters in puzzle' }</code></p>","testString":"async (getUserInput) => {\n  const input =\n    'AA9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Invalid characters in puzzle';\n  const data = await fetch(getUserInput('url') + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"},{"text":"<p>If the puzzle submitted to <code>/api/solve</code> is greater or less than 81 characters, the returned value will be <code>{ error: 'Expected puzzle to be 81 characters long' }</code></p>","testString":"async (getUserInput) => {\n  const inputs = [\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.',\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6...'\n  ];\n  const output = 'Expected puzzle to be 81 characters long';\n  for (const input of inputs) {\n    const data = await fetch(getUserInput('url') + '/api/solve', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"},{"text":"<p>If the puzzle submitted to <code>/api/solve</code> is invalid or cannot be solved, the returned value will be <code>{ error: 'Puzzle cannot be solved' }</code></p>","testString":"async (getUserInput) => {\n  const input =\n    '9.9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Puzzle cannot be solved';\n  const data = await fetch(getUserInput('url') + '/api/solve', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"},{"text":"<p>You can <code>POST</code> to <code>/api/check</code> an object containing <code>puzzle</code>, <code>coordinate</code>, and <code>value</code> where the <code>coordinate</code> is the letter A-I indicating the row, followed by a number 1-9 indicating the column, and <code>value</code> is a number from 1-9.</p>","testString":"async (getUserInput) => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'A1';\n  const value = '7';\n  const data = await fetch(getUserInput('url') + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'valid');\n  assert.isTrue(parsed.valid);\n};"},{"text":"<p>The return value from the <code>POST</code> to <code>/api/check</code> will be an object containing a <code>valid</code> property, which is <code>true</code> if the number may be placed at the provided coordinate and <code>false</code> if the number may not. If false, the returned object will also contain a <code>conflict</code> property which is an array containing the strings <code>\"row\"</code>, <code>\"column\"</code>, and/or <code>\"region\"</code> depending on which makes the placement invalid.</p>","testString":"async (getUserInput) => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'A1';\n  const value = '1';\n  const conflict = ['row', 'column'];\n  const data = await fetch(getUserInput('url') + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'valid');\n  assert.isFalse(parsed.valid);\n  assert.property(parsed, 'conflict');\n  assert.include(parsed.conflict, 'row');\n  assert.include(parsed.conflict, 'column');\n};"},{"text":"<p>If <code>value</code> submitted to <code>/api/check</code> is already placed in <code>puzzle</code> on that <code>coordinate</code>, the returned value will be an object containing a <code>valid</code> property with <code>true</code> if <code>value</code> is not conflicting.</p>","testString":"async (getUserInput) => {\n  const input =\n  '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'C3';\n  const value = '2';\n  const data = await fetch(getUserInput('url') + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'valid');\n  assert.isTrue(parsed.valid);\n};"},{"text":"<p>If the puzzle submitted to <code>/api/check</code> contains values which are not numbers or periods, the returned value will be <code>{ error: 'Invalid characters in puzzle' }</code></p>","testString":"async (getUserInput) => {\n  const input =\n    'AA9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const coordinate = 'A1';\n  const value = '1';\n  const output = 'Invalid characters in puzzle';\n  const data = await fetch(getUserInput('url') + '/api/check', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ puzzle: input, coordinate, value })\n  });\n  const parsed = await data.json();\n  assert.property(parsed, 'error');\n  assert.equal(parsed.error, output);\n};"},{"text":"<p>If the puzzle submitted to <code>/api/check</code> is greater or less than 81 characters, the returned value will be <code>{ error: 'Expected puzzle to be 81 characters long' }</code></p>","testString":"async (getUserInput) => {\n  const inputs = [\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.',\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6...'\n  ];\n  const coordinate = 'A1';\n  const value = '1';\n  const output = 'Expected puzzle to be 81 characters long';\n  for (const input of inputs) {\n    const data = await fetch(getUserInput('url') + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input, coordinate, value })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"},{"text":"<p>If the object submitted to <code>/api/check</code> is missing <code>puzzle</code>, <code>coordinate</code> or <code>value</code>, the returned value will be <code>{ error: 'Required field(s) missing' }</code></p>","testString":"async (getUserInput) => {\n  const inputs = [\n    {\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      value: '1',\n    },\n    {\n      puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..',\n      coordinate: 'A1',\n    },\n    {\n      coordinate: 'A1',\n      value: '1'\n    }\n  ];\n  for (const input of inputs) {\n    const output = 'Required field(s) missing';\n    const data = await fetch(getUserInput('url') + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(input)\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"},{"text":"<p>If the coordinate submitted to <code>api/check</code> does not point to an existing grid cell, the returned value will be <code>{ error: 'Invalid coordinate'}</code></p>","testString":"async (getUserInput) => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Invalid coordinate';\n  const coordinates = ['A0', 'A10', 'J1', 'A', '1', 'XZ18'];\n  const value = '7';\n  for (const coordinate of coordinates) {\n    const data = await fetch(getUserInput('url') + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input, coordinate, value })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"},{"text":"<p>If the <code>value</code> submitted to <code>/api/check</code> is not a number between 1 and 9, the returned value will be <code>{ error: 'Invalid value' }</code></p>","testString":"async (getUserInput) => {\n  const input =\n    '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..';\n  const output = 'Invalid value';\n  const coordinate = 'A1';\n  const values = ['0', '10', 'A'];\n  for (const value of values) {\n    const data = await fetch(getUserInput('url') + '/api/check', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ puzzle: input, coordinate, value })\n    });\n    const parsed = await data.json();\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, output);\n  }\n};"},{"text":"<p>All 12 unit tests are complete and passing.</p>","testString":"async (getUserInput) => {\n  try {\n    const getTests = await $.get(getUserInput('url') + '/_api/get-tests');\n    assert.isArray(getTests);\n    const unitTests = getTests.filter((test) => {\n      return !!test.context.match(/Unit\\s*Tests/gi);\n    });\n    assert.isAtLeast(unitTests.length, 12, 'At least 12 tests passed');\n    unitTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"},{"text":"<p>All 14 functional tests are complete and passing.</p>","testString":"async (getUserInput) => {\n  try {\n    const getTests = await $.get(getUserInput('url') + '/_api/get-tests');\n    assert.isArray(getTests);\n    const functTests = getTests.filter((test) => {\n      return !!test.context.match(/Functional\\s*Tests/gi);\n    });\n    assert.isAtLeast(functTests.length, 14, 'At least 14 tests passed');\n    functTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Test in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/quality-assurance/#quality-assurance-projects","dashedName":"sudoku-solver","certification":"quality-assurance","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"quality-assurance","block":"quality-assurance-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"quality-assurance-projects","nextChallengePath":"/learn/quality-assurance/quality-assurance-projects/american-british-translator","prevChallengePath":"/learn/quality-assurance/quality-assurance-projects/personal-library","id":"5e601bf95ac9d0ecd8b94afd"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":4,"challengeFiles":[]}},"slug":"/learn/quality-assurance/quality-assurance-projects/sudoku-solver"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
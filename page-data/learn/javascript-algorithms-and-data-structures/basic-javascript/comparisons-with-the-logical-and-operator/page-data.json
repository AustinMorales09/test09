{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/comparisons-with-the-logical-and-operator",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Comparisons with the Logical And Operator","description":"<section id=\"description\">\n<p>Sometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&#x26;&#x26;</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.</p>\n<p>The same effect could be achieved by nesting an <code>if</code> statement inside another <code>if</code>.</p>\n<pre><code class=\"language-js\">if (num > 5) {\n  if (num &#x3C; 10) {\n    return \"Yes\";\n  }\n}\nreturn \"No\";\n</code></pre>\n<p>This code will return <code>Yes</code> if <code>num</code> is greater than <code>5</code> and less than <code>10</code>. The same logic can be written with the <dfn>logical and</dfn> operator.</p>\n<pre><code class=\"language-js\">if (num > 5 &#x26;&#x26; num &#x3C; 10) {\n  return \"Yes\";\n}\nreturn \"No\";\n</code></pre>\n</section>","id":"56533eb9ac21ba0edf2244d8","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Replace the two if statements with one statement, using the <code>&#x26;&#x26;</code> operator, which will return the string <code>Yes</code> if <code>val</code> is less than or equal to <code>50</code> and greater than or equal to <code>25</code>. Otherwise, will return the string <code>No</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cvbRVtr","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16799,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/comparisons-with-the-logical-and-operator","tests":[{"text":"<p>You should use the <code>&#x26;&#x26;</code> operator once</p>","testString":"assert(__helpers.removeJSComments(code).match(/&&/g).length === 1);"},{"text":"<p>You should only have one <code>if</code> statement</p>","testString":"assert(__helpers.removeJSComments(code).match(/if/g).length === 1);"},{"text":"<p><code>testLogicalAnd(0)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(0) === 'No');"},{"text":"<p><code>testLogicalAnd(24)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(24) === 'No');"},{"text":"<p><code>testLogicalAnd(25)</code> should return the string <code>Yes</code></p>","testString":"assert(testLogicalAnd(25) === 'Yes');"},{"text":"<p><code>testLogicalAnd(30)</code> should return the string <code>Yes</code></p>","testString":"assert(testLogicalAnd(30) === 'Yes');"},{"text":"<p><code>testLogicalAnd(50)</code> should return the string <code>Yes</code></p>","testString":"assert(testLogicalAnd(50) === 'Yes');"},{"text":"<p><code>testLogicalAnd(51)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(51) === 'No');"},{"text":"<p><code>testLogicalAnd(75)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(75) === 'No');"},{"text":"<p><code>testLogicalAnd(80)</code> should return the string <code>No</code></p>","testString":"assert(testLogicalAnd(80) === 'No');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function testLogicalAnd(val) {\n  // Only change code below this line\n\n  if (val) {\n    if (val) {\n      return \"Yes\";\n    }\n  }\n\n  // Only change code above this line\n  return \"No\";\n}\n\ntestLogicalAnd(10);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"comparisons-with-the-logical-and-operator","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/comparisons-with-the-logical-or-operator","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/comparison-with-the-less-than-or-equal-to-operator","id":"56533eb9ac21ba0edf2244d8"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/comparisons-with-the-logical-and-operator"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
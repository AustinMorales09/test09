{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Manipulating Complex Objects","description":"<section id=\"description\">\n<p>Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.</p>\n<p>Here's an example of a complex data structure:</p>\n<pre><code class=\"language-js\">const ourMusic = [\n  {\n    \"artist\": \"Daft Punk\",\n    \"title\": \"Homework\",\n    \"release_year\": 1997,\n    \"formats\": [ \n      \"CD\", \n      \"Cassette\", \n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];\n</code></pre>\n<p>This is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>formats</code> array. If you want to add more album records, you can do this by adding records to the top level array. Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>artist</code> and a value of <code>Daft Punk</code>.</p>\n<p><strong>Note:</strong> You will need to place a comma after every object in the array, unless it is the last object in the array.</p>\n</section>","id":"56533eb9ac21ba0edf2244cb","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Add a new album to the <code>myMusic</code> array. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/c9yNMfR","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18208,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects","tests":[{"text":"<p><code>myMusic</code> should be an array</p>","testString":"assert(Array.isArray(myMusic));"},{"text":"<p><code>myMusic</code> should have at least two elements</p>","testString":"assert(myMusic.length > 1);"},{"text":"<p>The elements in the <code>myMusic</code> array should be objects</p>","testString":"myMusic.forEach(object => {assert.typeOf(object, 'object')})"},{"text":"<p>Your object in <code>myMusic</code> should have at least 4 properties</p>","testString":"myMusic.forEach(object => {assert(Object.keys(object).length > 3); });"},{"text":"<p>Your object in <code>myMusic</code> should contain the property <code>artist</code> which is a string</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['artist']);\n  assert.typeOf(object.artist, 'string')\n})"},{"text":"<p>Your object in <code>myMusic</code> should contain the property <code>title</code> which is a string</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['title']);\n  assert.typeOf(object.title, 'string')\n})"},{"text":"<p>Your object in <code>myMusic</code> should contain the property <code>release_year</code> which is a number</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['release_year']);\n  assert.typeOf(object.release_year, 'number')\n})"},{"text":"<p>Your object in <code>myMusic</code> should contain a <code>formats</code> property which is an array</p>","testString":"myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['formats']);\n  assert.typeOf(object.formats, 'array')\n})"},{"text":"<p><code>formats</code> should be an array of strings with at least two elements</p>","testString":"myMusic.forEach(object => {\n  object.formats.forEach(format => {\n    assert.typeOf(format, 'string')\n  });\n  assert.isAtLeast(object.formats.length, 2)\n})"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];","head":"","tail":"(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"manipulating-complex-objects","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/testing-objects-for-properties","id":"56533eb9ac21ba0edf2244cb"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
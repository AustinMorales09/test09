{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/write-reusable-javascript-with-functions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Write Reusable JavaScript with Functions","description":"<section id=\"description\">\n<p>In JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.</p>\n<p>Here's an example of a function:</p>\n<pre><code class=\"language-js\">function functionName() {\n  console.log(\"Hello World\");\n}\n</code></pre>\n<p>You can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this: <code>functionName();</code> Each time the function is called it will print out the message <code>Hello World</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.</p>\n</section>","id":"56bbb991ad1ed5201cd392cf","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<ol>\n  <li>\n    Create a function called <code>reusableFunction</code> which prints the string <code>Hi World</code> to the dev console.\n  </li>\n  <li>\n    Call the function.\n  </li>\n</ol>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cL6dqfy","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18378,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/write-reusable-javascript-with-functions","tests":[{"text":"<p><code>reusableFunction</code> should be a function.</p>","testString":"assert(typeof reusableFunction === 'function');"},{"text":"<p>If <code>reusableFunction</code> is called, it should output the string <code>Hi World</code> to the console.</p>","testString":"assert(testConsole());"},{"text":"<p>You should call <code>reusableFunction</code> once it is defined.</p>","testString":"const functionStr = reusableFunction && __helpers.removeWhiteSpace(reusableFunction.toString());\nconst codeWithoutFunction = __helpers.removeWhiteSpace(__helpers.removeJSComments(code)).replace(/reusableFunction\\(\\)\\{/g, '');\nassert(/reusableFunction\\(\\)/.test(codeWithoutFunction));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"","head":"","tail":"\nfunction testConsole() {\n  var logOutput = \"\";\n  var originalConsole = console;\n  var nativeLog = console.log;\n  var hiWorldWasLogged = false;\n  console.log = function (message) {\n    if(message === 'Hi World')  {\n      console.warn(message)\n      hiWorldWasLogged = true;\n    }\n    if(message && message.trim) logOutput = message.trim();\n    if(nativeLog.apply) {\n      nativeLog.apply(originalConsole, arguments);\n    } else {\n      var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n      nativeLog(nativeMsg);\n    }\n  };\n  reusableFunction();\n  console.log = nativeLog;\n  return hiWorldWasLogged;\n}\n","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"write-reusable-javascript-with-functions","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/shopping-list","id":"56bbb991ad1ed5201cd392cf"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/write-reusable-javascript-with-functions"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
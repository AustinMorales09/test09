{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Passing Values to Functions with Arguments","description":"<section id=\"description\">\n<p><dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.</p>\n<p>Here is a function with two parameters, <code>param1</code> and <code>param2</code>:</p>\n<pre><code class=\"language-js\">function testFun(param1, param2) {\n  console.log(param1, param2);\n}\n</code></pre>\n<p>Then we can call <code>testFun</code> like this: <code>testFun(\"Hello\", \"World\");</code>. We have passed two string arguments, <code>Hello</code> and <code>World</code>. Inside the function, <code>param1</code> will equal the string <code>Hello</code> and <code>param2</code> will equal the string <code>World</code>. Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.</p>\n</section>","id":"56533eb9ac21ba0edf2244bd","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cy8rahW","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18254,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments","tests":[{"text":"<p><code>functionWithArgs</code> should be a function.</p>","testString":"assert(typeof functionWithArgs === 'function');"},{"text":"<p><code>functionWithArgs(1,2)</code> should output <code>3</code>.</p>","testString":"if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(1, 2);\n  uncapture();\n}\nassert(logOutput == 3);"},{"text":"<p><code>functionWithArgs(7,9)</code> should output <code>16</code>.</p>","testString":"if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(7, 9);\n  uncapture();\n}\nassert(logOutput == 16);"},{"text":"<p>You should call <code>functionWithArgs</code> with two numbers after you define it.</p>","testString":"assert(\n  /functionWithArgs\\([-+]?\\d*\\.?\\d*,[-+]?\\d*\\.?\\d*\\)/.test(\n    __helpers.removeJSComments(code).replace(/\\s/g, '')\n  )\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"","head":"var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message) logOutput = JSON.stringify(message).trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();","tail":"uncapture();\n\nif (typeof functionWithArgs !== \"function\") { \n  (function() { return \"functionWithArgs is not defined\"; })();\n} else {\n  (function() { return logOutput || \"console.log never called\"; })();\n}","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"passing-values-to-functions-with-arguments","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/return-a-value-from-a-function-with-return","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/write-reusable-javascript-with-functions","id":"56533eb9ac21ba0edf2244bd"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/passing-values-to-functions-with-arguments"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
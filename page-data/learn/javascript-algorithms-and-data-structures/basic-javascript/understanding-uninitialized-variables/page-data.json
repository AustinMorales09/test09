{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Understanding Uninitialized Variables","description":"<section id=\"description\">\n<p>When JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a <dfn>string</dfn> of <code>undefined</code>.</p>\n</section>","id":"56533eb9ac21ba0edf2244aa","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Initialize the three variables <code>a</code>, <code>b</code>, and <code>c</code> with <code>5</code>, <code>10</code>, and <code>\"I am a\"</code> respectively so that they will not be <code>undefined</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cBa2JAL","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18335,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables","tests":[{"text":"<p><code>a</code> should be defined and have a final value of <code>6</code>.</p>","testString":"assert(typeof a === 'number' && a === 6);"},{"text":"<p><code>b</code> should be defined and have a final value of <code>15</code>.</p>","testString":"assert(typeof b === 'number' && b === 15);"},{"text":"<p><code>c</code> should not contain <code>undefined</code> and should have a final value of the string <code>I am a String!</code></p>","testString":"assert(!/undefined/.test(c) && c === 'I am a String!');"},{"text":"<p>You should not change code below the specified comment.</p>","testString":"assert(\n  /a = a \\+ 1;/.test(__helpers.removeJSComments(code)) &&\n    /b = b \\+ 5;/.test(__helpers.removeJSComments(code)) &&\n    /c = c \\+ \" String!\";/.test(__helpers.removeJSComments(code))\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Only change code below this line\nvar a;\nvar b;\nvar c;\n// Only change code above this line\n\na = a + 1;\nb = b + 5;\nc = c + \" String!\";","head":"","tail":"(function(a,b,c){ return \"a = \" + a + \", b = \" + b + \", c = '\" + c + \"'\"; })(a,b,c);","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"understanding-uninitialized-variables","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-case-sensitivity-in-variables","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-string-variables","id":"56533eb9ac21ba0edf2244aa"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
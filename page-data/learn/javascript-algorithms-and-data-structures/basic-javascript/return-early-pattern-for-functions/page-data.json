{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/return-early-pattern-for-functions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Return Early Pattern for Functions","description":"<section id=\"description\">\n<p>When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">function myFun() {\n  console.log(\"Hello\");\n  return \"World\";\n  console.log(\"byebye\")\n}\nmyFun();\n</code></pre>\n<p>The above will display the string <code>Hello</code> in the console, and return the string <code>World</code>. The string <code>byebye</code> will never display in the console, because the function exits at the <code>return</code> statement.</p>\n</section>","id":"56533eb9ac21ba0edf2244c4","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify the function <code>abTest</code> so that if <code>a</code> or <code>b</code> are less than <code>0</code> the function will immediately exit with a value of <code>undefined</code>.</p>\n<p><strong>Hint</strong><br>\nRemember that <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-uninitialized-variables\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><code>undefined</code> is a keyword</a>, not a string.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cQe39Sq","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18272,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/return-early-pattern-for-functions","tests":[{"text":"<p><code>abTest(2, 2)</code> should return a number</p>","testString":"assert(typeof abTest(2, 2) === 'number');"},{"text":"<p><code>abTest(2, 2)</code> should return <code>8</code></p>","testString":"assert(abTest(2, 2) === 8);"},{"text":"<p><code>abTest(-2, 2)</code> should return <code>undefined</code></p>","testString":"assert(abTest(-2, 2) === undefined);"},{"text":"<p><code>abTest(2, -2)</code> should return <code>undefined</code></p>","testString":"assert(abTest(2, -2) === undefined);"},{"text":"<p><code>abTest(2, 8)</code> should return <code>18</code></p>","testString":"assert(abTest(2, 8) === 18);"},{"text":"<p><code>abTest(3, 3)</code> should return <code>12</code></p>","testString":"assert(abTest(3, 3) === 12);"},{"text":"<p><code>abTest(0, 0)</code> should return <code>0</code></p>","testString":"assert(abTest(0, 0) === 0);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Setup\nfunction abTest(a, b) {\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n\n  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}\n\nabTest(2,2);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"return-early-pattern-for-functions","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/counting-cards","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/returning-boolean-values-from-functions","id":"56533eb9ac21ba0edf2244c4"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/return-early-pattern-for-functions"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
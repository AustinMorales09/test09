{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Build JavaScript Objects","description":"<section id=\"description\">\n<p>You may have heard the term <code>object</code> before.</p>\n<p>Objects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.</p>\n<p>Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.</p>\n<p>Here's a sample cat object:</p>\n<pre><code class=\"language-js\">const cat = {\n  \"name\": \"Whiskers\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"enemies\": [\"Water\", \"Dogs\"]\n};\n</code></pre>\n<p>In this example, all the properties are stored as strings, such as <code>name</code>, <code>legs</code>, and <code>tails</code>. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:</p>\n<pre><code class=\"language-js\">const anotherObject = {\n  make: \"Ford\",\n  5: \"five\",\n  \"model\": \"focus\"\n};\n</code></pre>\n<p>However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.</p>\n</section>","id":"56bbb991ad1ed5201cd392d0","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Make an object that represents a dog called <code>myDog</code> which contains the properties <code>name</code> (a string), <code>legs</code>, <code>tails</code> and <code>friends</code>.</p>\n<p>You can set these object properties to whatever values you want, as long as <code>name</code> is a string, <code>legs</code> and <code>tails</code> are numbers, and <code>friends</code> is an array.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cWGkbtd","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16769,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects","tests":[{"text":"<p><code>myDog</code> should contain the property <code>name</code> and it should be a <code>string</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('name') &&\n      z.name !== undefined &&\n      typeof z.name === 'string'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should contain the property <code>legs</code> and it should be a <code>number</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('legs') &&\n      z.legs !== undefined &&\n      typeof z.legs === 'number'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should contain the property <code>tails</code> and it should be a <code>number</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('tails') &&\n      z.tails !== undefined &&\n      typeof z.tails === 'number'\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should contain the property <code>friends</code> and it should be an <code>array</code>.</p>","testString":"assert(\n  (function (z) {\n    if (\n      z.hasOwnProperty('friends') &&\n      z.friends !== undefined &&\n      Array.isArray(z.friends)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myDog)\n);"},{"text":"<p><code>myDog</code> should only contain all the given properties.</p>","testString":"assert(\n  (function (z) {\n    return Object.keys(z).length === 4;\n  })(myDog)\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const myDog = {\n  // Only change code below this line\n\n\n  // Only change code above this line\n};","head":"","tail":"(function(z){return z;})(myDog);","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"build-javascript-objects","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-dot-notation","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/counting-cards","id":"56bbb991ad1ed5201cd392d0"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/build-javascript-objects"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
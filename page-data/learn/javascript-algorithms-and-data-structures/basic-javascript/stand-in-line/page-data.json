{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Stand in Line","description":"<section id=\"description\">\n<p>In Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.</p>\n</section>","id":"56533eb9ac21ba0edf2244c6","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function <code>nextInLine</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments.</p>\n<p>Add the number to the end of the array, then remove the first element of the array.</p>\n<p>The <code>nextInLine</code> function should then return the element that was removed.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/ca8Q8tP","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18307,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line","tests":[{"text":"<p><code>nextInLine([], 5)</code> should return a number.</p>","testString":"assert.isNumber(nextInLine([], 5));"},{"text":"<p><code>nextInLine([], 1)</code> should return <code>1</code></p>","testString":"assert(nextInLine([], 1) === 1);"},{"text":"<p><code>nextInLine([2], 1)</code> should return <code>2</code></p>","testString":"assert(nextInLine([2], 1) === 2);"},{"text":"<p><code>nextInLine([5,6,7,8,9], 1)</code> should return <code>5</code></p>","testString":"assert(nextInLine([5, 6, 7, 8, 9], 1) === 5);"},{"text":"<p>After <code>nextInLine(testArr, 10)</code>, <code>testArr[4]</code> should be <code>10</code></p>","testString":"nextInLine(testArr, 10);\nassert(testArr[4] === 10);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function nextInLine(arr, item) {\n  // Only change code below this line\n  \n  return item;\n  // Only change code above this line\n}\n\n// Setup\nlet testArr = [1, 2, 3, 4, 5];\n\n// Display code\nconsole.log(\"Before: \" + JSON.stringify(testArr));\nconsole.log(nextInLine(testArr, 6));\nconsole.log(\"After: \" + JSON.stringify(testArr));","head":"var logOutput = [];\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput.push(message);\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();","tail":"uncapture();\ntestArr = [1,2,3,4,5];\n(function() { return logOutput.join(\"\\n\");})();","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"stand-in-line","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/understanding-boolean-values","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/assignment-with-a-returned-value","id":"56533eb9ac21ba0edf2244c6"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/stand-in-line"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
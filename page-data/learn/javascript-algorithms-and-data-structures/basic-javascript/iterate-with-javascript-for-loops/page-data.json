{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-for-loops",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Iterate with JavaScript For Loops","description":"<section id=\"description\">\n<p>You can run the same code multiple times by using a loop.</p>\n<p>The most common type of JavaScript loop is called a <code>for</code> loop because it runs for a specific number of times.</p>\n<p>For loops are declared with three optional expressions separated by semicolons:</p>\n<p><code>for (a; b; c)</code>, where <code>a</code> is the initialization statement, <code>b</code> is the condition statement, and <code>c</code> is the final expression.</p>\n<p>The initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.</p>\n<p>The condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When the condition is <code>false</code> at the start of the iteration, the loop will stop executing. This means if the condition starts as false, your loop will never execute.</p>\n<p>The final expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.</p>\n<p>In the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i &#x3C; 5</code> is true. We'll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our final expression.</p>\n<pre><code class=\"language-js\">const ourArray = [];\n\nfor (let i = 0; i &#x3C; 5; i++) {\n  ourArray.push(i);\n}\n</code></pre>\n<p><code>ourArray</code> will now have the value <code>[0, 1, 2, 3, 4]</code>.</p>\n</section>","id":"cf1111c1c11feddfaeb5bdef","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use a <code>for</code> loop to push the values 1 through 5 onto <code>myArray</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/c9yNVCe","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18219,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-for-loops","tests":[{"text":"<p>You should be using a <code>for</code> loop for this.</p>","testString":"assert(/for\\s*\\([^)]+?\\)/.test(__helpers.removeJSComments(code)));"},{"text":"<p><code>myArray</code> should equal <code>[1, 2, 3, 4, 5]</code>.</p>","testString":"assert.deepEqual(myArray, [1, 2, 3, 4, 5]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Setup\nconst myArray = [];\n\n// Only change code below this line\n","head":"","tail":"if (typeof myArray !== \"undefined\"){(function(){return myArray;})();}","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"iterate-with-javascript-for-loops","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-odd-numbers-with-a-for-loop","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-while-loops","id":"cf1111c1c11feddfaeb5bdef"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-for-loops"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-javascript","title":"Nesting For Loops","description":"<section id=\"description\">\n<p>If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:</p>\n<pre><code class=\"language-js\">const arr = [\n  [1, 2], [3, 4], [5, 6]\n];\n\nfor (let i = 0; i &#x3C; arr.length; i++) {\n  for (let j = 0; j &#x3C; arr[i].length; j++) {\n    console.log(arr[i][j]);\n  }\n}\n</code></pre>\n<p>This outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.</p>\n</section>","id":"56533eb9ac21ba0edf2244e1","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify function <code>multiplyAll</code> so that it returns the product of all the numbers in the sub-arrays of <code>arr</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":"https://scrimba.com/c/cRn6GHM","superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":18248,"fields":{"blockName":"basic-javascript","slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops","tests":[{"text":"<p><code>multiplyAll([[1], [2], [3]])</code> should return <code>6</code></p>","testString":"assert(multiplyAll([[1], [2], [3]]) === 6);"},{"text":"<p><code>multiplyAll([[1, 2], [3, 4], [5, 6, 7]])</code> should return <code>5040</code></p>","testString":"assert(\n  multiplyAll([\n    [1, 2],\n    [3, 4],\n    [5, 6, 7]\n  ]) === 5040\n);"},{"text":"<p><code>multiplyAll([[5, 1], [0.2, 4, 0.5], [3, 9]])</code> should return <code>54</code></p>","testString":"assert(\n  multiplyAll([\n    [5, 1],\n    [0.2, 4, 0.5],\n    [3, 9]\n  ]) === 54\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function multiplyAll(arr) {\n  let product = 1;\n  // Only change code below this line\n\n  // Only change code above this line\n  return product;\n}\n\nmultiplyAll([[1, 2], [3, 4], [5, 6, 7]]);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-javascript","dashedName":"nesting-for-loops","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-javascript","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-javascript","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-do---while-loops","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-through-an-array-with-a-for-loop","id":"56533eb9ac21ba0edf2244e1"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    const numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter",
    "result": {"data":{"challengeNode":{"challenge":{"block":"javascript-algorithms-and-data-structures-projects","title":"Roman Numeral Converter","description":"<section id=\"description\">\n<p>Convert the given number into a roman numeral.</p>\n<table>\n<thead>\n<tr>\n<th>Roman numerals</th>\n<th>Arabic numerals</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>CM</td>\n<td>900</td>\n</tr>\n<tr>\n<td>D</td>\n<td>500</td>\n</tr>\n<tr>\n<td>CD</td>\n<td>400</td>\n</tr>\n<tr>\n<td>C</td>\n<td>100</td>\n</tr>\n<tr>\n<td>XC</td>\n<td>90</td>\n</tr>\n<tr>\n<td>L</td>\n<td>50</td>\n</tr>\n<tr>\n<td>XL</td>\n<td>40</td>\n</tr>\n<tr>\n<td>X</td>\n<td>10</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>9</td>\n</tr>\n<tr>\n<td>V</td>\n<td>5</td>\n</tr>\n<tr>\n<td>IV</td>\n<td>4</td>\n</tr>\n<tr>\n<td>I</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>All roman numerals answers should be provided in upper-case.</p>\n</section>","id":"a7f4d8f2483413a6ce226cac","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":5,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16044,"fields":{"blockName":"javascript-algorithms-and-data-structures-projects","slug":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter","tests":[{"text":"<p><code>convertToRoman(2)</code> should return the string <code>II</code>.</p>","testString":"assert.deepEqual(convertToRoman(2), 'II');"},{"text":"<p><code>convertToRoman(3)</code> should return the string <code>III</code>.</p>","testString":"assert.deepEqual(convertToRoman(3), 'III');"},{"text":"<p><code>convertToRoman(4)</code> should return the string <code>IV</code>.</p>","testString":"assert.deepEqual(convertToRoman(4), 'IV');"},{"text":"<p><code>convertToRoman(5)</code> should return the string <code>V</code>.</p>","testString":"assert.deepEqual(convertToRoman(5), 'V');"},{"text":"<p><code>convertToRoman(9)</code> should return the string <code>IX</code>.</p>","testString":"assert.deepEqual(convertToRoman(9), 'IX');"},{"text":"<p><code>convertToRoman(12)</code> should return the string <code>XII</code>.</p>","testString":"assert.deepEqual(convertToRoman(12), 'XII');"},{"text":"<p><code>convertToRoman(16)</code> should return the string <code>XVI</code>.</p>","testString":"assert.deepEqual(convertToRoman(16), 'XVI');"},{"text":"<p><code>convertToRoman(29)</code> should return the string <code>XXIX</code>.</p>","testString":"assert.deepEqual(convertToRoman(29), 'XXIX');"},{"text":"<p><code>convertToRoman(44)</code> should return the string <code>XLIV</code>.</p>","testString":"assert.deepEqual(convertToRoman(44), 'XLIV');"},{"text":"<p><code>convertToRoman(45)</code> should return the string <code>XLV</code>.</p>","testString":"assert.deepEqual(convertToRoman(45), 'XLV');"},{"text":"<p><code>convertToRoman(68)</code> should return the string <code>LXVIII</code></p>","testString":"assert.deepEqual(convertToRoman(68), 'LXVIII');"},{"text":"<p><code>convertToRoman(83)</code> should return the string <code>LXXXIII</code></p>","testString":"assert.deepEqual(convertToRoman(83), 'LXXXIII');"},{"text":"<p><code>convertToRoman(97)</code> should return the string <code>XCVII</code></p>","testString":"assert.deepEqual(convertToRoman(97), 'XCVII');"},{"text":"<p><code>convertToRoman(99)</code> should return the string <code>XCIX</code></p>","testString":"assert.deepEqual(convertToRoman(99), 'XCIX');"},{"text":"<p><code>convertToRoman(400)</code> should return the string <code>CD</code></p>","testString":"assert.deepEqual(convertToRoman(400), 'CD');"},{"text":"<p><code>convertToRoman(500)</code> should return the string <code>D</code></p>","testString":"assert.deepEqual(convertToRoman(500), 'D');"},{"text":"<p><code>convertToRoman(501)</code> should return the string <code>DI</code></p>","testString":"assert.deepEqual(convertToRoman(501), 'DI');"},{"text":"<p><code>convertToRoman(649)</code> should return the string <code>DCXLIX</code></p>","testString":"assert.deepEqual(convertToRoman(649), 'DCXLIX');"},{"text":"<p><code>convertToRoman(798)</code> should return the string <code>DCCXCVIII</code></p>","testString":"assert.deepEqual(convertToRoman(798), 'DCCXCVIII');"},{"text":"<p><code>convertToRoman(891)</code> should return the string <code>DCCCXCI</code></p>","testString":"assert.deepEqual(convertToRoman(891), 'DCCCXCI');"},{"text":"<p><code>convertToRoman(1000)</code> should return the string <code>M</code></p>","testString":"assert.deepEqual(convertToRoman(1000), 'M');"},{"text":"<p><code>convertToRoman(1004)</code> should return the string <code>MIV</code></p>","testString":"assert.deepEqual(convertToRoman(1004), 'MIV');"},{"text":"<p><code>convertToRoman(1006)</code> should return the string <code>MVI</code></p>","testString":"assert.deepEqual(convertToRoman(1006), 'MVI');"},{"text":"<p><code>convertToRoman(1023)</code> should return the string <code>MXXIII</code></p>","testString":"assert.deepEqual(convertToRoman(1023), 'MXXIII');"},{"text":"<p><code>convertToRoman(2014)</code> should return the string <code>MMXIV</code></p>","testString":"assert.deepEqual(convertToRoman(2014), 'MMXIV');"},{"text":"<p><code>convertToRoman(3999)</code> should return the string <code>MMMCMXCIX</code></p>","testString":"assert.deepEqual(convertToRoman(3999), 'MMMCMXCIX');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#javascript-algorithms-and-data-structures-projects","dashedName":"roman-numeral-converter","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"javascript-algorithms-and-data-structures-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"javascript-algorithms-and-data-structures-projects","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/caesars-cipher","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/palindrome-checker","id":"a7f4d8f2483413a6ce226cac"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":5,"challengeFiles":[{"name":"script","ext":"js","contents":"const denom = [\n  { name: \"ONE HUNDRED\", val: 100 },\n  { name: \"TWENTY\", val: 20 },\n  { name: \"TEN\", val: 10 },\n  { name: \"FIVE\", val: 5 },\n  { name: \"ONE\", val: 1 },\n  { name: \"QUARTER\", val: 0.25 },\n  { name: \"DIME\", val: 0.1 },\n  { name: \"NICKEL\", val: 0.05 },\n  { name: \"PENNY\", val: 0.01 },\n];\n\nfunction checkCashRegister(price, cash, cid) {\n  const output = { status: null, change: [] };\n  let change = cash - price;\n  const register = cid.reduce(\n    function (acc, curr) {\n      acc.total += curr[1];\n      acc[curr[0]] = curr[1];\n      return acc;\n    },\n    { total: 0 }\n  );\n  if (register.total === change) {\n    output.status = \"CLOSED\";\n    output.change = cid;\n    return output;\n  }\n  if (register.total < change) {\n    output.status = \"INSUFFICIENT_FUNDS\";\n    return output;\n  }\n  const change_arr = denom.reduce(function (acc, curr) {\n    let value = 0;\n    while (register[curr.name] > 0 && change >= curr.val) {\n      change -= curr.val;\n      register[curr.name] -= curr.val;\n      value += curr.val;\n      change = Math.round(change * 100) / 100;\n    }\n    if (value > 0) {\n      acc.push([curr.name, value]);\n    }\n    return acc;\n  }, []);\n  if (change_arr.length < 1 || change > 0) {\n    output.status = \"INSUFFICIENT_FUNDS\";\n    return output;\n  }\n  output.status = \"OPEN\";\n  output.change = change_arr;\n  return output;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
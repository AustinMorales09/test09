{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/palindrome-checker",
    "result": {"data":{"challengeNode":{"challenge":{"block":"javascript-algorithms-and-data-structures-projects","title":"Palindrome Checker","description":"<section id=\"description\">\n<p>Return <code>true</code> if the given string is a palindrome. Otherwise, return <code>false</code>.</p>\n<p>A <dfn>palindrome</dfn> is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.</p>\n<p><strong>Note:</strong> You'll need to remove <strong>all non-alphanumeric characters</strong> (punctuation, spaces and symbols) and turn everything into the same case (lower or upper case) in order to check for palindromes.</p>\n<p>We'll pass strings with varying formats, such as <code>racecar</code>, <code>RaceCar</code>, and <code>race CAR</code> among others.</p>\n<p>We'll also pass strings with special symbols, such as <code>2A3*3a2</code>, <code>2A3 3a2</code>, and <code>2_A3*3#A2</code>.</p>\n</section>","id":"aaa48de84e1ecc7c742e1124","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":5,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16004,"fields":{"blockName":"javascript-algorithms-and-data-structures-projects","slug":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/palindrome-checker","tests":[{"text":"<p><code>palindrome(\"eye\")</code> should return a boolean.</p>","testString":"assert(typeof palindrome('eye') === 'boolean');"},{"text":"<p><code>palindrome(\"eye\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('eye') === true);"},{"text":"<p><code>palindrome(\"_eye\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('_eye') === true);"},{"text":"<p><code>palindrome(\"race car\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('race car') === true);"},{"text":"<p><code>palindrome(\"not a palindrome\")</code> should return <code>false</code>.</p>","testString":"assert(palindrome('not a palindrome') === false);"},{"text":"<p><code>palindrome(\"A man, a plan, a canal. Panama\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('A man, a plan, a canal. Panama') === true);"},{"text":"<p><code>palindrome(\"never odd or even\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('never odd or even') === true);"},{"text":"<p><code>palindrome(\"nope\")</code> should return <code>false</code>.</p>","testString":"assert(palindrome('nope') === false);"},{"text":"<p><code>palindrome(\"almostomla\")</code> should return <code>false</code>.</p>","testString":"assert(palindrome('almostomla') === false);"},{"text":"<p><code>palindrome(\"My age is 0, 0 si ega ym.\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('My age is 0, 0 si ega ym.') === true);"},{"text":"<p><code>palindrome(\"1 eye for of 1 eye.\")</code> should return <code>false</code>.</p>","testString":"assert(palindrome('1 eye for of 1 eye.') === false);"},{"text":"<p><code>palindrome(\"0_0 (: /-\\ :) 0-0\")</code> should return <code>true</code>.</p>","testString":"assert(palindrome('0_0 (: /- :) 0-0') === true);"},{"text":"<p><code>palindrome(\"five|\\_/|four\")</code> should return <code>false</code>.</p>","testString":"assert(palindrome('five|_/|four') === false);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function palindrome(str) {\n  return true;\n}\n\npalindrome(\"eye\");","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#javascript-algorithms-and-data-structures-projects","dashedName":"palindrome-checker","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"javascript-algorithms-and-data-structures-projects","isFirstStep":true,"template":null,"required":[],"nextBlock":"javascript-algorithms-and-data-structures-projects","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/roman-numeral-converter","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/map-the-debris","id":"aaa48de84e1ecc7c742e1124"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":5,"challengeFiles":[{"name":"script","ext":"js","contents":"const denom = [\n  { name: \"ONE HUNDRED\", val: 100 },\n  { name: \"TWENTY\", val: 20 },\n  { name: \"TEN\", val: 10 },\n  { name: \"FIVE\", val: 5 },\n  { name: \"ONE\", val: 1 },\n  { name: \"QUARTER\", val: 0.25 },\n  { name: \"DIME\", val: 0.1 },\n  { name: \"NICKEL\", val: 0.05 },\n  { name: \"PENNY\", val: 0.01 },\n];\n\nfunction checkCashRegister(price, cash, cid) {\n  const output = { status: null, change: [] };\n  let change = cash - price;\n  const register = cid.reduce(\n    function (acc, curr) {\n      acc.total += curr[1];\n      acc[curr[0]] = curr[1];\n      return acc;\n    },\n    { total: 0 }\n  );\n  if (register.total === change) {\n    output.status = \"CLOSED\";\n    output.change = cid;\n    return output;\n  }\n  if (register.total < change) {\n    output.status = \"INSUFFICIENT_FUNDS\";\n    return output;\n  }\n  const change_arr = denom.reduce(function (acc, curr) {\n    let value = 0;\n    while (register[curr.name] > 0 && change >= curr.val) {\n      change -= curr.val;\n      register[curr.name] -= curr.val;\n      value += curr.val;\n      change = Math.round(change * 100) / 100;\n    }\n    if (value > 0) {\n      acc.push([curr.name, value]);\n    }\n    return acc;\n  }, []);\n  if (change_arr.length < 1 || change > 0) {\n    output.status = \"INSUFFICIENT_FUNDS\";\n    return output;\n  }\n  output.status = \"OPEN\";\n  output.change = change_arr;\n  return output;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/javascript-algorithms-and-data-structures-projects/palindrome-checker"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
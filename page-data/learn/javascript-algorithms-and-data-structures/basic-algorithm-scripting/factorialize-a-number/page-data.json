{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/factorialize-a-number",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-algorithm-scripting","title":"Factorialize a Number","description":"<section id=\"description\">\n<p>Return the factorial of the provided integer.</p>\n<p>If the integer is represented with the letter <code>n</code>, a factorial is the product of all positive integers less than or equal to <code>n</code>.</p>\n<p>Factorials are often represented with the shorthand notation <code>n!</code></p>\n<p>For example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<p>Only integers greater than or equal to zero will be supplied to the function.</p>\n</section>","id":"a302f7aae1aa3152a5b413bc","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16013,"fields":{"blockName":"basic-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/factorialize-a-number","tests":[{"text":"<p><code>factorialize(5)</code> should return a number.</p>","testString":"assert(typeof factorialize(5) === 'number');"},{"text":"<p><code>factorialize(5)</code> should return <code>120</code>.</p>","testString":"assert(factorialize(5) === 120);"},{"text":"<p><code>factorialize(10)</code> should return <code>3628800</code>.</p>","testString":"assert(factorialize(10) === 3628800);"},{"text":"<p><code>factorialize(20)</code> should return <code>2432902008176640000</code>.</p>","testString":"assert(factorialize(20) === 2432902008176640000);"},{"text":"<p><code>factorialize(0)</code> should return <code>1</code>.</p>","testString":"assert(factorialize(0) === 1);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function factorialize(num) {\n  return num;\n}\n\nfactorialize(5);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-algorithm-scripting","dashedName":"factorialize-a-number","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/find-the-longest-word-in-a-string","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/reverse-a-string","id":"a302f7aae1aa3152a5b413bc"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/factorialize-a-number"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/finders-keepers",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-algorithm-scripting","title":"Finders Keepers","description":"<section id=\"description\">\n<p>Create a function that looks through an array <code>arr</code> and returns the first element in it that passes a 'truth test'. This means that given an element <code>x</code>, the 'truth test' is passed if <code>func(x)</code> is <code>true</code>. If no element passes the test, return <code>undefined</code>.</p>\n</section>","id":"a6e40f1041b06c996f7b2406","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16016,"fields":{"blockName":"basic-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/finders-keepers","tests":[{"text":"<p><code>findElement([1, 3, 5, 8, 9, 10], function(num) { return num % 2 === 0; })</code> should return <code>8</code>.</p>","testString":"assert.strictEqual(\n  findElement([1, 3, 5, 8, 9, 10], function (num) {\n    return num % 2 === 0;\n  }),\n  8\n);"},{"text":"<p><code>findElement([1, 3, 5, 9], function(num) { return num % 2 === 0; })</code> should return <code>undefined</code>.</p>","testString":"assert.strictEqual(\n  findElement([1, 3, 5, 9], function (num) {\n    return num % 2 === 0;\n  }),\n  undefined\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function findElement(arr, func) {\n  let num = 0;\n  return num;\n}\n\nfindElement([1, 2, 3, 4], num => num % 2 === 0);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-algorithm-scripting","dashedName":"finders-keepers","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/boo-who","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/truncate-a-string","id":"a6e40f1041b06c996f7b2406"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/finders-keepers"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
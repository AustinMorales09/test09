{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/where-do-i-belong",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-algorithm-scripting","title":"Where do I Belong","description":"<section id=\"description\">\n<p>Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.</p>\n<p>For example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).</p>\n<p>Likewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).</p>\n</section>","id":"a24c1a4622e3c05097f71d67","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16094,"fields":{"blockName":"basic-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/where-do-i-belong","tests":[{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.</p>","testString":"assert(getIndexToIns([10, 20, 30, 40, 50], 35) === 3);"},{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([10, 20, 30, 40, 50], 35) === 'number');"},{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.</p>","testString":"assert(getIndexToIns([10, 20, 30, 40, 50], 30) === 2);"},{"text":"<p><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([10, 20, 30, 40, 50], 30) === 'number');"},{"text":"<p><code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.</p>","testString":"assert(getIndexToIns([40, 60], 50) === 1);"},{"text":"<p><code>getIndexToIns([40, 60], 50)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([40, 60], 50) === 'number');"},{"text":"<p><code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.</p>","testString":"assert(getIndexToIns([3, 10, 5], 3) === 0);"},{"text":"<p><code>getIndexToIns([3, 10, 5], 3)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([3, 10, 5], 3) === 'number');"},{"text":"<p><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.</p>","testString":"assert(getIndexToIns([5, 3, 20, 3], 5) === 2);"},{"text":"<p><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([5, 3, 20, 3], 5) === 'number');"},{"text":"<p><code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.</p>","testString":"assert(getIndexToIns([2, 20, 10], 19) === 2);"},{"text":"<p><code>getIndexToIns([2, 20, 10], 19)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([2, 20, 10], 19) === 'number');"},{"text":"<p><code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.</p>","testString":"assert(getIndexToIns([2, 5, 10], 15) === 3);"},{"text":"<p><code>getIndexToIns([2, 5, 10], 15)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([2, 5, 10], 15) === 'number');"},{"text":"<p><code>getIndexToIns([], 1)</code> should return <code>0</code>.</p>","testString":"assert(getIndexToIns([], 1) === 0);"},{"text":"<p><code>getIndexToIns([], 1)</code> should return a number.</p>","testString":"assert(typeof getIndexToIns([], 1) === 'number');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-algorithm-scripting","dashedName":"where-do-i-belong","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/mutations","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/falsy-bouncer","id":"a24c1a4622e3c05097f71d67"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/where-do-i-belong"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
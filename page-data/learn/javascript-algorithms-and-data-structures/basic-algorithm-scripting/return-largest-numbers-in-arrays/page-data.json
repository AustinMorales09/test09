{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-algorithm-scripting","title":"Return Largest Numbers in Arrays","description":"<section id=\"description\">\n<p>Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.</p>\n<p>Remember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.</p>\n</section>","id":"a789b3483989747d63b0e427","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16042,"fields":{"blockName":"basic-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays","tests":[{"text":"<p><code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.</p>","testString":"assert(\n  largestOfFour([\n    [4, 5, 1, 3],\n    [13, 27, 18, 26],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]).constructor === Array\n);"},{"text":"<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.</p>","testString":"assert.deepEqual(\n  largestOfFour([\n    [13, 27, 18, 26],\n    [4, 5, 1, 3],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]),\n  [27, 5, 39, 1001]\n);"},{"text":"<p><code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.</p>","testString":"assert.deepEqual(\n  largestOfFour([\n    [4, 9, 1, 3],\n    [13, 35, 18, 26],\n    [32, 35, 97, 39],\n    [1000000, 1001, 857, 1]\n  ]),\n  [9, 35, 97, 1000000]\n);"},{"text":"<p><code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.</p>","testString":"assert.deepEqual(\n  largestOfFour([\n    [17, 23, 25, 12],\n    [25, 7, 34, 48],\n    [4, -10, 18, 21],\n    [-72, -3, -17, -10]\n  ]),\n  [25, 48, 21, -3]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function largestOfFour(arr) {\n  return arr;\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-algorithm-scripting","dashedName":"return-largest-numbers-in-arrays","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/confirm-the-ending","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/find-the-longest-word-in-a-string","id":"a789b3483989747d63b0e427"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-algorithm-scripting/return-largest-numbers-in-arrays"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
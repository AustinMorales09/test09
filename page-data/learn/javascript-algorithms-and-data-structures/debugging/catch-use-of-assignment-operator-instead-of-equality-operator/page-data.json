{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator",
    "result": {"data":{"challengeNode":{"challenge":{"block":"debugging","title":"Catch Use of Assignment Operator Instead of Equality Operator","description":"<section id=\"description\">\n<p>Branching programs, i.e. ones that do different things if certain conditions are met, rely on <code>if</code>, <code>else if</code>, and <code>else</code> statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.</p>\n<p>This logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the <code>=</code>, or assignment operator. This leads to unexpected control flow in your program.</p>\n<p>As covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).</p>\n<p>The code below assigns <code>x</code> to be 2, which evaluates as <code>true</code>. Almost every value on its own in JavaScript evaluates to <code>true</code>, except what are known as the \"falsy\" values: <code>false</code>, <code>0</code>, <code>\"\"</code> (an empty string), <code>NaN</code>, <code>undefined</code>, and <code>null</code>.</p>\n<pre><code class=\"language-js\">let x = 1;\nlet y = 2;\nif (x = y) {\n\n} else {\n\n}\n</code></pre>\n<p>In this example, the code block within the <code>if</code> statement will run for any value of <code>y</code>, unless <code>y</code> is falsy. The <code>else</code> block, which we expect to run here, will not actually run.</p>\n</section>","id":"587d7b85367417b2b2512b38","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the condition so the program runs the right branch, and the appropriate value is assigned to <code>result</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301191,"fields":{"blockName":"debugging","slug":"/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator","tests":[{"text":"<p>Your code should fix the condition so it checks for equality, instead of using assignment.</p>","testString":"assert(result == 'Not equal!');"},{"text":"<p>The condition should use either <code>==</code> or <code>===</code> to test for equality.</p>","testString":"assert(__helpers.removeJSComments(code).match(/x\\s*?===?\\s*?y/g));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#debugging","dashedName":"catch-use-of-assignment-operator-instead-of-equality-operator","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"debugging","isFirstStep":false,"template":null,"required":[],"nextBlock":"debugging","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/debugging/catch-mixed-usage-of-single-and-double-quotes","id":"587d7b85367417b2b2512b38"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function myFunc() {\n for (let i = 1; i <= 4; i += 2) {\n   console.log(\"Still going!\");\n }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
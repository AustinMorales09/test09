{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/debugging/catch-misspelled-variable-and-function-names",
    "result": {"data":{"challengeNode":{"challenge":{"block":"debugging","title":"Catch Misspelled Variable and Function Names","description":"<section id=\"description\">\n<p>The <code>console.log()</code> and <code>typeof</code> methods are the two primary ways to check intermediate values and types of program output. Now it's time to get into the common forms that bugs take. One syntax-level issue that fast typers can commiserate with is the humble spelling error.</p>\n<p>Transposed, missing, or miscapitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. JavaScript variable and function names are case-sensitive.</p>\n</section>","id":"587d7b84367417b2b2512b35","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the two spelling errors in the code so the <code>netWorkingCapital</code> calculation works.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301186,"fields":{"blockName":"debugging","slug":"/learn/javascript-algorithms-and-data-structures/debugging/catch-misspelled-variable-and-function-names","tests":[{"text":"<p>Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".</p>","testString":"assert(netWorkingCapital === 2);"},{"text":"<p>There should be no instances of misspelled variables in the code.</p>","testString":"assert(!__helpers.removeJSComments(code).match(/recievables/g));"},{"text":"<p>The <code>receivables</code> variable should be declared and used properly in the code.</p>","testString":"assert(__helpers.removeJSComments(code).match(/receivables/g).length == 2);"},{"text":"<p>There should be no instances of misspelled variables in the code.</p>","testString":"assert(!__helpers.removeJSComments(code).match(/payable;/g));"},{"text":"<p>The <code>payables</code> variable should be declared and used properly in the code.</p>","testString":"assert(__helpers.removeJSComments(code).match(/payables/g).length == 2);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = recievables - payable;\nconsole.log(`Net working capital is: ${netWorkingCapital}`);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#debugging","dashedName":"catch-misspelled-variable-and-function-names","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"debugging","isFirstStep":false,"template":null,"required":[],"nextBlock":"debugging","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/debugging/catch-unclosed-parentheses-brackets-braces-and-quotes","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/debugging/use-typeof-to-check-the-type-of-a-variable","id":"587d7b84367417b2b2512b35"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function myFunc() {\n for (let i = 1; i <= 4; i += 2) {\n   console.log(\"Still going!\");\n }\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/debugging/catch-misspelled-variable-and-function-names"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Use class Syntax to Define a Constructor Function","description":"<section id=\"description\">\n<p>ES6 provides a new syntax to create objects, using the <dfn>class</dfn> keyword.</p>\n<p>In ES5, an object can be created by defining a <code>constructor</code> function and using the <code>new</code> keyword to instantiate the object.</p>\n<p>In ES6, a <code>class</code> declaration has a <code>constructor</code> method that is invoked with the <code>new</code> keyword. If the <code>constructor</code> method is not explicitly defined, then it is implicitly defined with no arguments.</p>\n<pre><code class=\"language-js\">// Explicit constructor\nclass SpaceShuttle {\n  constructor(targetPlanet) {\n    this.targetPlanet = targetPlanet;\n  }\n  takeOff() {\n    console.log(\"To \" + this.targetPlanet + \"!\");\n  }\n}\n\n// Implicit constructor \nclass Rocket {\n  launch() {\n    console.log(\"To the moon!\");\n  }\n}\n\nconst zeus = new SpaceShuttle('Jupiter');\n// prints To Jupiter! in console\nzeus.takeOff();\n\nconst atlas = new Rocket();\n// prints To the moon! in console\natlas.launch();\n</code></pre>\n<p>It should be noted that the <code>class</code> keyword declares a new function, to which a constructor is added. This constructor is invoked when <code>new</code> is called to create a new object.</p>\n<p><strong>Note:</strong> UpperCamelCase should be used by convention for ES6 class names, as in <code>SpaceShuttle</code> used above.</p>\n<p>The <code>constructor</code> method is a special method for creating and initializing an object created with a class. You will learn more about it in the Object Oriented Programming section of the JavaScript Algorithms And Data Structures Certification.</p>\n</section>","id":"587d7b8b367417b2b2512b53","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use the <code>class</code> keyword and write a <code>constructor</code> to create the <code>Vegetable</code> class.</p>\n<p>The <code>Vegetable</code> class allows you to create a vegetable object with a property <code>name</code> that gets passed to the <code>constructor</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301212,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function","tests":[{"text":"<p><code>Vegetable</code> should be a <code>class</code> with a defined <code>constructor</code> method.</p>","testString":"assert(\n  typeof Vegetable === 'function' && typeof Vegetable.constructor === 'function'\n);"},{"text":"<p>The <code>class</code> keyword should be used.</p>","testString":"assert(__helpers.removeJSComments(code).match(/class/g));"},{"text":"<p><code>Vegetable</code> should be able to be instantiated.</p>","testString":"assert(() => {\n  const a = new Vegetable('apple');\n  return typeof a === 'object';\n});"},{"text":"<p><code>carrot.name</code> should return <code>carrot</code>.</p>","testString":"assert(carrot.name == 'carrot');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Only change code below this line\n\n// Only change code above this line\n\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // Should display 'carrot'","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"use-class-syntax-to-define-a-constructor-function","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-getters-and-setters-to-control-access-to-an-object","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6","id":"587d7b8b367417b2b2512b53"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
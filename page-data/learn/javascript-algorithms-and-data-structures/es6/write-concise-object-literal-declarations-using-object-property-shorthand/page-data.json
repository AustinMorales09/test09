{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-object-property-shorthand",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Write Concise Object Literal Declarations Using Object Property Shorthand","description":"<section id=\"description\">\n<p>ES6 adds some nice support for easily defining object literals.</p>\n<p>Consider the following code:</p>\n<pre><code class=\"language-js\">const getMousePosition = (x, y) => ({\n  x: x,\n  y: y\n});\n</code></pre>\n<p><code>getMousePosition</code> is a simple function that returns an object containing two properties. ES6 provides the syntactic sugar to eliminate the redundancy of having to write <code>x: x</code>. You can simply write <code>x</code> once, and it will be converted to<code>x: x</code> (or something equivalent) under the hood. Here is the same function from above rewritten to use this new syntax:</p>\n<pre><code class=\"language-js\">const getMousePosition = (x, y) => ({ x, y });\n</code></pre>\n</section>","id":"587d7b8a367417b2b2512b4f","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use object property shorthand with object literals to create and return an object with <code>name</code>, <code>age</code> and <code>gender</code> properties.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301225,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-object-property-shorthand","tests":[{"text":"<p><code>createPerson(\"Zodiac Hasbro\", 56, \"male\")</code> should return <code>{name: \"Zodiac Hasbro\", age: 56, gender: \"male\"}</code>.</p>","testString":"assert.deepEqual(\n  { name: 'Zodiac Hasbro', age: 56, gender: 'male' },\n  createPerson('Zodiac Hasbro', 56, 'male')\n);"},{"text":"<p>Your code should not use <code>key:value</code>.</p>","testString":"assert(!__helpers.removeJSComments(code).match(/:/g))"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const createPerson = (name, age, gender) => {\n  // Only change code below this line\n  return {\n    name: name,\n    age: age,\n    gender: gender\n  };\n  // Only change code above this line\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"write-concise-object-literal-declarations-using-object-property-shorthand","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals","id":"587d7b8a367417b2b2512b4f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-object-property-shorthand"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
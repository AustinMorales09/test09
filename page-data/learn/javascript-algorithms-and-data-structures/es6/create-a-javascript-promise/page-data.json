{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/create-a-javascript-promise",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Create a JavaScript Promise","description":"<section id=\"description\">\n<p>A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. When the task completes, you either fulfill your promise or fail to do so. <code>Promise</code> is a constructor function, so you need to use the <code>new</code> keyword to create one. It takes a function, as its argument, with two parameters - <code>resolve</code> and <code>reject</code>. These are methods used to determine the outcome of the promise. The syntax looks like this:</p>\n<pre><code class=\"language-js\">const myPromise = new Promise((resolve, reject) => {\n\n});\n</code></pre>\n</section>","id":"5cdafbb0291309899753167f","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a new promise called <code>makeServerRequest</code>. Pass in a function with <code>resolve</code> and <code>reject</code> parameters to the constructor.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301197,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/create-a-javascript-promise","tests":[{"text":"<p>You should assign a promise to a declared variable named <code>makeServerRequest</code>.</p>","testString":"assert(makeServerRequest instanceof Promise);"},{"text":"<p>Your promise should receive a function with <code>resolve</code> and <code>reject</code> as parameters.</p>","testString":"assert(\n  __helpers.removeJSComments(code).match(\n    /Promise\\s*\\(\\s*(function\\s*\\(\\s*resolve\\s*,\\s*reject\\s*\\)\\s*{|\\(\\s*resolve\\s*,\\s*reject\\s*\\)\\s*=>\\s*{)[^}]*}/g\n  )\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"create-a-javascript-promise","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/complete-a-promise-with-resolve-and-reject","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/import-a-default-export","id":"5cdafbb0291309899753167f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/create-a-javascript-promise"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
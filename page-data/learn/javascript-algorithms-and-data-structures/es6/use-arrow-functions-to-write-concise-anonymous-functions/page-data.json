{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/use-arrow-functions-to-write-concise-anonymous-functions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Use Arrow Functions to Write Concise Anonymous Functions","description":"<section id=\"description\">\n<p>In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.</p>\n<p>To achieve this, we often use the following syntax:</p>\n<pre><code class=\"language-js\">const myFunc = function() {\n  const myVar = \"value\";\n  return myVar;\n}\n</code></pre>\n<p>ES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use <strong>arrow function syntax</strong>:</p>\n<pre><code class=\"language-js\">const myFunc = () => {\n  const myVar = \"value\";\n  return myVar;\n}\n</code></pre>\n<p>When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword <code>return</code> as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:</p>\n<pre><code class=\"language-js\">const myFunc = () => \"value\";\n</code></pre>\n<p>This code will still return the string <code>value</code> by default.</p>\n</section>","id":"587d7b87367417b2b2512b43","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Rewrite the function assigned to the variable <code>magic</code> which returns a <code>new Date()</code> to use arrow function syntax. Also, make sure nothing is defined using the keyword <code>var</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301211,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/use-arrow-functions-to-write-concise-anonymous-functions","tests":[{"text":"<p>You should replace the <code>var</code> keyword.</p>","testString":"assert.notMatch(code, /var/g)"},{"text":"<p><code>magic</code> should be a constant variable (by using <code>const</code>).</p>","testString":"assert.match(code, /const\\s+magic/g)"},{"text":"<p><code>magic</code> should be a <code>function</code>.</p>","testString":"assert(typeof magic === 'function');"},{"text":"<p><code>magic()</code> should return the correct date.</p>","testString":"assert(magic().setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));"},{"text":"<p>The <code>function</code> keyword should not be used.</p>","testString":"assert.notMatch(code, /function/g)"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"var magic = function() {\n  return new Date();\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"use-arrow-functions-to-write-concise-anonymous-functions","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/prevent-object-mutation","id":"587d7b87367417b2b2512b43"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/use-arrow-functions-to-write-concise-anonymous-functions"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Use the Spread Operator to Evaluate Arrays In-Place","description":"<section id=\"description\">\n<p>ES6 introduces the <dfn>spread operator</dfn>, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.</p>\n<p>The ES5 code below uses <code>apply()</code> to compute the maximum value in an array:</p>\n<pre><code class=\"language-js\">var arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(null, arr);\n</code></pre>\n<p><code>maximus</code> would have a value of <code>89</code>.</p>\n<p>We had to use <code>Math.max.apply(null, arr)</code> because <code>Math.max(arr)</code> returns <code>NaN</code>. <code>Math.max()</code> expects comma-separated arguments, but not an array. The spread operator makes this syntax much better to read and maintain.</p>\n<pre><code class=\"language-js\">const arr = [6, 89, 3, 45];\nconst maximus = Math.max(...arr);\n</code></pre>\n<p><code>maximus</code> would have a value of <code>89</code>.</p>\n<p><code>...arr</code> returns an unpacked array. In other words, it spreads the array. However, the spread operator only works in-place, like in an argument to a function or in an array literal. For example:</p>\n<pre><code class=\"language-js\">const spreaded = [...arr];\n</code></pre>\n<p>However, the following code will not work:</p>\n<pre><code class=\"language-js\">const spreaded = ...arr;\n</code></pre>\n</section>","id":"587d7b89367417b2b2512b48","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Copy all contents of <code>arr1</code> into another array <code>arr2</code> using the spread operator.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301222,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place","tests":[{"text":"<p><code>arr2</code> should be correct copy of <code>arr1</code>.</p>","testString":"assert(arr2.every((v, i) => v === arr1[i]) && arr2.length);"},{"text":"<p><code>...</code> spread operator should be used to duplicate <code>arr1</code>.</p>","testString":"assert(__helpers.removeJSComments(code).match(/Array\\(\\s*\\.\\.\\.arr1\\s*\\)|\\[\\s*\\.\\.\\.arr1\\s*\\]/));"},{"text":"<p><code>arr2</code> should remain unchanged when <code>arr1</code> is changed.</p>","testString":"assert((arr1, arr2) => {\n  arr1.push('JUN');\n  return arr2.length < arr1.length;\n});"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\n\narr2 = [];  // Change this line\n\nconsole.log(arr2);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"use-the-spread-operator-to-evaluate-arrays-in-place","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-extract-values-from-objects","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters","id":"587d7b89367417b2b2512b48"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
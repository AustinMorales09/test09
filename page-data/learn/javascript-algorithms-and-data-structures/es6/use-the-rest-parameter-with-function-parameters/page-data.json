{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Use the Rest Parameter with Function Parameters","description":"<section id=\"description\">\n<p>In order to help us create more flexible functions, ES6 introduces the <dfn>rest parameter</dfn> for function parameters. With the rest parameter, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.</p>\n<p>Check out this code:</p>\n<pre><code class=\"language-js\">function howMany(...args) {\n  return \"You have passed \" + args.length + \" arguments.\";\n}\nconsole.log(howMany(0, 1, 2));\nconsole.log(howMany(\"string\", null, [1, 2, 3], { }));\n</code></pre>\n<p>The console would display the strings <code>You have passed 3 arguments.</code> and <code>You have passed 4 arguments.</code>.</p>\n<p>The rest parameter eliminates the need to use the <code>arguments</code> object and allows us to use array methods on the array of parameters passed to the function <code>howMany</code>.</p>\n</section>","id":"587d7b88367417b2b2512b47","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify the function <code>sum</code> using the rest parameter in such a way that the function <code>sum</code> is able to take any number of arguments and return their sum.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301221,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters","tests":[{"text":"<p>The result of <code>sum(0,1,2)</code> should be 3</p>","testString":"assert(sum(0, 1, 2) === 3);"},{"text":"<p>The result of <code>sum(1,2,3,4)</code> should be 10</p>","testString":"assert(sum(1, 2, 3, 4) === 10);"},{"text":"<p>The result of <code>sum(5)</code> should be 5</p>","testString":"assert(sum(5) === 5);"},{"text":"<p>The result of <code>sum()</code> should be 0</p>","testString":"assert(sum() === 0);"},{"text":"<p><code>sum</code> should be an arrow function which uses the rest parameter syntax (<code>...</code>) on the <code>args</code> parameter.</p>","testString":"assert(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/sum=\\(\\.\\.\\.args\\)=>/));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const sum = (x, y, z) => {\n  const args = [x, y, z];\n  let total = 0;\n  for (let i = 0; i < args.length; i++) {\n    total += args[i];\n  }\n  return total;\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"use-the-rest-parameter-with-function-parameters","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions","id":"587d7b88367417b2b2512b47"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Set Default Parameters for Your Functions","description":"<section id=\"description\">\n<p>In order to help us create more flexible functions, ES6 introduces <dfn>default parameters</dfn> for functions.</p>\n<p>Check out this code:</p>\n<pre><code class=\"language-js\">const greeting = (name = \"Anonymous\") => \"Hello \" + name;\n\nconsole.log(greeting(\"John\"));\nconsole.log(greeting());\n</code></pre>\n<p>The console will display the strings <code>Hello John</code> and <code>Hello Anonymous</code>.</p>\n<p>The default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter <code>name</code> will receive its default value <code>Anonymous</code> when you do not provide a value for the parameter. You can add default values for as many parameters as you want.</p>\n</section>","id":"587d7b88367417b2b2512b46","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify the function <code>increment</code> by adding default parameters so that it will add 1 to <code>number</code> if <code>value</code> is not specified.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301209,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions","tests":[{"text":"<p>The result of <code>increment(5, 2)</code> should be <code>7</code>.</p>","testString":"assert(increment(5, 2) === 7);"},{"text":"<p>The result of <code>increment(5)</code> should be <code>6</code>.</p>","testString":"assert(increment(5) === 6);"},{"text":"<p>A default parameter value of <code>1</code> should be used for <code>value</code>.</p>","testString":"assert(__helpers.removeJSComments(code).match(/value\\s*=\\s*1/g));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Only change code below this line\nconst increment = (number, value) => number + value;\n// Only change code above this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"set-default-parameters-for-your-functions","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters","id":"587d7b88367417b2b2512b46"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
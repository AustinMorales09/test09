{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements",
    "result": {"data":{"challengeNode":{"challenge":{"block":"es6","title":"Destructuring via rest elements","description":"<section id=\"description\">\n<p>In some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.</p>\n<p>The result is similar to <code>Array.prototype.slice()</code>, as shown below:</p>\n<pre><code class=\"language-js\">const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b);\nconsole.log(arr);\n</code></pre>\n<p>The console would display the values <code>1, 2</code> and <code>[3, 4, 5, 7]</code>.</p>\n<p>Variables <code>a</code> and <code>b</code> take the first and second values from the array. After that, because of the rest syntax presence, <code>arr</code> gets the rest of the values in the form of an array. The rest element only works correctly as the last variable in the list. As in, you cannot use the rest syntax to catch a subarray that leaves out the last element of the original array.</p>\n</section>","id":"587d7b8a367417b2b2512b4c","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use a destructuring assignment with the rest syntax to emulate the behavior of <code>Array.prototype.slice()</code>. <code>removeFirstTwo()</code> should return a sub-array of the original array <code>list</code> with the first two elements omitted.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301218,"fields":{"blockName":"es6","slug":"/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements","tests":[{"text":"<p><code>removeFirstTwo([1, 2, 3, 4, 5])</code> should be <code>[3, 4, 5]</code></p>","testString":"assert.deepEqual(removeFirstTwo([1, 2, 3, 4, 5]), [3, 4, 5]);"},{"text":"<p><code>removeFirstTwo()</code> should not modify <code>list</code></p>","testString":"const _testArr = [1, 2, 3, 4, 5];\nremoveFirstTwo(_testArr);\nassert.deepEqual(_testArr, [1, 2, 3, 4, 5])"},{"text":"<p><code>Array.slice()</code> should not be used.</p>","testString":"assert(!__helpers.removeJSComments(code).match(/\\.\\s*slice\\s*\\(/));"},{"text":"<p>You should use the rest syntax.</p>","testString":"assert.match(code, /\\.\\.\\./);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function removeFirstTwo(list) {\n  return list;\n}\n\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sourceWithoutFirstTwo = removeFirstTwo(source);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#es6","dashedName":"use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"es6","isFirstStep":false,"template":null,"required":[],"nextBlock":"es6","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-arrays","id":"587d7b8a367417b2b2512b4c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});","head":"","tail":"const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
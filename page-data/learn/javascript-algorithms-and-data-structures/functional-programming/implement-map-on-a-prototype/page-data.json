{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/functional-programming/implement-map-on-a-prototype",
    "result": {"data":{"challengeNode":{"challenge":{"block":"functional-programming","title":"Implement map on a Prototype","description":"<section id=\"description\">\n<p>As you have seen from applying <code>Array.prototype.map()</code>, or simply <code>map()</code> earlier, the <code>map</code> method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.</p>\n<p>In other words, <code>map</code> is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.</p>\n<p>You might learn a lot about the <code>map</code> method if you implement your own version of it. It is recommended you use a <code>for</code> loop or <code>Array.prototype.forEach()</code>.</p>\n</section>","id":"587d7b8f367417b2b2512b62","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write your own <code>Array.prototype.myMap()</code>, which should behave exactly like <code>Array.prototype.map()</code>. You should not use the built-in <code>map</code> method. The <code>Array</code> instance can be accessed in the <code>myMap</code> method using <code>this</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301230,"fields":{"blockName":"functional-programming","slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/implement-map-on-a-prototype","tests":[{"text":"<p><code>[23, 65, 98, 5, 13].myMap(item => item * 2)</code> should equal <code>[46, 130, 196, 10, 26]</code>.</p>","testString":"const _test_s = [23, 65, 98, 5, 13];\nconst _callback = item => item * 2;\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"},{"text":"<p><code>[\"naomi\", \"quincy\", \"camperbot\"].myMap(element => element.toUpperCase())</code> should return <code>[\"NAOMI\", \"QUINCY\", \"CAMPERBOT\"]</code>.</p>","testString":"const _test_s = [\"naomi\", \"quincy\", \"camperbot\"];\nconst _callback = element => element.toUpperCase();\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"},{"text":"<p><code>[1, 1, 2, 5, 2].myMap((element, index, array) => array[index + 1] || array[0])</code> should return <code>[1, 2, 5, 2, 1]</code>.</p>","testString":"const _test_s = [1, 1, 2, 5, 2];\nconst _callback = (element, index, array) => array[index + 1] || array[0];\nassert(JSON.stringify(_test_s.map(_callback)) === JSON.stringify(_test_s.myMap(_callback)));"},{"text":"<p>Your code should not use the <code>map</code> method.</p>","testString":"assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?map/g));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"Array.prototype.myMap = function(callback) {\n  const newArray = [];\n  // Only change code below this line\n\n  // Only change code above this line\n  return newArray;\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#functional-programming","dashedName":"implement-map-on-a-prototype","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"functional-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"functional-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-filter-method-to-extract-data-from-an-array","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-map-method-to-extract-data-from-an-array","id":"587d7b8f367417b2b2512b62"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const add = x => y => z => x + y + z","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/implement-map-on-a-prototype"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/functional-programming/refactor-global-variables-out-of-functions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"functional-programming","title":"Refactor Global Variables Out of Functions","description":"<section id=\"description\">\n<p>So far, we have seen two distinct principles for functional programming:</p>\n<ol>\n<li>\n<p>Don't alter a variable or object - create new variables and objects and return them if need be from a function. Hint: using something like <code>const newArr = arrVar</code>, where <code>arrVar</code> is an array will simply create a reference to the existing variable and not a copy. So changing a value in <code>newArr</code> would change the value in <code>arrVar</code>.</p>\n</li>\n<li>\n<p>Declare function parameters - any computation inside a function depends only on the arguments passed to the function, and not on any global object or variable.</p>\n</li>\n</ol>\n<p>Adding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.</p>\n</section>","id":"587d7b8f367417b2b2512b60","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Rewrite the code so the global array <code>bookList</code> is not changed inside either function. The <code>add</code> function should add the given <code>bookName</code> to the end of the array passed to it and return a new array (list). The <code>remove</code> function should remove the given <code>bookName</code> from the array passed to it.</p>\n<p><strong>Note:</strong> Both functions should return an array, and any new parameters should be added before the <code>bookName</code> parameter.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301235,"fields":{"blockName":"functional-programming","slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/refactor-global-variables-out-of-functions","tests":[{"text":"<p><code>bookList</code> should not change and still equal <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.</p>","testString":"add(bookList, \"Test\");\nremove(bookList, \"The Hound of the Baskervilles\");\nassert(\n  JSON.stringify(bookList) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'On The Electrodynamics of Moving Bodies',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae'\n    ])\n);"},{"text":"<p><code>add(bookList, \"A Brief History of Time\")</code> should return <code>[\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.</p>","testString":"assert(\n  JSON.stringify(add(bookList, \"A Brief History of Time\")) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'On The Electrodynamics of Moving Bodies',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae',\n      'A Brief History of Time'\n    ])\n);"},{"text":"<p><code>remove(bookList, \"On The Electrodynamics of Moving Bodies\")</code> should return <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"]</code>.</p>","testString":"assert(\n  JSON.stringify(remove(bookList, 'On The Electrodynamics of Moving Bodies')) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae'\n    ])\n);"},{"text":"<p><code>remove(add(bookList, \"A Brief History of Time\"), \"On The Electrodynamics of Moving Bodies\");</code> should equal <code>[\"The Hound of the Baskervilles\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\", \"A Brief History of Time\"]</code>.</p>","testString":"assert(\n  JSON.stringify(remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies')) ===\n    JSON.stringify([\n      'The Hound of the Baskervilles',\n      'Philosophiæ Naturalis Principia Mathematica',\n      'Disquisitiones Arithmeticae',\n      'A Brief History of Time'\n    ])\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// The global variable\nconst bookList = [\"The Hound of the Baskervilles\", \"On The Electrodynamics of Moving Bodies\", \"Philosophiæ Naturalis Principia Mathematica\", \"Disquisitiones Arithmeticae\"];\n\n// Change code below this line\nfunction add(bookName) {\n\n  bookList.push(bookName);\n  return bookList;\n  \n  // Change code above this line\n}\n\n// Change code below this line\nfunction remove(bookName) {\n  const book_index = bookList.indexOf(bookName);\n  if (book_index >= 0) {\n\n    bookList.splice(book_index, 1);\n    return bookList;\n\n    // Change code above this line\n    }\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#functional-programming","dashedName":"refactor-global-variables-out-of-functions","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"functional-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"functional-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-map-method-to-extract-data-from-an-array","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/pass-arguments-to-avoid-external-dependence-in-a-function","id":"587d7b8f367417b2b2512b60"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const add = x => y => z => x + y + z","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/refactor-global-variables-out-of-functions"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
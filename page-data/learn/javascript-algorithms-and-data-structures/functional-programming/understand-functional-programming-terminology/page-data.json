{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology",
    "result": {"data":{"challengeNode":{"challenge":{"block":"functional-programming","title":"Understand Functional Programming Terminology","description":"<section id=\"description\">\n<p>The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.</p>\n<p>With that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.</p>\n<p>But first, let's cover some functional terminology:</p>\n<p><dfn>Callbacks</dfn> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.</p>\n<p>Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <dfn>first class</dfn> functions. In JavaScript, all functions are first class functions.</p>\n<p>The functions that take a function as an argument, or return a function as a return value, are called <dfn>higher order</dfn> functions.</p>\n<p>When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a <dfn>lambda</dfn>.</p>\n</section>","id":"587d7b8e367417b2b2512b5c","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Prepare 27 cups of green tea and 13 cups of black tea and store them in <code>tea4GreenTeamFCC</code> and <code>tea4BlackTeamFCC</code> variables, respectively. Note that the <code>getTea</code> function has been modified so it now takes a function as the first argument.</p>\n<p>Note: The data (the number of cups of tea) is supplied as the last argument. We'll discuss this more in later lessons.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301240,"fields":{"blockName":"functional-programming","slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology","tests":[{"text":"<p>The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.</p>","testString":"assert(tea4GreenTeamFCC.length === 27);"},{"text":"<p>The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.</p>","testString":"assert(tea4GreenTeamFCC[0] === 'greenTea');"},{"text":"<p>The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.</p>","testString":"assert(tea4BlackTeamFCC.length === 13);"},{"text":"<p>The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.</p>","testString":"assert(tea4BlackTeamFCC[0] === 'blackTea');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Function that returns a string representing a cup of green tea\nconst prepareGreenTea = () => 'greenTea';\n\n// Function that returns a string representing a cup of black tea\nconst prepareBlackTea = () => 'blackTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4GreenTeamFCC = null;\nconst tea4BlackTeamFCC = null;\n// Only change code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#functional-programming","dashedName":"understand-functional-programming-terminology","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"functional-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"functional-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/understand-the-hazards-of-using-imperative-code","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/learn-about-functional-programming","id":"587d7b8e367417b2b2512b5c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const add = x => y => z => x + y + z","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/understand-functional-programming-terminology"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application",
    "result": {"data":{"challengeNode":{"challenge":{"block":"functional-programming","title":"Introduction to Currying and Partial Application","description":"<section id=\"description\">\n<p>The <dfn>arity</dfn> of a function is the number of arguments it requires. <dfn>Currying</dfn> a function means to convert a function of N arity into N functions of arity 1.</p>\n<p>In other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">function unCurried(x, y) {\n  return x + y;\n}\n\nfunction curried(x) {\n  return function(y) {\n    return x + y;\n  }\n}\n\nconst curried = x => y => x + y\n\ncurried(1)(2)\n</code></pre>\n<p><code>curried(1)(2)</code> would return <code>3</code>.</p>\n<p>This is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the curried function in the example above:</p>\n<pre><code class=\"language-js\">const funcForY = curried(1);\nconsole.log(funcForY(2)); // 3\n</code></pre>\n<p>Similarly, <dfn>partial application</dfn> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments. Here's an example:</p>\n<pre><code class=\"language-js\">function impartial(x, y, z) {\n  return x + y + z;\n}\n\nconst partialFn = impartial.bind(this, 1, 2);\npartialFn(10); // 13\n</code></pre>\n</section>","id":"587d7dab367417b2b2512b70","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fill in the body of the <code>add</code> function so it uses currying to add parameters <code>x</code>, <code>y</code>, and <code>z</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301232,"fields":{"blockName":"functional-programming","slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application","tests":[{"text":"<p><code>add(10)(20)(30)</code> should return <code>60</code>.</p>","testString":"assert(add(10)(20)(30) === 60);"},{"text":"<p><code>add(1)(2)(3)</code> should return <code>6</code>.</p>","testString":"assert(add(1)(2)(3) === 6);"},{"text":"<p><code>add(11)(22)(33)</code> should return <code>66</code>.</p>","testString":"assert(add(11)(22)(33) === 66);"},{"text":"<p>Your code should include a final statement that returns <code>x + y + z</code>.</p>","testString":"assert(__helpers.removeJSComments(code).match(/[xyz]\\s*?\\+\\s*?[xyz]\\s*?\\+\\s*?[xyz]/g));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function add(x) {\n  // Only change code below this line\n\n\n  // Only change code above this line\n}\n\nadd(10)(20)(30);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#functional-programming","dashedName":"introduction-to-currying-and-partial-application","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"functional-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"intermediate-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/use-the-some-method-to-check-that-any-elements-in-an-array-meet-a-criteria","id":"587d7dab367417b2b2512b70"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const add = x => y => z => x + y + z","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
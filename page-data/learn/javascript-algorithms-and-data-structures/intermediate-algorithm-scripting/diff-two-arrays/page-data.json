{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/diff-two-arrays",
    "result": {"data":{"challengeNode":{"challenge":{"block":"intermediate-algorithm-scripting","title":"Diff Two Arrays","description":"<section id=\"description\">\n<p>Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.</p>\n<p><strong>Note:</strong> You can return the array with its elements in any order.</p>\n</section>","id":"a5de63ebea8dbee56860f4f2","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16008,"fields":{"blockName":"intermediate-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/diff-two-arrays","tests":[{"text":"<p><code>diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5])</code> should return an array.</p>","testString":"assert(typeof diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]) === 'object');"},{"text":"<p><code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"pink wool\"]</code>.</p>","testString":"assert.sameMembers(\n  diffArray(\n    ['diorite', 'andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  ['pink wool']\n);"},{"text":"<p><code>[\"diorite\", \"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with one item.</p>","testString":"assert(\n  diffArray(\n    ['diorite', 'andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 1\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[\"diorite\", \"pink wool\"]</code>.</p>","testString":"assert.sameMembers(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  ['diorite', 'pink wool']\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"pink wool\", \"dead shrub\"], [\"diorite\", \"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an array with two items.</p>","testString":"assert(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'pink wool', 'dead shrub'],\n    ['diorite', 'andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 2\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return <code>[]</code>.</p>","testString":"assert.sameMembers(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'dead shrub'],\n    ['andesite', 'grass', 'dirt', 'dead shrub']\n  ),\n  []\n);"},{"text":"<p><code>[\"andesite\", \"grass\", \"dirt\", \"dead shrub\"], [\"andesite\", \"grass\", \"dirt\", \"dead shrub\"]</code> should return an empty array.</p>","testString":"assert(\n  diffArray(\n    ['andesite', 'grass', 'dirt', 'dead shrub'],\n    ['andesite', 'grass', 'dirt', 'dead shrub']\n  ).length === 0\n);"},{"text":"<p><code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return <code>[4]</code>.</p>","testString":"assert.sameMembers(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]), [4]);"},{"text":"<p><code>[1, 2, 3, 5], [1, 2, 3, 4, 5]</code> should return an array with one item.</p>","testString":"assert(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]).length === 1);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return <code>[\"piglet\", 4]</code>.</p>","testString":"assert.sameMembers(diffArray([1, 'calf', 3, 'piglet'], [1, 'calf', 3, 4]), [\n  'piglet',\n  4\n]);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [1, \"calf\", 3, 4]</code> should return an array with two items.</p>","testString":"assert(diffArray([1, 'calf', 3, 'piglet'], [1, 'calf', 3, 4]).length === 2);"},{"text":"<p><code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return <code>[\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code>.</p>","testString":"assert.sameMembers(diffArray([], ['snuffleupagus', 'cookie monster', 'elmo']), [\n  'snuffleupagus',\n  'cookie monster',\n  'elmo'\n]);"},{"text":"<p><code>[], [\"snuffleupagus\", \"cookie monster\", \"elmo\"]</code> should return an array with three items.</p>","testString":"assert(diffArray([], ['snuffleupagus', 'cookie monster', 'elmo']).length === 3);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return <code>[1, \"calf\", 3, \"piglet\", 7, \"filly\"]</code>.</p>","testString":"assert.sameMembers(diffArray([1, 'calf', 3, 'piglet'], [7, 'filly']), [\n  1,\n  'calf',\n  3,\n  'piglet',\n  7,\n  'filly'\n]);"},{"text":"<p><code>[1, \"calf\", 3, \"piglet\"], [7, \"filly\"]</code> should return an array with six items.</p>","testString":"assert(diffArray([1, 'calf', 3, 'piglet'], [7, 'filly']).length === 6);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function diffArray(arr1, arr2) {\n  const newArr = [];\n  return newArr;\n}\n\ndiffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#intermediate-algorithm-scripting","dashedName":"diff-two-arrays","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"intermediate-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"intermediate-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/seek-and-destroy","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range","id":"a5de63ebea8dbee56860f4f2"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/diff-two-arrays"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
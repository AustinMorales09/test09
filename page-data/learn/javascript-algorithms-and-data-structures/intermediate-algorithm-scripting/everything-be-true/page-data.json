{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/everything-be-true",
    "result": {"data":{"challengeNode":{"challenge":{"block":"intermediate-algorithm-scripting","title":"Everything Be True","description":"<section id=\"description\">\n<p>Check if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).</p>\n<p>In other words, you are given an array collection of objects. The predicate <code>pre</code> will be an object property and you need to return <code>true</code> if its value is <code>truthy</code>. Otherwise, return <code>false</code>.</p>\n<p>In JavaScript, <code>truthy</code> values are values that translate to <code>true</code> when evaluated in a Boolean context.</p>\n<p>Remember, you can access object properties through either dot notation or <code>[]</code> notation.</p>\n</section>","id":"a10d2431ad0c6a099a4b8b52","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16011,"fields":{"blockName":"intermediate-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/everything-be-true","tests":[{"text":"<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"isBot\"), false);"},{"text":"<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"name\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"name\"), true);"},{"text":"<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"role\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"role\"), false);"},{"text":"<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}], \"number\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n  ],\n  \"number\"), true);"},{"text":"<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"caught\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"caught\"), false);"},{"text":"<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"number\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"number\"), false);"},{"text":"<p><code>truthCheck([{name: \"Quincy\", username: \"QuincyLarson\"}, {name: \"Naomi\", username: \"nhcarrigan\"}, {name: \"Camperbot\"}], \"username\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", username: \"QuincyLarson\" },\n    { name: \"Naomi\", username: \"nhcarrigan\" },\n    { name: \"Camperbot\" }\n  ],\n  \"username\"), false);"},{"text":"<p><code>truthCheck([{name: \"freeCodeCamp\", users: [{name: \"Quincy\"}, {name: \"Naomi\"}]}, {name: \"Code Radio\", users: [{name: \"Camperbot\"}]}, {name: \"\", users: []}], \"users\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { name: \"freeCodeCamp\", users: [{ name: \"Quincy\" }, { name: \"Naomi\" }] },\n    { name: \"Code Radio\", users: [{ name: \"Camperbot\" }] },\n    { name: \"\", users: [] },\n  ],\n  \"users\"), true);"},{"text":"<p><code>truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"data\")</code> should return <code>true</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"data\"), true);"},{"text":"<p><code>truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"id\")</code> should return <code>false</code>.</p>","testString":"assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"id\"), false);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function truthCheck(collection, pre) {\n  return pre;\n}\n\ntruthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\");","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#intermediate-algorithm-scripting","dashedName":"everything-be-true","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"intermediate-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"intermediate-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/binary-agents","id":"a10d2431ad0c6a099a4b8b52"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/everything-be-true"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
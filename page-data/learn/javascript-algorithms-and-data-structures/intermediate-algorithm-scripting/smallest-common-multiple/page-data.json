{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/smallest-common-multiple",
    "result": {"data":{"challengeNode":{"challenge":{"block":"intermediate-algorithm-scripting","title":"Smallest Common Multiple","description":"<section id=\"description\">\n<p>Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.</p>\n<p>The range will be an array of two numbers that will not necessarily be in numerical order.</p>\n<p>For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers <em>between</em> 1 and 3. The answer here would be 6.</p>\n</section>","id":"ae9defd7acaf69703ab432ea","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16075,"fields":{"blockName":"intermediate-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/smallest-common-multiple","tests":[{"text":"<p><code>smallestCommons([1, 5])</code> should return a number.</p>","testString":"assert.deepEqual(typeof smallestCommons([1, 5]), 'number');"},{"text":"<p><code>smallestCommons([1, 5])</code> should return 60.</p>","testString":"assert.deepEqual(smallestCommons([1, 5]), 60);"},{"text":"<p><code>smallestCommons([5, 1])</code> should return 60.</p>","testString":"assert.deepEqual(smallestCommons([5, 1]), 60);"},{"text":"<p><code>smallestCommons([2, 10])</code> should return 2520.</p>","testString":"assert.deepEqual(smallestCommons([2, 10]), 2520);"},{"text":"<p><code>smallestCommons([1, 13])</code> should return 360360.</p>","testString":"assert.deepEqual(smallestCommons([1, 13]), 360360);"},{"text":"<p><code>smallestCommons([23, 18])</code> should return 6056820.</p>","testString":"assert.deepEqual(smallestCommons([23, 18]), 6056820);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function smallestCommons(arr) {\n  return arr;\n}\n\nsmallestCommons([1,5]);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#intermediate-algorithm-scripting","dashedName":"smallest-common-multiple","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"intermediate-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"intermediate-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/drop-it","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-primes","id":"ae9defd7acaf69703ab432ea"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/smallest-common-multiple"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person",
    "result": {"data":{"challengeNode":{"challenge":{"block":"intermediate-algorithm-scripting","title":"Make a Person","description":"<section id=\"description\">\n<p>Fill in the object constructor with the following methods below:</p>\n<pre><code class=\"language-js\">getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(first, last)\n</code></pre>\n<p>Run the tests to see the expected output for each method. These methods must be the only available means of interacting with the object. Each test will declare a new <code>Person</code> instance as <code>new Person('Bob', 'Ross')</code>.</p>\n</section>","id":"a2f1d72d9b908d0bd72bb9f6","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16020,"fields":{"blockName":"intermediate-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person","tests":[{"text":"<p>You should not change the function signature.</p>","testString":"assert.match(code, /const\\s+Person\\s*=\\s*function\\s*\\(\\s*first\\s*,\\s*last\\s*\\)\\s*{/);"},{"text":"<p>You should not reassign the <code>first</code> parameter.</p>","testString":"assert.notMatch(code, /\\bfirst\\s*=\\s*/);"},{"text":"<p>You should not reassign the <code>last</code> parameter.</p>","testString":"assert.notMatch(code, /\\blast\\s*=\\s*/);"},{"text":"<p>No properties should be added. <code>Object.keys(Person).length</code> should always return 6.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFirstName('Haskell');\n_person.setLastName('Curry');\n_person.setFullName('John', 'Smith');\nassert.lengthOf(Object.keys(_person), 6);"},{"text":"<p>You should be able to instantiate your <code>Person</code> object.</p>","testString":"const _person = new Person('Bob', 'Ross');\nassert.instanceOf(_person, Person);"},{"text":"<p>Your <code>Person</code> object should not have a <code>firstName</code> property.</p>","testString":"const _person = new Person('Bob', 'Ross');\nassert.notProperty(_person, 'firstName');"},{"text":"<p>Your <code>Person</code> object should not have a <code>lastName</code> property.</p>","testString":"const _person = new Person('Bob', 'Ross');\nassert.notProperty(_person, 'lastName');"},{"text":"<p>The <code>.getFirstName()</code> method should return the string <code>Bob</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\nassert.strictEqual(_person.getFirstName(), 'Bob');"},{"text":"<p>The <code>.getLastName()</code> should return the string <code>Ross</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\nassert.strictEqual(_person.getLastName(), 'Ross');"},{"text":"<p>The <code>.getFullName()</code> method should return the string <code>Bob Ross</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\nassert.strictEqual(_person.getFullName(), 'Bob Ross');"},{"text":"<p>The <code>.getFullName()</code> method should return the string <code>Haskell Ross</code> after calling <code>.setFirstName('Haskell')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFirstName('Haskell');\nassert.strictEqual(_person.getFullName(), 'Haskell Ross');"},{"text":"<p>The <code>.getFullName()</code> method should return the string <code>Bob Curry</code> after calling <code>.setLastName('Curry')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setLastName('Curry');\nassert.strictEqual(_person.getFullName(), 'Bob Curry');"},{"text":"<p>The <code>.getFullName()</code> method should return the string <code>Haskell Curry</code> after calling <code>.setFullName('Haskell', 'Curry')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFullName('Haskell', 'Curry');\nassert.strictEqual(_person.getFullName(), 'Haskell Curry');"},{"text":"<p>The <code>.getFirstName()</code> method should return the string <code>Haskell</code> after calling <code>.setFullName('Haskell', 'Curry')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFullName('Haskell', 'Curry');\nassert.strictEqual(_person.getFirstName(), 'Haskell');"},{"text":"<p>The <code>.getLastName()</code> method should return the string <code>Curry</code> after calling <code>.setFullName('Haskell', 'Curry')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFullName('Haskell', 'Curry');\nassert.strictEqual(_person.getLastName(), 'Curry');"},{"text":"<p>The <code>.getFullName()</code> method should return the string <code>Emily Martinez de la Rosa</code> after calling <code>.setFullName('Emily Martinez', 'de la Rosa')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFullName('Emily Martinez', 'de la Rosa');\nassert.strictEqual(_person.getFullName(), 'Emily Martinez de la Rosa');"},{"text":"<p>The <code>.getFirstName()</code> property should return the string <code>Emily Martinez</code> after calling <code>.setFullName('Emily Martinez', 'de la Rosa')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFullName('Emily Martinez', 'de la Rosa');\nassert.strictEqual(_person.getFirstName(), 'Emily Martinez');"},{"text":"<p>The <code>.getLastName()</code> property should return the string <code>de la Rosa</code> after calling <code>.setFullName('Emily Martinez', 'de la Rosa')</code>.</p>","testString":"const _person = new Person('Bob', 'Ross');\n_person.setFullName('Emily Martinez', 'de la Rosa');\nassert.strictEqual(_person.getLastName(), 'de la Rosa');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const Person = function(first, last) {\n  this.getFullName = function() {\n    return \"\";\n  };\n  return \"\";\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#intermediate-algorithm-scripting","dashedName":"make-a-person","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"intermediate-algorithm-scripting","isFirstStep":false,"template":null,"required":[],"nextBlock":"intermediate-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/map-the-debris","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/arguments-optional","id":"a2f1d72d9b908d0bd72bb9f6"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/make-a-person"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
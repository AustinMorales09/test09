{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range",
    "result": {"data":{"challengeNode":{"challenge":{"block":"intermediate-algorithm-scripting","title":"Sum All Numbers in a Range","description":"<section id=\"description\">\n<p>We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them. The lowest number will not always come first.</p>\n<p>For example, <code>sumAll([4,1])</code> should return <code>10</code> because sum of all the numbers between 1 and 4 (both inclusive) is <code>10</code>.</p>\n</section>","id":"a3566b1109230028080c9345","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":16083,"fields":{"blockName":"intermediate-algorithm-scripting","slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range","tests":[{"text":"<p><code>sumAll([1, 4])</code> should return a number.</p>","testString":"assert(typeof sumAll([1, 4]) === 'number');"},{"text":"<p><code>sumAll([1, 4])</code> should return 10.</p>","testString":"assert.deepEqual(sumAll([1, 4]), 10);"},{"text":"<p><code>sumAll([4, 1])</code> should return 10.</p>","testString":"assert.deepEqual(sumAll([4, 1]), 10);"},{"text":"<p><code>sumAll([5, 10])</code> should return 45.</p>","testString":"assert.deepEqual(sumAll([5, 10]), 45);"},{"text":"<p><code>sumAll([10, 5])</code> should return 45.</p>","testString":"assert.deepEqual(sumAll([10, 5]), 45);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function sumAll(arr) {\n  return 1;\n}\n\nsumAll([1, 4]);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#intermediate-algorithm-scripting","dashedName":"sum-all-numbers-in-a-range","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"intermediate-algorithm-scripting","isFirstStep":true,"template":null,"required":[],"nextBlock":"intermediate-algorithm-scripting","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/diff-two-arrays","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/functional-programming/introduction-to-currying-and-partial-application","id":"a3566b1109230028080c9345"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function orbitalPeriod(arr) {\n  const GM = 398600.4418;\n  const earthRadius = 6367.4447;\n  const TAU = 2 * Math.PI;\n  return arr.map(function(obj) {\n    return {\n      name: obj.name,\n      orbitalPeriod: Math.round(TAU * Math.sqrt(Math.pow(obj.avgAlt+earthRadius, 3)/GM))\n    };\n  });\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/sum-all-numbers-in-a-range"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
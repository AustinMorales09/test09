{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Set the Child's Prototype to an Instance of the Parent","description":"<section id=\"description\">\n<p>In the previous challenge you saw the first step for inheriting behavior from the supertype (or parent) <code>Animal</code>: making a new instance of <code>Animal</code>.</p>\n<p>This challenge covers the next step: set the <code>prototype</code> of the subtype (or child)—in this case, <code>Bird</code>—to be an instance of <code>Animal</code>.</p>\n<pre><code class=\"language-js\">Bird.prototype = Object.create(Animal.prototype);\n</code></pre>\n<p>Remember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>.</p>\n<pre><code class=\"language-js\">let duck = new Bird(\"Donald\");\nduck.eat();\n</code></pre>\n<p><code>duck</code> inherits all of <code>Animal</code>'s properties, including the <code>eat</code> method.</p>\n</section>","id":"587d7db1367417b2b2512b85","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify the code so that instances of <code>Dog</code> inherit from <code>Animal</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301325,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent","tests":[{"text":"<p><code>Dog.prototype</code> should be an instance of <code>Animal</code>.</p>","testString":"assert(Animal.prototype.isPrototypeOf(Dog.prototype));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\nlet beagle = new Dog();","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"set-the-childs-prototype-to-an-instance-of-the-parent","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype","id":"587d7db1367417b2b2512b85"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
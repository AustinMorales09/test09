{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Use a Mixin to Add Common Behavior Between Unrelated Objects","description":"<section id=\"description\">\n<p>As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.</p>\n<p>For unrelated objects, it's better to use <dfn>mixins</dfn>. A mixin allows other objects to use a collection of functions.</p>\n<pre><code class=\"language-js\">let flyMixin = function(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  }\n};\n</code></pre>\n<p>The <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.</p>\n<pre><code class=\"language-js\">let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet plane = {\n  model: \"777\",\n  numPassengers: 524\n};\n\nflyMixin(bird);\nflyMixin(plane);\n</code></pre>\n<p>Here <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:</p>\n<pre><code class=\"language-js\">bird.fly();\nplane.fly();\n</code></pre>\n<p>The console would display the string <code>Flying, wooosh!</code> twice, once for each <code>.fly()</code> call.</p>\n<p>Note how the mixin allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.</p>\n</section>","id":"587d7db2367417b2b2512b89","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a mixin named <code>glideMixin</code> that defines a method named <code>glide</code>. Then use the <code>glideMixin</code> to give both <code>bird</code> and <code>boat</code> the ability to glide.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301331,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects","tests":[{"text":"<p>Your code should declare a <code>glideMixin</code> variable that is a function.</p>","testString":"assert(typeof glideMixin === 'function');"},{"text":"<p>Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.</p>","testString":"assert(typeof bird.glide === 'function');"},{"text":"<p>Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.</p>","testString":"assert(typeof boat.glide === 'function');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Only change code below this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"use-a-mixin-to-add-common-behavior-between-unrelated-objects","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-closure-to-protect-properties-within-an-object-from-being-modified-externally","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods","id":"587d7db2367417b2b2512b89"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
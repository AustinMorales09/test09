{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Inherit Behaviors from a Supertype","description":"<section id=\"description\">\n<p>In the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\n</code></pre>\n<p>This and the next challenge will cover how to reuse the methods of <code>Animal</code> inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the <code>supertype</code> (or parent). You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:</p>\n<pre><code class=\"language-js\">let animal = new Animal();\n</code></pre>\n<p>There are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:</p>\n<pre><code class=\"language-js\">let animal = Object.create(Animal.prototype);\n</code></pre>\n<p><code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be the <code>prototype</code> of <code>Animal</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.</p>\n<pre><code class=\"language-js\">animal.eat();\nanimal instanceof Animal;\n</code></pre>\n<p>The <code>instanceof</code> method here would return <code>true</code>.</p>\n</section>","id":"587d7db0367417b2b2512b84","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use <code>Object.create</code> to make two instances of <code>Animal</code> named <code>duck</code> and <code>beagle</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301319,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype","tests":[{"text":"<p>The <code>duck</code> variable should be defined.</p>","testString":"assert(typeof duck !== 'undefined');"},{"text":"<p>The <code>beagle</code> variable should be defined.</p>","testString":"assert(typeof beagle !== 'undefined');"},{"text":"<p>The <code>duck</code> variable should be initialised with <code>Object.create</code>.</p>","testString":"assert(\n  /(let|const|var)\\s{1,}duck\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    __helpers.removeJSComments(code)\n  )\n);"},{"text":"<p>The <code>beagle</code> variable should be initialised with <code>Object.create</code>.</p>","testString":"assert(\n  /(let|const|var)\\s{1,}beagle\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    __helpers.removeJSComments(code)\n  )\n);"},{"text":"<p><code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.</p>","testString":"assert(duck instanceof Animal);"},{"text":"<p><code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.</p>","testString":"assert(beagle instanceof Animal);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Only change code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"inherit-behaviors-from-a-supertype","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself","id":"587d7db0367417b2b2512b84"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
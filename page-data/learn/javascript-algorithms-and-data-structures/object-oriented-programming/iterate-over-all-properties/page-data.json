{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Iterate Over All Properties","description":"<section id=\"description\">\n<p>You have now seen two kinds of properties: <dfn>own properties</dfn> and <code>prototype</code> properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the <code>prototype</code>.</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;  //own property\n}\n\nBird.prototype.numLegs = 2; // prototype property\n\nlet duck = new Bird(\"Donald\");\n</code></pre>\n<p>Here is how you add <code>duck</code>'s own properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:</p>\n<pre><code class=\"language-js\">let ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\nconsole.log(prototypeProps);\n</code></pre>\n<p><code>console.log(ownProps)</code> would display <code>[\"name\"]</code> in the console, and <code>console.log(prototypeProps)</code> would display <code>[\"numLegs\"]</code>.</p>\n</section>","id":"587d7daf367417b2b2512b7d","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Add all of the own properties of <code>beagle</code> to the array <code>ownProps</code>. Add all of the <code>prototype</code> properties of <code>Dog</code> to the array <code>prototypeProps</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301320,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties","tests":[{"text":"<p>The <code>ownProps</code> array should only contain <code>name</code>.</p>","testString":"assert.deepEqual(ownProps, ['name']);"},{"text":"<p>The <code>prototypeProps</code> array should only contain <code>numLegs</code>.</p>","testString":"assert.deepEqual(prototypeProps, ['numLegs']);"},{"text":"<p>You should solve this challenge without using the built in method <code>Object.keys()</code>.</p>","testString":"assert(!/\\Object.keys/.test(__helpers.removeJSComments(code)));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Only change code below this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"iterate-over-all-properties","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-prototype-properties-to-reduce-duplicate-code","id":"587d7daf367417b2b2512b7d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
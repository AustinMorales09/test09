{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Add Methods After Inheritance","description":"<section id=\"description\">\n<p>A constructor function that inherits its <code>prototype</code> object from a supertype constructor function can still have its own methods in addition to inherited methods.</p>\n<p>For example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\nfunction Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nBird.prototype.constructor = Bird;\n</code></pre>\n<p>In addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird's</code> <code>prototype</code> the same way as any constructor function:</p>\n<pre><code class=\"language-js\">Bird.prototype.fly = function() {\n  console.log(\"I'm flying!\");\n};\n</code></pre>\n<p>Now instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:</p>\n<pre><code class=\"language-js\">let duck = new Bird();\nduck.eat();\nduck.fly();\n</code></pre>\n<p><code>duck.eat()</code> would display the string <code>nom nom nom</code> in the console, and <code>duck.fly()</code> would display the string <code>I'm flying!</code>.</p>\n</section>","id":"587d7db1367417b2b2512b87","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Add all necessary code so the <code>Dog</code> object inherits from <code>Animal</code> and the <code>Dog</code>'s <code>prototype</code> constructor is set to <code>Dog</code>. Then add a <code>bark()</code> method to the <code>Dog</code> object so that <code>beagle</code> can both <code>eat()</code> and <code>bark()</code>. The <code>bark()</code> method should print <code>Woof!</code> to the console.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301315,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance","tests":[{"text":"<p><code>Animal</code> should not respond to the <code>bark()</code> method.</p>","testString":"assert(typeof Animal.prototype.bark == 'undefined');"},{"text":"<p><code>Dog</code> should inherit the <code>eat()</code> method from <code>Animal</code>.</p>","testString":"assert(typeof Dog.prototype.eat == 'function');"},{"text":"<p>The <code>Dog</code> prototype should have a <code>bark()</code> method.</p>","testString":"assert('bark' in Dog.prototype);"},{"text":"<p><code>beagle</code> should be an <code>instanceof</code> <code>Animal</code>.</p>","testString":"assert(beagle instanceof Animal);"},{"text":"<p>The constructor for <code>beagle</code> should be set to <code>Dog</code>.</p>","testString":"assert(beagle.constructor === Dog);"},{"text":"<p><code>beagle.eat()</code> should log the string <code>nom nom nom</code></p>","testString":"capture();\nbeagle.eat();\nuncapture();\nassert(logOutput == 'nom nom nom');"},{"text":"<p><code>beagle.bark()</code> should log the string <code>Woof!</code></p>","testString":"capture();\nbeagle.bark();\nuncapture();\nassert(logOutput == 'Woof!');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\n\n// Only change code below this line\n\n\n\n\n// Only change code above this line\n\nlet beagle = new Dog();","head":"var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput = message;\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();","tail":"uncapture();\n(function() { return logOutput || \"console.log never called\"; })();","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"add-methods-after-inheritance","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property","id":"587d7db1367417b2b2512b87"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
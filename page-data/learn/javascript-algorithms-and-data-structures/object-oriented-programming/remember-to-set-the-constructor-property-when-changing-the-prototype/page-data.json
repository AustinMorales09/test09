{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Remember to Set the Constructor Property when Changing the Prototype","description":"<section id=\"description\">\n<p>There is one crucial side effect of manually setting the prototype to a new object. It erases the <code>constructor</code> property! This property can be used to check which constructor function created the instance, but since the property has been overwritten, it now gives false results:</p>\n<pre><code class=\"language-js\">duck.constructor === Bird;\nduck.constructor === Object;\nduck instanceof Bird;\n</code></pre>\n<p>In order, these expressions would evaluate to <code>false</code>, <code>true</code>, and <code>true</code>.</p>\n<p>To fix this, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  constructor: Bird,\n  numLegs: 2,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name); \n  }\n};\n</code></pre>\n</section>","id":"587d7daf367417b2b2512b80","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Define the <code>constructor</code> property on the <code>Dog</code> <code>prototype</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301323,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype","tests":[{"text":"<p><code>Dog.prototype</code> should set the <code>constructor</code> property.</p>","testString":"assert(Dog.prototype.constructor === Dog);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nDog.prototype = {\n\n  numLegs: 4,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"remember-to-set-the-constructor-property-when-changing-the-prototype","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/change-the-prototype-to-a-new-object","id":"587d7daf367417b2b2512b80"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Understand the Prototype Chain","description":"<section id=\"description\">\n<p>All objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an objectâ€™s <code>prototype</code> itself is an object.</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;\n}\n\ntypeof Bird.prototype;\n</code></pre>\n<p>Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:</p>\n<pre><code class=\"language-js\">Object.prototype.isPrototypeOf(Bird.prototype);\n</code></pre>\n<p>How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:</p>\n<pre><code class=\"language-js\">let duck = new Bird(\"Donald\");\nduck.hasOwnProperty(\"name\");\n</code></pre>\n<p>The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain. In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>. <code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.</p>\n</section>","id":"587d7db0367417b2b2512b82","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify the code to show the correct prototype chain.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301329,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain","tests":[{"text":"<p>Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code></p>","testString":"assert(/Object\\.prototype\\.isPrototypeOf/.test(__helpers.removeJSComments(code)));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // yields true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"understand-the-prototype-chain","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from","id":"587d7db0367417b2b2512b82"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
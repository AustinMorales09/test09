{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/make-code-more-reusable-with-the-this-keyword",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Make Code More Reusable with the this Keyword","description":"<section id=\"description\">\n<p>The last challenge introduced a method to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:</p>\n<pre><code class=\"language-js\">sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n</code></pre>\n<p>While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.</p>\n<p>A way to avoid these issues is with the <code>this</code> keyword:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + this.name + \".\";}\n};\n</code></pre>\n<p><code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>. If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.</p>\n</section>","id":"587d7dad367417b2b2512b76","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Modify the <code>dog.sayLegs</code> method to remove any references to <code>dog</code>. Use the <code>duck</code> example for guidance.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301321,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/make-code-more-reusable-with-the-this-keyword","tests":[{"text":"<p><code>dog.sayLegs()</code> should return the given string.</p>","testString":"assert(dog.sayLegs() === 'This dog has 4 legs.');"},{"text":"<p>Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.</p>","testString":"assert(__helpers.removeJSComments(code).match(/this\\.numLegs/g));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"make-code-more-reusable-with-the-this-keyword","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/define-a-constructor-function","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-method-on-an-object","id":"587d7dad367417b2b2512b76"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/make-code-more-reusable-with-the-this-keyword"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
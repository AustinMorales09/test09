{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Reset an Inherited Constructor Property","description":"<section id=\"description\">\n<p>When an object inherits its <code>prototype</code> from another object, it also inherits the supertype's constructor property.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">function Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nlet duck = new Bird();\nduck.constructor\n</code></pre>\n<p>But <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code> and not <code>Animal</code>. To do so, you can manually set the constructor property of <code>Bird</code> to the <code>Bird</code> object:</p>\n<pre><code class=\"language-js\">Bird.prototype.constructor = Bird;\nduck.constructor\n</code></pre>\n</section>","id":"587d7db1367417b2b2512b86","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the code so <code>duck.constructor</code> and <code>beagle.constructor</code> return their respective constructors.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301324,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property","tests":[{"text":"<p><code>Bird.prototype</code> should be an instance of <code>Animal</code>.</p>","testString":"assert(Animal.prototype.isPrototypeOf(Bird.prototype));"},{"text":"<p><code>duck.constructor</code> should return <code>Bird</code>.</p>","testString":"assert(duck.constructor === Bird);"},{"text":"<p><code>Dog.prototype</code> should be an instance of <code>Animal</code>.</p>","testString":"assert(Animal.prototype.isPrototypeOf(Dog.prototype));"},{"text":"<p><code>beagle.constructor</code> should return <code>Dog</code>.</p>","testString":"assert(beagle.constructor === Dog);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\n\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\n// Only change code below this line\n\n\n\nlet duck = new Bird();\nlet beagle = new Dog();","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"reset-an-inherited-constructor-property","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent","id":"587d7db1367417b2b2512b86"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
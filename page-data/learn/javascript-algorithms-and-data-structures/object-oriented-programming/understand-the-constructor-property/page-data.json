{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Understand the Constructor Property","description":"<section id=\"description\">\n<p>There is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:</p>\n<pre><code class=\"language-js\">let duck = new Bird();\nlet beagle = new Dog();\n\nconsole.log(duck.constructor === Bird); \nconsole.log(beagle.constructor === Dog);\n</code></pre>\n<p>Both of these <code>console.log</code> calls would display <code>true</code> in the console.</p>\n<p>Note that the <code>constructor</code> property is a reference to the constructor function that created the instance. The advantage of the <code>constructor</code> property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:</p>\n<pre><code class=\"language-js\">function joinBirdFraternity(candidate) {\n  if (candidate.constructor === Bird) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre>\n<p><strong>Note:</strong> Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) itâ€™s generally better to use the <code>instanceof</code> method to check the type of an object.</p>\n</section>","id":"587d7daf367417b2b2512b7e","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a <code>joinDogFraternity</code> function that takes a <code>candidate</code> parameter and, using the <code>constructor</code> property, return <code>true</code> if the candidate is a <code>Dog</code>, otherwise return <code>false</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301327,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property","tests":[{"text":"<p><code>joinDogFraternity</code> should be defined as a function.</p>","testString":"assert(typeof joinDogFraternity === 'function');"},{"text":"<p><code>joinDogFraternity</code> should return <code>true</code> if <code>candidate</code> is an instance of <code>Dog</code>.</p>","testString":"assert(joinDogFraternity(new Dog('')) === true);"},{"text":"<p><code>joinDogFraternity</code> should use the <code>constructor</code> property.</p>","testString":"assert(/\\.constructor/.test(__helpers.removeJSComments(code)) && !/instanceof/.test(__helpers.removeJSComments(code)));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Dog(name) {\n  this.name = name;\n}\n\n// Only change code below this line\nfunction joinDogFraternity(candidate) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"understand-the-constructor-property","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/change-the-prototype-to-a-new-object","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties","id":"587d7daf367417b2b2512b7e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself",
    "result": {"data":{"challengeNode":{"challenge":{"block":"object-oriented-programming","title":"Use Inheritance So You Don't Repeat Yourself","description":"<section id=\"description\">\n<p>There's a principle in programming called <dfn>Don't Repeat Yourself (DRY)</dfn>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.</p>\n<p>Notice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  constructor: Bird,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n\nDog.prototype = {\n  constructor: Dog,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre>\n<p>The <code>describe</code> method is repeated in two places. The code can be edited to follow the DRY principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:</p>\n<pre><code class=\"language-js\">function Animal() { };\n\nAnimal.prototype = {\n  constructor: Animal, \n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre>\n<p>Since <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:</p>\n<pre><code class=\"language-js\">Bird.prototype = {\n  constructor: Bird\n};\n\nDog.prototype = {\n  constructor: Dog\n};\n</code></pre>\n</section>","id":"587d7db0367417b2b2512b83","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>The <code>eat</code> method is repeated in both <code>Cat</code> and <code>Bear</code>. Edit the code in the spirit of DRY by moving the <code>eat</code> method to the <code>Animal</code> <code>supertype</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301334,"fields":{"blockName":"object-oriented-programming","slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself","tests":[{"text":"<p><code>Animal.prototype</code> should have the <code>eat</code> property.</p>","testString":"assert(Animal.prototype.hasOwnProperty('eat'));"},{"text":"<p><code>Bear.prototype</code> should not have the <code>eat</code> property.</p>","testString":"assert(!Bear.prototype.hasOwnProperty('eat'));"},{"text":"<p><code>Cat.prototype</code> should not have the <code>eat</code> property.</p>","testString":"assert(!Cat.prototype.hasOwnProperty('eat'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#object-oriented-programming","dashedName":"use-inheritance-so-you-dont-repeat-yourself","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"object-oriented-programming","isFirstStep":false,"template":null,"required":[],"nextBlock":"object-oriented-programming","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain","id":"587d7db0367417b2b2512b83"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const funModule = (function () {\n  return {\n    isCuteMixin: obj => {\n      obj.isCute = () => true;\n    },\n    singMixin: obj => {\n      obj.sing = () => console.log(\"Singing to an awesome tune\");\n    }\n  };\n})();","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
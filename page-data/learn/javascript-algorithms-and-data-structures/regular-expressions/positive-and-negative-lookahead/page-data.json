{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/positive-and-negative-lookahead",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Positive and Negative Lookahead","description":"<section id=\"description\">\n<p><dfn>Lookaheads</dfn> are patterns that tell JavaScript to look-ahead in your string to check for patterns further along. This can be useful when you want to search for multiple patterns over the same string.</p>\n<p>There are two kinds of lookaheads: <dfn>positive lookahead</dfn> and <dfn>negative lookahead</dfn>.</p>\n<p>A positive lookahead will look to make sure the element in the search pattern is there, but won't actually match it. A positive lookahead is used as <code>(?=...)</code> where the <code>...</code> is the required part that is not matched.</p>\n<p>On the other hand, a negative lookahead will look to make sure the element in the search pattern is not there. A negative lookahead is used as <code>(?!...)</code> where the <code>...</code> is the pattern that you do not want to be there. The rest of the pattern is returned if the negative lookahead part is not present.</p>\n<p>Lookaheads are a bit confusing but some examples will help.</p>\n<pre><code class=\"language-js\">let quit = \"qu\";\nlet noquit = \"qt\";\nlet quRegex= /q(?=u)/;\nlet qRegex = /q(?!u)/;\nquit.match(quRegex);\nnoquit.match(qRegex);\n</code></pre>\n<p>Both of these <code>match</code> calls would return <code>[\"q\"]</code>.</p>\n<p>A more practical use of lookaheads is to check two or more patterns in one string. Here is a (naively) simple password checker that looks for between 3 and 6 characters and at least one number:</p>\n<pre><code class=\"language-js\">let password = \"abc123\";\nlet checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;\ncheckPass.test(password);\n</code></pre>\n</section>","id":"587d7dba367417b2b2512ba9","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use lookaheads in the <code>pwRegex</code> to match passwords that are greater than 5 characters long, and have two consecutive digits.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301360,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/positive-and-negative-lookahead","tests":[{"text":"<p>Your regex should use two positive <code>lookaheads</code>.</p>","testString":"assert(pwRegex.source.match(/\\(\\?=.*?\\)\\(\\?=.*?\\)/) !== null);"},{"text":"<p>Your regex should not match the string <code>astronaut</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(!pwRegex.test('astronaut'));"},{"text":"<p>Your regex should not match the string <code>banan1</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(!pwRegex.test('banan1'));"},{"text":"<p>Your regex should match the string <code>bana12</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(pwRegex.test('bana12'));"},{"text":"<p>Your regex should match the string <code>abc123</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(pwRegex.test('abc123'));"},{"text":"<p>Your regex should not match the string <code>12345</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(!pwRegex.test('12345'));"},{"text":"<p>Your regex should match the string <code>8pass99</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(pwRegex.test('8pass99'));"},{"text":"<p>Your regex should not match the string <code>1a2bcde</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(!pwRegex.test('1a2bcde'));"},{"text":"<p>Your regex should match the string <code>astr1on11aut</code></p>","testString":"pwRegex.lastIndex = 0;\nassert(pwRegex.test('astr1on11aut'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let sampleWord = \"astronaut\";\nlet pwRegex = /change/; // Change this line\nlet result = pwRegex.test(sampleWord);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"positive-and-negative-lookahead","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-all-or-none","id":"587d7dba367417b2b2512ba9"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/positive-and-negative-lookahead"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
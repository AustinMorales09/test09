{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/extract-matches",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Extract Matches","description":"<section id=\"description\">\n<p>So far, you have only been checking if a pattern exists or not within a string. You can also extract the actual matches you found with the <code>.match()</code> method.</p>\n<p>To use the <code>.match()</code> method, apply the method on a string and pass in the regex inside the parentheses.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">\"Hello, World!\".match(/Hello/);\nlet ourStr = \"Regular expressions\";\nlet ourRegex = /expressions/;\nourStr.match(ourRegex);\n</code></pre>\n<p>Here the first <code>match</code> would return <code>[\"Hello\"]</code> and the second would return <code>[\"expressions\"]</code>.</p>\n<p>Note that the <code>.match</code> syntax is the \"opposite\" of the <code>.test</code> method you have been using thus far:</p>\n<pre><code class=\"language-js\">'string'.match(/regex/);\n/regex/.test('string');\n</code></pre>\n</section>","id":"587d7db4367417b2b2512b92","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Apply the <code>.match()</code> method to extract the string <code>coding</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301340,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/extract-matches","tests":[{"text":"<p>The <code>result</code> should have the string <code>coding</code></p>","testString":"assert(result.join() === 'coding');"},{"text":"<p>Your regex <code>codingRegex</code> should search for the string <code>coding</code></p>","testString":"assert(codingRegex.source === 'coding');"},{"text":"<p>You should use the <code>.match()</code> method.</p>","testString":"assert(__helpers.removeJSComments(code).match(/\\.match\\(.*\\)/));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /change/; // Change this line\nlet result = extractStr; // Change this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"extract-matches","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/find-more-than-the-first-match","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching","id":"587d7db4367417b2b2512b92"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/extract-matches"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
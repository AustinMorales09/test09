{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match Single Character with Multiple Possibilities","description":"<section id=\"description\">\n<p>You learned how to match literal patterns (<code>/literal/</code>) and wildcard character (<code>/./</code>). Those are the extremes of regular expressions, where one finds exact matches and the other matches everything. There are options that are a balance between the two extremes.</p>\n<p>You can search for a literal pattern with some flexibility with <dfn>character classes</dfn>. Character classes allow you to define a group of characters you wish to match by placing them inside square (<code>[</code> and <code>]</code>) brackets.</p>\n<p>For example, you want to match <code>bag</code>, <code>big</code>, and <code>bug</code> but not <code>bog</code>. You can create the regex <code>/b[aiu]g/</code> to do this. The <code>[aiu]</code> is the character class that will only match the characters <code>a</code>, <code>i</code>, or <code>u</code>.</p>\n<pre><code class=\"language-js\">let bigStr = \"big\";\nlet bagStr = \"bag\";\nlet bugStr = \"bug\";\nlet bogStr = \"bog\";\nlet bgRegex = /b[aiu]g/;\nbigStr.match(bgRegex);\nbagStr.match(bgRegex);\nbugStr.match(bgRegex);\nbogStr.match(bgRegex);\n</code></pre>\n<p>In order, the four <code>match</code> calls would return the values <code>[\"big\"]</code>, <code>[\"bag\"]</code>, <code>[\"bug\"]</code>, and <code>null</code>.</p>\n</section>","id":"587d7db5367417b2b2512b95","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use a character class with vowels (<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>) in your regex <code>vowelRegex</code> to find all the vowels in the string <code>quoteSample</code>.</p>\n<p><strong>Note:</strong> Be sure to match both upper- and lowercase vowels.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301357,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities","tests":[{"text":"<p>You should find all 25 vowels.</p>","testString":"assert(result.length == 25);"},{"text":"<p>Your regex <code>vowelRegex</code> should use a character class.</p>","testString":"assert(/\\[.*\\]/.test(vowelRegex.source));"},{"text":"<p>Your regex <code>vowelRegex</code> should use the global flag.</p>","testString":"assert(vowelRegex.flags.match(/g/).length == 1);"},{"text":"<p>Your regex <code>vowelRegex</code> should use the case insensitive flag.</p>","testString":"assert(vowelRegex.flags.match(/i/).length == 1);"},{"text":"<p>Your regex should not match any consonants.</p>","testString":"assert(!/[b-df-hj-np-tv-z]/gi.test(result.join()));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let quoteSample = \"Beware of bugs in the above code; I have only proved it correct, not tried it.\";\nlet vowelRegex = /change/; // Change this line\nlet result = vowelRegex; // Change this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"match-single-character-with-multiple-possibilities","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-letters-of-the-alphabet","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-anything-with-wildcard-period","id":"587d7db5367417b2b2512b95"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
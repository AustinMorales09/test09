{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/find-characters-with-lazy-matching",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Find Characters with Lazy Matching","description":"<section id=\"description\">\n<p>In regular expressions, a <dfn>greedy</dfn> match finds the longest possible part of a string that fits the regex pattern and returns it as a match. The alternative is called a <dfn>lazy</dfn> match, which finds the smallest possible part of the string that satisfies the regex pattern.</p>\n<p>You can apply the regex <code>/t[a-z]*i/</code> to the string <code>\"titanic\"</code>. This regex is basically a pattern that starts with <code>t</code>, ends with <code>i</code>, and has some letters in between.</p>\n<p>Regular expressions are by default greedy, so the match would return <code>[\"titani\"]</code>. It finds the largest sub-string possible to fit the pattern.</p>\n<p>However, you can use the <code>?</code> character to change it to lazy matching. <code>\"titanic\"</code> matched against the adjusted regex of <code>/t[a-z]*?i/</code> returns <code>[\"ti\"]</code>.</p>\n<p><strong>Note:</strong> Parsing HTML with regular expressions should be avoided, but pattern matching an HTML string with regular expressions is completely fine.</p>\n</section>","id":"587d7db6367417b2b2512b9b","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the regex <code>/&#x3C;.*>/</code> to return the HTML tag <code>&#x3C;h1></code> and not the text <code>\"&#x3C;h1>Winter is coming&#x3C;/h1>\"</code>. Remember the wildcard <code>.</code> in a regular expression matches any character.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301341,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/find-characters-with-lazy-matching","tests":[{"text":"<p>The <code>result</code> variable should be an array with <code>&#x3C;h1></code> in it</p>","testString":"assert(result[0] == '<h1>');"},{"text":"<p><code>myRegex</code> should use lazy matching</p>","testString":"assert(/[^\\\\][\\*\\+\\?]\\?/.test(myRegex));"},{"text":"<p><code>myRegex</code> should not include the string <code>h1</code></p>","testString":"assert(!myRegex.source.match('h1'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*>/; // Change this line\nlet result = text.match(myRegex);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"find-characters-with-lazy-matching","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/find-one-or-more-criminals-in-a-hunt","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times","id":"587d7db6367417b2b2512b9b"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/find-characters-with-lazy-matching"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
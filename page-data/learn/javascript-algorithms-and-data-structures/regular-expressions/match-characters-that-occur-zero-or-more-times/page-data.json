{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match Characters that Occur Zero or More Times","description":"<section id=\"description\">\n<p>The last challenge used the plus <code>+</code> sign to look for characters that occur one or more times. There's also an option that matches characters that occur zero or more times.</p>\n<p>The character to do this is the asterisk or star: <code>*</code>.</p>\n<pre><code class=\"language-js\">let soccerWord = \"gooooooooal!\";\nlet gPhrase = \"gut feeling\";\nlet oPhrase = \"over the moon\";\nlet goRegex = /go*/;\nsoccerWord.match(goRegex);\ngPhrase.match(goRegex);\noPhrase.match(goRegex);\n</code></pre>\n<p>In order, the three <code>match</code> calls would return the values <code>[\"goooooooo\"]</code>, <code>[\"g\"]</code>, and <code>null</code>.</p>\n</section>","id":"587d7db6367417b2b2512b9a","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>For this challenge, <code>chewieQuote</code> has been initialized as the string <code>Aaaaaaaaaaaaaaaarrrgh!</code> behind the scenes. Create a regex <code>chewieRegex</code> that uses the <code>*</code> character to match an uppercase <code>A</code> character immediately followed by zero or more lowercase <code>a</code> characters in <code>chewieQuote</code>. Your regex does not need flags or character classes, and it should not match any of the other quotes.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301351,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times","tests":[{"text":"<p>Your regex <code>chewieRegex</code> should use the <code>*</code> character to match zero or more <code>a</code> characters.</p>","testString":"assert(/\\*/.test(chewieRegex.source));"},{"text":"<p>Your regex should match the string <code>A</code> in <code>chewieQuote</code>.</p>","testString":"assert(result[0][0] === 'A');"},{"text":"<p>Your regex should match the string <code>Aaaaaaaaaaaaaaaa</code> in <code>chewieQuote</code>.</p>","testString":"assert(result[0] === 'Aaaaaaaaaaaaaaaa');"},{"text":"<p>Your regex <code>chewieRegex</code> should match 16 characters in <code>chewieQuote</code>.</p>","testString":"assert(result[0].length === 16);"},{"text":"<p>Your regex should not match any characters in the string <code>He made a fair move. Screaming about it can't help you.</code></p>","testString":"assert(\n  !\"He made a fair move. Screaming about it can't help you.\".match(chewieRegex)\n);"},{"text":"<p>Your regex should not match any characters in the string <code>Let him have it. It's not wise to upset a Wookiee.</code></p>","testString":"assert(\n  !\"Let him have it. It's not wise to upset a Wookiee.\".match(chewieRegex)\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"// Only change code below this line\nlet chewieRegex = /change/; // Change this line\n// Only change code above this line\n\nlet result = chewieQuote.match(chewieRegex);","head":"const chewieQuote = \"Aaaaaaaaaaaaaaaarrrgh!\";","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"match-characters-that-occur-zero-or-more-times","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/find-characters-with-lazy-matching","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-one-or-more-times","id":"587d7db6367417b2b2512b9a"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match Literal Strings","description":"<section id=\"description\">\n<p>In the last challenge, you searched for the word <code>Hello</code> using the regular expression <code>/Hello/</code>. That regex searched for a literal match of the string <code>Hello</code>. Here's another example searching for a literal match of the string <code>Kevin</code>:</p>\n<pre><code class=\"language-js\">let testStr = \"Hello, my name is Kevin.\";\nlet testRegex = /Kevin/;\ntestRegex.test(testStr);\n</code></pre>\n<p>This <code>test</code> call will return <code>true</code>.</p>\n<p>Any other forms of <code>Kevin</code> will not match. For example, the regex <code>/Kevin/</code> will not match <code>kevin</code> or <code>KEVIN</code>.</p>\n<pre><code class=\"language-js\">let wrongRegex = /kevin/;\nwrongRegex.test(testStr);\n</code></pre>\n<p>This <code>test</code> call will return <code>false</code>.</p>\n<p>A future challenge will show how to match those other forms as well.</p>\n</section>","id":"587d7db3367417b2b2512b8f","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Complete the regex <code>waldoRegex</code> to find <code>\"Waldo\"</code> in the string <code>waldoIsHiding</code> with a literal match.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301355,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings","tests":[{"text":"<p>Your regex <code>waldoRegex</code> should find the string <code>Waldo</code></p>","testString":"waldoRegex.lastIndex = 0;\nassert(waldoRegex.test(waldoIsHiding));"},{"text":"<p>Your regex <code>waldoRegex</code> should not search for anything else.</p>","testString":"waldoRegex.lastIndex = 0;\nassert(!waldoRegex.test('Somewhere is hiding in this text.'));"},{"text":"<p>You should perform a literal string match with your regex.</p>","testString":"assert(!/\\/.*\\/i/.test(__helpers.removeJSComments(code)));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /search/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"match-literal-strings","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/using-the-test-method","id":"587d7db3367417b2b2512b8f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
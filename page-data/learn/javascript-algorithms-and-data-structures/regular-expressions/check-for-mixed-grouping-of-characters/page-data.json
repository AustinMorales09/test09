{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Check For Mixed Grouping of Characters","description":"<section id=\"description\">\n<p>Sometimes we want to check for groups of characters using a Regular Expression and to achieve that we use parentheses <code>()</code>.</p>\n<p>If you want to find either <code>Penguin</code> or <code>Pumpkin</code> in a string, you can use the following Regular Expression: <code>/P(engu|umpk)in/g</code></p>\n<p>Then check whether the desired string groups are in the test string by using the <code>test()</code> method.</p>\n<pre><code class=\"language-js\">let testStr = \"Pumpkin\";\nlet testRegex = /P(engu|umpk)in/;\ntestRegex.test(testStr);\n</code></pre>\n<p>The <code>test</code> method here would return <code>true</code>.</p>\n</section>","id":"5c3dda8b4d8df89bea71600f","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the regex so that it checks for the names of <code>Franklin Roosevelt</code> or <code>Eleanor Roosevelt</code> in a case sensitive manner and it should make concessions for middle names.</p>\n<p>Then fix the code so that the regex that you have created is checked against <code>myString</code> and either <code>true</code> or <code>false</code> is returned depending on whether the regex matches.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301339,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters","tests":[{"text":"<p>Your regex <code>myRegex</code> should return <code>true</code> for the string <code>Franklin D. Roosevelt</code></p>","testString":"myRegex.lastIndex = 0;\nassert(myRegex.test('Franklin D. Roosevelt'));"},{"text":"<p>Your regex <code>myRegex</code> should return <code>true</code> for the string <code>Eleanor Roosevelt</code></p>","testString":"myRegex.lastIndex = 0;\nassert(myRegex.test('Eleanor Roosevelt'));"},{"text":"<p>Your regex <code>myRegex</code> should return <code>false</code> for the string <code>Franklin Rosevelt</code></p>","testString":"myRegex.lastIndex = 0;\nassert(!myRegex.test('Franklin Rosevelt'));"},{"text":"<p>Your regex <code>myRegex</code> should return <code>false</code> for the string <code>Frank Roosevelt</code></p>","testString":"myRegex.lastIndex = 0;\nassert(!myRegex.test('Frank Roosevelt'));"},{"text":"<p>Your regex <code>myRegex</code> should return <code>false</code> for the string <code>FranklinRoosevelt</code></p>","testString":"myRegex.lastIndex = 0;\nassert(!myRegex.test('FranklinRoosevelt'));"},{"text":"<p>Your regex <code>myRegex</code> should return <code>false</code> for the string <code>EleanorRoosevelt</code></p>","testString":"myRegex.lastIndex = 0;\nassert(!myRegex.test('EleanorRoosevelt'));"},{"text":"<p>You should use <code>.test()</code> to test the regex.</p>","testString":"assert(__helpers.removeJSComments(code).match(/myRegex.test\\(\\s*myString\\s*\\)/));"},{"text":"<p>Your result should return <code>true</code>.</p>","testString":"assert(result === true);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let myString = \"Eleanor Roosevelt\";\nlet myRegex = /False/; // Change this line\nlet result = false; // Change this line\n// After passing the challenge experiment with myString and see how the grouping works","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"check-for-mixed-grouping-of-characters","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/positive-and-negative-lookahead","id":"5c3dda8b4d8df89bea71600f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
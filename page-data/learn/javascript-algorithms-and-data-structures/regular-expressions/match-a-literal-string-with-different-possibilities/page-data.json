{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match a Literal String with Different Possibilities","description":"<section id=\"description\">\n<p>Using regexes like <code>/coding/</code>, you can look for the pattern <code>coding</code> in another string.</p>\n<p>This is powerful to search single strings, but it's limited to only one pattern. You can search for multiple patterns using the <code>alternation</code> or <code>OR</code> operator: <code>|</code>.</p>\n<p>This operator matches patterns either before or after it. For example, if you wanted to match the strings <code>yes</code> or <code>no</code>, the regex you want is <code>/yes|no/</code>.</p>\n<p>You can also search for more than just two patterns. You can do this by adding more patterns with more <code>OR</code> operators separating them, like <code>/yes|no|maybe/</code>.</p>\n</section>","id":"587d7db4367417b2b2512b90","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Complete the regex <code>petRegex</code> to match the pets <code>dog</code>, <code>cat</code>, <code>bird</code>, or <code>fish</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301345,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities","tests":[{"text":"<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>John has a pet dog.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(petRegex.test('John has a pet dog.'));"},{"text":"<p>Your regex <code>petRegex</code> should return <code>false</code> for the string <code>Emma has a pet rock.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(!petRegex.test('Emma has a pet rock.'));"},{"text":"<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>Emma has a pet bird.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(petRegex.test('Emma has a pet bird.'));"},{"text":"<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>Liz has a pet cat.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(petRegex.test('Liz has a pet cat.'));"},{"text":"<p>Your regex <code>petRegex</code> should return <code>false</code> for the string <code>Kara has a pet dolphin.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(!petRegex.test('Kara has a pet dolphin.'));"},{"text":"<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>Alice has a pet fish.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(petRegex.test('Alice has a pet fish.'));"},{"text":"<p>Your regex <code>petRegex</code> should return <code>false</code> for the string <code>Jimmy has a pet computer.</code></p>","testString":"petRegex.lastIndex = 0;\nassert(!petRegex.test('Jimmy has a pet computer.'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let petString = \"James has a pet cat.\";\nlet petRegex = /change/; // Change this line\nlet result = petRegex.test(petString);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"match-a-literal-string-with-different-possibilities","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings","id":"587d7db4367417b2b2512b90"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
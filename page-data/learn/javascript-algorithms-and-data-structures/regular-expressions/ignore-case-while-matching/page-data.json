{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Ignore Case While Matching","description":"<section id=\"description\">\n<p>Up until now, you've looked at regexes to do literal matches of strings. But sometimes, you might want to also match case differences.</p>\n<p>Case (or sometimes letter case) is the difference between uppercase letters and lowercase letters. Examples of uppercase are <code>A</code>, <code>B</code>, and <code>C</code>. Examples of lowercase are <code>a</code>, <code>b</code>, and <code>c</code>.</p>\n<p>You can match both cases using what is called a flag. There are other flags but here you'll focus on the flag that ignores case - the <code>i</code> flag. You can use it by appending it to the regex. An example of using this flag is <code>/ignorecase/i</code>. This regex can match the strings <code>ignorecase</code>, <code>igNoreCase</code>, and <code>IgnoreCase</code>.</p>\n</section>","id":"587d7db4367417b2b2512b91","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a regex <code>fccRegex</code> to match <code>freeCodeCamp</code>, no matter its case. Your regex should not match any abbreviations or variations with spaces.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301344,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching","tests":[{"text":"<p>Your regex should match the string <code>freeCodeCamp</code></p>","testString":"fccRegex.lastIndex = 0; \nassert(fccRegex.test('freeCodeCamp'));"},{"text":"<p>Your regex should match the string <code>FreeCodeCamp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreeCodeCamp'));"},{"text":"<p>Your regex should match the string <code>FreecodeCamp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreecodeCamp'));"},{"text":"<p>Your regex should match the string <code>FreeCodecamp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreeCodecamp'));"},{"text":"<p>Your regex should not match the string <code>Free Code Camp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(!fccRegex.test('Free Code Camp'));"},{"text":"<p>Your regex should match the string <code>FreeCOdeCamp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FreeCOdeCamp'));"},{"text":"<p>Your regex should not match the string <code>FCC</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(!fccRegex.test('FCC'));"},{"text":"<p>Your regex should match the string <code>FrEeCoDeCamp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FrEeCoDeCamp'));"},{"text":"<p>Your regex should match the string <code>FrEeCodECamp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FrEeCodECamp'));"},{"text":"<p>Your regex should match the string <code>FReeCodeCAmp</code></p>","testString":"fccRegex.lastIndex = 0;\nassert(fccRegex.test('FReeCodeCAmp'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let myString = \"freeCodeCamp\";\nlet fccRegex = /change/; // Change this line\nlet result = fccRegex.test(myString);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"ignore-case-while-matching","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/extract-matches","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities","id":"587d7db4367417b2b2512b91"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
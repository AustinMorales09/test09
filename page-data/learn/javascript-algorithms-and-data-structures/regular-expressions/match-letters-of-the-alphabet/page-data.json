{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-letters-of-the-alphabet",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match Letters of the Alphabet","description":"<section id=\"description\">\n<p>You saw how you can use <dfn>character sets</dfn> to specify a group of characters to match, but that's a lot of typing when you need to match a large range of characters (for example, every letter in the alphabet). Fortunately, there is a built-in feature that makes this short and simple.</p>\n<p>Inside a character set, you can define a range of characters to match using a hyphen character: <code>-</code>.</p>\n<p>For example, to match lowercase letters <code>a</code> through <code>e</code> you would use <code>[a-e]</code>.</p>\n<pre><code class=\"language-js\">let catStr = \"cat\";\nlet batStr = \"bat\";\nlet matStr = \"mat\";\nlet bgRegex = /[a-e]at/;\ncatStr.match(bgRegex);\nbatStr.match(bgRegex);\nmatStr.match(bgRegex);\n</code></pre>\n<p>In order, the three <code>match</code> calls would return the values <code>[\"cat\"]</code>, <code>[\"bat\"]</code>, and <code>null</code>.</p>\n</section>","id":"587d7db5367417b2b2512b96","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Match all the letters in the string <code>quoteSample</code>.</p>\n<p><strong>Note</strong>: Be sure to match both uppercase and lowercase letters.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301354,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-letters-of-the-alphabet","tests":[{"text":"<p>Your regex <code>alphabetRegex</code> should match 35 items.</p>","testString":"assert(result.length == 35);"},{"text":"<p>Your regex <code>alphabetRegex</code> should use the global flag.</p>","testString":"assert(alphabetRegex.flags.match(/g/).length == 1);"},{"text":"<p>Your regex <code>alphabetRegex</code> should use the case insensitive flag.</p>","testString":"assert(alphabetRegex.flags.match(/i/).length == 1);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /change/; // Change this line\nlet result = alphabetRegex; // Change this line","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"match-letters-of-the-alphabet","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-numbers-and-letters-of-the-alphabet","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities","id":"587d7db5367417b2b2512b96"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-letters-of-the-alphabet"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
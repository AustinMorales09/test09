{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/match-anything-with-wildcard-period",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Match Anything with Wildcard Period","description":"<section id=\"description\">\n<p>Sometimes you won't (or don't need to) know the exact characters in your patterns. Thinking of all words that match, say, a misspelling would take a long time. Luckily, you can save time using the wildcard character: <code>.</code></p>\n<p>The wildcard character <code>.</code> will match any one character. The wildcard is also called <code>dot</code> and <code>period</code>. You can use the wildcard character just like any other character in the regex. For example, if you wanted to match <code>hug</code>, <code>huh</code>, <code>hut</code>, and <code>hum</code>, you can use the regex <code>/hu./</code> to match all four words.</p>\n<pre><code class=\"language-js\">let humStr = \"I'll hum a song\";\nlet hugStr = \"Bear hug\";\nlet huRegex = /hu./;\nhuRegex.test(humStr);\nhuRegex.test(hugStr);\n</code></pre>\n<p>Both of these <code>test</code> calls would return <code>true</code>.</p>\n</section>","id":"587d7db5367417b2b2512b94","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Complete the regex <code>unRegex</code> so that it matches the strings <code>run</code>, <code>sun</code>, <code>fun</code>, <code>pun</code>, <code>nun</code>, and <code>bun</code>. Your regex should use the wildcard character.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301348,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-anything-with-wildcard-period","tests":[{"text":"<p>You should use the <code>.test()</code> method.</p>","testString":"assert(__helpers.removeJSComments(code).match(/\\.test\\(.*\\)/));"},{"text":"<p>You should use the wildcard character in your regex <code>unRegex</code></p>","testString":"assert(/\\./.test(unRegex.source));"},{"text":"<p>Your regex <code>unRegex</code> should match <code>run</code> in the string <code>Let us go on a run.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(unRegex.test('Let us go on a run.'));"},{"text":"<p>Your regex <code>unRegex</code> should match <code>sun</code> in the string <code>The sun is out today.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(unRegex.test('The sun is out today.'));"},{"text":"<p>Your regex <code>unRegex</code> should match <code>fun</code> in the string <code>Coding is a lot of fun.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(unRegex.test('Coding is a lot of fun.'));"},{"text":"<p>Your regex <code>unRegex</code> should match <code>pun</code> in the string <code>Seven days without a pun makes one weak.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(unRegex.test('Seven days without a pun makes one weak.'));"},{"text":"<p>Your regex <code>unRegex</code> should match <code>nun</code> in the string <code>One takes a vow to be a nun.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(unRegex.test('One takes a vow to be a nun.'));"},{"text":"<p>Your regex <code>unRegex</code> should match <code>bun</code> in the string <code>She got fired from the hot dog stand for putting her hair in a bun.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(\n  unRegex.test(\n    'She got fired from the hot dog stand for putting her hair in a bun.'\n  )\n);"},{"text":"<p>Your regex <code>unRegex</code> should not match the string <code>There is a bug in my code.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(!unRegex.test('There is a bug in my code.'));"},{"text":"<p>Your regex <code>unRegex</code> should not match the string <code>Catch me if you can.</code></p>","testString":"unRegex.lastIndex = 0;\nassert(!unRegex.test('Catch me if you can.'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let exampleStr = \"Let's have fun with regular expressions!\";\nlet unRegex = /change/; // Change this line\nlet result = unRegex.test(exampleStr);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"match-anything-with-wildcard-period","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/find-more-than-the-first-match","id":"587d7db5367417b2b2512b94"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/match-anything-with-wildcard-period"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
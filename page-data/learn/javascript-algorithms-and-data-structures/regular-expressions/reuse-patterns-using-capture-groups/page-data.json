{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups",
    "result": {"data":{"challengeNode":{"challenge":{"block":"regular-expressions","title":"Reuse Patterns Using Capture Groups","description":"<section id=\"description\">\n<p>Say you want to match a word that occurs multiple times like below.</p>\n<pre><code class=\"language-js\">let repeatStr = \"row row row your boat\";\n</code></pre>\n<p>You could use <code>/row row row/</code>, but what if you don't know the specific word repeated? <dfn>Capture groups</dfn> can be used to find repeated substrings.</p>\n<p>Capture groups are constructed by enclosing the regex pattern to be captured in parentheses. In this case, the goal is to capture a word consisting of alphanumeric characters so the capture group will be <code>\\w+</code> enclosed by parentheses: <code>/(\\w+)/</code>.</p>\n<p>The substring matched by the group is saved to a temporary \"variable\", which can be accessed within the same regex using a backslash and the number of the capture group (e.g. <code>\\1</code>). Capture groups are automatically numbered by the position of their opening parentheses (left to right), starting at 1.</p>\n<p>The example below matches a word that occurs thrice separated by spaces:</p>\n<pre><code class=\"language-js\">let repeatRegex = /(\\w+) \\1 \\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns [\"row row row\", \"row\"]\n</code></pre>\n<p>Using the <code>.match()</code> method on a string will return an array with the matched substring, along with its captured groups.</p>\n</section>","id":"587d7dbb367417b2b2512baa","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use capture groups in <code>reRegex</code> to match a string that consists of only the same number repeated exactly three times separated by single spaces.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301364,"fields":{"blockName":"regular-expressions","slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups","tests":[{"text":"<p>Your regex should use the shorthand character class for digits.</p>","testString":"assert(reRegex.source.match(/\\\\d/));"},{"text":"<p>Your regex should reuse a capture group twice.</p>","testString":"assert(reRegex.source.match(/\\\\1|\\\\2/g).length >= 2);"},{"text":"<p>Your regex should match the string <code>42 42 42</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(reRegex.test('42 42 42'));"},{"text":"<p>Your regex should match the string <code>100 100 100</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(reRegex.test('100 100 100'));"},{"text":"<p>Your regex should not match the string <code>42 42 42 42</code>.</p>","testString":"assert.equal('42 42 42 42'.match(reRegex.source), null);"},{"text":"<p>Your regex should not match the string <code>42 42</code>.</p>","testString":"assert.equal('42 42'.match(reRegex.source), null);"},{"text":"<p>Your regex should not match the string <code>101 102 103</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(!reRegex.test('101 102 103'));"},{"text":"<p>Your regex should not match the string <code>1 2 3</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(!reRegex.test('1 2 3'));"},{"text":"<p>Your regex should match the string <code>10 10 10</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(reRegex.test('10 10 10'));"},{"text":"<p>Your regex should not match the string <code>42\\t42\\t42</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(!reRegex.test('42\\t42\\t42'));"},{"text":"<p>Your regex should not match the string <code>42  42  42</code>.</p>","testString":"reRegex.lastIndex = 0;\nassert(!reRegex.test('42  42  42'));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let repeatNum = \"42 42 42\";\nlet reRegex = /change/; // Change this line\nlet result = reRegex.test(repeatNum);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#regular-expressions","dashedName":"reuse-patterns-using-capture-groups","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"regular-expressions","isFirstStep":false,"template":null,"required":[],"nextBlock":"regular-expressions","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/use-capture-groups-to-search-and-replace","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters","id":"587d7dbb367417b2b2512baa"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let hello = \"   Hello, World!  \";\nlet wsRegex = /^(\\s+)(.+[^\\s])(\\s+)$/;\nlet result = hello.replace(wsRegex, '$2');","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
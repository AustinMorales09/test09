{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-data-structures","title":"Access Property Names with Bracket Notation","description":"<section id=\"description\">\n<p>In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code> object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:</p>\n<pre><code class=\"language-js\">let selectedFood = getCurrentFood(scannedItem);\nlet inventory = foods[selectedFood];\n</code></pre>\n<p>This code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.</p>\n</section>","id":"587d7b7c367417b2b2512b1a","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>We've defined a function, <code>checkInventory</code>, which receives a scanned item as an argument. Return the current value of the <code>scannedItem</code> key in the <code>foods</code> object. You can assume that only valid keys will be provided as an argument to <code>checkInventory</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301150,"fields":{"blockName":"basic-data-structures","slug":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation","tests":[{"text":"<p><code>checkInventory</code> should be a function.</p>","testString":"assert.strictEqual(typeof checkInventory, 'function');"},{"text":"<p>The <code>foods</code> object should have only the following key-value pairs: <code>apples: 25</code>, <code>oranges: 32</code>, <code>plums: 28</code>, <code>bananas: 13</code>, <code>grapes: 35</code>, <code>strawberries: 27</code>.</p>","testString":"assert.deepEqual(foods, {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n});"},{"text":"<p><code>checkInventory(\"apples\")</code> should return <code>25</code>.</p>","testString":"assert.strictEqual(checkInventory('apples'), 25);"},{"text":"<p><code>checkInventory(\"bananas\")</code> should return <code>13</code>.</p>","testString":"assert.strictEqual(checkInventory('bananas'), 13);"},{"text":"<p><code>checkInventory(\"strawberries\")</code> should return <code>27</code>.</p>","testString":"assert.strictEqual(checkInventory('strawberries'), 27);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n\nfunction checkInventory(scannedItem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(checkInventory(\"apples\"));","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-data-structures","dashedName":"access-property-names-with-bracket-notation","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-data-structures","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/use-the-delete-keyword-to-remove-object-properties","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/modify-an-object-nested-within-an-object","id":"587d7b7c367417b2b2512b1a"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj.data.friends;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
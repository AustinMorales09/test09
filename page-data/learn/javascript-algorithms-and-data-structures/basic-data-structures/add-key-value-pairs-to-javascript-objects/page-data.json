{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-key-value-pairs-to-javascript-objects",
    "result": {"data":{"challengeNode":{"challenge":{"block":"basic-data-structures","title":"Add Key-Value Pairs to JavaScript Objects","description":"<section id=\"description\">\n<p>At their most basic, objects are just collections of <dfn>key-value</dfn> pairs. In other words, they are pieces of data (<dfn>values</dfn>) mapped to unique identifiers called <dfn>properties</dfn> (<dfn>keys</dfn>). Take a look at an example:</p>\n<pre><code class=\"language-js\">const tekkenCharacter = {\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true\n};\n</code></pre>\n<p>The above code defines a Tekken video game character object called <code>tekkenCharacter</code>. It has three properties, each of which map to a specific value. If you want to add an additional property, such as \"origin\", it can be done by assigning <code>origin</code> to the object:</p>\n<pre><code class=\"language-js\">tekkenCharacter.origin = 'South Korea';\n</code></pre>\n<p>This uses dot notation. If you were to observe the <code>tekkenCharacter</code> object, it will now include the <code>origin</code> property. Hwoarang also had distinct orange hair. You can add this property with bracket notation by doing:</p>\n<pre><code class=\"language-js\">tekkenCharacter['hair color'] = 'dyed orange';\n</code></pre>\n<p>Bracket notation is required if your property has a space in it or if you want to use a variable to name the property. In the above case, the property is enclosed in quotes to denote it as a string and will be added exactly as shown. Without quotes, it will be evaluated as a variable and the name of the property will be whatever value the variable is. Here's an example with a variable:</p>\n<pre><code class=\"language-js\">const eyes = 'eye color';\n\ntekkenCharacter[eyes] = 'brown';\n</code></pre>\n<p>After adding all the examples, the object will look like this:</p>\n<pre><code class=\"language-js\">{\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true,\n  origin: 'South Korea',\n  'hair color': 'dyed orange',\n  'eye color': 'brown'\n};\n</code></pre>\n</section>","id":"587d7b7c367417b2b2512b18","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>A <code>foods</code> object has been created with three entries. Using the syntax of your choice, add three more entries to it: <code>bananas</code> with a value of <code>13</code>, <code>grapes</code> with a value of <code>35</code>, and <code>strawberries</code> with a value of <code>27</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures","translationPending":false,"forumTopicId":301153,"fields":{"blockName":"basic-data-structures","slug":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-key-value-pairs-to-javascript-objects","tests":[{"text":"<p><code>foods</code> should be an object.</p>","testString":"assert(typeof foods === 'object');"},{"text":"<p>The <code>foods</code> object should have a key <code>bananas</code> with a value of <code>13</code>.</p>","testString":"assert(foods.bananas === 13);"},{"text":"<p>The <code>foods</code> object should have a key <code>grapes</code> with a value of <code>35</code>.</p>","testString":"assert(foods.grapes === 35);"},{"text":"<p>The <code>foods</code> object should have a key <code>strawberries</code> with a value of <code>27</code>.</p>","testString":"assert(foods.strawberries === 27);"},{"text":"<p>The definition of the <code>foods</code> object should not be changed.</p>","testString":"assert(\n  __helpers.removeJSComments(code).search(/let foods/) === -1 &&\n  __helpers.removeJSComments(code).search(/const\\s+foods\\s*=\\s*{\\s*apples:\\s*25,\\s*oranges:\\s*32,\\s*plums:\\s*28\\s*};/\n) !== -1\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n\n// Only change code below this line\n\n// Only change code above this line\n\nconsole.log(foods);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures/#basic-data-structures","dashedName":"add-key-value-pairs-to-javascript-objects","certification":"javascript-algorithms-and-data-structures","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures","block":"basic-data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"basic-data-structures","nextChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/modify-an-object-nested-within-an-object","prevChallengePath":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/create-complex-multi-dimensional-arrays","id":"587d7b7c367417b2b2512b18"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\n\nfunction addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return userObj.data.friends;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-key-value-pairs-to-javascript-objects"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
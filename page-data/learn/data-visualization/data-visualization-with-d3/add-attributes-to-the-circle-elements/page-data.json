{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/data-visualization/data-visualization-with-d3/add-attributes-to-the-circle-elements",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-visualization-with-d3","title":"Add Attributes to the Circle Elements","description":"<section id=\"description\">\n<p>The last challenge created the <code>circle</code> elements for each point in the <code>dataset</code>, and appended them to the SVG. But D3 needs more information about the position and size of each <code>circle</code> to display them correctly.</p>\n<p>A <code>circle</code> in SVG has three main attributes. The <code>cx</code> and <code>cy</code> attributes are the coordinates. They tell D3 where to position the <em>center</em> of the shape on the SVG. The radius (<code>r</code> attribute) gives the size of the <code>circle</code>.</p>\n<p>Just like the <code>rect</code> <code>y</code> coordinate, the <code>cy</code> attribute for a <code>circle</code> is measured from the top of the SVG, not from the bottom.</p>\n<p>All three attributes can use a callback function to set their values dynamically. Remember that all methods chained after <code>data(dataset)</code> run once per item in <code>dataset</code>. The <code>d</code> parameter in the callback function refers to the current item in <code>dataset</code>, which is an array for each point. You use bracket notation, like <code>d[0]</code>, to access the values in that array.</p>\n</section>","id":"587d7fab367417b2b2512bd8","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Add <code>cx</code>, <code>cy</code>, and <code>r</code> attributes to the <code>circle</code> elements. The <code>cx</code> value should be the first number in the array for each item in <code>dataset</code>. The <code>cy</code> value should be based off the second number in the array, but make sure to show the chart right-side-up and not inverted. The <code>r</code> value should be <code>5</code> for all circles.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"data-visualization","translationPending":false,"forumTopicId":301471,"fields":{"blockName":"data-visualization-with-d3","slug":"/learn/data-visualization/data-visualization-with-d3/add-attributes-to-the-circle-elements","tests":[{"text":"<p>Your code should have 10 <code>circle</code> elements.</p>","testString":"assert($('circle').length == 10);"},{"text":"<p>The first <code>circle</code> element should have a <code>cx</code> value of <code>34</code>, a <code>cy</code> value of <code>422</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(0).attr('cx') == '34' &&\n    $('circle').eq(0).attr('cy') == '422' &&\n    $('circle').eq(0).attr('r') == '5'\n);"},{"text":"<p>The second <code>circle</code> element should have a <code>cx</code> value of <code>109</code>, a <code>cy</code> value of <code>220</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(1).attr('cx') == '109' &&\n    $('circle').eq(1).attr('cy') == '220' &&\n    $('circle').eq(1).attr('r') == '5'\n);"},{"text":"<p>The third <code>circle</code> element should have a <code>cx</code> value of <code>310</code>, a <code>cy</code> value of <code>380</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(2).attr('cx') == '310' &&\n    $('circle').eq(2).attr('cy') == '380' &&\n    $('circle').eq(2).attr('r') == '5'\n);"},{"text":"<p>The fourth <code>circle</code> element should have a <code>cx</code> value of <code>79</code>, a <code>cy</code> value of <code>89</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(3).attr('cx') == '79' &&\n    $('circle').eq(3).attr('cy') == '89' &&\n    $('circle').eq(3).attr('r') == '5'\n);"},{"text":"<p>The fifth <code>circle</code> element should have a <code>cx</code> value of <code>420</code>, a <code>cy</code> value of <code>280</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(4).attr('cx') == '420' &&\n    $('circle').eq(4).attr('cy') == '280' &&\n    $('circle').eq(4).attr('r') == '5'\n);"},{"text":"<p>The sixth <code>circle</code> element should have a <code>cx</code> value of <code>233</code>, a <code>cy</code> value of <code>355</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(5).attr('cx') == '233' &&\n    $('circle').eq(5).attr('cy') == '355' &&\n    $('circle').eq(5).attr('r') == '5'\n);"},{"text":"<p>The seventh <code>circle</code> element should have a <code>cx</code> value of <code>333</code>, a <code>cy</code> value of <code>404</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(6).attr('cx') == '333' &&\n    $('circle').eq(6).attr('cy') == '404' &&\n    $('circle').eq(6).attr('r') == '5'\n);"},{"text":"<p>The eighth <code>circle</code> element should have a <code>cx</code> value of <code>222</code>, a <code>cy</code> value of <code>167</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(7).attr('cx') == '222' &&\n    $('circle').eq(7).attr('cy') == '167' &&\n    $('circle').eq(7).attr('r') == '5'\n);"},{"text":"<p>The ninth <code>circle</code> element should have a <code>cx</code> value of <code>78</code>, a <code>cy</code> value of <code>180</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(8).attr('cx') == '78' &&\n    $('circle').eq(8).attr('cy') == '180' &&\n    $('circle').eq(8).attr('r') == '5'\n);"},{"text":"<p>The tenth <code>circle</code> element should have a <code>cx</code> value of <code>21</code>, a <code>cy</code> value of <code>377</code>, and an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  $('circle').eq(9).attr('cx') == '21' &&\n    $('circle').eq(9).attr('cy') == '377' &&\n    $('circle').eq(9).attr('r') == '5'\n);"}]},"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<body>\n  <script>\n    const dataset = [\n                  [ 34,    78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,    411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,   333 ],\n                  [ 78,    320 ],\n                  [ 21,    123 ]\n                ];\n\n\n    const w = 500;\n    const h = 500;\n\n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n\n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       // Add your code below this line\n\n\n\n       // Add your code above this line\n\n  </script>\n</body>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/data-visualization/#data-visualization-with-d3","dashedName":"add-attributes-to-the-circle-elements","certification":"data-visualization","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"data-visualization","block":"data-visualization-with-d3","isFirstStep":false,"template":null,"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"}],"nextBlock":"data-visualization-with-d3","nextChallengePath":"/learn/data-visualization/data-visualization-with-d3/add-labels-to-scatter-plot-circles","prevChallengePath":"/learn/data-visualization/data-visualization-with-d3/create-a-scatterplot-with-svg-circles","id":"587d7fab367417b2b2512bd8"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"html","contents":"<body>\n  <script>\n    const dataset = [\n                  [ 34,     78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,   411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,    333 ],\n                  [ 78,    320 ],\n                  [ 21,   123 ]\n                ];\n\n    const w = 500;\n    const h = 500;\n    const padding = 60;\n\n    const xScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[0])])\n                     .range([padding, w - padding]);\n\n    const yScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[1])])\n                     .range([h - padding, padding]);\n\n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n\n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       .attr(\"cx\", (d) => xScale(d[0]))\n       .attr(\"cy\",(d) => yScale(d[1]))\n       .attr(\"r\", (d) => 5);\n\n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) =>  (d[0] + \",\" + d[1]))\n       .attr(\"x\", (d) => xScale(d[0] + 10))\n       .attr(\"y\", (d) => yScale(d[1]))\n\n    const xAxis = d3.axisBottom(xScale);\n    \n    const yAxis = d3.axisLeft(yScale);\n    \n\n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n       .call(xAxis);\n\n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(\" + padding + \",0)\")\n       .call(yAxis)\n\n  </script>\n</body>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"}]}},"slug":"/learn/data-visualization/data-visualization-with-d3/add-attributes-to-the-circle-elements"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/data-visualization/data-visualization-with-d3/use-a-pre-defined-scale-to-place-elements",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-visualization-with-d3","title":"Use a Pre-Defined Scale to Place Elements","description":"<section id=\"description\">\n<p>With the scales set up, it's time to map the scatter plot again. The scales are like processing functions that turn the <code>x</code> and <code>y</code> raw data into values that fit and render correctly on the SVG. They keep the data within the screen's plotting area.</p>\n<p>You set the coordinate attribute values for an SVG shape with the scaling function. This includes <code>x</code> and <code>y</code> attributes for <code>rect</code> or <code>text</code> elements, or <code>cx</code> and <code>cy</code> for <code>circles</code>. Here's an example:</p>\n<pre><code class=\"language-js\">shape\n  .attr(\"x\", (d) => xScale(d[0]))\n</code></pre>\n<p>Scales set shape coordinate attributes to place the data points onto the SVG. You don't need to apply scales when you display the actual data value, for example, in the <code>text()</code> method for a tooltip or label.</p>\n</section>","id":"587d7fac367417b2b2512bde","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Use <code>xScale</code> and <code>yScale</code> to position both the <code>circle</code> and <code>text</code> shapes onto the SVG. For the <code>circles</code>, apply the scales to set the <code>cx</code> and <code>cy</code> attributes. Give them a radius of <code>5</code> units, too.</p>\n<p>For the <code>text</code> elements, apply the scales to set the <code>x</code> and <code>y</code> attributes. The labels should be offset to the right of the dots. To do this, add <code>10</code> units to the <code>x</code> data value before passing it to the <code>xScale</code>.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"data-visualization","translationPending":false,"forumTopicId":301494,"fields":{"blockName":"data-visualization-with-d3","slug":"/learn/data-visualization/data-visualization-with-d3/use-a-pre-defined-scale-to-place-elements","tests":[{"text":"<p>Your code should have 10 <code>circle</code> elements.</p>","testString":"assert($('circle').length == 10);"},{"text":"<p>The first <code>circle</code> element should have a <code>cx</code> value of approximately <code>91</code> and a <code>cy</code> value of approximately <code>368</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(0).attr('cx')) == '91' &&\n    Math.round($('circle').eq(0).attr('cy')) == '368' &&\n    $('circle').eq(0).attr('r') == '5'\n);"},{"text":"<p>The second <code>circle</code> element should have a <code>cx</code> value of approximately <code>159</code> and a <code>cy</code> value of approximately <code>181</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(1).attr('cx')) == '159' &&\n    Math.round($('circle').eq(1).attr('cy')) == '181' &&\n    $('circle').eq(1).attr('r') == '5'\n);"},{"text":"<p>The third <code>circle</code> element should have a <code>cx</code> value of approximately <code>340</code> and a <code>cy</code> value of approximately <code>329</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(2).attr('cx')) == '340' &&\n    Math.round($('circle').eq(2).attr('cy')) == '329' &&\n    $('circle').eq(2).attr('r') == '5'\n);"},{"text":"<p>The fourth <code>circle</code> element should have a <code>cx</code> value of approximately <code>131</code> and a <code>cy</code> value of approximately <code>60</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(3).attr('cx')) == '131' &&\n    Math.round($('circle').eq(3).attr('cy')) == '60' &&\n    $('circle').eq(3).attr('r') == '5'\n);"},{"text":"<p>The fifth <code>circle</code> element should have a <code>cx</code> value of approximately <code>440</code> and a <code>cy</code> value of approximately <code>237</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(4).attr('cx')) == '440' &&\n    Math.round($('circle').eq(4).attr('cy')) == '237' &&\n    $('circle').eq(4).attr('r') == '5'\n);"},{"text":"<p>The sixth <code>circle</code> element should have a <code>cx</code> value of approximately <code>271</code> and a <code>cy</code> value of approximately <code>306</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(5).attr('cx')) == '271' &&\n    Math.round($('circle').eq(5).attr('cy')) == '306' &&\n    $('circle').eq(5).attr('r') == '5'\n);"},{"text":"<p>The seventh <code>circle</code> element should have a <code>cx</code> value of approximately <code>361</code> and a <code>cy</code> value of approximately <code>351</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(6).attr('cx')) == '361' &&\n    Math.round($('circle').eq(6).attr('cy')) == '351' &&\n    $('circle').eq(6).attr('r') == '5'\n);"},{"text":"<p>The eighth <code>circle</code> element should have a <code>cx</code> value of approximately <code>261</code> and a <code>cy</code> value of approximately <code>132</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(7).attr('cx')) == '261' &&\n    Math.round($('circle').eq(7).attr('cy')) == '132' &&\n    $('circle').eq(7).attr('r') == '5'\n);"},{"text":"<p>The ninth <code>circle</code> element should have a <code>cx</code> value of approximately <code>131</code> and a <code>cy</code> value of approximately <code>144</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(8).attr('cx')) == '131' &&\n    Math.round($('circle').eq(8).attr('cy')) == '144' &&\n    $('circle').eq(8).attr('r') == '5'\n);"},{"text":"<p>The tenth <code>circle</code> element should have a <code>cx</code> value of approximately <code>79</code> and a <code>cy</code> value of approximately <code>326</code> after applying the scales. It should also have an <code>r</code> value of <code>5</code>.</p>","testString":"assert(\n  Math.round($('circle').eq(9).attr('cx')) == '79' &&\n    Math.round($('circle').eq(9).attr('cy')) == '326' &&\n    $('circle').eq(9).attr('r') == '5'\n);"},{"text":"<p>Your code should have 10 <code>text</code> elements.</p>","testString":"assert($('text').length == 10);"},{"text":"<p>The first label should have an <code>x</code> value of approximately <code>100</code> and a <code>y</code> value of approximately <code>368</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(0).attr('x')) == '100' &&\n    Math.round($('text').eq(0).attr('y')) == '368'\n);"},{"text":"<p>The second label should have an <code>x</code> value of approximately <code>168</code> and a <code>y</code> value of approximately <code>181</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(1).attr('x')) == '168' &&\n    Math.round($('text').eq(1).attr('y')) == '181'\n);"},{"text":"<p>The third label should have an <code>x</code> value of approximately <code>350</code> and a <code>y</code> value of approximately <code>329</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(2).attr('x')) == '350' &&\n    Math.round($('text').eq(2).attr('y')) == '329'\n);"},{"text":"<p>The fourth label should have an <code>x</code> value of approximately <code>141</code> and a <code>y</code> value of approximately <code>60</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(3).attr('x')) == '141' &&\n    Math.round($('text').eq(3).attr('y')) == '60'\n);"},{"text":"<p>The fifth label should have an <code>x</code> value of approximately <code>449</code> and a <code>y</code> value of approximately <code>237</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(4).attr('x')) == '449' &&\n    Math.round($('text').eq(4).attr('y')) == '237'\n);"},{"text":"<p>The sixth label should have an <code>x</code> value of approximately <code>280</code> and a <code>y</code> value of approximately <code>306</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(5).attr('x')) == '280' &&\n    Math.round($('text').eq(5).attr('y')) == '306'\n);"},{"text":"<p>The seventh label should have an <code>x</code> value of approximately <code>370</code> and a <code>y</code> value of approximately <code>351</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(6).attr('x')) == '370' &&\n    Math.round($('text').eq(6).attr('y')) == '351'\n);"},{"text":"<p>The eighth label should have an <code>x</code> value of approximately <code>270</code> and a <code>y</code> value of approximately <code>132</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(7).attr('x')) == '270' &&\n    Math.round($('text').eq(7).attr('y')) == '132'\n);"},{"text":"<p>The ninth label should have an <code>x</code> value of approximately <code>140</code> and a <code>y</code> value of approximately <code>144</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(8).attr('x')) == '140' &&\n    Math.round($('text').eq(8).attr('y')) == '144'\n);"},{"text":"<p>The tenth label should have an <code>x</code> value of approximately <code>88</code> and a <code>y</code> value of approximately <code>326</code> after applying the scales.</p>","testString":"assert(\n  Math.round($('text').eq(9).attr('x')) == '88' &&\n    Math.round($('text').eq(9).attr('y')) == '326'\n);"}]},"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<body>\n  <script>\n    const dataset = [\n                  [ 34,     78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,   411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,    333 ],\n                  [ 78,    320 ],\n                  [ 21,   123 ]\n                ];\n\n    const w = 500;\n    const h = 500;\n    const padding = 60;\n\n    const xScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[0])])\n                     .range([padding, w - padding]);\n\n    const yScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[1])])\n                     .range([h - padding, padding]);\n\n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n\n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       // Add your code below this line\n\n\n\n       // Add your code above this line\n\n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) =>  (d[0] + \", \"\n + d[1]))\n       // Add your code below this line\n\n\n\n       // Add your code above this line\n  </script>\n</body>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/data-visualization/#data-visualization-with-d3","dashedName":"use-a-pre-defined-scale-to-place-elements","certification":"data-visualization","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"data-visualization","block":"data-visualization-with-d3","isFirstStep":false,"template":null,"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"}],"nextBlock":"data-visualization-with-d3","nextChallengePath":"/learn/data-visualization/data-visualization-with-d3/add-axes-to-a-visualization","prevChallengePath":"/learn/data-visualization/data-visualization-with-d3/use-dynamic-scales","id":"587d7fac367417b2b2512bde"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"html","contents":"<body>\n  <script>\n    const dataset = [\n                  [ 34,     78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,   411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,    333 ],\n                  [ 78,    320 ],\n                  [ 21,   123 ]\n                ];\n\n    const w = 500;\n    const h = 500;\n    const padding = 60;\n\n    const xScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[0])])\n                     .range([padding, w - padding]);\n\n    const yScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[1])])\n                     .range([h - padding, padding]);\n\n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n\n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       .attr(\"cx\", (d) => xScale(d[0]))\n       .attr(\"cy\",(d) => yScale(d[1]))\n       .attr(\"r\", (d) => 5);\n\n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) =>  (d[0] + \",\" + d[1]))\n       .attr(\"x\", (d) => xScale(d[0] + 10))\n       .attr(\"y\", (d) => yScale(d[1]))\n\n    const xAxis = d3.axisBottom(xScale);\n    \n    const yAxis = d3.axisLeft(yScale);\n    \n\n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n       .call(xAxis);\n\n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(\" + padding + \",0)\")\n       .call(yAxis)\n\n  </script>\n</body>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"}]}},"slug":"/learn/data-visualization/data-visualization-with-d3/use-a-pre-defined-scale-to-place-elements"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/data-visualization/data-visualization-with-d3/create-a-linear-scale-with-d3",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-visualization-with-d3","title":"Create a Linear Scale with D3","description":"<section id=\"description\">\n<p>The bar and scatter plot charts both plotted data directly onto the SVG. However, if the height of a bar or one of the data points were larger than the SVG height or width values, it would go outside the SVG area.</p>\n<p>In D3, there are scales to help plot data. <code>scales</code> are functions that tell the program how to map a set of raw data points onto the pixels of the SVG.</p>\n<p>For example, say you have a 100x500-sized SVG and you want to plot Gross Domestic Product (GDP) for a number of countries. The set of numbers would be in the billion or trillion-dollar range. You provide D3 a type of scale to tell it how to place the large GDP values into that 100x500-sized area.</p>\n<p>It's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the <code>x</code> and <code>y</code> values fit your SVG width and height.</p>\n<p>D3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method <code>scaleLinear()</code>:</p>\n<pre><code class=\"language-js\">const scale = d3.scaleLinear()\n</code></pre>\n<p>By default, a scale uses the identity relationship. The value of the input is the same as the value of the output. A separate challenge covers how to change this.</p>\n</section>","id":"587d7fab367417b2b2512bda","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Change the <code>scale</code> variable to create a linear scale. Then set the <code>output</code> variable to the scale called with an input argument of <code>50</code>.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"data-visualization","translationPending":false,"forumTopicId":301483,"fields":{"blockName":"data-visualization-with-d3","slug":"/learn/data-visualization/data-visualization-with-d3/create-a-linear-scale-with-d3","tests":[{"text":"<p>The text in the <code>h2</code> should be <code>50</code>.</p>","testString":"assert($('h2').text() == '50');"},{"text":"<p>Your code should use the <code>scaleLinear()</code> method.</p>","testString":"assert(code.match(/\\.scaleLinear/g));"},{"text":"<p>The <code>output</code> variable should call <code>scale</code> with an argument of <code>50</code>.</p>","testString":"assert(output == 50 && code.match(/scale\\(\\s*?50\\s*?\\)/g));"}]},"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<body>\n  <script>\n    // Add your code below this line\n\n    const scale = undefined; // Create the scale here\n    const output = scale(); // Call scale with an argument here\n\n    // Add your code above this line\n\n    d3.select(\"body\")\n      .append(\"h2\")\n      .text(output);\n\n  </script>\n</body>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/data-visualization/#data-visualization-with-d3","dashedName":"create-a-linear-scale-with-d3","certification":"data-visualization","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"data-visualization","block":"data-visualization-with-d3","isFirstStep":false,"template":null,"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"}],"nextBlock":"data-visualization-with-d3","nextChallengePath":"/learn/data-visualization/data-visualization-with-d3/set-a-domain-and-a-range-on-a-scale","prevChallengePath":"/learn/data-visualization/data-visualization-with-d3/add-labels-to-scatter-plot-circles","id":"587d7fab367417b2b2512bda"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"html","contents":"<body>\n  <script>\n    const dataset = [\n                  [ 34,     78 ],\n                  [ 109,   280 ],\n                  [ 310,   120 ],\n                  [ 79,   411 ],\n                  [ 420,   220 ],\n                  [ 233,   145 ],\n                  [ 333,   96 ],\n                  [ 222,    333 ],\n                  [ 78,    320 ],\n                  [ 21,   123 ]\n                ];\n\n    const w = 500;\n    const h = 500;\n    const padding = 60;\n\n    const xScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[0])])\n                     .range([padding, w - padding]);\n\n    const yScale = d3.scaleLinear()\n                     .domain([0, d3.max(dataset, (d) => d[1])])\n                     .range([h - padding, padding]);\n\n    const svg = d3.select(\"body\")\n                  .append(\"svg\")\n                  .attr(\"width\", w)\n                  .attr(\"height\", h);\n\n    svg.selectAll(\"circle\")\n       .data(dataset)\n       .enter()\n       .append(\"circle\")\n       .attr(\"cx\", (d) => xScale(d[0]))\n       .attr(\"cy\",(d) => yScale(d[1]))\n       .attr(\"r\", (d) => 5);\n\n    svg.selectAll(\"text\")\n       .data(dataset)\n       .enter()\n       .append(\"text\")\n       .text((d) =>  (d[0] + \",\" + d[1]))\n       .attr(\"x\", (d) => xScale(d[0] + 10))\n       .attr(\"y\", (d) => yScale(d[1]))\n\n    const xAxis = d3.axisBottom(xScale);\n    \n    const yAxis = d3.axisLeft(yScale);\n    \n\n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n       .call(xAxis);\n\n    svg.append(\"g\")\n       .attr(\"transform\", \"translate(\" + padding + \",0)\")\n       .call(yAxis)\n\n  </script>\n</body>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"}]}},"slug":"/learn/data-visualization/data-visualization-with-d3/create-a-linear-scale-with-d3"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
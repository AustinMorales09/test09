{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/build-a-time-calculator-project/build-a-time-calculator-project",
    "result": {"data":{"challengeNode":{"challenge":{"block":"build-a-time-calculator-project","title":"Build a Time Calculator Project","description":"<section id=\"description\">\n<p>Write a function named <code>add_time</code> that takes in two required parameters and one optional parameter:</p>\n<ul>\n<li>a start time in the 12-hour clock format (ending in AM or PM)</li>\n<li>a duration time that indicates the number of hours and minutes</li>\n<li>(optional) a starting day of the week, case insensitive</li>\n</ul>\n<p>The function should add the duration time to the start time and return the result.</p>\n<p>If the result will be the next day, it should show <code>(next day)</code> after the time. If the result will be more than one day later, it should show <code>(n days later)</code> after the time, where \"n\" is the number of days later.</p>\n<p>If the function is given the optional starting day of the week parameter, then the output should display the day of the week of the result. The day of the week in the output should appear after the time and before the number of days later.</p>\n<p>Below are some examples of different cases the function should handle. Pay close attention to the spacing and punctuation of the results.</p>\n<pre><code class=\"language-py\">add_time('3:00 PM', '3:10')\n# Returns: 6:10 PM\n\nadd_time('11:30 AM', '2:32', 'Monday')\n# Returns: 2:02 PM, Monday\n\nadd_time('11:43 AM', '00:20')\n# Returns: 12:03 PM\n\nadd_time('10:10 PM', '3:30')\n# Returns: 1:40 AM (next day)\n\nadd_time('11:43 PM', '24:20', 'tueSday')\n# Returns: 12:03 AM, Thursday (2 days later)\n\nadd_time('6:30 PM', '205:12')\n# Returns: 7:42 AM (9 days later)\n</code></pre>\n<p>Do not import any Python libraries. Assume that the start times are valid times. The minutes in the duration time will be a whole number less than 60, but the hour can be any whole number.</p>\n<p>Note: open the browser console with F12 to see a more verbose output of the tests.</p>\n</section>","id":"5e444136903586ffb414c94d","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":23,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":462360,"fields":{"blockName":"build-a-time-calculator-project","slug":"/learn/scientific-computing-with-python/build-a-time-calculator-project/build-a-time-calculator-project","tests":[{"text":"<p>Calling <code>add_time('3:30 PM', '2:12')</code> should return <code>'5:42 PM'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\nimport time_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_same_period(self):\n        actual = time_calculator.add_time(\"3:30 PM\", \"2:12\")\n        expected = \"5:42 PM\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"3:30 PM\", \"2:12\" to return \"5:42 PM\"')  \n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('11:55 AM', '3:12')</code>  should return <code>'3:07 PM'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_different_period(self):\n        actual = time_calculator.add_time(\"11:55 AM\", \"3:12\")\n        expected = \"3:07 PM\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:55 AM\", \"3:12\" to return \"3:07 PM\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Expected time to end with <code>'(next day)'</code> when it is the next day.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_next_day(self):\n        actual = time_calculator.add_time(\"9:15 PM\", \"5:30\")\n        expected = \"2:45 AM (next day)\"\n        self.assertEqual(actual, expected, 'Expected time to end with \"(next day)\" when it is the next day.')\n          `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Expected period to change from <code>AM</code> to <code>PM</code> at <code>12:00</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_period_change_at_twelve(self):\n        actual = time_calculator.add_time(\"11:40 AM\", \"0:25\")\n        expected = \"12:05 PM\"\n        self.assertEqual(actual, expected, 'Expected period to change from AM to PM at 12:00')\n          `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('2:59 AM', '24:00')</code> should return <code>'2:59 AM (next day)'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_twenty_four(self):\n        actual = time_calculator.add_time(\"2:59 AM\", \"24:00\")\n        expected = \"2:59 AM (next day)\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"2:59 AM\", \"24:00\" to return \"2:59 AM (next day)\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('11:59 PM', '24:05')</code> should return <code>'12:04 AM (2 days later)'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_two_days_later(self):\n        actual = time_calculator.add_time(\"11:59 PM\", \"24:05\")\n        expected = \"12:04 AM (2 days later)\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:59 PM\", \"24:05\" to return \"12:04 AM (2 days later)\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('8:16 PM', '466:02')</code> should return <code>'6:18 AM (20 days later)'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_high_duration(self):\n        actual = time_calculator.add_time(\"8:16 PM\", \"466:02\")\n        expected = \"6:18 AM (20 days later)\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"8:16 PM\", \"466:02\" to return \"6:18 AM (20 days later)\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Expected adding <code>0:00</code> to return the initial time.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_no_change(self):\n        actual = time_calculator.add_time(\"5:01 AM\", \"0:00\")\n        expected = \"5:01 AM\"\n        self.assertEqual(actual, expected, 'Expected adding 0:00 to return initial time.')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('3:30 PM', '2:12', 'Monday')</code>should return <code>'5:42 PM, Monday'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_same_period_with_day(self):\n        actual = time_calculator.add_time(\"3:30 PM\", \"2:12\", \"Monday\")\n        expected = \"5:42 PM, Monday\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"3:30 PM\", \"2:12\", \"Monday\" to return \"5:42 PM, Monday\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('2:59 AM', '24:00', 'saturDay')</code> should return <code>'2:59 AM, Sunday (next day)'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_twenty_four_with_day(self):\n        actual = time_calculator.add_time(\"2:59 AM\", \"24:00\", \"saturDay\")\n        expected = \"2:59 AM, Sunday (next day)\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"2:59 AM\", \"24:00\", \"saturDay\" to return \"2:59 AM, Sunday (next day)\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('11:59 PM', '24:05', 'Wednesday')</code> should return <code>'12:04 AM, Friday (2 days later)'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_two_days_later_with_day(self):\n        actual = time_calculator.add_time(\"11:59 PM\", \"24:05\", \"Wednesday\")\n        expected = \"12:04 AM, Friday (2 days later)\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"11:59 PM\", \"24:05\", \"Wednesday\" to return \"12:04 AM, Friday (2 days later)\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>add_time('8:16 PM', '466:02', 'tuesday') </code>should return <code>'6:18 AM, Monday (20 days later)'</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/time_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py', `\nimport unittest\ntime_calculator\nfrom importlib import reload\n\nreload(time_calculator)\n\n\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def test_high_duration_with_day(self):\n        actual = time_calculator.add_time(\"8:16 PM\", \"466:02\", \"tuesday\")\n        expected = \"6:18 AM, Monday (20 days later)\"\n        self.assertEqual(actual, expected, 'Expected calling \"add_time()\" with \"8:16 PM\", \"466:02\", \"tuesday\" to return \"6:18 AM, Monday (20 days later)\"')\n        `);\n    const testCode = `\nfrom unittest import main\nimport test_module\nfrom importlib import reload\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def add_time(start, duration):\n\n\n\n\n\n    return new_time","head":"","tail":"","editableRegionBoundaries":[],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#build-a-time-calculator-project","dashedName":"build-a-time-calculator-project","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"build-a-time-calculator-project","isFirstStep":true,"template":null,"required":[],"nextBlock":"learn-classes-and-objects-by-building-a-sudoku-solver","nextChallengePath":"/learn/scientific-computing-with-python/learn-classes-and-objects-by-building-a-sudoku-solver/step-1","prevChallengePath":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-33","id":"5e444136903586ffb414c94d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":23,"challengeFiles":[{"name":"main","ext":"py","contents":"def add_time(start, duration, day=''):\n    start_arr = start[0:-3].split(':')\n    dur_arr = duration.split(':')\n    tail = ''\n    # converting to 24h format\n    if 'AM' in start:\n        if start_arr[0] == '12':\n            start_arr[0] = '00'\n    elif 'PM' in start:\n        if start_arr[0] == '12':\n            start_arr[0] = '12'\n        else:\n            start_arr[0] = f'{int(start_arr[0]) + 12}'\n\n    # adding minutes\n    sum_m = int(start_arr[1]) + int(dur_arr[1])\n    if sum_m > 59:\n        \n        if (sum_m - 60 * (sum_m//60)) < 10:\n            mins = f'0{(sum_m - 60 * (sum_m//60))}'\n            dur_arr[0] = int(dur_arr[0]) + sum_m//60\n            \n        else:    \n            mins = sum_m - 60 * (sum_m//60)\n            dur_arr[0] = int(dur_arr[0]) + sum_m//60\n    else:\n        if sum_m < 10:\n            mins = f'0{sum_m}'\n        else:\n            mins = sum_m\n    \n    #adding hours\n    sum_h = int(start_arr[0]) + int(dur_arr[0])\n    if sum_h < 24:\n        hours= sum_h\n        #time_24 = f'{hours}:{mins}'\n    else:\n        days_after = sum_h//24\n        if days_after == 1:\n            hours = sum_h - 24\n            tail = ' (next day)'\n        else:\n            hours = sum_h - 24 * days_after\n            tail = f' ({days_after} days later)'\n\n    #converting back to AM/PM\n    if hours == 0:\n        hours = 12\n        time = f'{hours}:{mins} AM'\n        final_time = f'{time}{tail}'\n    elif hours < 12:\n        time = f'{hours}:{mins} AM'\n        final_time = f'{time}{tail}'\n    else:\n        if hours > 12:\n            hours = hours - 12\n        time = f'{hours}:{mins} PM'\n        final_time = f'{time}{tail}'\n\n    #days of the week\n    week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    if day:\n        day = day.capitalize()\n        if not tail:\n            final_time = f'{time}, {day}'\n        elif tail == ' (next day)':\n            index = week.index(day) + 1\n            if index == 7:\n                index = 0\n            week_day = f', {week[index]}'\n            final_time = f'{time}{week_day}{tail}'\n        elif tail:\n            index = (week.index(day) + days_after) % 7\n            week_day = f', {week[index]}'\n            final_time = f'{time}{week_day}{tail}'\n\n    \n    print('\\n')\n    print(final_time)\n    print('\\n')\n    return final_time\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/build-a-time-calculator-project/build-a-time-calculator-project"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
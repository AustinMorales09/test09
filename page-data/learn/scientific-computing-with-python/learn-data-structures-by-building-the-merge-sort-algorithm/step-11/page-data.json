{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-11",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-data-structures-by-building-the-merge-sort-algorithm","title":"Step 11","description":"<section id=\"description\">\n<p>Inside your function, create a <code>while</code> loop that compares an element in <code>left_part</code> to an element in <code>right_part</code>, and merges the smaller element to the main <code>array</code> list.</p>\n<p>Create two conditions for the loop: one that checks whether the <code>left_array_index</code> is less than the length of <code>left_part</code> and another condition that checks whether <code>right_array_index</code> is less than the length of <code>right_part</code>.</p>\n</section>","id":"656702f8b4cbd8cbf0a433c6","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-data-structures-by-building-the-merge-sort-algorithm","slug":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-11","tests":[{"text":"<p>Your <code>while</code> loop should have these conditions: <code>left_array_index &#x3C; len(left_part) and right_array_index &#x3C; len(right_part)</code>. Don't forget to use the <code>pass</code> keyword in the body of the loop.</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):/);\n  }\n})"},{"text":"<p>Use the <code>pass</code> keyword in the body of the loop</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*pass/);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n","head":"","tail":"","editableRegionBoundaries":[13,15],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-data-structures-by-building-the-merge-sort-algorithm","dashedName":"step-11","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-data-structures-by-building-the-merge-sort-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-data-structures-by-building-the-merge-sort-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-12","prevChallengePath":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-10","id":"656702f8b4cbd8cbf0a433c6"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def merge_sort(array):\n    if len(array) <= 1:\n        return\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        else:\n            array[sorted_index] = right_part[right_array_index]\n            right_array_index += 1\n        sorted_index += 1\n\n    while left_array_index < len(left_part):\n        array[sorted_index] = left_part[left_array_index]\n        left_array_index += 1\n        sorted_index += 1\n\n    while right_array_index < len(right_part):\n        array[sorted_index] = right_part[right_array_index]\n        right_array_index += 1\n        sorted_index += 1\n\n\nif __name__ == '__main__':\n    numbers = [4, 10, 6, 14, 2, 1, 8, 5]\n    print('Unsorted array: ')\n    print(numbers)\n    merge_sort(numbers)\n    print('Sorted array: ' + str(numbers))","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-11"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
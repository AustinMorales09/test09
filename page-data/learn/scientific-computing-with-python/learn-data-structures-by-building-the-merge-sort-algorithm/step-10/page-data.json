{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-10",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-data-structures-by-building-the-merge-sort-algorithm","title":"Step 10","description":"<section id=\"description\">\n<p>Now it's time to sort and merge the lists (<code>left_part</code> and <code>right_part</code>) into the original <code>array</code>.</p>\n<p>You can do this by comparing elements on both lists, and merging the smaller element to the main list. You are going to do this comparison for all the indexes in <code>left_part</code> and <code>right_part</code>.</p>\n<p>Create three variables: <code>left_array_index</code>, <code>right_array_index</code>, and <code>sorted_index</code> and set their values to <code>0</code>. These variables will help you keep track of each index during the sorting process.</p>\n</section>","id":"656680b0fc79f2c38a34d90e","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-data-structures-by-building-the-merge-sort-algorithm","slug":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-10","tests":[{"text":"<p>You should have a variable named <code>left_array_index</code> inside your <code>merge_sort</code> function</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /left_array_index\\s*(?!=)/);\n  }\n})"},{"text":"<p>The value of <code>left_array_index</code> should be 0</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /left_array_index\\s*=\\s*0/);\n  }\n})"},{"text":"<p>You should have a variable named <code>right_array_index</code> inside your <code>merge_sort</code> function</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /right_array_index\\s*(?!=)/);\n  }\n})"},{"text":"<p>The value of <code>right_array_index</code> should be 0</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /right_array_index\\s*=\\s*0/);\n  }\n})\n"},{"text":"<p>You should have a variable named <code>sorted_index</code> inside your <code>merge_sort</code> function</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /sorted_index\\s*(?!=)/);\n  }\n})"},{"text":"<p>The value of <code>sorted_index</code> should be 0</p>","testString":"({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /sorted_index\\s*=\\s*0/);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n","head":"","tail":"","editableRegionBoundaries":[8,10],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-data-structures-by-building-the-merge-sort-algorithm","dashedName":"step-10","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-data-structures-by-building-the-merge-sort-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-data-structures-by-building-the-merge-sort-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-11","prevChallengePath":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-9","id":"656680b0fc79f2c38a34d90e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def merge_sort(array):\n    if len(array) <= 1:\n        return\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        else:\n            array[sorted_index] = right_part[right_array_index]\n            right_array_index += 1\n        sorted_index += 1\n\n    while left_array_index < len(left_part):\n        array[sorted_index] = left_part[left_array_index]\n        left_array_index += 1\n        sorted_index += 1\n\n    while right_array_index < len(right_part):\n        array[sorted_index] = right_part[right_array_index]\n        right_array_index += 1\n        sorted_index += 1\n\n\nif __name__ == '__main__':\n    numbers = [4, 10, 6, 14, 2, 1, 8, 5]\n    print('Unsorted array: ')\n    print(numbers)\n    merge_sort(numbers)\n    print('Sorted array: ' + str(numbers))","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-data-structures-by-building-the-merge-sort-algorithm/step-10"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
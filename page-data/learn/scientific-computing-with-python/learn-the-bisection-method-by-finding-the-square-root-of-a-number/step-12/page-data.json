{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-12",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","title":"Step 12","description":"<section id=\"description\">\n<p>Inside the for loop, calculate the midpoint of the interval ranging from <code>low</code> to <code>high</code>. Assign this value to a variable <code>mid</code>.</p>\n<p>Also, calculate the square of the midpoint (<code>mid</code>) and store it in the variable <code>square_mid</code>.</p>\n</section>","id":"65ef1c0a03fcabc04ded7e69","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","slug":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-12","tests":[{"text":"<p>You should remove the <code>pass</code> keyword.</p>","testString":"({\n    test: () => \n    {\n        assert.isFalse(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_bodies()[0].has_pass()`))\n        \n    }\n\n})\n"},{"text":"<p>You should declare a variable <code>mid</code> and assign it <code>(low + high) / 2</code> inside the body of the <code>for</code> loop.</p>","testString":"({\n    test: () => \n    {\n        assert(runPython(`\n\tnode = _Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_bodies()[0].find_variable(\"mid\")\n\tvalues = [\"mid = (low + high) / 2\", \"mid = (high + low) / 2\"]\n\tany(node.is_equivalent(val) for val in values)\n\t`))\n        \n    }\n\n})"},{"text":"<p>You should declare a variable <code>square_mid</code> and assign it <code>mid**2</code> inside the body of the for loop.</p>","testString":"({ test: () => assert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_for_loops()[0].find_bodies()[0].find_variable(\"square_mid\").is_equivalent(\"square_mid = mid**2\")`)) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\n    if square_target < 0:\n        raise ValueError('Square root of negative number is not defined in real numbers')\n    if square_target == 1:\n        root = 1\n        print(f'The square root of {square_target} is 1')\n    elif square_target == 0:\n        root = 0\n        print(f'The square root of {square_target} is 0')\n\n    else:\n        low = 0\n        high = max(1, square_target)\n        root = None\n        \n        for _ in range(max_iterations):\n            pass\n","head":"","tail":"","editableRegionBoundaries":[15,19],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-the-bisection-method-by-finding-the-square-root-of-a-number","dashedName":"step-12","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","nextChallengePath":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-13","prevChallengePath":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-11","id":"65ef1c0a03fcabc04ded7e69"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\n    if square_target < 0:\n        raise ValueError('Square root of negative number is not defined in real numbers')\n    if square_target == 1:\n        root = 1\n        print(f'The square root of {square_target} is 1')\n    elif square_target == 0:\n        root = 0\n        print(f'The square root of {square_target} is 0')\n\n    else:\n        low = 0\n        high = max(1, square_target)\n        root = None\n        \n        for _ in range(max_iterations):\n            mid = (low + high) / 2\n            square_mid = mid**2\n\n            if abs(square_mid - square_target) < tolerance:\n                root = mid\n                break\n\n            elif square_mid < square_target:\n                low = mid\n            else:\n                high = mid\n\n        if root is None:\n            print(f\"Failed to converge within {max_iterations} iterations.\")\n    \n        else:   \n            print(f'The square root of {square_target} is approximately {root}')\n    \n    return root\n\nN = 16\nsquare_root_bisection(N)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-12"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
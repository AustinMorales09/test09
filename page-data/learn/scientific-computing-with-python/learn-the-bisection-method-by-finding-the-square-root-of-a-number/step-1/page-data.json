{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-1",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","title":"Step 1","description":"<section id=\"description\">\n<p>In this project, you will find the approximate square root of a given number using the bisection method.</p>\n<p>The bisection method is a technique for finding the roots of a real-valued function. It works by narrowing down an interval where the square root lies until it converges to a value within a specified tolerance.</p>\n<p>Begin by creating a function named <code>square_root_bisection</code>. Leave the parameters empty for now.</p>\n</section>","id":"65ef181dad3d96b14a21a03e","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","slug":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-1","tests":[{"text":"<p>You should define the function <code>square_root_bisection</code> with no parameters.</p>","testString":"({\n    test: () => {\n        assert(runPython(`\n        import inspect        \n        inspect.isfunction(square_root_bisection)\n        `))\n    }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"","head":"","tail":"","editableRegionBoundaries":[0,2],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-the-bisection-method-by-finding-the-square-root-of-a-number","dashedName":"step-1","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","isFirstStep":true,"template":null,"required":[],"nextBlock":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","nextChallengePath":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-2","prevChallengePath":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-22","id":"65ef181dad3d96b14a21a03e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\n    if square_target < 0:\n        raise ValueError('Square root of negative number is not defined in real numbers')\n    if square_target == 1:\n        root = 1\n        print(f'The square root of {square_target} is 1')\n    elif square_target == 0:\n        root = 0\n        print(f'The square root of {square_target} is 0')\n\n    else:\n        low = 0\n        high = max(1, square_target)\n        root = None\n        \n        for _ in range(max_iterations):\n            mid = (low + high) / 2\n            square_mid = mid**2\n\n            if abs(square_mid - square_target) < tolerance:\n                root = mid\n                break\n\n            elif square_mid < square_target:\n                low = mid\n            else:\n                high = mid\n\n        if root is None:\n            print(f\"Failed to converge within {max_iterations} iterations.\")\n    \n        else:   \n            print(f'The square root of {square_target} is approximately {root}')\n    \n    return root\n\nN = 16\nsquare_root_bisection(N)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-1"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
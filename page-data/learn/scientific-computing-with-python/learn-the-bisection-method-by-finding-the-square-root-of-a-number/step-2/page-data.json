{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-2",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","title":"Step 2","description":"<section id=\"description\">\n<p>Give the <code>square_root_bisection</code> function the following parameters:</p>\n<ul>\n<li><code>square_target</code>: The number for which you want to find the square root.</li>\n<li><code>tolerance</code> (optional): The acceptable difference between the square of the approximate root value and the actual target value (default is <code>1e-7</code>).  The tolerance <code>1e-7</code> implies that the solution will be accurate to within <code>0.0000001</code> of the true value and is a good default choice that balances accuracy and performance.</li>\n<li><code>max_iterations</code> (optional): The maximum number of iterations to perform (default is <code>100</code>). If the method doesn't converge within this limit, you'll assume the solution is not found.</li>\n</ul>\n</section>","id":"65ef190c6b51e9b5a5f7ed29","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","slug":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-2","tests":[{"text":"<p>Your function should have these parameters: <code>square_target</code>, <code>tolerance = 1e-7</code>, and <code>max_iterations = 100</code>. The order matters.</p>","testString":"({\n    test: () => assert(runPython(`_Node(_code).find_function(\"square_root_bisection\").has_args(\"square_target, tolerance=1e-7, max_iterations=100\")`))\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"\ndef square_root_bisection():\n    pass\n","head":"","tail":"","editableRegionBoundaries":[1,4],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-the-bisection-method-by-finding-the-square-root-of-a-number","dashedName":"step-2","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","nextChallengePath":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-3","prevChallengePath":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-1","id":"65ef190c6b51e9b5a5f7ed29"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\n    if square_target < 0:\n        raise ValueError('Square root of negative number is not defined in real numbers')\n    if square_target == 1:\n        root = 1\n        print(f'The square root of {square_target} is 1')\n    elif square_target == 0:\n        root = 0\n        print(f'The square root of {square_target} is 0')\n\n    else:\n        low = 0\n        high = max(1, square_target)\n        root = None\n        \n        for _ in range(max_iterations):\n            mid = (low + high) / 2\n            square_mid = mid**2\n\n            if abs(square_mid - square_target) < tolerance:\n                root = mid\n                break\n\n            elif square_mid < square_target:\n                low = mid\n            else:\n                high = mid\n\n        if root is None:\n            print(f\"Failed to converge within {max_iterations} iterations.\")\n    \n        else:   \n            print(f'The square root of {square_target} is approximately {root}')\n    \n    return root\n\nN = 16\nsquare_root_bisection(N)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-2"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-9",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-lambda-functions-by-building-an-expense-tracker","title":"Step 9","description":"<section id=\"description\">\n<p>In Python, an important thing to know is that the same type of quote used to define a string cannot be used inside it. For example, the string <code>'I'm a string!'</code> is not valid. To use the single quote inside that string you should either:</p>\n<ul>\n<li>Escape the quote by prepending a backlash to it: <code>'I\\'m a string!'</code></li>\n<li>Or use double quotes to define the string: <code>\"I'm a string!\"</code> (preferred).</li>\n</ul>\n<p>You can access values in a dictionary through its keys. You need to use bracket notation and include the key between the square brackets:</p>\n<pre><code class=\"language-py\">my_dict = {'amount': 50.0, 'category': 'Food'}\nmy_dict['amount'] # 50.0\n</code></pre>\n<p>You are currently interpolating the <code>expense</code> dictionary in your f-string. Modify the f-string expression to access the value of the <code>'amount'</code> key and the <code>'category'</code> key in the <code>expense</code> dictionary.</p>\n</section>","id":"65822bd82d708c4895080c35","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-lambda-functions-by-building-an-expense-tracker","slug":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-9","tests":[{"text":"<p>You should pass <code>f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}'</code> to your <code>print()</code> call. Remember to use double quotes within your single-quoted f-string and vice versa.</p>","testString":"({ test: () => assert.match(code, /^\\s+print\\s*\\(\\s*f(\"|')Amount: \\{\\s*expense\\s*\\[\\s*(?=[^\\1])(\"|')amount\\2\\s*\\]\\s*\\}, Category: \\{\\s*expense\\s*\\[\\s*(?=[^\\1])(\"|')category\\3\\s*\\]\\s*\\}\\1\\s*\\)/m) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense}, Category: {expense}')\n\nexpenses = []","head":"","tail":"","editableRegionBoundaries":[3,7],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-lambda-functions-by-building-an-expense-tracker","dashedName":"step-9","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-lambda-functions-by-building-an-expense-tracker","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-lambda-functions-by-building-an-expense-tracker","nextChallengePath":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-10","prevChallengePath":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-8","id":"65822bd82d708c4895080c35"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n    \n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        print('3. Show total expenses')\n        print('4. Filter expenses by category')\n        print('5. Exit')\n        \n        choice = input('Enter your choice: ')\n\n        if choice == '1':\n            amount = float(input('Enter amount: '))\n            category = input('Enter category: ')\n            add_expense(expenses, amount, category)\n\n        elif choice == '2':\n            print('\\nAll Expenses:')\n            print_expenses(expenses)\n\n        elif choice == '3':\n            print('\\nTotal Expenses: ', total_expenses(expenses))\n\n        elif choice == '4':\n            category = input('Enter category to filter: ')\n            print(f'\\nExpenses for {category}:')\n            expenses_from_category = filter_expenses_by_category(expenses, category)\n            print_expenses(expenses_from_category)\n\n        elif choice == '5':\n            print('Exiting the program.')\n            break\n\nmain()\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-9"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
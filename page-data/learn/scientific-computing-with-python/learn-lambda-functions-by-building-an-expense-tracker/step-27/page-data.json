{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-27",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-lambda-functions-by-building-an-expense-tracker","title":"Step 27","description":"<section id=\"description\">\n<p>Next, add another <code>print()</code> call and pass the string <code>'2. List all expenses'</code>.</p>\n</section>","id":"65824a1b16631c54fa524154","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-lambda-functions-by-building-an-expense-tracker","slug":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-27","tests":[{"text":"<p>You should print <code>'2. List all expenses'</code> in your <code>while</code> loop after the existing <code>print()</code> calls.</p>","testString":"({ test: () => assert(runPython(`\ncall_lst = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1. Add an expense')\", \"print('2. List all expenses')\"]\nall(call_lst[n].is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        ","head":"","tail":"","editableRegionBoundaries":[15,20],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-lambda-functions-by-building-an-expense-tracker","dashedName":"step-27","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-lambda-functions-by-building-an-expense-tracker","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-lambda-functions-by-building-an-expense-tracker","nextChallengePath":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-28","prevChallengePath":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-26","id":"65824a1b16631c54fa524154"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n    \n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        print('3. Show total expenses')\n        print('4. Filter expenses by category')\n        print('5. Exit')\n        \n        choice = input('Enter your choice: ')\n\n        if choice == '1':\n            amount = float(input('Enter amount: '))\n            category = input('Enter category: ')\n            add_expense(expenses, amount, category)\n\n        elif choice == '2':\n            print('\\nAll Expenses:')\n            print_expenses(expenses)\n\n        elif choice == '3':\n            print('\\nTotal Expenses: ', total_expenses(expenses))\n\n        elif choice == '4':\n            category = input('Enter category to filter: ')\n            print(f'\\nExpenses for {category}:')\n            expenses_from_category = filter_expenses_by_category(expenses, category)\n            print_expenses(expenses_from_category)\n\n        elif choice == '5':\n            print('Exiting the program.')\n            break\n\nmain()\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-27"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
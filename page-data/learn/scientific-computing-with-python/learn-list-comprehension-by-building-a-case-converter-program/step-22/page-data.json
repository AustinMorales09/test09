{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-22",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-list-comprehension-by-building-a-case-converter-program","title":"Step 22","description":"<section id=\"description\">\n<p>Finally try out this new implementation by executing the program. Change the input string to <code>'IAmAPascalCasedString'</code> and see if it comes out as <code>'i_am_a_pascal_cased_string'</code>, even though that's a lie.</p>\n<p>If you've done everything correctly, you should see the input string converted into snake case, like before.</p>\n<p>Congratulations! Now your <code>convert_to_snake_case()</code> function is ready.</p>\n</section>","id":"657f4add33ea4b1f61ba3dc8","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-list-comprehension-by-building-a-case-converter-program","slug":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-22","tests":[{"text":"<p>You should change the input string from <code>'aLongAndComplexString'</code> to <code>'IAmAPascalCasedString'</code> inside the <code>main()</code> function.</p>","testString":"({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\n        const { function_body } = main;\n\n        assert.match(function_body, / +print\\(\\s*convert_to_snake_case\\(\\s*'IAmAPascalCasedString'\\s*\\)\\s*\\)/);\n    }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def convert_to_snake_case(pascal_or_camel_cased_string):\n\n    snake_cased_char_list = [\n        '_' + char.lower() if char.isupper()\n        else char\n        for char in pascal_or_camel_cased_string\n    ]\n\n    return ''.join(snake_cased_char_list).strip('_')\n\ndef main():\n    print(convert_to_snake_case('aLongAndComplexString'))\n\n    \n\nif __name__ == '__main__':\n    main()","head":"","tail":"","editableRegionBoundaries":[10,15],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-list-comprehension-by-building-a-case-converter-program","dashedName":"step-22","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-list-comprehension-by-building-a-case-converter-program","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-the-bisection-method-by-finding-the-square-root-of-a-number","nextChallengePath":"/learn/scientific-computing-with-python/learn-the-bisection-method-by-finding-the-square-root-of-a-number/step-1","prevChallengePath":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-21","id":"657f4add33ea4b1f61ba3dc8"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def convert_to_snake_case(pascal_or_camel_cased_string):\n\n    snake_cased_char_list = [\n        '_' + char.lower() if char.isupper()\n        else char\n        for char in pascal_or_camel_cased_string\n    ]\n\n    return ''.join(snake_cased_char_list).strip('_')\n\ndef main():\n    print(convert_to_snake_case('IAmAPascalCasedString'))\n\n    \n\nif __name__ == '__main__':\n    main()","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-22"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
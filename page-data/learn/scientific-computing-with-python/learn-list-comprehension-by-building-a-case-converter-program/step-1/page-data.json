{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-1",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-list-comprehension-by-building-a-case-converter-program","title":"Step 1","description":"<section id=\"description\">\n<p>In this project, you are going to learn about list comprehensions in Python by building a program that can take a <code>camelCase</code> or <code>PascalCase</code> formatted string and convert that to a <code>snake_case</code> formatted string.</p>\n<p>List comprehensions in Python are a concise way to construct a list without using loops or the <code>.append()</code> method. Apart from being briefer, list comprehensions often run faster.</p>\n<p>Start defining a new function named <code>convert_to_snake_case()</code> that accepts a string named <code>pascal_or_camel_cased_string</code> as input. For now, add a <code>pass</code> statement inside the function.</p>\n</section>","id":"657e928716b77b2277980276","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-list-comprehension-by-building-a-case-converter-program","slug":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-1","tests":[{"text":"<p>You should define a new function named <code>convert_to_snake_case()</code>. Don't forget the colon at the end and use <code>pass</code> to fill the function body.</p>","testString":"({\n  test: () => {\n    assert(runPython(`\n      import inspect\n      inspect.isfunction(convert_to_snake_case)\n    `));\n  }\n})"},{"text":"<p>Your function should take a parameter named <code>pascal_or_camel_cased_string</code>.</p>","testString":"({\n  test: () => {\n    assert(runPython(`\n      import inspect\n      'pascal_or_camel_cased_string' in inspect.signature(convert_to_snake_case).parameters\n    `));\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"","head":"","tail":"","editableRegionBoundaries":[0,2],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-list-comprehension-by-building-a-case-converter-program","dashedName":"step-1","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-list-comprehension-by-building-a-case-converter-program","isFirstStep":true,"template":null,"required":[],"nextBlock":"learn-list-comprehension-by-building-a-case-converter-program","nextChallengePath":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-2","prevChallengePath":"/learn/scientific-computing-with-python/learn-lambda-functions-by-building-an-expense-tracker/step-44","id":"657e928716b77b2277980276"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def convert_to_snake_case(pascal_or_camel_cased_string):\n\n    snake_cased_char_list = [\n        '_' + char.lower() if char.isupper()\n        else char\n        for char in pascal_or_camel_cased_string\n    ]\n\n    return ''.join(snake_cased_char_list).strip('_')\n\ndef main():\n    print(convert_to_snake_case('IAmAPascalCasedString'))\n\n    \n\nif __name__ == '__main__':\n    main()","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-1"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
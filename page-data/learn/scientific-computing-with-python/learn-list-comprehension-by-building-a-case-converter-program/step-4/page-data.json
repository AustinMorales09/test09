{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-4",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-list-comprehension-by-building-a-case-converter-program","title":"Step 4","description":"<section id=\"description\">\n<p>Uppercase characters in camel case or pascal case indicate the start of new words.</p>\n<p>Inside the loop body, use an <code>if</code> statement in conjunction with the <code>.isupper()</code> string method to check for uppercase characters and move <code>pass</code> inside the new <code>if</code> statement.</p>\n</section>","id":"657ef2a86d4e545cec9a85fb","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-list-comprehension-by-building-a-case-converter-program","slug":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-4","tests":[{"text":"<p>You should write a new if statement with char.isupper() as the condition. Remember to add the colon at the end and use the pass keyword to fill the if statement body.</p>","testString":"({\n    test: () => {        \n        const commentless_code = __helpers.python.removeComments(code)\n        const transformedCode = commentless_code.replace(/\\r/g, \"\");\n        const {function_body} = __helpers.python.getDef(\"\\n\" + commentless_code, \"convert_to_snake_case\");\n        assert.match(function_body, /\\s+if\\s+char\\.isupper\\s*\\(\\s*\\)\\s*:\\s+pass/);\n    }\n})"},{"text":"<p>You should replace the <code>pass</code> statement in the loop body with the <code>if</code> statement.</p>","testString":"({\n   test: () => {\n        const commentless_code = __helpers.python.removeComments(code)\n        const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+pascal_or_camel_cased_string\\s*/);\n        assert.notMatch(block_body, /^\\s+pass/);\n\n    }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def convert_to_snake_case(pascal_or_camel_cased_string):\n    snake_cased_char_list = []\n    for char in pascal_or_camel_cased_string:\n        pass","head":"","tail":"","editableRegionBoundaries":[0,5],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-list-comprehension-by-building-a-case-converter-program","dashedName":"step-4","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-list-comprehension-by-building-a-case-converter-program","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-list-comprehension-by-building-a-case-converter-program","nextChallengePath":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-5","prevChallengePath":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-3","id":"657ef2a86d4e545cec9a85fb"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def convert_to_snake_case(pascal_or_camel_cased_string):\n\n    snake_cased_char_list = [\n        '_' + char.lower() if char.isupper()\n        else char\n        for char in pascal_or_camel_cased_string\n    ]\n\n    return ''.join(snake_cased_char_list).strip('_')\n\ndef main():\n    print(convert_to_snake_case('IAmAPascalCasedString'))\n\n    \n\nif __name__ == '__main__':\n    main()","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-list-comprehension-by-building-a-case-converter-program/step-4"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
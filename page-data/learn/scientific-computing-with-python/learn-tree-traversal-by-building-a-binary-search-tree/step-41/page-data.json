{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-tree-traversal-by-building-a-binary-search-tree/step-41",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-tree-traversal-by-building-a-binary-search-tree","title":"Step 41","description":"<section id=\"description\">\n<p>If neither one of the previous conditions is met, it means the node has both left and right children.</p>\n<p>To choose the successor, you need to find the minimum value in the right subtree.\nThe smallest value will be the in-order successor of the current node.</p>\n<p>To find the smallest value, create a helper function <code>_min_value</code> that takes two parameters: <code>self</code> and <code>node</code>.</p>\n</section>","id":"65ca07dd6fa8840491b7a5cd","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-tree-traversal-by-building-a-binary-search-tree","slug":"/learn/scientific-computing-with-python/learn-tree-traversal-by-building-a-binary-search-tree/step-41","tests":[{"text":"<p>You should define the <code>_min_value</code> method with <code>self</code> and <code>node</code> as the parameters. Remember to use the <code>pass</code> keyword.</p>","testString":"({ test: () => assert.match(code, /def\\s+_min_value\\(\\s*self\\s*,\\s*node\\s*\\)\\s*:/) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"\nclass TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n    def __str__(self):\n        return str(self.key)\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n\n            node.right = self._insert(node.right, key)\n        return node\n\n    def insert(self, key):\n        self.root = self._insert(self.root, key)\n        \n    def _search(self, node, key):\n        if node is None or node.key == key:\n            return node\n        if key < node.key:\n            return self._search(node.left, key)\n        return self._search(node.right, key)\n    \n    def search(self, key):\n        return self._search(self.root, key)\n\n    def _delete(self, node, key):\n        if node is None:\n            return node\n        if key < node.key:\n            node.left = self._delete(node.left, key)\n        elif key > node.key:\n            node.right = self._delete(node.right, key) \n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left   \n    \n\nbst = BinarySearchTree()\n\nnodes = [50, 30, 20, 40, 70, 60, 80]\n\nfor node in nodes:\n    bst.insert(node)\n    \n# print('Search for 80:', bst.search(80))\n\n","head":"","tail":"","editableRegionBoundaries":[52,54],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-tree-traversal-by-building-a-binary-search-tree","dashedName":"step-41","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-tree-traversal-by-building-a-binary-search-tree","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-tree-traversal-by-building-a-binary-search-tree","nextChallengePath":"/learn/scientific-computing-with-python/learn-tree-traversal-by-building-a-binary-search-tree/step-42","prevChallengePath":"/learn/scientific-computing-with-python/learn-tree-traversal-by-building-a-binary-search-tree/step-40","id":"65ca07dd6fa8840491b7a5cd"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"class TreeNode:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n    def __str__(self):\n        return str(self.key)\n\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self,key):\n        self.root = self._insert(self.root, key)\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n            node.right = self._insert(node.right, key)\n        return node\n\n    def search(self, key):\n        return self._search(self.root, key)\n\n    def _search(self, node, key):\n        if node is None or node.key == key:\n            return node\n        if key < node.key:\n            return self._search(node.left, key)\n        return self._search(node.right, key)\n\n    def delete(self, key):\n        self.root = self._delete(self.root, key)\n\n    def _delete(self, node, key):\n        if node is None:\n            return node\n        if key < node.key:\n            node.left = self._delete(node.left, key)\n        elif key > node.key:\n            node.right = self._delete(node.right, key)\n        else:\n            if node.left is None:\n                return node.right\n            elif node.right is None:\n                return node.left\n\n            node.key = self._min_value(node.right)\n            node.right = self._delete(node.right, node.key)\n        return node\n\n    def _min_value(self, node):\n        while node.left is not None:\n            node = node.left\n        return node.key\n\n    def inorder_traversal(self):\n        result = []\n        self._inorder_traversal(self.root, result)\n        return result\n\n    def _inorder_traversal(self, node, result):\n        if node:\n            self._inorder_traversal(node.left, result)\n            result.append(node.key)\n            self._inorder_traversal(node.right, result)\n\n\nbst = BinarySearchTree()\nnodes = [50, 30, 20, 40, 70, 60, 80]\n\nfor node in nodes:\n    bst.insert(node)\n\nprint(\"Inorder traversal:\", bst.inorder_traversal())\n\nprint(\"Search for 40:\", bst.search(40))\n\nbst.delete(40)\n\nprint(\"Search for 40:\", bst.search(40))\n\nprint(\"Inorder traversal after deleting 40:\", bst.inorder_traversal())\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-tree-traversal-by-building-a-binary-search-tree/step-41"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-classes-and-objects-by-building-a-sudoku-solver/step-61",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-classes-and-objects-by-building-a-sudoku-solver","title":"Step 61","description":"<section id=\"description\">\n<p>Finally, make the <code>solver</code> method return <code>False</code> if none of the guesses leads to a solution. Pay attention to the indentation.</p>\n</section>","id":"660a8d7c5f33c16c67e58b37","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-classes-and-objects-by-building-a-sudoku-solver","slug":"/learn/scientific-computing-with-python/learn-classes-and-objects-by-building-a-sudoku-solver/step-61","tests":[{"text":"<p>You should return <code>False</code> after the <code>for</code> loop.</p>","testString":"({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"solver\").has_return(\"False\")`)) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"class Board:\n    def __init__(self, board):\n        self.board = board\n\n    def find_empty_cell(self):\n        for row, contents in enumerate(self.board):\n            try:\n                col = contents.index(0)\n                return row, col\n            except ValueError:\n                pass\n        return None\n\n    def valid_in_row(self, row, num):\n        return num not in self.board[row]\n\n    def valid_in_col(self, col, num):\n        return all(self.board[row][col] != num for row in range(9))\n\n    def valid_in_square(self, row, col, num):\n        row_start = (row // 3) * 3\n        col_start = (col // 3) * 3\n        for row_no in range(row_start, row_start + 3):\n            for col_no in range(col_start, col_start + 3):\n                if self.board[row_no][col_no] == num:\n                    return False\n        return True\n\n    def is_valid(self, empty, num):\n        row, col = empty\n        valid_in_row = self.valid_in_row(row, num)\n        valid_in_col = self.valid_in_col(col, num)\n        valid_in_square = self.valid_in_square(row, col, num)\n        return all([valid_in_row, valid_in_col, valid_in_square])\n    def solver(self):\n        if (next_empty := self.find_empty_cell()) is None:\n            return True\n        for guess in range(1, 10):\n            if self.is_valid(next_empty, guess):\n                row, col = next_empty\n                self.board[row][col] = guess\n                if self.solver():\n                    return True\n                self.board[row][col] = 0\npuzzle = [\n  [0, 0, 2, 0, 0, 8, 0, 0, 0],\n  [0, 0, 0, 0, 0, 3, 7, 6, 2],\n  [4, 3, 0, 0, 0, 0, 8, 0, 0],\n  [0, 5, 0, 0, 3, 0, 0, 9, 0],\n  [0, 4, 0, 0, 0, 0, 0, 2, 6],\n  [0, 0, 0, 4, 6, 7, 0, 0, 0],\n  [0, 8, 6, 7, 0, 4, 0, 0, 0],\n  [0, 0, 0, 5, 1, 9, 0, 0, 8],\n  [1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n\ngameboard = Board(puzzle)","head":"","tail":"","editableRegionBoundaries":[34,45],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-classes-and-objects-by-building-a-sudoku-solver","dashedName":"step-61","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-classes-and-objects-by-building-a-sudoku-solver","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-classes-and-objects-by-building-a-sudoku-solver","nextChallengePath":"/learn/scientific-computing-with-python/learn-classes-and-objects-by-building-a-sudoku-solver/step-62","prevChallengePath":"/learn/scientific-computing-with-python/learn-classes-and-objects-by-building-a-sudoku-solver/step-60","id":"660a8d7c5f33c16c67e58b37"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"class Board:\n    def __init__(self, board):\n        self.board = board\n\n    def __str__(self):\n        board_str = ''\n        for row in self.board:\n            row_str = [str(i) if i else '*' for i in row]\n            board_str += ' '.join(row_str)\n            board_str += '\\n'\n        return board_str\n\n    def find_empty_cell(self):\n        for row, contents in enumerate(self.board):\n            try:\n                col = contents.index(0)\n                return row, col\n            except ValueError:\n                pass\n        return None\n\n    def valid_in_row(self, row, num):\n        return num not in self.board[row]\n\n    def valid_in_col(self, col, num):\n        return all(self.board[row][col] != num for row in range(9))\n\n    def valid_in_square(self, row, col, num):\n        row_start = (row // 3) * 3\n        col_start = (col // 3) * 3\n        for row_no in range(row_start, row_start + 3):\n            for col_no in range(col_start, col_start + 3):\n                if self.board[row_no][col_no] == num:\n                    return False\n        return True\n\n    def is_valid(self, empty, num):\n        row, col = empty\n        valid_in_row = self.valid_in_row(row, num)\n        valid_in_col = self.valid_in_col(col, num)\n        valid_in_square = self.valid_in_square(row, col, num)\n        return all([valid_in_row, valid_in_col, valid_in_square])\n\n    def solver(self):\n        if (next_empty := self.find_empty_cell()) is None:\n            return True\n        for guess in range(1, 10):\n            if self.is_valid(next_empty, guess):\n                row, col = next_empty\n                self.board[row][col] = guess\n                if self.solver():\n                    return True\n                self.board[row][col] = 0\n        return False\n\ndef solve_sudoku(board):\n    gameboard = Board(board)\n    print(f'Puzzle to solve:\\n{gameboard}')\n    if gameboard.solver():\n        print(f'Solved puzzle:\\n{gameboard}')\n    else:\n        print('The provided puzzle is unsolvable.')\n    return gameboard\n\npuzzle = [\n  [0, 0, 2, 0, 0, 8, 0, 0, 0],\n  [0, 0, 0, 0, 0, 3, 7, 6, 2],\n  [4, 3, 0, 0, 0, 0, 8, 0, 0],\n  [0, 5, 0, 0, 3, 0, 0, 9, 0],\n  [0, 4, 0, 0, 0, 0, 0, 2, 6],\n  [0, 0, 0, 4, 6, 7, 0, 0, 0],\n  [0, 8, 6, 7, 0, 4, 0, 0, 0],\n  [0, 0, 0, 5, 1, 9, 0, 0, 8],\n  [1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n\nsolve_sudoku(puzzle)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-classes-and-objects-by-building-a-sudoku-solver/step-61"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
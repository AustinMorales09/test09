{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-40",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 40","description":"<section id=\"description\">\n<p>Add a third tuple to the <code>constraints</code> list. Use the <code>uppercase</code> parameter as the first item and a regex pattern that matches a single uppercase letter as the second item.</p>\n</section>","id":"6564d2eeb36ebe7dd9bd1ee9","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-40","tests":[{"text":"<p>You should add a third tuple to the <code>constraints</code> list using <code>uppercase</code> as the first item and a character class that matches a single uppercase letter as the second item.</p>","testString":"({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[0-9\\]\\1\\s*\\)\\s*,\\s*\\(\\s*lowercase\\s*,\\s*(\"|')\\[a-z\\]\\2\\s*\\)\\s*,\\s*\\(\\s*uppercase\\s*,\\s*(\"|')\\[A-Z\\]\\3\\s*\\)\\s*,?\\s*\\]/) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        constraints = [\n            (nums, '[0-9]'),\n            (lowercase, '[a-z]')\n        ]        \n    return password\n    \n# new_password = generate_password(8)\n# print(new_password)\n\npattern = '[^a-z]t'\nquote = 'Not all those who wander are lost.'\n# print(re.findall(pattern, quote))\n","head":"","tail":"","editableRegionBoundaries":[19,24],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-40","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-41","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-39","id":"6564d2eeb36ebe7dd9bd1ee9"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-40"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
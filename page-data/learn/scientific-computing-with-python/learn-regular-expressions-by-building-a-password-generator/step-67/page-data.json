{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-67",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 67","description":"<section id=\"description\">\n<p>As long as all the arguments in a function call are keyword arguments, the order of the arguments doesn't matter.</p>\n<p>To confirm this, try to change the order of <code>length=8</code> and <code>nums=1</code> in your function call.</p>\n</section>","id":"6565c234de8cdf673c96bdf3","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-67","tests":[{"text":"<p>You should change the order of <code>length=8</code> and <code>nums=1</code> in your <code>generate_password()</code> call.</p>","testString":"({ test: () => assert.match(code, /^new_password\\s*=\\s*generate_password\\s*\\(\\s*nums\\s*=\\s*1\\s*,\\s*length\\s*=\\s*8\\s*,\\s*special_chars\\s*=\\s*1\\s*,\\s*uppercase\\s*=\\s*1\\s*,\\s*lowercase\\s*=\\s*1\\s*\\)/m) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):   \n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints        \n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):\n            break\n    \n    return password\n    \nnew_password = generate_password(length=8, nums=1, special_chars=1, uppercase=1, lowercase=1)\nprint(new_password)","head":"","tail":"","editableRegionBoundaries":[36,39],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-67","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-68","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-66","id":"6565c234de8cdf673c96bdf3"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-67"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
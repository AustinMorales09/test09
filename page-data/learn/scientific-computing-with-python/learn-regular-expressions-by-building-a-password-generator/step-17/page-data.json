{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-17",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 17","description":"<section id=\"description\">\n<p>Next, write a <code>for</code> loop with <code>i</code> as the loop variable. Use the <code>range()</code> function to iterate up to the value of the <code>length</code>.</p>\n<p>Inside the loop, use the addition assignment operator to add a random character from <code>all_characters</code> to the current value of <code>password</code>. Use the <code>choice()</code> function from the <code>secrets</code> module for that.</p>\n</section>","id":"65648f4b2281ba50051ae39c","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-17","tests":[{"text":"<p>You should write a <code>for</code> loop that iterates over <code>range(length)</code>.</p>","testString":"({ test: () =>\n  {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\n    const {function_body} = generate_pw;    \n    assert(function_body.match(/for\\s+i\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:/));\n  }\n})"},{"text":"<p>You should use the <code>+=</code> operator to add a random character from <code>all_characters</code> to the current value of <code>password</code>.</p>","testString":"({ test: () =>\n  {\n    const generate_pwd = __helpers.python.getDef(code, \"generate_password\");\n    const {function_body} = generate_pwd;    \n    assert(function_body.match(/^(\\s*)for\\s+i\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:\\s*^\\1\\1password\\s*\\+=\\s*secrets\\.choice\\s*\\(\\s*all_characters\\s*\\)/m));\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import secrets\nimport string\n\ndef generate_password(length):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n    password = ''\n    # Generate password\n    ","head":"","tail":"","editableRegionBoundaries":[11,15],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-17","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-18","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-16","id":"65648f4b2281ba50051ae39c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-17"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
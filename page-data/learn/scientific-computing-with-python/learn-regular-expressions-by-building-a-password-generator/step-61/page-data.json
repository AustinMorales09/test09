{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-61",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 61","description":"<section id=\"description\">\n<p>Instead of using a loop and a counter variable, you can achieve the same result with a different approach, which you are going to implement in the next few steps.</p>\n<p><code>all()</code> is a built-in Python function that returns <code>True</code> if all the elements inside a given iterable evaluate to <code>True</code>. Otherwise, it returns <code>False</code>.</p>\n<p>Replace your existing <code>for</code> loop and two <code>if</code> statements with a single <code>if</code> statement. For the <code>if</code> condition, use a call to the <code>all()</code> function and pass an empty list as the argument to the function call.</p>\n</section>","id":"6577319039f4f7de9251b822","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-61","tests":[{"text":"<p>You should replace your existing <code>for</code> loop and two <code>if</code> statements with a single <code>if</code> statement.</p>","testString":"({ test: () => {\n  assert.match(code, /^(\\s{8})if\\s+.+:\\s*^\\1\\s{4}break/ms);\n  assert.isFalse(/if\\s+count\\s*==\\s*4\\s*:/.test(code));\n} })"},{"text":"<p>Your new <code>if</code> condition should be <code>all([])</code>.</p>","testString":"({ test: () => assert(runPython(`\n  _Node(_code).find_function(\"generate_password\").find_while(\"True\").find_bodies()[0].find_if(\"all([])\")\n`)) })"},{"text":"<p>You should have <code>break</code> inside your new <code>if</code> body.</p>","testString":"({ test: () => assert(runPython(`\n  _Node(_code).find_function(\"generate_password\").find_while(\"True\").find_bodies()[0].find_if(\"all([])\").find_bodies()[0].is_equivalent(\"break\")\n`)) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n       \n        constraints = [\n            (nums, r'\\d'),\n            (lowercase, r'[a-z]'),\n            (uppercase, r'[A-Z]'),            \n            (special_chars, fr'[{symbols}]')            \n        ]\n\n        # Check constraints\n        count = 0\n        for constraint, pattern in constraints:\n            if constraint <= len(re.findall(pattern, password)):\n                count += 1\n            \n        if count == 4:\n            break\n\n    return password\n\n# new_password = generate_password(8)\n# print(new_password)","head":"","tail":"","editableRegionBoundaries":[29,35],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-61","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-62","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-60","id":"6577319039f4f7de9251b822"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-61"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
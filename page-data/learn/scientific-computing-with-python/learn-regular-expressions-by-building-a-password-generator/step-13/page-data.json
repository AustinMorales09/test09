{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-13",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 13","description":"<section id=\"description\">\n<p>Declare a <code>generate_password</code> function and write all your code except the <code>import</code> lines inside the function body.</p>\n</section>","id":"656479aa5f298441c190bf8f","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-13","tests":[{"text":"<p>You should declare a function named <code>generate_password</code>.</p>","testString":"({\n  test: () => assert(runPython(`\n  _Node(_code).has_function('generate_password')\n  `))\n})"},{"text":"<p>The import statements should still be outside the function.</p>","testString":"({\n  test: () => assert(runPython(`\n  imports_list = _Node(_code).find_imports()\n  any([imp.is_equivalent('import secrets') for imp in imports_list]) and any([imp.is_equivalent('import string') for imp in imports_list])\n  `))\n})"},{"text":"<p>The four variable declarations should be moved inside the function.</p>","testString":"({\n  test: () => assert(runPython(`\n  func = _Node(_code).find_function('generate_password')\n  vars = ['letters', 'digits', 'symbols', 'all_characters']\n  func.find_variable('letters').is_equivalent('letters = string.ascii_letters') and \\\\\n  func.find_variable('digits').is_equivalent('digits = string.digits') and \\\\\n  func.find_variable('symbols').is_equivalent('symbols = string.punctuation') and \\\\\n  func.find_variable('all_characters').is_equivalent('all_characters = letters + digits + symbols') and \\\\\n  all(not _Node(_code).has_variable(var) for var in vars)\n  `))\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import secrets\nimport string\n\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n\n# Combine all characters\nall_characters = letters + digits + symbols\n","head":"","tail":"","editableRegionBoundaries":[3,12],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-13","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-14","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-12","id":"656479aa5f298441c190bf8f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-13"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
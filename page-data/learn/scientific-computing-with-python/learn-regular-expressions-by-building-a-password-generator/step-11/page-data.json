{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-11",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 11","description":"<section id=\"description\">\n<p>Every time the code runs, you should see a random character from the <code>all_characters</code> string. This is exactly what you want to achieve to create a random password.</p>\n<p>However, the algorithm on which <code>random</code> relies makes the generated pseudo-random numbers predictable. Therefore, although the <code>random</code> module is suitable for the most common applications, it cannot be used for cryptographic purposes, due to its deterministic nature.</p>\n<p>Instead of importing <code>random</code>, import the <code>secrets</code> module. Then change the <code>print()</code> call to use <code>secrets.choice(all_characters)</code>.</p>\n</section>","id":"656475bbf1c2573de1d2c69c","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-11","tests":[{"text":"<p>You should import the <code>secrets</code> module instead of the <code>random</code> module.</p>","testString":"({\n  test: () => {\n    assert.match(code, /^import\\s+secrets/m)\n    assert.isFalse( /^import\\s+random/m.test(code))\n  }\n})"},{"text":"<p>You should modify your existing <code>print()</code> call to print <code>secrets.choice(all_characters)</code>.</p>","testString":"({ test: () => assert.match(code, /^print\\s*\\(\\s*secrets\\.choice\\s*\\(\\s*all_characters\\s*\\)\\s*\\)/m) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import random\nimport string\n\n\n# Define the possible characters for the password\nletters = string.ascii_letters\ndigits = string.digits\nsymbols = string.punctuation\n\n# Combine all characters\nall_characters = letters + digits + symbols\n\nprint(all_characters)\nprint(random.choice(all_characters))","head":"","tail":"","editableRegionBoundaries":[0,15],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-11","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-12","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-10","id":"656475bbf1c2573de1d2c69c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-11"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-51",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 51","description":"<section id=\"description\">\n<p>Since the underscore character is a valid character for variable names, it is included in the <code>\\w</code> character class (equivalent to <code>[a-zA-Z0-9_]</code>), which can be conveniently used to match variable names.</p>\n<p>Therefore, the <code>\\W</code> character class is equivalent to <code>[^a-zA-Z0-9_]</code> with the underscore character that is not matched. For this reason you cannot use it to match all your special characters.</p>\n<p>Delete the last three lines in your code.</p>\n</section>","id":"6564f0279e23ce924eedd1b2","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-51","tests":[{"text":"<p>You should delete the last three lines in your code.</p>","testString":"({ test: () => {\n  const commentless_code = __helpers.python.removeComments(code);\n  assert.notMatch(commentless_code, /pattern\\s*=\\s*r(\"|')\\\\W\\1/);\n  assert.notMatch(commentless_code, /quote\\s*=\\s*(\"|')_\\1/);\n  assert.notMatch(commentless_code, /print\\(\\s*re\\.findall\\(\\s*pattern\\s*,\\s*quote\\s*\\)\\s*\\)/);\n}})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (lowercase, r'[a-z]'),\n            (uppercase, r'[A-Z]'),\n            (special_chars, r'\\W')\n        ]        \n\n    return password\n    \n# new_password = generate_password(8)\n# print(new_password)\npattern = r'\\W'\nquote = '_'\nprint(re.findall(pattern, quote))","head":"","tail":"","editableRegionBoundaries":[31,35],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-51","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-52","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-50","id":"6564f0279e23ce924eedd1b2"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-51"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
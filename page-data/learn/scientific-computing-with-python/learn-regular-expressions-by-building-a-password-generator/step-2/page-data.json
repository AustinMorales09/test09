{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-2",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 2","description":"<section id=\"description\">\n<p>You can access the utilities defined inside the imported module through the dot notation. The dot notation works by appending a dot followed by the utility name to the module name. For example, here's how to access the <code>ascii_lowercase</code> constant:</p>\n<pre><code class=\"language-py\">import string\n\n\nprint(string.ascii_lowercase)\n# Output: abcdefghijklmnopqrstuvwxyz\n</code></pre>\n<p>In this project, you are going to use different constants from the <code>string</code> module.</p>\n<p>Declare a new variable called <code>letters</code> and assign <code>string.ascii_letters</code> to this variable.</p>\n</section>","id":"6564683821b2ee3174e7250e","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-2","tests":[{"text":"<p>You should declare a variable named <code>letters</code>.</p>","testString":"({ test: () => assert(__userGlobals.has(\"letters\")) })"},{"text":"<p>You should assign <code>string.ascii_letters</code> to your <code>letters</code> variable.</p>","testString":"({ test: () => assert(runPython(`\n    import string\n    letters == string.ascii_letters\n  `))\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import string\n\n","head":"","tail":"","editableRegionBoundaries":[0,4],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-2","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-3","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-1","id":"6564683821b2ee3174e7250e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-2"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-19",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-password-generator","title":"Step 19","description":"<section id=\"description\">\n<p>After the loop, add a <code>return</code> statement to your function so it returns the <code>password</code> variable.</p>\n</section>","id":"656490295d346850a4c4f2b5","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-password-generator","slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-19","tests":[{"text":"<p>You should return <code>password</code> at the end of your function.</p>","testString":"({ test: () =>\n  {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const generate_pw = __helpers.python.getDef(\"\\n\"+transformedCode, \"generate_password\");\n    const {function_body} = generate_pw;     \n    assert(function_body.match(/^(\\s*)for\\s+\\w\\s+in\\s+range\\s*\\(\\s*length\\s*\\)\\s*:.+^\\1return\\s+password/ms));\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"import secrets\nimport string\n\n\ndef generate_password(length):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n    password = ''\n    # Generate password\n    for _ in range(length):\n        password += secrets.choice(all_characters)\n    ","head":"","tail":"","editableRegionBoundaries":[12,18],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator","dashedName":"step-19","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-regular-expressions-by-building-a-password-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-regular-expressions-by-building-a-password-generator","nextChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-20","prevChallengePath":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-18","id":"656490295d346850a4c4f2b5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"import re\nimport secrets\nimport string\n\n\ndef generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):\n\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (special_chars, fr'[{symbols}]'),\n            (uppercase, r'[A-Z]'),\n            (lowercase, r'[a-z]')\n        ]\n\n        # Check constraints\n        if all(\n            constraint <= len(re.findall(pattern, password))\n            for constraint, pattern in constraints\n        ):            \n            break\n    \n    return password\n    \n\nif __name__ == '__main__':\n    new_password = generate_password()\n    print('Generated password:', new_password)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-regular-expressions-by-building-a-password-generator/step-19"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
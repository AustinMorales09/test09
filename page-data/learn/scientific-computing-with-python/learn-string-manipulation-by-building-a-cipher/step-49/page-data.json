{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-49",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 49","description":"<section id=\"description\">\n<p>A function is essentially a reusable block of code. You have already met some built-in functions, like <code>print()</code>, <code>find()</code> and <code>len()</code>. But you can also define custom functions like this:</p>\n<pre><code class=\"language-py\">def function_name():\n    &#x3C;code>\n</code></pre>\n<p>A function declaration starts with the <code>def</code> keyword followed by the function name — a valid variable name — and a pair of parentheses. The declaration ends with a colon.</p>\n<p>Right after your <code>shift</code> variable, declare a function called <code>caesar</code> and indent all the following lines to give your new function a body.</p>\n</section>","id":"6553a572f7a65718f1e42e18","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-49","tests":[{"text":"<p>You should use the <code>def</code> keyword to declare a new function.</p>","testString":"assert.match(code, /^def\\s+/m)"},{"text":"<p>You should write <code>caesar</code> as the function name after the <code>def</code> keyword. Remember to add a space after <code>def</code>.</p>","testString":"assert.match(code, /^def\\s+caesar/m)"},{"text":"<p>You should add a pair of parentheses after the function name. Don't forget the final colon.</p>","testString":"assert.match(code, /^def\\s+caesar\\s*\\(\\s*\\)\\s*:/m)"},{"text":"<p>You should indent all the lines after <code>shift = 3</code> so that they become your new function body.</p>","testString":"({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {def} = __helpers.python.getDef(commentless_code, \"caesar\");    \n    const replacement = def.replace(/print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*text\\s*\\)\\s*print\\s*\\(\\s*(\"|')encrypted\\stext:\\2\\s*,\\s*encrypted_text\\s*\\)/, \"return encrypted_text\")\n    const py_code = `\ntext = \"Hello Zaira\"\nshift = 3\n${replacement}\ncaesar()\n`\n    const out = runPython(py_code, {});\n    assert.equal(out, \"khoor cdlud\");\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello Zaira'\nshift = 3\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    if char == ' ':\n        encrypted_text += char\n    else:\n        index = alphabet.find(char)\n        new_index = (index + shift) % len(alphabet)\n        encrypted_text += alphabet[new_index]\nprint('plain text:', text)\nprint('encrypted text:', encrypted_text)","head":"","tail":"","editableRegionBoundaries":[0,16],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-49","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-50","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-48","id":"6553a572f7a65718f1e42e18"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-49"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
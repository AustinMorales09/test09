{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-41",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 41","description":"<section id=\"description\">\n<p>Currently, spaces get encrypted as <code>'c'</code>. To maintain the original spacing in the plain message, you'll require a conditional <code>if</code> statement. This is composed of the <code>if</code> keyword, a condition, and a colon <code>:</code>.</p>\n<pre><code class=\"language-py\">if x != 0:\n    print(x)\n</code></pre>\n<p>In the example above, the condition of the <code>if</code> statement is <code>x != 0</code>. The code <code>print(x)</code>, inside the <code>if</code> statement body, runs only when the condition evaluates to <code>True</code> (in this example, meaning that <code>x</code> is different from zero).</p>\n<p>At the top of your for loop, replace <code>print(char == ' ')</code> with an <code>if</code> statement.  The condition of this <code>if</code> statement should evaluate to <code>True</code> if <code>char</code> is an empty space and <code>False</code> otherwise. Inside the <code>if</code> body, print the string <code>'space!'</code>. Remember to indent this line.</p>\n</section>","id":"655261b2e1f2c197093f3993","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-41","tests":[{"text":"<p>You should not have <code>print(char == ' ')</code> in your code.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert.notMatch(block_body, /print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/);"},{"text":"<p>You should replace <code>print(char == ' ')</code> with an <code>if</code> statement that triggers when <code>char == ' '</code>. Do not use parentheses to enclose the <code>if</code> condition and remember to include the final colon.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\nassert(block_body.match(/if\\s+char\\s*==\\s*(\"|')\\s\\1\\s*:/));"},{"text":"<p>You should print the string <code>'space!'</code> inside your new <code>if</code> statement.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nconst {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+char\\s*==\\s*(\"|')\\s\\3\\s*/);    \nassert(block_body.match(/print\\s*\\(\\s*(\"|')space!\\1\\s*\\)/));"},{"text":"<p>Your code contains invalid syntax and/or invalid indentation.</p>","testString":"({test: () => assert(true) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    print(char == ' ')\n    index = alphabet.find(char)\n    new_index = index + shift\n    encrypted_text += alphabet[new_index]\n    print('char:', char, 'encrypted text:', encrypted_text)","head":"","tail":"","editableRegionBoundaries":[0,12],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-41","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-42","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-40","id":"655261b2e1f2c197093f3993"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-41"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
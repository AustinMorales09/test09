{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-23",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 23","description":"<section id=\"description\">\n<p>A loop allows you to systematically go through a sequence of elements and execute actions on each one.</p>\n<p>In this case, you'll employ a <code>for</code> loop. Here's how you can iterate over <code>text</code>:</p>\n<pre><code class=\"language-py\">for i in text:\n</code></pre>\n<p><code>for</code> is the keyword denoting the loop type. <code>i</code> is a variable that sequentially takes the value of the elements in <code>text</code>. The statement ends with a colon, <code>:</code>.</p>\n<p>Below the line where you declared <code>alphabet</code>, write a <code>for</code> loop to iterate over <code>text</code>. Use <code>i</code> as the loop variable.</p>\n<p>Doing so, there is an error in the terminal. You will learn about it in the next step.</p>\n</section>","id":"65521203d7165c7b84b22ad4","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-23","tests":[{"text":"<p>You should use the <code>for</code> keyword to create a loop. Make sure to place the <code>for</code> keyword at the beginning of the line and leave a white space after the keyword.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+/m)"},{"text":"<p>You should write the <code>i</code> variable after the <code>for</code> keyword.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+i/m)"},{"text":"<p>You should write the <code>in</code> keyword after <code>for i </code>. Make sure to leave a space around the <code>in</code> keyword.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+i\\s+in\\s+/m)"},{"text":"<p>You should write <code>text</code> after <code>for i in </code>. Don't forget to add the final <code>:</code>.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^for\\s+i\\s+in\\s+text\\s*:\\s*$/m)"},{"text":"<p>Your <code>for</code> loop should be placed below the line of code <code>alphabet = 'abcdefghijklmnopqrstuvwxyz'</code>.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.match(commentless_code, /^alphabet\\s*=\\s*(\"|')abcdefghijklmnopqrstuvwxyz\\1\\s*^for\\s+i\\s+in\\s+text\\s*:\\s*$/m)"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n","head":"","tail":"","editableRegionBoundaries":[0,5],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-23","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-24","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-22","id":"65521203d7165c7b84b22ad4"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-23"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
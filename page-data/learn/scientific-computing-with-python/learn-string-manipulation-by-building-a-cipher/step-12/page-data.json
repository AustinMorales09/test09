{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-12",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 12","description":"<section id=\"description\">\n<p>Key aspects of variable naming in Python are:</p>\n<ul>\n<li>Some words are reserved keywords (e.g. <code>for</code>, <code>while</code>, <code>True</code>). They have a special meaning in Python, so you cannot use them for variable names.</li>\n<li>Variable names cannot start with a number, and they can only contain alpha-numeric characters or underscores.</li>\n<li>Variable names are case sensitive, i.e. <code>my_var</code> is different from <code>my_Var</code> and <code>MY_VAR</code>.</li>\n<li>Finally, it is a common convention to write variable names using <code>snake_case</code>, where each space is replaced by an underscore character and the words are written in lowercase letters.</li>\n</ul>\n<p>Remove both calls to <code>print()</code> and declare another variable called <code>alphabet</code>. Assign the string <code>'abcdefghijklmnopqrstuvwxyz'</code> to this variable.</p>\n</section>","id":"6551fe3b1df7c9740f13f270","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-12","tests":[{"text":"<p>You should not have <code>print(type(text))</code> in your code.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*text\\s*\\)\\s*\\)/)"},{"text":"<p>You should not have <code>print(type(shift))</code> in your code.</p>","testString":"const commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*shift\\s*\\)\\s*\\)/)"},{"text":"<p>You should declare a variable called <code>alphabet</code>. Pay attention to place the variable name at the beginning of the line.</p>","testString":"assert.match(code, /^alphabet\\s*=/m)"},{"text":"<p>You should assign the string <code>'abcdefghijklmnopqrstuvwxyz'</code> to your <code>alphabet</code> variable. Remember to use either single or double quotes to enclose the string.</p>","testString":"assert.match(code, /^alphabet\\s*=\\s*(\"|')abcdefghijklmnopqrstuvwxyz\\1\\s*(#.*)?$/m)"},{"text":"<p>Your code contains invalid syntax and/or invalid indentation.</p>","testString":"({test: () => assert(true) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello World'\nprint(type(text))\nshift = 3\nprint(type(shift))","head":"","tail":"","editableRegionBoundaries":[0,5],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-12","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-13","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-11","id":"6551fe3b1df7c9740f13f270"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-12"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
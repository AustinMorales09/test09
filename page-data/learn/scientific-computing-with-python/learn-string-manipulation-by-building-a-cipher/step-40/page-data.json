{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-40",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 40","description":"<section id=\"description\">\n<p>Comparison operators allow you to compare two objects based on their values. You can use a comparison operator by placing it between the objects you want to compare.\nThey return a <em>Boolean</em> value — namely <code>True</code> or <code>False</code> — depending on the truthfulness of the expression.</p>\n<p>Python has the following comparison operators:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operator</th>\n      <th>Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>==</td>\n      <td>Equal</td>\n    </tr>\n    <tr>\n      <td>!=</td>\n      <td>Not equal</td>\n    </tr>\n    <tr>\n      <td>&gt;</td>\n      <td>Greater than</td>\n    </tr>\n    <tr>\n      <td>&lt;</td>\n      <td>Less than</td>\n    </tr>\n    <tr>\n      <td>&gt;=</td>\n      <td>Greater than or equal to</td>\n    </tr>\n    <tr>\n      <td>&lt;=</td>\n      <td>Less than or equal to</td>\n    </tr>\n  </tbody>\n</table>\n<p>At the beginning of your loop body, print the result of comparing <code>char</code> with a space (<code>' '</code>). Use the equality operator <code>==</code> for that.</p>\n</section>","id":"655a2a7210094920069b117c","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-40","tests":[{"text":"<p>You should compare <code>char</code> with a space using the equality operator inside your <code>for</code> loop.</p>","testString":"({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\n    assert(block_body.match(/char\\s*==\\s*(\"|')\\s\\1/));\n  }\n})"},{"text":"<p>You should print the result of comparing <code>char</code> with a space inside your <code>for</code> loop.</p>","testString":"({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\n    assert(block_body.match(/print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/));\n  }\n})"},{"text":"<p>You should print the result of comparing <code>char</code> with a space at the beginning of your loop.</p>","testString":"({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\n    assert(block_body.match(/^\\s+print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/));\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    index = alphabet.find(char)\n    new_index = index + shift\n    encrypted_text += alphabet[new_index]\n    print('char:', char, 'encrypted text:', encrypted_text)","head":"","tail":"","editableRegionBoundaries":[0,11],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-40","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-41","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-39","id":"655a2a7210094920069b117c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-40"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
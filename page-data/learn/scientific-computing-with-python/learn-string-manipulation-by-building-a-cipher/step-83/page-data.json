{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-83",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 83","description":"<section id=\"description\">\n<p>Define another function named <code>decrypt</code> with the same parameters as <code>encrypt</code>. This time return <code>vigenere(message, key, -1)</code>.</p>\n</section>","id":"65552a9593755e1fb2f5ab50","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-83","tests":[{"text":"<p>You should define a new function called <code>decrypt</code>.</p>","testString":"({ test: () => assert(runPython(`\n    import inspect\n    inspect.isfunction(decrypt)\n  `))\n})"},{"text":"<p>Your <code>decrypt</code> function should take <code>message</code> and <code>key</code> as the parameters.</p>","testString":"({ test: () => assert(runPython(`\n    import inspect\n    sig = inspect.signature(decrypt)\n    str(sig) == \"(message, key)\"\n  `))\n})"},{"text":"<p>Your <code>decrypt</code> function should return <code>vigenere(message, key, -1)</code>.</p>","testString":"({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {function_body} = __helpers.python.getDef(commentless_code, \"decrypt\");\n    assert(function_body.match(/return\\s+vigenere\\s*\\(\\s*message\\s*,\\s*key\\s*,\\s*-\\s*1\\s*\\)/));\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello Zaira!'\ncustom_key = 'python'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \nencryption = vigenere(text, custom_key)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)","head":"","tail":"","editableRegionBoundaries":[25,33],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-83","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-84","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-82","id":"65552a9593755e1fb2f5ab50"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-83"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
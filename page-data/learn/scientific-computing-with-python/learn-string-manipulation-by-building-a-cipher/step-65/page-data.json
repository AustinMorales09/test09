{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-65",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 65","description":"<section id=\"description\">\n<p>At the moment, your function prints some strings, but these values cannot be used by other parts of code to perform any actions.</p>\n<p>For that purpose, you need to use a <code>return</code> statement:</p>\n<pre><code class=\"language-python\">def foo():\n    return 'spam'\n</code></pre>\n<p>You need to write <code>return</code> followed by a space and the value that the function should return. Once the <code>return</code> statement is found, that value is returned and the execution of the function stops, proceeding to the next line of code after the function call. In the example above, the <code>foo</code> function returns the string <code>'spam'</code>.</p>\n<p>Remove the two <code>print()</code> calls from your function and return <code>encrypted_text</code>.</p>\n</section>","id":"6554ad2463b8892748f8efdd","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-65","tests":[{"text":"<p>You should remove the two <code>print()</code> calls from your function.</p>","testString":"({ \n  test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    assert.isFalse(/print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*message\\s*\\)/.test(commentless_code))\n    assert.isFalse(/print\\s*\\(\\s*(\"|')encrypted\\stext:\\1\\s*,\\s*encrypted_text\\s*\\)/.test(commentless_code))\n  }\n})"},{"text":"<p>Your function should return <code>encrypted_text</code>.</p>","testString":"({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {function_body} = __helpers.python.getDef(commentless_code, \"vigenere\");\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+message\\.lower\\s*\\(\\s*\\)\\s*/);\n    const regex = /return\\s+encrypted_text/\n    assert(function_body.match(regex));\n    assert.notMatch(block_body, regex);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            encrypted_text += char\n        else:        \n            # Find the right key character to encode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n            # Define the offset and the encrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)","head":"","tail":"","editableRegionBoundaries":[17,25],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-65","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-66","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-64","id":"6554ad2463b8892748f8efdd"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-65"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
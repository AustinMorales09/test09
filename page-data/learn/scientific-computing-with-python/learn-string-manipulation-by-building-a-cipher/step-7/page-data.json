{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-7",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 7","description":"<section id=\"description\">\n<p>You can access the number of characters in a string with the built-in <code>len()</code> function.</p>\n<p>Modify your existing <code>print()</code> call by passing <code>len(text)</code> instead of <code>text[-1]</code>.</p>\n</section>","id":"6551f5756c20146fc94f8675","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-7","tests":[{"text":"<p>You should call the <code>len()</code> function.</p>","testString":"assert.match(code, /len\\s*\\(.*\\)/)"},{"text":"<p>You should pass the variable <code>text</code> to the <code>len()</code> function by including it between the parentheses.</p>","testString":"assert.match(code, /len\\s*\\(\\s*text\\s*\\)/)"},{"text":"<p>You should pass <code>len(text)</code> to the <code>print()</code> function by including it between the parentheses. Pay attention to place the function call at the beginning of the line.</p>","testString":"assert.match(code, /^print\\s*\\(\\s*len\\s*\\(\\s*text\\s*\\)\\s*\\)/m)"},{"text":"<p>You should not have <code>print(text[-1])</code> in your code.</p>","testString":"const commentless_code = __helpers.python.removeComments(code)\nassert.notMatch(commentless_code, /print\\s*\\(\\s*text\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\)/)"},{"text":"<p>Your code contains invalid syntax and/or invalid indentation.</p>","testString":"({test: () => assert(true) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello World'\nprint(text[-1])","head":"","tail":"","editableRegionBoundaries":[0,3],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-7","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-8","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-6","id":"6551f5756c20146fc94f8675"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-7"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
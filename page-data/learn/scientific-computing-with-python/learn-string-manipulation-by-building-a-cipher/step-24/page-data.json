{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-24",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-string-manipulation-by-building-a-cipher","title":"Step 24","description":"<section id=\"description\">\n<p>The code to execute at each iteration — placed after the <code>:</code> — constitutes the body of the loop. This code must be indented. In Python, it is recommended to use 4 spaces per indentation level. This indented level is a code block.</p>\n<pre><code class=\"language-py\">for i in text:\n    print(i)\n</code></pre>\n<p>Python relies on indentation to indicate blocks of code. A colon at the end of a line is a signal that a new indented block of code will follow.</p>\n<p>So, when no indented block is found after the final colon, the code execution stops and an <code>IndentationError</code> is thrown. This code will not show the output and instead raise an <code>IndentationError</code>:</p>\n<pre><code class=\"language-py\">for i in text:\nprint(i)\n</code></pre>\n<p>Give your <code>for</code> loop a body by adding a call to <code>print(i)</code>. Remember to indent the loop body.</p>\n</section>","id":"65687d2f8c7ee27b0446cef3","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-string-manipulation-by-building-a-cipher","slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-24","tests":[{"text":"<p>You should add <code>print(i)</code> to your <code>for</code> loop body. Pay attention to the indentation.</p>","testString":"assert.match(code, /^for\\s+i\\s+in\\s+text:\\s+print\\s*\\(\\s*i\\s*\\)/m)"},{"text":"<p>Your code contains invalid syntax and/or invalid indentation.</p>","testString":"({test: () => assert(true) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\nfor i in text:\n","head":"","tail":"","editableRegionBoundaries":[0,7],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher","dashedName":"step-24","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-string-manipulation-by-building-a-cipher","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-string-manipulation-by-building-a-cipher","nextChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-25","prevChallengePath":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-23","id":"65687d2f8c7ee27b0446cef3"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"text = 'mrttaqrhknsw ih puggrur'\ncustom_key = 'happycoding'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n    \ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\nprint(f'\\nEncrypted text: {text}')\nprint(f'Key: {custom_key}')\ndecryption = decrypt(text, custom_key)\nprint(f'\\nDecrypted text: {decryption}\\n')","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-string-manipulation-by-building-a-cipher/step-24"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
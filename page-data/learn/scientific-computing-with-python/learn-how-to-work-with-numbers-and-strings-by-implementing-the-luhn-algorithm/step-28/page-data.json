{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm/step-28",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm","title":"Step 28","description":"<section id=\"description\">\n<p>Part of the algorithm is to double every second digit, starting from the right. If the result of doubling the number is greater than or equal to <code>10</code>, add the two digits together. For example, if the digit is <code>6</code>, double it to get <code>12</code>. Add <code>1</code> and <code>2</code> together to get <code>3</code>. You can do this by using <em>integer division</em> to get the first digit and the modulus operator (<code>%</code>) to get the second digit:</p>\n<pre><code class=\"language-python\">my_number = 12\nfirst_digit = my_number // 10\nsecond_digit = my_number % 10\n</code></pre>\n<p>Integer division results in the quotient of the division, rounded down to the nearest integer.</p>\n<p>Within the <code>if</code> statement, assign <code>number</code> the result of <code>number // 10</code> (integer division) plus the modulus of <code>number</code> and <code>10</code>.</p>\n</section>","id":"65687db6a9fcf3c548a6c1b7","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm","slug":"/learn/scientific-computing-with-python/learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm/step-28","tests":[{"text":"<p>You should have <code>number = number // 10 + number % 10</code> within the <code>if</code> statement.</p>","testString":"({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const verify_card_number = __helpers.python.getBlock(\"\\n\" + transformedCode, \"if number >= 10\");\n        const { block_body } = verify_card_number;\n        const allowedMatches = [\n            /number *= *\\(?\\s*number *\\/\\/ *10\\s*\\)? *\\+ *\\(?\\s*number *% *10/,\n            /number *= *\\(?\\s*number *% *10\\s*\\)? *\\+ *\\(?\\s*number *\\/\\/ *10/\n        ];\n\n        const someMatch = allowedMatches.some(allowedMatch => allowedMatch.test(block_body));\n        assert.isTrue(someMatch);\n    }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"def verify_card_number(card_number):\n    sum_of_odd_digits = 0\n    card_number_reversed = card_number[::-1]\n    odd_digits = card_number_reversed[::2]\n\n    for digit in odd_digits:\n        sum_of_odd_digits += int(digit)\n\n    sum_of_even_digits = 0\n    even_digits = card_number_reversed[1::2]\n    for digit in even_digits:\n        number = int(digit) * 2\n        if number >= 10:\n            print(number)\n            \ndef main():\n    card_number = '4111-1111-4555-1142'\n    card_translation = str.maketrans({'-': '', ' ': ''})\n    translated_card_number = card_number.translate(card_translation)\n\n    verify_card_number(translated_card_number)\n\nmain()","head":"","tail":"","editableRegionBoundaries":[8,16],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm","dashedName":"step-28","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm/step-29","prevChallengePath":"/learn/scientific-computing-with-python/learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm/step-27","id":"65687db6a9fcf3c548a6c1b7"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"def verify_card_number(card_number):\n    sum_of_odd_digits = 0\n    card_number_reversed = card_number[::-1]\n    odd_digits = card_number_reversed[::2]\n\n    for digit in odd_digits:\n        sum_of_odd_digits += int(digit)\n\n    sum_of_even_digits = 0\n    even_digits = card_number_reversed[1::2]\n    for digit in even_digits:\n        number = int(digit) * 2\n        if number >= 10:\n            number = (number // 10) + (number % 10)\n        sum_of_even_digits += number\n\n    total = sum_of_odd_digits + sum_of_even_digits\n    return total % 10 == 0\n\ndef main():\n    card_number = '4111-1111-4555-1142'\n    card_translation = str.maketrans({'-': '', ' ': ''})\n    translated_card_number = card_number.translate(card_translation)\n\n    if verify_card_number(translated_card_number):\n        print('VALID!')\n    else:\n        print('INVALID!')\n\nmain()","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm/step-28"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
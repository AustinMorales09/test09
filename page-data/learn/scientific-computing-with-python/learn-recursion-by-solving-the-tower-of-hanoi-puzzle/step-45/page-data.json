{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-45",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","title":"Step 45","description":"<section id=\"description\">\n<p>Before your recursive call, add a comment saying <code>move n - 1 disks from source to auxiliary, so they are out of the way</code>.</p>\n</section>","id":"64e337e3096b7c1739d934e6","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-45","tests":[{"text":"<p>You should add a comment with the provided text before your recursive call.</p>","testString":"({ test: () => assert.match(code, /if\\s+n\\s*>\\s*0\\s*:\\s+#\\s*move\\sn\\s-\\s1\\sdisks\\sfrom\\ssource\\sto\\sauxiliary\\s*,\\s*so\\sthey\\sare\\sout\\sof\\sthe\\sway\\s+(?=move\\(\\s*n\\s*-\\s*1\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\))/) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"NUMBER_OF_DISKS = 4\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    if n > 0:\n        \n        move(n - 1, source, auxiliary, target)\n        \n        # display starting configuration\n        print(rods, '\\n')\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')","head":"","tail":"","editableRegionBoundaries":[7,16],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle","dashedName":"step-45","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","nextChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-46","prevChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-44","id":"64e337e3096b7c1739d934e6"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-45"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
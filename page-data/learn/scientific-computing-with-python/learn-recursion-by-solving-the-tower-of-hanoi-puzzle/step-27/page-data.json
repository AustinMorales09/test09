{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-27",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","title":"Step 27","description":"<section id=\"description\">\n<p>When <code>forward</code> is <code>False</code>, the disk has to be moved in the opposite direction. Write an <code>else</code> clause for that. Print the move and change the content of the lists accordingly.</p>\n</section>","id":"64ddce6f6e8066173208235b","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-27","tests":[{"text":"<p>You should have an <code>else</code> clause to move the disks in the opposite direction.</p>","testString":"({ test: () => assert.match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*source\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)\\s+else\\s*:/) })"},{"text":"<p>You should have <code>print(f'Moving disk {rods[target][-1]} from {target} to {source}')</code> inside your <code>else</code> clause.</p>","testString":"({ test: () => assert.match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*source\\s*\\}\\1\\s*\\)/) })"},{"text":"<p>You should remove the last element from <code>rods[target]</code>.</p>","testString":"({ test: () => assert.match(code, /rods\\s*\\[\\s*target\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)/) })"},{"text":"<p>You should have <code>rods[source].append(rods[target].pop())</code> in your code.</p>","testString":"({ test: () => assert.match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)/) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n            forward = False\n            if not rods[target]:\n                forward = True\n            elif rods[source] and rods[source][-1] < rods[target][-1]:\n                forward = True\n            if forward:\n                print(f'Moving disk {rods[source][-1]} from {source} to {target}')\n                rods[target].append(rods[source].pop())\n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')","head":"","tail":"","editableRegionBoundaries":[20,24],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle","dashedName":"step-27","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","nextChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-28","prevChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-26","id":"64ddce6f6e8066173208235b"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-27"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
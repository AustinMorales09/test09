{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-23",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","title":"Step 23","description":"<section id=\"description\">\n<p>When <code>target</code> is empty, the disk should be moved necessarily from <code>source</code> to <code>target</code>.</p>\n<p>After the declaration of <code>forward</code>, add an <code>if</code> statement to check if <code>rods[target]</code> is empty. If it is, change <code>forward</code> to <code>True</code>.</p>\n</section>","id":"64dce5f6ff907c2b2c47bb05","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-23","tests":[{"text":"<p>You should have an <code>if</code> statement to check if <code>rods[target]</code> is empty, and assign <code>True</code> to <code>forward</code>.</p>","testString":"({\n    test: () => {\n        const tCode = code.replace(/\\r/g, '');\n        const ifBlock = __helpers.python.getBlock(tCode, \"if remainder == 1\");\n        const { block_body } = ifBlock\n        const if2 = __helpers.python.getBlock(block_body, /if [^:]+/);\n        const if2Indent = if2.block_body.match(/ +/)[0];\n        const ifLoc = tCode.indexOf(block_body.slice(0,20));\n        const ifLen = block_body.length;\n        const newIf = block_body + `\\n${if2Indent}__spy(forward)`\n        const newCode = `\n__counter = 0\ndef __spy(x):\n    global __counter\n    if x:\n        __counter += 1\n\n${tCode.slice(0,ifLoc)}\n${newIf}\n${tCode.slice(ifLoc + ifLen)}\n\n__counter\n`;\n        const out = runPython(newCode);\n        assert.equal(out, 3);\n    }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n            forward = False\n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')","head":"","tail":"","editableRegionBoundaries":[13,17],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle","dashedName":"step-23","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","nextChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-24","prevChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-22","id":"64dce5f6ff907c2b2c47bb05"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-23"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-1",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","title":"Step 1","description":"<section id=\"description\">\n<p>In this project, you will solve the mathematical puzzle known as the Tower of Hanoi. The puzzle consists of three rods and a number of disks of different diameters.</p>\n<p>The goal of this puzzle is moving the disks from the first rod to the third rod, following specific rules that restrict placing a larger disk on top of a smaller one.</p>\n<p>Start by creating an empty dictionary named <code>rods</code> to represent the rods.</p>\n</section>","id":"64dc8b1faf9c60304ca8a9b6","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-1","tests":[{"text":"<p>You should have a variable named <code>rods</code>.</p>","testString":"({ test: () => assert(__userGlobals.has('rods')) })"},{"text":"<p>Your <code>rods</code> variable should be an empty dictionary.</p>","testString":"({ test: () => assert(runPython(`\n    rods == {}\n  `))\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"","head":"","tail":"","editableRegionBoundaries":[0,2],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle","dashedName":"step-1","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","isFirstStep":true,"template":null,"required":[],"nextBlock":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","nextChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-2","prevChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-59","id":"64dc8b1faf9c60304ca8a9b6"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-1"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
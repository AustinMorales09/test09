{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-16",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","title":"Step 16","description":"<section id=\"description\">\n<p>At the end of this project, you will create a recursive solution to the Tower of Hanoi puzzle, but now you are going to explore an iterative approach to this problem.</p>\n<p>Start by adding a <code>for</code> loop to your function that iterates through the <code>number_of_moves</code> and prints the current iteration number.</p>\n</section>","id":"64dc97ab25730b3e9de86ea5","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-16","tests":[{"text":"<p>You should write a <code>for</code> loop to iterate through the number of moves. Use the <code>range()</code> function for that.</p>","testString":"({ test: () => {\n    const rgs = [\n        /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:/,\n        /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:/,\n        /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:/\n    ]\n    const loop = rgs.some(r => code.match(r));\n    assert.isTrue(loop);\n  }\n})"},{"text":"<p>You should print the current move number at each iteration.</p>","testString":"({ test: () => {\n    const rgs = [\n        /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/,\n        /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/,\n        /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/\n    ]\n    const loop = rgs.some(r => code.match(r));\n    assert.isTrue(loop);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')","head":"","tail":"","editableRegionBoundaries":[8,12],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle","dashedName":"step-16","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","nextChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-17","prevChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-15","id":"64dc97ab25730b3e9de86ea5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-16"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
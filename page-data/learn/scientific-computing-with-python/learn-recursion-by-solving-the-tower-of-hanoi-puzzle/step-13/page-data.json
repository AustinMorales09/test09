{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-13",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","title":"Step 13","description":"<section id=\"description\">\n<p>In the Tower of Hanoi puzzle, you can identify the three rods according to their purpose:</p>\n<ul>\n<li>The first rod is the source, where all the disks are stacked on top of each other at the beginning of the game.</li>\n<li>The second rod is an auxiliary rod, and it helps in moving the disks to the target rod.</li>\n<li>The third rod is the target, where all the disks should be placed in order at the end of the game.</li>\n</ul>\n<p>Currently, the <code>move()</code> function does not take any parameters. Change the function declaration to take 4 parameters: <code>n</code>, <code>source</code>, <code>auxiliary</code>, and <code>target</code>. Then, pass <code>NUMBER_OF_DISKS</code> and the strings <code>'A'</code>, <code>'B'</code>, and <code>'C'</code> as arguments to your function call. The order matters.</p>\n</section>","id":"64de4bccf5becb208a48ca97","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-13","tests":[{"text":"<p>Your <code>move()</code> function should have <code>n</code>, <code>source</code>, <code>auxiliary</code>, and <code>target</code> as the parameters. The order matters.</p>","testString":"({ test: () => assert(runPython(`\n      import inspect\n      str(inspect.signature(move)) == '(n, source, auxiliary, target)'    \n  `))\n})"},{"text":"<p>You should pass <code>NUMBER_OF_DISKS</code> and the strings <code>'A'</code>, <code>'B'</code>, and <code>'C'</code> to <code>move()</code>. The order matters.</p>","testString":"({test: () => assert.match(code, /^move\\(\\s*NUMBER_OF_DISKS\\s*,\\s*('|\")A\\1\\s*,\\s*('|\")B\\2\\s*,\\s*('|\")C\\3\\s*\\)/m)\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move():\n    print(rods)\n\nmove()","head":"","tail":"","editableRegionBoundaries":[8,13],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle","dashedName":"step-13","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-recursion-by-solving-the-tower-of-hanoi-puzzle","nextChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-14","prevChallengePath":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-12","id":"64de4bccf5becb208a48ca97"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-recursion-by-solving-the-tower-of-hanoi-puzzle/step-13"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/build-a-budget-app-project/build-a-budget-app-project",
    "result": {"data":{"challengeNode":{"challenge":{"block":"build-a-budget-app-project","title":"Build a Budget App Project","description":"<section id=\"description\">\n<p>Complete the <code>Category</code> class. It should be able to instantiate objects based on different budget categories like <em>food</em>, <em>clothing</em>, and <em>entertainment</em>. When objects are created, they are passed in the name of the category. The class should have an instance variable called <code>ledger</code> that is a list. The class should also contain the following methods:</p>\n<ul>\n<li>A <code>deposit</code> method that accepts an amount and description. If no description is given, it should default to an empty string. The method should append an object to the ledger list in the form of <code>{\"amount\": amount, \"description\": description}</code>.</li>\n<li>A <code>withdraw</code> method that is similar to the <code>deposit</code> method, but the amount passed in should be stored in the ledger as a negative number. If there are not enough funds, nothing should be added to the ledger. This method should return <code>True</code> if the withdrawal took place, and <code>False</code> otherwise.</li>\n<li>A <code>get_balance</code> method that returns the current balance of the budget category based on the deposits and withdrawals that have occurred.</li>\n<li>A <code>transfer</code> method that accepts an amount and another budget category as arguments. The method should add a withdrawal with the amount and the description \"Transfer to [Destination Budget Category]\". The method should then add a deposit to the other budget category with the amount and the description \"Transfer from [Source Budget Category]\". If there are not enough funds, nothing should be added to either ledgers. This method should return <code>True</code> if the transfer took place, and <code>False</code> otherwise.</li>\n<li>A <code>check_funds</code> method that accepts an amount as an argument. It returns <code>False</code> if the amount is greater than the balance of the budget category and returns <code>True</code> otherwise. This method should be used by both the <code>withdraw</code> method and <code>transfer</code> method.</li>\n</ul>\n<p>When the budget object is printed it should display:</p>\n<ul>\n<li>A title line of 30 characters where the name of the category is centered in a line of <code>*</code> characters.</li>\n<li>A list of the items in the ledger. Each line should show the description and amount. The first 23 characters of the description should be displayed, then the amount. The amount should be right aligned, contain two decimal places, and display a maximum of 7 characters.</li>\n<li>A line displaying the category total.</li>\n</ul>\n<p>Here is an example usage:</p>\n<pre><code class=\"language-py\">food = Category(\"Food\")\nfood.deposit(1000, \"deposit\")\nfood.withdraw(10.15, \"groceries\")\nfood.withdraw(15.89, \"restaurant and more food for dessert\")\nclothing = Category(\"Clothing\")\nfood.transfer(50, clothing)\nprint(food)\n</code></pre>\n<p>And here is an example of the output:</p>\n<pre><code class=\"language-bash\">*************Food*************\ninitial deposit        1000.00\ngroceries               -10.15\nrestaurant and more foo -15.89\nTransfer to Clothing    -50.00\nTotal: 923.96\n</code></pre>\n<p>Besides the <code>Category</code> class, create a function (outside of the class) called <code>create_spend_chart</code> that takes a list of categories as an argument. It should return a string that is a bar chart.</p>\n<p>The chart should show the percentage spent in each category passed in to the function. The percentage spent should be calculated only with withdrawals and not with deposits. Down the left side of the chart should be labels 0 - 100. The \"bars\" in the bar chart should be made out of the \"o\" character. The height of each bar should be rounded down to the nearest 10. The horizontal line below the bars should go two spaces past the final bar. Each category name should be written vertically below the bar. There should be a title at the top that says \"Percentage spent by category\".</p>\n<p>This function will be tested with up to four categories.</p>\n<p>Look at the example output below very closely and make sure the spacing of the output matches the example exactly.</p>\n<pre><code class=\"language-bash\">Percentage spent by category\n100|          \n 90|          \n 80|          \n 70|          \n 60| o        \n 50| o        \n 40| o        \n 30| o        \n 20| o  o     \n 10| o  o  o  \n  0| o  o  o  \n    ----------\n     F  C  A  \n     o  l  u  \n     o  o  t  \n     d  t  o  \n        h     \n        i     \n        n     \n        g     \n</code></pre>\n<p>Note: open the browser console with F12 to see a more verbose output of the tests.</p>\n</section>","id":"5e44413e903586ffb414c94e","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":23,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":462361,"fields":{"blockName":"build-a-budget-app-project","slug":"/learn/scientific-computing-with-python/build-a-budget-app-project/build-a-budget-app-project","tests":[{"text":"<p>The <code>deposit</code> method should create a specific object in the ledger instance variable.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_deposit(self):\n        self.food.deposit(900, \"deposit\")\n        actual = self.food.ledger[0]\n        expected = {\"amount\": 900, \"description\": \"deposit\"}\n        self.assertEqual(actual, expected, 'Expected \"deposit\" method to create a specific object in the ledger instance variable.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling the <code>deposit</code> method with no description should create a blank description.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_deposit_no_description(self):\n        self.food.deposit(45.56)\n        actual = self.food.ledger[0]\n        expected = {\"amount\": 45.56, \"description\": \"\"}\n        self.assertEqual(actual, expected, 'Expected calling \"deposit\" method with no description to create a blank description.')        \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>withdraw</code> method should create a specific object in the <code>ledger</code> instance variable.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_withdraw(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        actual = self.food.ledger[1]\n        expected = {\"amount\": -45.67, \"description\": \"milk, cereal, eggs, bacon, bread\"}\n        self.assertEqual(actual, expected, 'Expected \"withdraw\" method to create a specific object in the ledger instance variable.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling the <code>withdraw</code> method with no description should create a blank description.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_withdraw_no_description(self):\n        self.food.deposit(900, \"deposit\")\n        good_withdraw = self.food.withdraw(45.67)\n        actual = self.food.ledger[1]\n        expected = {\"amount\": -45.67, \"description\": \"\"}\n        self.assertEqual(actual, expected, 'Expected \"withdraw\" method with no description to create a blank description.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>withdraw</code> method should return <code>True</code> if the withdrawal took place.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_withdraw_no_description(self):\n        self.food.deposit(900, \"deposit\")\n        good_withdraw = self.food.withdraw(45.67)\n        self.assertEqual(good_withdraw, True, 'Expected \"withdraw\" method to return \"True\".')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>food.deposit(900, \"deposit\")</code> and <code>food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")</code> should return a balance of <code>854.33</code>.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_get_balance(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        actual = self.food.get_balance()\n        expected = 854.33\n        self.assertEqual(actual, expected, 'Expected balance to be 854.33')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling the <code>transfer</code> method on a category object should create a specific ledger item in that category object.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_transfer(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        transfer_amount = 20\n        good_transfer = self.food.transfer(transfer_amount, self.entertainment)\n        actual = self.food.ledger[2]\n        expected = {\"amount\": -transfer_amount, \"description\": \"Transfer to Entertainment\"}\n        self.assertEqual(actual, expected, 'Expected \"transfer\" method to create a specific ledger item in food object.')\n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>transfer</code> method should return <code>True</code> if the transfer took place.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_transfer(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        transfer_amount = 20 \n        good_transfer = self.food.transfer(transfer_amount, self.entertainment)        \n        self.assertEqual(good_transfer, True, 'Expected \"transfer\" method to return \"True\".')        \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Calling <code>transfer</code> on a category object should reduce the balance in the category object.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_transfer(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        transfer_amount = 20\n        food_balance_before = self.food.get_balance()        \n        good_transfer = self.food.transfer(transfer_amount, self.entertainment)\n        food_balance_after = self.food.get_balance()\n        self.assertEqual(food_balance_before - food_balance_after, transfer_amount, 'Expected \"transfer\" method to reduce balance in food object.')\n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>transfer</code> method should increase the balance of the category object passed as its argument.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_transfer(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        transfer_amount = 20        \n        entertainment_balance_before = self.entertainment.get_balance()\n        good_transfer = self.food.transfer(transfer_amount, self.entertainment)        \n        entertainment_balance_after = self.entertainment.get_balance()        \n        self.assertEqual(entertainment_balance_after - entertainment_balance_before, transfer_amount, 'Expected \"transfer\" method to increase balance in entertainment object.')  \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>transfer</code> method should create a specific ledger item in the category object passed as its argument.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_transfer(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        transfer_amount = 20        \n        good_transfer = self.food.transfer(transfer_amount, self.entertainment)\n        actual = self.entertainment.ledger[0]\n        expected = {\"amount\": transfer_amount, \"description\": \"Transfer from Food\"}\n        self.assertEqual(actual, expected, 'Expected \"transfer\" method to create a specific ledger item in entertainment object.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>check_funds</code> method should return <code>False</code> if the amount passed to the method is greater than the category balance.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_check_funds(self):\n        self.food.deposit(10, \"deposit\")\n        actual = self.food.check_funds(20)\n        expected = False\n        self.assertEqual(actual, expected, 'Expected \"check_funds\" method to be False')   \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>check_funds</code> method should return <code>True</code> if the amount passed to the method is not greater than the category balance.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_check_funds(self):\n        self.food.deposit(10, \"deposit\")\n        actual = self.food.check_funds(10)\n        expected = True\n        self.assertEqual(actual, expected, 'Expected \"check_funds\" method to be True')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>withdraw</code> method should return <code>False</code> if the withdrawal didn't take place.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n    \n    def test_withdraw_no_funds(self):\n        self.food.deposit(100, \"deposit\")\n        good_withdraw = self.food.withdraw(100.10)\n        self.assertEqual(good_withdraw, False, 'Expected \"withdraw\" method to return \"False\".')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>The <code>transfer</code> method should return <code>False</code> if the transfer didn't take place.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_transfer_no_funds(self):\n        self.food.deposit(100, \"deposit\")\n        good_transfer = self.food.transfer(200, self.entertainment)\n        self.assertEqual(good_transfer, False, 'Expected \"transfer\" method to return \"False\".')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p>Printing a <code>Category</code> instance should give a different string representation of the object.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n    \n    def test_to_string(self):\n        self.food.deposit(900, \"deposit\")\n        self.food.withdraw(45.67, \"milk, cereal, eggs, bacon, bread\")\n        self.food.transfer(20, self.entertainment)\n        actual = str(self.food)\n        expected = \"*************Food*************\\\\ndeposit                 900.00\\\\nmilk, cereal, eggs, bac -45.67\\\\nTransfer to Entertainme -20.00\\\\nTotal: 834.33\"\n        self.assertEqual(actual, expected, 'Expected different string representation of object.')\n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\n\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"},{"text":"<p><code>create_spend_chart</code> should print a different chart representation. Check that all spacing is exact.</p>","testString":"({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/budget.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport budget\nfrom importlib import reload\n\nreload(budget)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.food = budget.Category(\"Food\")\n        self.entertainment = budget.Category(\"Entertainment\")\n        self.business = budget.Category(\"Business\")\n    \n    def test_create_spend_chart(self):\n        self.food.deposit(900, \"deposit\")\n        self.entertainment.deposit(900, \"deposit\")\n        self.business.deposit(900, \"deposit\")\n        self.food.withdraw(105.55)\n        self.entertainment.withdraw(33.40)\n        self.business.withdraw(10.99)\n        actual = budget.create_spend_chart([self.business, self.food, self.entertainment])\n        expected = \"Percentage spent by category\\\\n100|          \\\\n 90|          \\\\n 80|          \\\\n 70|    o     \\\\n 60|    o     \\\\n 50|    o     \\\\n 40|    o     \\\\n 30|    o     \\\\n 20|    o  o  \\\\n 10|    o  o  \\\\n  0| o  o  o  \\\\n    ----------\\\\n     B  F  E  \\\\n     u  o  n  \\\\n     s  o  t  \\\\n     i  d  e  \\\\n     n     r  \\\\n     e     t  \\\\n     s     a  \\\\n     s     i  \\\\n           n  \\\\n           m  \\\\n           e  \\\\n           n  \\\\n           t  \"\n        self.assertEqual(actual, expected, 'Expected different chart representation. Check that all spacing is exact.')\n`);\n\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"class Category:\n    pass\n\ndef create_spend_chart(categories):\n    pass","head":"","tail":"","editableRegionBoundaries":[],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#build-a-budget-app-project","dashedName":"build-a-budget-app-project","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"build-a-budget-app-project","isFirstStep":true,"template":null,"required":[],"nextBlock":"build-a-polygon-area-calculator-project","nextChallengePath":"/learn/scientific-computing-with-python/build-a-polygon-area-calculator-project/build-a-polygon-area-calculator-project","prevChallengePath":"/learn/scientific-computing-with-python/learn-tree-traversal-by-building-a-binary-search-tree/step-62","id":"5e44413e903586ffb414c94e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":23,"challengeFiles":[{"name":"main","ext":"py","contents":"class Category:\n\n    def __init__(self, name):\n        self.name = name\n        self.ledger = []\n        self.balance = 0\n        self.spent = 0\n\n    def __str__(self):\n        first_line = f'{self.name.center(30, \"*\")}\\n'\n        lines = ''\n        total = f'Total: {format(self.balance, \".2f\")}'\n\n        for n in range(len(self.ledger)):\n            descr = self.ledger[n][\"description\"][:23]\n            am = format(float(self.ledger[n][\"amount\"]), \".2f\")[:7]\n            lines = lines + f'{descr:<23}{am:>7}\\n'\n\n        return f'{first_line}{lines}{total}'\n\n    def deposit(self, amount, description=''):\n        self.ledger.append({\n            'amount': float(amount),\n            'description': description\n        })\n        self.balance = self.balance + float(amount)\n\n    def withdraw(self, amount, description=''):\n        if self.check_funds(amount):\n            self.ledger.append({\n                'amount': -float(amount),\n                'description': description\n            })\n            self.balance = self.balance - float(amount)\n            self.spent = self.spent + float(amount)\n            return True\n        else:\n            return False\n\n    def get_balance(self):\n        return self.balance\n\n    def transfer(self, amount, category):\n        if self.check_funds(amount):\n            # withdraw\n            self.ledger.append({\n                'amount': -float(amount),\n                'description': f'Transfer to {category.name}'\n            })\n            self.balance = self.balance - float(amount)\n            # deposit\n            category.deposit(amount, f'Transfer from {self.name}')\n\n            return True\n        else:\n            return False\n\n    def check_funds(self, amount):\n        if float(amount) > self.balance:\n            return False\n        else:\n            return True\n\n\ndef create_spend_chart(categories):\n    total_expenses = 0\n    obj = {}\n    col1 = []\n    str = []\n    final_str = 'Percentage spent by category\\n'\n    label_max_length = 0\n    label_strings = []\n\n    for category in categories:\n        total_expenses = total_expenses + category.spent\n        obj[category.name] = {'expenses': category.spent}\n        obj[category.name]['label'] = list(category.name)\n        if len(obj[category.name]['label']) > label_max_length:\n            label_max_length = len(obj[category.name]['label'])\n\n    for category in categories:\n        obj[category.name]['percent'] = (\n            (category.spent / total_expenses * 100) // 10) * 10\n        obj[category.name]['column'] = []\n        for i in range(0, 110, 10):\n            if obj[category.name]['percent'] >= i:\n                obj[category.name]['column'].insert(0, 'o')\n            else:\n                obj[category.name]['column'].insert(0, ' ')\n\n    for i in range(0, 110, 10):\n        col1.insert(0, i)\n\n    for i in range(11):\n        str.append(\"\")\n        for key in obj:\n            str[i] += (f'{obj[key][\"column\"][i]}  ')\n        final_str += f'{col1[i]:>3}| {str[i]}\\n'\n    final_str += f'    {\"-\"*(1+3*len(obj))}\\n   '\n\n    for i in range(label_max_length):\n        label_strings.append('  ')\n        for k in obj:\n            if len(obj[k]['label']) < label_max_length:\n                obj[k]['label'].extend(\n                    f'{\" \"*(label_max_length-len(obj[k][\"label\"]))}')\n\n            label_strings[i] += f'{obj[k][\"label\"][i]}  '\n        if i < label_max_length - 1:\n            label_strings[i] += '\\n   '\n        final_str += label_strings[i]\n\n    print(final_str)\n    return (final_str)\n    ","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/build-a-budget-app-project/build-a-budget-app-project"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-9",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","title":"Step 9","description":"<section id=\"description\">\n<p>To iterate over the keys of a dictionary, you can simply put the dictionary into a <code>for</code> loop. The code below would print each key in the dictionary <code>dict</code>:</p>\n<pre><code class=\"language-py\">for i in dict:\n   print(i)\n</code></pre>\n<p>Replace the <code>print()</code> call with a <code>for</code> loop that iterates over <code>copper</code> and prints each key.</p>\n</section>","id":"65b7cd2b7bd9a684ccf1dc16","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-algorithm-design-by-building-a-shortest-path-algorithm","slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-9","tests":[{"text":"<p>You should not have <code>print(copper)</code> in your code.</p>","testString":"({ test: () => assert.isFalse(runPython(`_Node(_code).has_call(\"print(copper)\")`)) })"},{"text":"<p>You should create a <code>for</code> loop to iterate over the <code>copper</code> dictionary.</p>","testString":"({ test: () => assert(runPython(`_Node(_code).find_for_loops()[0].find_for_iter().is_equivalent(\"copper\")`)) })"},{"text":"<p>You should print each key of the <code>copper</code> inside your <code>for</code> loop.</p>","testString":"({ test: () => assert(runPython(`\nvar = _Node(_code).find_for_loops()[0].find_for_vars()\n_Node(_code).find_for_loops()[0].find_bodies()[0].is_equivalent(f\"print({var})\")\n`)) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"copper = {\n    'species': 'guinea pig',\n    'age': 2\n}\ncopper['food'] = 'hay'\ncopper['species'] = 'Cavia porcellus'\n\nprint(copper)","head":"","tail":"","editableRegionBoundaries":[0,9],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm","dashedName":"step-9","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-algorithm-design-by-building-a-shortest-path-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-10","prevChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-8","id":"65b7cd2b7bd9a684ccf1dc16"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"my_graph = {\n    'A': [('B', 5), ('C', 3), ('E', 11)],\n    'B': [('A', 5), ('C', 1), ('F', 2)],\n    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n    'D': [('C',1 ), ('E', 9), ('F', 3)],\n    'E': [('A', 11), ('C', 5), ('D', 9)],\n    'F': [('B', 2), ('D', 3)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    \n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\n    \nshortest_path(my_graph, 'A', 'F')\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-9"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
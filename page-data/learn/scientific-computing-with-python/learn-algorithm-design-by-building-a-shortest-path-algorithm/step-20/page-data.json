{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-20",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","title":"Step 20","description":"<section id=\"description\">\n<p>A graph is called a <em>weighted</em> graph when its edges are associated with weights, representing a distance, time or other quantitative value.</p>\n<p>In your case, these weights will be the distances between each node, or point in space. To represent a weighted graph you can modify your dictionary, using a list of tuples for each value.</p>\n<p>The first element in the tuple will be the connected node, and the second element will be an integer number indicating the distance.</p>\n<p>Modify <code>my_graph['A']</code> into a list of tuples, considering that the <code>A-B</code> distance is <code>3</code> and the <code>A-D</code> distance is <code>1</code>.</p>\n</section>","id":"655771d889132f9ccd341060","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-algorithm-design-by-building-a-shortest-path-algorithm","slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-20","tests":[{"text":"<p><code>my_graph[\"A\"]</code> should be a list containing the tuples <code>('B', 3)</code> and <code>('D', 1)</code>.</p>","testString":"({ test: () => assert(runPython(`\n    tuples = [(\"B\", 3), (\"D\", 1)]\n    len(my_graph[\"A\"]) == 2 and all(t in my_graph[\"A\"] for t in tuples)\n  `))\n})"},{"text":"<p><code>my_graph</code> should have 4 keys named <code>'A'</code>, <code>'B'</code>, <code>'C'</code>, and <code>'D'</code>.</p>","testString":"({ test: () => assert(runPython(`\n    key_list = [\"A\", \"B\", \"C\", \"D\"]\n    len(my_graph) == 4 and all(key in my_graph for key in key_list)\n  `))\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"my_graph = {\n    'A': ['B', 'D'],\n    'B': ['A', 'C'],\n    'C': ['B', 'D'],\n    'D': ['A', 'C']\n}\n","head":"","tail":"","editableRegionBoundaries":[0,3],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm","dashedName":"step-20","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-algorithm-design-by-building-a-shortest-path-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-21","prevChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-19","id":"655771d889132f9ccd341060"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"my_graph = {\n    'A': [('B', 5), ('C', 3), ('E', 11)],\n    'B': [('A', 5), ('C', 1), ('F', 2)],\n    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n    'D': [('C',1 ), ('E', 9), ('F', 3)],\n    'E': [('A', 11), ('C', 5), ('D', 9)],\n    'F': [('B', 2), ('D', 3)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    \n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\n    \nshortest_path(my_graph, 'A', 'F')\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-20"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-49",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","title":"Step 49","description":"<section id=\"description\">\n<p>The <code>.remove()</code> method removes from a list the first matching element that is passed as the argument:</p>\n<pre><code class=\"language-py\">my_list = ['larch', 1, True, 1]\nmy_list.remove(1)\nprint(my_list) # Output: ['larch', True, 1]\n</code></pre>\n<p>Terminate the <code>while</code> loop by removing the current node from the <code>unvisited</code> list. Pay attention to the indentation.</p>\n</section>","id":"655791ae44c182bd92f31caa","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-algorithm-design-by-building-a-shortest-path-algorithm","slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-49","tests":[{"text":"<p>You should use the <code>.remove()</code> method to remove the current node from <code>unvisited</code> after your <code>for</code> loop.</p>","testString":"({ test: () =>  {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /while\\s+unvisited/);\n    assert(block_body.match(/^\\s+unvisited\\.remove\\s*\\(\\s*current\\s*\\)/m));\n    const {block_body: for_body} = __helpers.python.getBlock(commentless_code, /for\\s+node\\s*,\\s*distance\\s+in\\s+graph\\s*\\[\\s*current\\s*\\]\\s*/);\n    assert.notMatch(for_body, /^\\s+unvisited\\.remove\\s*\\(\\s*current\\s*\\)/m);\n  }\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node][-1] == node:\n                    paths[node] = paths[current]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \n#shortest_path(my_graph, 'A')\n","head":"","tail":"","editableRegionBoundaries":[12,23],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm","dashedName":"step-49","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-algorithm-design-by-building-a-shortest-path-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-50","prevChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-48","id":"655791ae44c182bd92f31caa"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"my_graph = {\n    'A': [('B', 5), ('C', 3), ('E', 11)],\n    'B': [('A', 5), ('C', 1), ('F', 2)],\n    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n    'D': [('C',1 ), ('E', 9), ('F', 3)],\n    'E': [('A', 11), ('C', 5), ('D', 9)],\n    'F': [('B', 2), ('D', 3)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    \n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\n    \nshortest_path(my_graph, 'A', 'F')\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-49"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
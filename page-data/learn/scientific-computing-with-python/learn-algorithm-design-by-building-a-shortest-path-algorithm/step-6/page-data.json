{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-6",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","title":"Step 6","description":"<section id=\"description\">\n<p>To add a new key-value pair after declaring a dictionary, you can indicate the key in the same way you would access an existing key, and set the value of the new key by using the assignment operator:</p>\n<pre><code class=\"language-py\">my_dict = {\n    'name': 'Michael',\n    'occupation': 'Lumberjack'\n}\n\nmy_dict['country'] = 'Canada'\n</code></pre>\n<p>Delete your <code>print()</code> call. Then, after the <code>copper</code> declaration, add the key <code>'food'</code> to your dictionary and set its value to <code>'hay'</code>.</p>\n</section>","id":"6579717f0920131304286804","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-algorithm-design-by-building-a-shortest-path-algorithm","slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-6","tests":[{"text":"<p>You should not have <code>print(copper['age'])</code> in your code.</p>","testString":"({ test: () => assert.notMatch(code, /^print\\(\\s*copper\\s*\\[\\s*(\"|')age\\1\\s*\\]\\s*\\)/m) })"},{"text":"<p>You should add the key <code>'food'</code> to <code>copper</code> after declaring the dictionary.</p>","testString":"({ test: () => assert.match(code, /copper\\s*\\[\\s*(\"|')food\\1\\s*\\]/) })"},{"text":"<p>You should set <code>copper['food']</code> to <code>'hay'</code> after declaring the dictionary.</p>","testString":"({ test: () => assert.match(code, /^copper\\s*\\[\\s*(\"|')food\\1\\s*\\]\\s*=\\s*(\"|')hay\\2/m) })"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"copper = {\n    'species': 'guinea pig',\n    'age': 2\n}\nprint(copper['age'])","head":"","tail":"","editableRegionBoundaries":[0,6],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm","dashedName":"step-6","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-algorithm-design-by-building-a-shortest-path-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-7","prevChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-5","id":"6579717f0920131304286804"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"my_graph = {\n    'A': [('B', 5), ('C', 3), ('E', 11)],\n    'B': [('A', 5), ('C', 1), ('F', 2)],\n    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n    'D': [('C',1 ), ('E', 9), ('F', 3)],\n    'E': [('A', 11), ('C', 5), ('D', 9)],\n    'F': [('B', 2), ('D', 3)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    \n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\n    \nshortest_path(my_graph, 'A', 'F')\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-6"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
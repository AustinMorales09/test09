{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-15",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","title":"Step 15","description":"<section id=\"description\">\n<p>Graphs are data structures representing relations between pairs of elements.\nThese elements, called <em>nodes</em>, can be real-life objects, entities, points in space or others. The connections between the nodes are called the <em>edges</em>.</p>\n<p>Here's a visual representation of a graph:</p>\n<img class=\"img-responsive center-block\" alt=\"a weighted graph with 6 nodes\" src=\"https://cdn.freecodecamp.org/curriculum/python/graph1-example.png\" style=\"background-color: white; height: 350px; width: auto; padding: 10px;\">\n<p>Rename the <code>copper</code> dictionary into <code>my_graph</code>. This will represent the graph to test your algorithm.</p>\n</section>","id":"6579dd49fa8a8e1fd06b85a9","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":20,"helpCategory":"Python","videoUrl":null,"superBlock":"scientific-computing-with-python","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-algorithm-design-by-building-a-shortest-path-algorithm","slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-15","tests":[{"text":"<p>You should rename your <code>copper</code> dictionary into <code>my_graph</code>.</p>","testString":"({ test: () => assert(__userGlobals.has(\"my_graph\")) })"},{"text":"<p>Your <code>my_graph</code> variable should be a dictionary.</p>","testString":"({ test: () => assert(runPython(`\n    type(my_graph) is dict \n  `))\n})"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"mainpy","ext":"py","name":"main","contents":"copper = {\n    'species': 'guinea pig',\n    'age': 2\n}","head":"","tail":"","editableRegionBoundaries":[0,5],"history":["main.py"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm","dashedName":"step-15","certification":"scientific-computing-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"scientific-computing-with-python","block":"learn-algorithm-design-by-building-a-shortest-path-algorithm","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-algorithm-design-by-building-a-shortest-path-algorithm","nextChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-16","prevChallengePath":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-14","id":"6579dd49fa8a8e1fd06b85a9"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":20,"challengeFiles":[{"name":"main","ext":"py","contents":"my_graph = {\n    'A': [('B', 5), ('C', 3), ('E', 11)],\n    'B': [('A', 5), ('C', 1), ('F', 2)],\n    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n    'D': [('C',1 ), ('E', 9), ('F', 3)],\n    'E': [('A', 11), ('C', 5), ('D', 9)],\n    'F': [('B', 2), ('D', 3)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    \n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\n    \nshortest_path(my_graph, 'A', 'F')\n","head":"","tail":"","history":["main.py"],"fileKey":"mainpy"}]}},"slug":"/learn/scientific-computing-with-python/learn-algorithm-design-by-building-a-shortest-path-algorithm/step-15"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
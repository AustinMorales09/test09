{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/override-default-props",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Override Default Props","description":"<section id=\"description\">\n<p>The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.</p>\n</section>","id":"5a24c314108439a4d403616c","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>The <code>ShoppingCart</code> component now renders a child component <code>Items</code>. This <code>Items</code> component has a default prop <code>quantity</code> set to the integer <code>0</code>. Override the default prop by passing in a value of <code>10</code> for <code>quantity</code>.</p>\n<p><strong>Note:</strong> Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for <code>quantity</code> is an integer, it won't go in quotes but it should be wrapped in curly braces. For example, <code>{100}</code>. This syntax tells JSX to interpret the value within the braces directly as JavaScript.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301399,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/override-default-props","tests":[{"text":"<p>The component <code>ShoppingCart</code> should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"},{"text":"<p>The component <code>Items</code> should render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('Items').length === 1;\n  })()\n);"},{"text":"<p>The <code>Items</code> component should have a prop of <code>{ quantity: 10 }</code> passed from the <code>ShoppingCart</code> component.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n      return (\n        mockedComponent.find('Items').props().quantity == 10 &&\n        getUserInput('index')\n          .replace(/ /g, '')\n          .includes('<Itemsquantity={10}/>')\n      );\n    })()\n  );"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items />\n    { /* Change code above this line */ }\n  }\n};","head":"","tail":"ReactDOM.render(<ShoppingCart />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"override-default-props","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/use-proptypes-to-define-the-props-you-expect","prevChallengePath":"/learn/front-end-development-libraries/react/use-default-props","id":"5a24c314108439a4d403616c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/override-default-props"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
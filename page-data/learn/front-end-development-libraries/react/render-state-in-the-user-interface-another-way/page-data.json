{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/render-state-in-the-user-interface-another-way",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Render State in the User Interface Another Way","description":"<section id=\"description\">\n<p>There is another way to access <code>state</code> in a component. In the <code>render()</code> method, before the <code>return</code> statement, you can write JavaScript directly. For example, you could declare functions, access data from <code>state</code> or <code>props</code>, perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the <code>return</code> statement.</p>\n</section>","id":"5a24c314108439a4d4036172","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>In the <code>MyComponent</code> render method, define a <code>const</code> called <code>name</code> and set it equal to the name value in the component's <code>state</code>. Because you can write JavaScript directly in this part of the code, you don't have to enclose this reference in curly braces.</p>\n<p>Next, in the return statement, render this value in an <code>h1</code> tag using the variable <code>name</code>. Remember, you need to use the JSX syntax (curly braces for JavaScript) in the return statement.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301408,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/render-state-in-the-user-interface-another-way","tests":[{"text":"<p><code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'freeCodeCamp'\n);"},{"text":"<p><code>MyComponent</code> should render an <code>h1</code> heading element enclosed in a single <code>div</code>.</p>","testString":"assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.mount(React.createElement(MyComponent)).html()\n  )\n);"},{"text":"<p>The rendered <code>h1</code> tag should include a reference to <code>{name}</code>.</p>","testString":"(getUserInput) =>\n  assert(/<h1>\\n*\\s*\\{\\s*name\\s*\\}\\s*\\n*<\\/h1>/.test(getUserInput('index')));"},{"text":"<p>The rendered <code>h1</code> heading element should contain text rendered from the component's state.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  assert(firstValue === '<div><h1>TestName</h1></div>');\n};"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"render-state-in-the-user-interface-another-way","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/set-state-with-this-setstate","prevChallengePath":"/learn/front-end-development-libraries/react/render-state-in-the-user-interface","id":"5a24c314108439a4d4036172"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/render-state-in-the-user-interface-another-way"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
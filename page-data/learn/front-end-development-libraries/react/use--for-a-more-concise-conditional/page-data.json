{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/use--for-a-more-concise-conditional",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Use && for a More Concise Conditional","description":"<section id=\"description\">\n<p>The <code>if/else</code> statements worked in the last challenge, but there's a more concise way to achieve the same result. Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. If you write a lot of <code>else if</code> statements to return slightly different UIs, you may repeat code which leaves room for error. Instead, you can use the <code>&#x26;&#x26;</code> logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is <code>true</code>, and if it is, return some markup. Here's an example:</p>\n<pre><code class=\"language-jsx\">{condition &#x26;&#x26; &#x3C;p>markup&#x3C;/p>}\n</code></pre>\n<p>If the <code>condition</code> is <code>true</code>, the markup will be returned. If the condition is <code>false</code>, the operation will immediately return <code>false</code> after evaluating the <code>condition</code> and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing <code>&#x26;&#x26;</code> after each one. This allows you to handle more complex conditional logic in your <code>render()</code> method without repeating a lot of code.</p>\n</section>","id":"5a24c314108439a4d4036185","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Solve the previous example again, so the <code>h1</code> only renders if <code>display</code> is <code>true</code>, but use the <code>&#x26;&#x26;</code> logical operator instead of an <code>if/else</code> statement.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301413,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/use--for-a-more-concise-conditional","tests":[{"text":"<p><code>MyComponent</code> should exist and render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('MyComponent').length;\n  })()\n);"},{"text":"<p>When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: true });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('div').children().length === 2 &&\n      updated.find('button').length === 1 &&\n      updated.find('h1').length === 1\n  );\n};"},{"text":"<p>When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: false });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('div').children().length === 1 &&\n      updated.find('button').length === 1 &&\n      updated.find('h1').length === 0\n  );\n};"},{"text":"<p>The render method should use the <code>&#x26;&#x26;</code> logical operator to check the condition of <code>this.state.display</code>.</p>","testString":"(getUserInput) => assert(getUserInput('index').includes('&&'));"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"use--for-a-more-concise-conditional","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/use-a-ternary-expression-for-conditional-rendering","prevChallengePath":"/learn/front-end-development-libraries/react/render-with-an-if-else-condition","id":"5a24c314108439a4d4036185"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/use--for-a-more-concise-conditional"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
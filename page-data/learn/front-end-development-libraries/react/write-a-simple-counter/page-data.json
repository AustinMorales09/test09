{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/write-a-simple-counter",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Write a Simple Counter","description":"<section id=\"description\">\n<p>You can design a more complex stateful component by combining the concepts covered so far. These include initializing <code>state</code>, writing methods that set <code>state</code>, and assigning click handlers to trigger these methods.</p>\n</section>","id":"5a24c314108439a4d4036177","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>The <code>Counter</code> component keeps track of a <code>count</code> value in <code>state</code>. There are two buttons which call methods <code>increment()</code> and <code>decrement()</code>. Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. Also, create a <code>reset()</code> method so when the reset button is clicked, the count is set to 0.</p>\n<p><strong>Note:</strong> Make sure you don't modify the <code>className</code>s of the buttons. Also, remember to add the necessary bindings for the newly-created methods in the constructor.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301425,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/write-a-simple-counter","tests":[{"text":"<p><code>Counter</code> should return a <code>div</code> element which contains three buttons with text content in this order <code>Increment!</code>, <code>Decrement!</code>, <code>Reset</code>.</p>","testString":"assert(\n  (() => {\n    const mockedComponent = Enzyme.mount(React.createElement(Counter));\n    return (\n      mockedComponent.find('.inc').text() === 'Increment!' &&\n      mockedComponent.find('.dec').text() === 'Decrement!' &&\n      mockedComponent.find('.reset').text() === 'Reset'\n    );\n  })()\n);"},{"text":"<p>The state of <code>Counter</code> should initialize with a <code>count</code> property set to <code>0</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nassert(mockedComponent.find('h1').text() === 'Current Count: 0');"},{"text":"<p>Clicking the increment button should increment the count by <code>1</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.find('.inc').simulate('click');\nassert(mockedComponent.find('h1').text() === 'Current Count: 1');"},{"text":"<p>Clicking the decrement button should decrement the count by <code>1</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.find('.dec').simulate('click');\nassert(mockedComponent.find('h1').text() === 'Current Count: -1');"},{"text":"<p>Clicking the reset button should reset the count to <code>0</code>.</p>","testString":"const mockedComponent = Enzyme.mount(React.createElement(Counter));\nmockedComponent.setState({ count: 5 });\nconst currentCountElement = mockedComponent.find('h1');\nassert(currentCountElement.text() === 'Current Count: 5');\nmockedComponent.find('.reset').simulate('click');\nassert(currentCountElement.text() === 'Current Count: 0');"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n    // Change code below this line\n\n    // Change code above this line\n  }\n  // Change code below this line\n\n  // Change code above this line\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<Counter />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"write-a-simple-counter","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/create-a-controlled-input","prevChallengePath":"/learn/front-end-development-libraries/react/use-state-to-toggle-an-element","id":"5a24c314108439a4d4036177"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/write-a-simple-counter"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
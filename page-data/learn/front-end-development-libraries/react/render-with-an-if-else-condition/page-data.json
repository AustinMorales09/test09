{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/render-with-an-if-else-condition",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Render with an If-Else Condition","description":"<section id=\"description\">\n<p>Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. When the condition is true, one view renders. When it's false, it's a different view. You can do this with a standard <code>if/else</code> statement in the <code>render()</code> method of a React component.</p>\n</section>","id":"5a24c314108439a4d4036184","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>MyComponent contains a <code>boolean</code> in its state which tracks whether you want to display some element in the UI or not. The <code>button</code> toggles the state of this value. Currently, it renders the same UI every time. Rewrite the <code>render()</code> method with an <code>if/else</code> statement so that if <code>display</code> is <code>true</code>, you return the current markup. Otherwise, return the markup without the <code>h1</code> element.</p>\n<p><strong>Note:</strong> You must write an <code>if/else</code> to pass the tests. Use of the ternary operator will not pass here.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301410,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/render-with-an-if-else-condition","tests":[{"text":"<p><code>MyComponent</code> should exist and render.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n    return mockedComponent.find('MyComponent').length === 1;\n  })()\n);"},{"text":"<p>When <code>display</code> is set to <code>true</code>, a <code>div</code>, <code>button</code>, and <code>h1</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: true });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('div').children().length === 2 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('h1').length === 1\n  );\n};"},{"text":"<p>When <code>display</code> is set to <code>false</code>, only a <code>div</code> and <code>button</code> should render.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const state_1 = () => {\n    mockedComponent.setState({ display: false });\n    return waitForIt(() => mockedComponent);\n  };\n  const updated = await state_1();\n  assert(\n    mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('div').children().length === 1 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('h1').length === 0\n  );\n};"},{"text":"<p>The render method should use an <code>if/else</code> statement to check the condition of <code>this.state.display</code>.</p>","testString":"(getUserInput) =>\n  assert(\n    getUserInput('index').includes('if') &&\n      getUserInput('index').includes('else')\n  );"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // Change code below this line\n\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         <h1>Displayed!</h1>\n       </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"render-with-an-if-else-condition","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/use--for-a-more-concise-conditional","prevChallengePath":"/learn/front-end-development-libraries/react/use-advanced-javascript-in-react-render-method","id":"5a24c314108439a4d4036184"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/render-with-an-if-else-condition"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
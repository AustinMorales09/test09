{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/render-state-in-the-user-interface",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Render State in the User Interface","description":"<section id=\"description\">\n<p>Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in <code>state</code> in its <code>render()</code> method. You can access the data with <code>this.state</code>.</p>\n<p>If you want to access a state value within the <code>return</code> of the render method, you have to enclose the value in curly braces.</p>\n<p><code>state</code> is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.</p>\n<p>Note that if you make a component stateful, no other components are aware of its <code>state</code>. Its <code>state</code> is completely encapsulated, or local to that component, unless you pass state data to a child component as <code>props</code>. This notion of encapsulated <code>state</code> is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code.</p>\n</section>","id":"5a24c314108439a4d4036171","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>In the code editor, <code>MyComponent</code> is already stateful. Define an <code>h1</code> tag in the component's render method which renders the value of <code>name</code> from the component's state.</p>\n<p><strong>Note:</strong> The <code>h1</code> should only render the value from <code>state</code> and nothing else. In JSX, any code you write with curly braces <code>{ }</code> will be treated as JavaScript. So to access the value from <code>state</code> just enclose the reference in curly braces.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301409,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/render-state-in-the-user-interface","tests":[{"text":"<p><code>MyComponent</code> should have a key <code>name</code> with value <code>freeCodeCamp</code> stored in its state.</p>","testString":"assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'freeCodeCamp'\n);"},{"text":"<p><code>MyComponent</code> should render an <code>h1</code> heading element enclosed in a single <code>div</code>.</p>","testString":"assert(\n  /<div><h1>.*<\\/h1><\\/div>/.test(\n    Enzyme.mount(React.createElement(MyComponent)).html()\n  )\n);"},{"text":"<p>The rendered <code>h1</code> heading element should only contain text rendered from the component's state.</p>","testString":"async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  const getValue = firstValue.replace(/\\s/g, '');\n  assert(getValue === '<div><h1>TestName</h1></div>');\n};"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<MyComponent />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"render-state-in-the-user-interface","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/render-state-in-the-user-interface-another-way","prevChallengePath":"/learn/front-end-development-libraries/react/create-a-stateful-component","id":"5a24c314108439a4d4036171"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/render-state-in-the-user-interface"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
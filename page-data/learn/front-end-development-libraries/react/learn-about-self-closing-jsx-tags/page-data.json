{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/learn-about-self-closing-jsx-tags",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Learn About Self-Closing JSX Tags","description":"<section id=\"description\">\n<p>So far, you’ve seen how JSX differs from HTML in a key way with the use of <code>className</code> vs. <code>class</code> for defining HTML classes.</p>\n<p>Another important way in which JSX differs from HTML is in the idea of the self-closing tag.</p>\n<p>In HTML, almost all tags have both an opening and closing tag: <code>&#x3C;div>&#x3C;/div></code>; the closing tag always has a forward slash before the tag name that you are closing. However, there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.</p>\n<p>For example the line-break tag can be written as <code>&#x3C;br></code> or as <code>&#x3C;br /></code>, but should never be written as <code>&#x3C;br>&#x3C;/br></code>, since it doesn't contain any content.</p>\n<p>In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as <code>&#x3C;br /></code> in order to be valid JSX that can be transpiled. A <code>&#x3C;div></code>, on the other hand, can be written as <code>&#x3C;div /></code> or <code>&#x3C;div>&#x3C;/div></code>. The difference is that in the first syntax version there is no way to include anything in the <code>&#x3C;div /></code>. You will see in later challenges that this syntax is useful when rendering React components.</p>\n</section>","id":"5a24c314108439a4d4036161","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content - you only need to close tags where they are needed.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301396,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/learn-about-self-closing-jsx-tags","tests":[{"text":"<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>","testString":"assert.strictEqual(JSX.type, 'div');"},{"text":"<p>The <code>div</code> should contain a <code>br</code> tag.</p>","testString":"assert(Enzyme.shallow(JSX).find('br').length === 1);"},{"text":"<p>The <code>div</code> should contain an <code>hr</code> tag.</p>","testString":"assert(Enzyme.shallow(JSX).find('hr').length === 1);"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"const JSX = (\n  <div>\n    <h2>Welcome to React!</h2> <br >\n    <p>Be sure to close all tags!</p>\n    <hr >\n  </div>\n);","head":"","tail":"ReactDOM.render(JSX, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"learn-about-self-closing-jsx-tags","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/create-a-stateless-functional-component","prevChallengePath":"/learn/front-end-development-libraries/react/define-an-html-class-in-jsx","id":"5a24c314108439a4d4036161"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/learn-about-self-closing-jsx-tags"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
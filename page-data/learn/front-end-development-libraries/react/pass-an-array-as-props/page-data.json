{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/pass-an-array-as-props",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Pass an Array as Props","description":"<section id=\"description\">\n<p>The last challenge demonstrated how to pass information from a parent component to a child component as <code>props</code> or properties. This challenge looks at how arrays can be passed as <code>props</code>. To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.</p>\n<pre><code class=\"language-jsx\">&#x3C;ParentComponent>\n  &#x3C;ChildComponent colors={[\"green\", \"blue\", \"red\"]} />\n&#x3C;/ParentComponent>\n</code></pre>\n<p>The child component then has access to the array property <code>colors</code>. Array methods such as <code>join()</code> can be used when accessing the property.</p>\n<pre><code class=\"language-jsx\">const ChildComponent = (props) => &#x3C;p>{props.colors.join(', ')}&#x3C;/p>\n</code></pre>\n<p>This will join all <code>colors</code> array items into a comma separated string and produce: <code>&#x3C;p>green, blue, red&#x3C;/p></code>. Later, we will learn about other common methods to render arrays of data in React.</p>\n</section>","id":"5a24c314108439a4d403616a","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>There are <code>List</code> and <code>ToDo</code> components in the code editor. When rendering each <code>List</code> from the <code>ToDo</code> component, pass in a <code>tasks</code> property assigned to an array of to-do tasks, for example <code>[\"walk dog\", \"workout\"]</code>. Then access this <code>tasks</code> array in the <code>List</code> component, showing its value within the <code>p</code> element. Use <code>join(\", \")</code> to display the <code>props.tasks</code> array in the <code>p</code> element as a comma-separated list. Today's list should have at least 2 tasks and tomorrow's should have at least 3 tasks.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301401,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/pass-an-array-as-props","tests":[{"text":"<p>The <code>ToDo</code> component should return a single outer <code>div</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().type() === 'div';\n  })()\n);"},{"text":"<p>The third child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().childAt(2).name() === 'List';\n  })()\n);"},{"text":"<p>The fifth child of the <code>ToDo</code> component should be an instance of the <code>List</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.children().first().childAt(4).name() === 'List';\n  })()\n);"},{"text":"<p>Both instances of the <code>List</code> component should have a property called <code>tasks</code> and <code>tasks</code> should be of type array.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return (\n      Array.isArray(mockedComponent.find('List').get(0).props.tasks) &&\n      Array.isArray(mockedComponent.find('List').get(1).props.tasks)\n    );\n  })()\n);"},{"text":"<p>The first <code>List</code> component representing the tasks for today should have 2 or more items.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.find('List').get(0).props.tasks.length >= 2;\n  })()\n);"},{"text":"<p>The second <code>List</code> component representing the tasks for tomorrow should have 3 or more items.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return mockedComponent.find('List').get(1).props.tasks.length >= 3;\n  })()\n);"},{"text":"<p>The <code>List</code> component should render the value from the <code>tasks</code> prop in the <code>p</code> tag.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ToDo));\n    return (\n      mockedComponent\n        .find('p')\n        .get(0)\n        .props.children.replace(/\\s*,\\s*/g, ',') ===\n        mockedComponent\n          .find('List')\n          .get(0)\n          .props.tasks.join(',')\n          .replace(/\\s*,\\s*/g, ',') &&\n      mockedComponent\n        .find('p')\n        .get(1)\n        .props.children.replace(/\\s*,\\s*/g, ',') ===\n        mockedComponent\n          .find('List')\n          .get(1)\n          .props.tasks.join(',')\n          .replace(/\\s*,\\s*/g, ',')\n    );\n  })()\n);"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"const List = (props) => {\n  { /* Change code below this line */ }\n  return <p>{}</p>\n  { /* Change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* Change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<ToDo />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"pass-an-array-as-props","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/use-default-props","prevChallengePath":"/learn/front-end-development-libraries/react/pass-props-to-a-stateless-functional-component","id":"5a24c314108439a4d403616a"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/pass-an-array-as-props"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
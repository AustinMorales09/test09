{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/react/pass-props-to-a-stateless-functional-component",
    "result": {"data":{"challengeNode":{"challenge":{"block":"react","title":"Pass Props to a Stateless Functional Component","description":"<section id=\"description\">\n<p>The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React. With this foundation, it's time to look at another feature very common in React: <strong>props</strong>. In React, you can pass props, or properties, to child components. Say you have an <code>App</code> component which renders a child component called <code>Welcome</code> which is a stateless functional component. You can pass <code>Welcome</code> a <code>user</code> property by writing:</p>\n<pre><code class=\"language-jsx\">&#x3C;App>\n  &#x3C;Welcome user='Mark' />\n&#x3C;/App>\n</code></pre>\n<p>You use <strong>custom HTML attributes</strong> created by you and supported by React to be passed to the component. In this case, the created property <code>user</code> is passed to the component <code>Welcome</code>. Since <code>Welcome</code> is a stateless functional component, it has access to this value like so:</p>\n<pre><code class=\"language-jsx\">const Welcome = (props) => &#x3C;h1>Hello, {props.user}!&#x3C;/h1>\n</code></pre>\n<p>It is standard to call this value <code>props</code> and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX. You can access the value of the argument in the function body. With class components, you will see this is a little different.</p>\n</section>","id":"5a24c314108439a4d4036169","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>There are <code>Calendar</code> and <code>CurrentDate</code> components in the code editor. When rendering <code>CurrentDate</code> from the <code>Calendar</code> component, pass in a property of <code>date</code> assigned to the current date from JavaScript's <code>Date</code> object. Then access this <code>prop</code> in the <code>CurrentDate</code> component, showing its value within the <code>p</code> tags. Note that for <code>prop</code> values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance <code>date={Date()}</code>.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301402,"fields":{"blockName":"react","slug":"/learn/front-end-development-libraries/react/pass-props-to-a-stateless-functional-component","tests":[{"text":"<p>The <code>Calendar</code> component should return a single <code>div</code> element.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"},{"text":"<p>The second child of the <code>Calendar</code> component should be the <code>CurrentDate</code> component.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().childAt(1).name() === 'CurrentDate';\n  })()\n);"},{"text":"<p>The <code>CurrentDate</code> component should have a prop called <code>date</code>.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    return mockedComponent.children().childAt(1).props().date;\n  })()\n);"},{"text":"<p>The <code>date</code> prop of the <code>CurrentDate</code> should contain a string of text.</p>","testString":"assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(Calendar));\n    const prop = mockedComponent.children().childAt(1).props().date;\n    return typeof prop === 'string' && prop.length > 0;\n  })()\n);"},{"text":"<p>The <code>date</code> prop should be generated by calling <code>Date()</code></p>","testString":"assert(/<CurrentDatedate={Date\\(\\)}\\/>/.test(__helpers.removeWhiteSpace(code)));"},{"text":"<p>The <code>CurrentDate</code> component should render the value from the <code>date</code> prop in the <code>p</code> tag.</p>","testString":"let date = 'dummy date';\nassert(\n  (function () {\n    const mockedComponent = Enzyme.mount(\n      React.createElement(CurrentDate, { date })\n    );\n    return mockedComponent.find('p').html().includes(date);\n  })()\n);"}]},"required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexjsx","ext":"jsx","name":"index","contents":"const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: </p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};","head":"","tail":"ReactDOM.render(<Calendar />, document.getElementById('root'))","editableRegionBoundaries":[],"history":["index.jsx"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#react","dashedName":"pass-props-to-a-stateless-functional-component","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"react","isFirstStep":false,"template":"<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>","required":[{"link":null,"src":"https://unpkg.com/react@16.4.0/umd/react.production.min.js"},{"link":null,"src":"https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"}],"nextBlock":"react","nextChallengePath":"/learn/front-end-development-libraries/react/pass-an-array-as-props","prevChallengePath":"/learn/front-end-development-libraries/react/write-a-react-component-from-scratch","id":"5a24c314108439a4d4036169"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"index","ext":"jsx","contents":"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App/>);","head":"var ReactDOMServer = { renderToString(x) { return null; } };","tail":"ReactDOM.render(<App />, document.getElementById('root'))","history":["index.jsx"],"fileKey":"indexjsx"}]}},"slug":"/learn/front-end-development-libraries/react/pass-props-to-a-stateless-functional-component"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/sass/use-if-and-else-to-add-logic-to-your-styles",
    "result": {"data":{"challengeNode":{"challenge":{"block":"sass","title":"Use @if and @else to Add Logic To Your Styles","description":"<section id=\"description\">\n<p>The <code>@if</code> directive in Sass is useful to test for a specific case - it works just like the <code>if</code> statement in JavaScript.</p>\n<pre><code class=\"language-scss\">@mixin make-bold($bool) {\n  @if $bool == true {\n    font-weight: bold;\n  }\n}\n</code></pre>\n<p>And just like in JavaScript, the <code>@else if</code> and <code>@else</code> directives test for more conditions:</p>\n<pre><code class=\"language-scss\">@mixin text-effect($val) {\n  @if $val == danger {\n    color: red;\n  }\n  @else if $val == alert {\n    color: yellow;\n  }\n  @else if $val == success {\n    color: green;\n  }\n  @else {\n    color: black;\n  }\n}\n</code></pre>\n</section>","id":"587d7dbe367417b2b2512bb8","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a mixin called <code>border-stroke</code> that takes a parameter <code>$val</code>. The mixin should check for the following conditions using <code>@if</code>, <code>@else if</code>, and <code>@else</code> directives:</p>\n<pre><code class=\"language-scss\">light - 1px solid black\nmedium - 3px solid black\nheavy - 6px solid black\n</code></pre>\n<p>If the <code>$val</code> parameter value is not <code>light</code>, <code>medium</code>, or <code>heavy</code>, then the <code>border</code> property should be set to <code>none</code>.</p>\n</section>","notes":null,"challengeType":0,"helpCategory":"HTML-CSS","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301463,"fields":{"blockName":"sass","slug":"/learn/front-end-development-libraries/sass/use-if-and-else-to-add-logic-to-your-styles","tests":[{"text":"<p>Your code should declare a mixin named <code>border-stroke</code> which has a parameter named <code>$val</code>.</p>","testString":"assert(code.match(/@mixin\\s+?border-stroke\\s*?\\(\\s*?\\$val\\s*?\\)\\s*?{/gi));"},{"text":"<p>Your mixin should have an <code>@if</code> statement to check if <code>$val</code> is <code>light</code>, and to set the <code>border</code> to <code>1px solid black</code>.</p>","testString":"assert(\n  code.match(\n    /@if\\s+?\\$val\\s*?===?\\s*?light\\s*?{\\s*?border\\s*?:\\s*?1px\\s+?solid\\s+?black\\s*?;\\s*?}/gi\n  )\n);"},{"text":"<p>Your mixin should have an <code>@else if</code> statement to check if <code>$val</code> is <code>medium</code>, and to set the <code>border</code> to <code>3px solid black</code>.</p>","testString":"assert(\n  code.match(\n    /@else\\s+?if\\s+?\\$val\\s*?===?\\s*?medium\\s*?{\\s*?border\\s*?:\\s*?3px\\s+?solid\\s+?black\\s*?;\\s*?}/gi\n  )\n);"},{"text":"<p>Your mixin should have an <code>@else if</code> statement to check if <code>$val</code> is <code>heavy</code>, and to set the <code>border</code> to <code>6px solid black</code>.</p>","testString":"assert(\n  code.match(\n    /@else\\s+?if\\s+?\\$val\\s*?===?\\s*?heavy\\s*?{\\s*?border\\s*?:\\s*?6px\\s+?solid\\s+?black\\s*?;\\s*?}/gi\n  )\n);"},{"text":"<p>Your mixin should have an <code>@else</code> statement to set the <code>border</code> to <code>none</code>.</p>","testString":"assert(code.match(/@else\\s*?{\\s*?border\\s*?:\\s*?none\\s*?;\\s*?}/gi));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<style type='text/scss'>\n\n\n\n  #box {\n    width: 150px;\n    height: 150px;\n    background-color: red;\n    @include border-stroke(medium);\n  }\n</style>\n\n<div id=\"box\"></div>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#sass","dashedName":"use-if-and-else-to-add-logic-to-your-styles","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"sass","isFirstStep":false,"template":null,"required":[],"nextBlock":"sass","nextChallengePath":"/learn/front-end-development-libraries/sass/use-for-to-create-a-sass-loop","prevChallengePath":"/learn/front-end-development-libraries/sass/create-reusable-css-with-mixins","id":"587d7dbe367417b2b2512bb8"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":0,"challengeFiles":[{"name":"index","ext":"html","contents":"<style type='text/scss'>\n  h3{\n    text-align: center;\n  }\n  .info{\n    width: 200px;\n    border: 1px solid black;\n    margin: 0 auto;\n  }\n  .info-important{\n    @extend .info;\n    background-color: magenta;\n  }\n\n\n\n</style>\n<h3>Posts</h3>\n<div class=\"info-important\">\n  <p>This is an important post. It should extend the class \".info\" and have its own CSS styles.</p>\n</div>\n\n<div class=\"info\">\n  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>\n</div>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"}]}},"slug":"/learn/front-end-development-libraries/sass/use-if-and-else-to-add-logic-to-your-styles"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
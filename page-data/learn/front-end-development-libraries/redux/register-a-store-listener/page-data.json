{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/redux/register-a-store-listener",
    "result": {"data":{"challengeNode":{"challenge":{"block":"redux","title":"Register a Store Listener","description":"<section id=\"description\">\n<p>Another method you have access to on the Redux <code>store</code> object is <code>store.subscribe()</code>. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated.</p>\n</section>","id":"5a24c314108439a4d4036153","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a callback function that increments the global variable <code>count</code> every time the store receives an action, and pass this function in to the <code>store.subscribe()</code> method. You'll see that <code>store.dispatch()</code> is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301446,"fields":{"blockName":"redux","slug":"/learn/front-end-development-libraries/redux/register-a-store-listener","tests":[{"text":"<p>Dispatching the <code>ADD</code> action on the store should increment the state by <code>1</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch({ type: 'ADD' });\n    const newState = store.getState();\n    return newState === initialState + 1;\n  })()\n);"},{"text":"<p>There should be a listener function subscribed to the store using <code>store.subscribe</code>.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/store\\s*\\.\\s*subscribe\\(/gm));"},{"text":"<p>The <code>store.subscribe</code> should receive a function.</p>","testString":"(getUserInput) => assert(getUserInput('index').match(/(\\s*function\\s*)|(\\s*\\(\\s*\\)\\s*=>)/gm)) "},{"text":"<p>The callback to <code>store.subscribe</code> should also increment the global <code>count</code> variable as the store is updated.</p>","testString":"assert(store.getState() === count);"}]},"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n\n// Global count variable:\nlet count = 0;\n\n// Change code below this line\n\n// Change code above this line\n\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);\nstore.dispatch({type: ADD});\nconsole.log(count);","head":"count = 0;","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#redux","dashedName":"register-a-store-listener","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"redux","isFirstStep":false,"template":null,"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"nextBlock":"redux","nextChallengePath":"/learn/front-end-development-libraries/redux/combine-multiple-reducers","prevChallengePath":"/learn/front-end-development-libraries/redux/use-const-for-action-types","id":"5a24c314108439a4d4036153"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"script","ext":"js","contents":"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      return Object.assign({}, state, {\n        status: 'online'\n      });\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/front-end-development-libraries/redux/register-a-store-listener"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
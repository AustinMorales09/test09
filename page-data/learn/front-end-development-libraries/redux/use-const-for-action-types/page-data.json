{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/front-end-development-libraries/redux/use-const-for-action-types",
    "result": {"data":{"challengeNode":{"challenge":{"block":"redux","title":"Use const for Action Types","description":"<section id=\"description\">\n<p>A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as <code>const</code> declarations.</p>\n</section>","id":"5a24c314108439a4d4036152","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Declare <code>LOGIN</code> and <code>LOGOUT</code> as <code>const</code> values and assign them to the strings <code>'LOGIN'</code> and <code>'LOGOUT'</code>, respectively. Then, edit the <code>authReducer()</code> and the action creators to reference these constants instead of string values.</p>\n<p><strong>Note:</strong> It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well.</p>\n</section>","notes":null,"challengeType":6,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"front-end-development-libraries","translationPending":false,"forumTopicId":301450,"fields":{"blockName":"redux","slug":"/learn/front-end-development-libraries/redux/use-const-for-action-types","tests":[{"text":"<p>Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.</p>","testString":"assert(loginUser().type === 'LOGIN');"},{"text":"<p>Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.</p>","testString":"assert(logoutUser().type === 'LOGOUT');"},{"text":"<p>The store should be initialized with an object with property <code>login</code> set to <code>false</code>.</p>","testString":"assert(store.getState().authenticated === false);"},{"text":"<p>Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.</p>","testString":"assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginUser());\n    const afterLogin = store.getState();\n    return (\n      initialState.authenticated === false && afterLogin.authenticated === true\n    );\n  })()\n);"},{"text":"<p>Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.</p>","testString":"assert(\n  (function () {\n    store.dispatch(loginUser());\n    const loggedIn = store.getState();\n    store.dispatch(logoutUser());\n    const afterLogout = store.getState();\n    return (\n      loggedIn.authenticated === true && afterLogout.authenticated === false\n    );\n  })()\n);"},{"text":"<p>The <code>authReducer</code> function should handle multiple action types with a switch statement.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      return (\n        typeof authReducer === 'function' &&\n        getUserInput('index').toString().includes('switch') &&\n        getUserInput('index').toString().includes('case') &&\n        getUserInput('index').toString().includes('default')\n      );\n    })()\n  );"},{"text":"<p><code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.</p>","testString":"const noWhiteSpace = __helpers.removeWhiteSpace(code);\nassert(LOGIN === 'LOGIN' && LOGOUT === 'LOGOUT')\nassert(noWhiteSpace.includes('const'))"},{"text":"<p>The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.</p>","testString":"(getUserInput) =>\n  assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(\n        getUserInput('index').toString()\n      );\n      return (\n        noWhiteSpace.includes('caseLOGIN:') &&\n        noWhiteSpace.includes('caseLOGOUT:') &&\n        noWhiteSpace.includes('type:LOGIN') &&\n        noWhiteSpace.includes('type:LOGOUT')\n      );\n    })()\n  );"}]},"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n    case 'LOGIN': \n      return {\n        authenticated: true\n      }\n    case 'LOGOUT': \n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/front-end-development-libraries/#redux","dashedName":"use-const-for-action-types","certification":"front-end-development-libraries","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"front-end-development-libraries","block":"redux","isFirstStep":false,"template":null,"required":[{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"},{"link":null,"src":"https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"}],"nextBlock":"redux","nextChallengePath":"/learn/front-end-development-libraries/redux/register-a-store-listener","prevChallengePath":"/learn/front-end-development-libraries/redux/use-a-switch-statement-to-handle-multiple-actions","id":"5a24c314108439a4d4036152"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":6,"challengeFiles":[{"name":"script","ext":"js","contents":"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      return Object.assign({}, state, {\n        status: 'online'\n      });\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/front-end-development-libraries/redux/use-const-for-action-types"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
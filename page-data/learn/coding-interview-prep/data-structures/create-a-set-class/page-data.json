{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/create-a-set-class",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Create a Set Class","description":"<section id=\"description\">\n<p>In this exercise we are going to create a class named <code>Set</code> to emulate an abstract data structure called \"set\". A set is like an array, but it cannot contain duplicate values. The typical use for a set is to simply check for the presence of an item. We can see how the ES6 <code>Set</code> object works in the example below:</p>\n<pre><code class=\"language-js\">const set1 = new Set([1, 2, 3, 5, 5, 2, 0]);\nconsole.log(set1);\n// output: {1, 2, 3, 5, 0}\nconsole.log(set1.has(1));\n// output: true\nconsole.log(set1.has(6));\n// output: false\n</code></pre>\n<p>First, we will create an add method that adds a value to our set collection as long as the value does not already exist in the set. Then we will create a remove method that removes a value from the set collection if it already exists. And finally, we will create a size method that returns the number of elements inside the set collection.</p>\n</section>","id":"8d1323c8c441eddfaeb5bdef","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create an <code>add</code> method that adds a unique value to the set collection and returns <code>true</code> if the value was successfully added and <code>false</code> otherwise.</p>\n<p>Create a <code>remove</code> method that accepts a value and checks if it exists in the set. If it does, then this method should remove it from the set collection, and return <code>true</code>. Otherwise, it should return <code>false</code>. Create a <code>size</code> method that returns the size of the set collection.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301632,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/create-a-set-class","tests":[{"text":"<p>Your <code>Set</code> class should have an <code>add</code> method.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    return typeof test.add === 'function';\n  })()\n);"},{"text":"<p>Your <code>add</code> method should not add duplicate values.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.add('a');\n    var vals = test.values();\n    return vals[0] === 'a' && vals[1] === 'b' && vals.length === 2;\n  })()\n);"},{"text":"<p>Your <code>add</code> method should return <code>true</code> when a value has been successfully added.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    var result = test.add('a');\n    return result != undefined && result === true;\n  })()\n);"},{"text":"<p>Your <code>add</code> method should return <code>false</code> when a duplicate value is added.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    var result = test.add('a');\n    return result != undefined && result === false;\n  })()\n);"},{"text":"<p>Your <code>Set</code> class should have a <code>remove</code> method.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    return typeof test.remove === 'function';\n  })()\n);"},{"text":"<p>Your <code>remove</code> method should only remove items that are present in the set.</p>","testString":"assert.deepEqual(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.remove('c');\n    return test.values();\n  })(),\n  ['a', 'b']\n);"},{"text":"<p>Your <code>remove</code> method should remove the given item from the set.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.remove('a');\n    var vals = test.values();\n    return vals[0] === 'b' && vals.length === 1;\n  })()\n);"},{"text":"<p>Your <code>Set</code> class should have a <code>size</code> method.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    return typeof test.size === 'function';\n  })()\n);"},{"text":"<p>The <code>size</code> method should return the number of elements in the collection.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.remove('a');\n    return test.size() === 1;\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"class Set {\n  constructor() {\n    // Dictionary will hold the items of our set\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  // This method will return all the values in the set\n  values() {\n    return Object.values(this.dictionary);\n  }\n\n  // Only change code below this line\n  \n  // Only change code above this line\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"create-a-set-class","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/perform-a-union-on-two-sets","prevChallengePath":"/learn/coding-interview-prep/data-structures/create-a-circular-queue","id":"8d1323c8c441eddfaeb5bdef"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/create-a-set-class"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
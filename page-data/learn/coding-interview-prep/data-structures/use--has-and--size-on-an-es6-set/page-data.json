{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/use--has-and--size-on-an-es6-set",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Use .has and .size on an ES6 Set","description":"<section id=\"description\">\n<p>Let's look at the .has and .size methods available on the ES6 Set object.</p>\n<p>First, create an ES6 Set</p>\n<pre><code class=\"language-js\">var set = new Set([1,2,3]);\n</code></pre>\n<p>The .has method will check if the value is contained within the set.</p>\n<pre><code class=\"language-js\">var hasTwo = set.has(2);\n</code></pre>\n<p>The .size method will return an integer representing the size of the Set</p>\n<pre><code class=\"language-js\">var howBig = set.size;\n</code></pre>\n</section>","id":"587d8255367417b2b2512c72","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>In this exercise we will pass an array and a value to the checkSet() function. Your function should create an ES6 set from the array argument. Find if the set contains the value argument. Find the size of the set. And return those two values in an array.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301717,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/use--has-and--size-on-an-es6-set","tests":[{"text":"<p><code>checkSet([4, 5, 6], 3)</code> should return [ false, 3 ]</p>","testString":"assert(\n  (function () {\n    var test = checkSet([4, 5, 6], 3);\n    return DeepEqual(test, [false, 3]);\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function checkSet(arrToBeSet, checkValue){\n\n   // Only change code below this line\n\n   // Only change code above this line\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"use--has-and--size-on-an-es6-set","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/use-spread-and-notes-for-es5-set-integration","prevChallengePath":"/learn/coding-interview-prep/data-structures/remove-items-from-a-set-in-es6","id":"587d8255367417b2b2512c72"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/use--has-and--size-on-an-es6-set"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
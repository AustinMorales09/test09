{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/find-the-minimum-and-maximum-value-in-a-binary-search-tree",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Find the Minimum and Maximum Value in a Binary Search Tree","description":"<section id=\"description\">\n<p>In this challenge you will define two methods, <code>findMin</code> and <code>findMax</code>. These methods should return the minimum and maximum value held in the binary search tree (don't worry about adding values to the tree for now, we have added some in the background). If you get stuck, reflect on the invariant that must be true for binary search trees: each left subtree is less than or equal to its parent and each right subtree is greater than or equal to its parent. Let's also say that our tree can only store integer values. If the tree is empty, either method should return <code>null</code>.</p>\n</section>","id":"587d8256367417b2b2512c7a","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301642,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/find-the-minimum-and-maximum-value-in-a-binary-search-tree","tests":[{"text":"<p>The <code>BinarySearchTree</code> data structure should exist.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    }\n    return typeof test == 'object';\n  })()\n);"},{"text":"<p>The binary search tree should have a method called <code>findMin</code>.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    return typeof test.findMin == 'function';\n  })()\n);"},{"text":"<p>The binary search tree should have a method called <code>findMax</code>.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    return typeof test.findMax == 'function';\n  })()\n);"},{"text":"<p>The <code>findMin</code> method should return the minimum value in the binary search tree.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.findMin !== 'function') {\n      return false;\n    }\n    test.add(4);\n    test.add(1);\n    test.add(7);\n    test.add(87);\n    test.add(34);\n    test.add(45);\n    test.add(73);\n    test.add(8);\n    return test.findMin() == 1;\n  })()\n);"},{"text":"<p>The <code>findMax</code> method should return the maximum value in the binary search tree.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.findMax !== 'function') {\n      return false;\n    }\n    test.add(4);\n    test.add(1);\n    test.add(7);\n    test.add(87);\n    test.add(34);\n    test.add(45);\n    test.add(73);\n    test.add(8);\n    return test.findMax() == 87;\n  })()\n);"},{"text":"<p>The <code>findMin</code> and <code>findMax</code> methods should return <code>null</code> for an empty tree.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.findMin !== 'function') {\n      return false;\n    }\n    if (typeof test.findMax !== 'function') {\n      return false;\n    }\n    return test.findMin() == null && test.findMax() == null;\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"var displayTree = tree => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n  this.value = value;\n  this.left = null;\n  this.right = null;\n}\nfunction BinarySearchTree() {\n  this.root = null;\n  // Only change code below this line\n  \n  // Only change code above this line\n}","head":"","tail":"BinarySearchTree.prototype = Object.assign(\n  BinarySearchTree.prototype,\n  {\n    add: function(value) {\n      function searchTree(node) {\n        if (value < node.value) {\n          if (node.left == null) {\n            node.left = new Node(value);\n            return;\n          } else if (node.left != null) {\n            return searchTree(node.left);\n          }\n        } else if (value > node.value) {\n          if (node.right == null) {\n            node.right = new Node(value);\n            return;\n          } else if (node.right != null) {\n            return searchTree(node.right);\n          }\n        } else {\n          return null;\n        }\n      }\n\n      var node = this.root;\n      if (node == null) {\n        this.root = new Node(value);\n        return;\n      } else {\n        return searchTree(node);\n      }\n    }\n  }\n);","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"find-the-minimum-and-maximum-value-in-a-binary-search-tree","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/check-if-an-element-is-present-in-a-binary-search-tree","prevChallengePath":"/learn/coding-interview-prep/data-structures/add-a-new-element-to-a-binary-search-tree","id":"587d8256367417b2b2512c7a"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/find-the-minimum-and-maximum-value-in-a-binary-search-tree"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
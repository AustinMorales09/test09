{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/create-a-linked-list-class",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Create a Linked List Class","description":"<section id=\"description\">\n<p>Let's create a <code>linked list</code> class. Every linked list should start out with a few basic properties: a <code>head</code> (the first item in your list) and a <code>length</code> (number of items in your list). Sometimes you'll see implementations of linked lists that incorporate a <code>tail</code> for the last element of the list, but for now we'll just stick with these two. Whenever we add an element to the linked list, our <code>length</code> property should be incremented by one.</p>\n<p>We'll want to have a way to add items to our linked list, so the first method we'll want to create is the <code>add</code> method.</p>\n<p>If our list is empty, adding an element to our linked list is straightforward enough: we just wrap that element in a <code>Node</code> class, and we assign that node to the <code>head</code> of our linked list.</p>\n<p>But what if our list already has one or more members? How do we add an element to the list? Recall that each node in a linked list has a <code>next</code> property. To add a node to the list, find the last node in the list, and point that last node's <code>next</code> property at our new node. (Hint: you know you've reached the end of a linked list when a node's <code>next</code> property is <code>null</code>.)</p>\n</section>","id":"587d8251367417b2b2512c62","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write an add method that assigns the first node you push to the linked list to the <code>head</code>; after that, whenever adding a node, every node should be referenced by the previous node's <code>next</code> property.</p>\n<p>Note</p>\n<p>Your list's <code>length</code> should increase by one every time an element is added to the linked list.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301628,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/create-a-linked-list-class","tests":[{"text":"<p>Your <code>LinkedList</code> class should have a <code>add</code> method.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.add === 'function';\n  })()\n);"},{"text":"<p>Your <code>LinkedList</code> class should assign <code>head</code> to the first node added.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    return test.head().element === 'cat';\n  })()\n);"},{"text":"<p>The previous <code>node</code> in your <code>LinkedList</code> class should have reference to the newest node created.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('fish');\n    return test.head().next.element === 'dog' && test.head().next.next.element === 'fish';\n  })()\n);"},{"text":"<p>The  <code>size</code> of your <code>LinkedList</code> class should equal the amount of nodes in the linked list.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    return test.size() === 2;\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.add = function(element){\n    // Only change code below this line\n\n    // Only change code above this line\n  };\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"create-a-linked-list-class","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/remove-elements-from-a-linked-list","prevChallengePath":"/learn/coding-interview-prep/data-structures/work-with-nodes-in-a-linked-list","id":"587d8251367417b2b2512c62"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/create-a-linked-list-class"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/check-if-tree-is-binary-search-tree",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Check if Tree is Binary Search Tree","description":"<section id=\"description\">\n<p>Since you already know what a binary search tree is, this challenge will establish how it is you can tell that a tree is a binary search tree or not.</p>\n<p>The main distinction of a binary search tree is that the nodes are ordered in an organized fashion. Nodes have at most 2 child nodes (placed to the right and/or left) based on if the child node's value is greater than or equal to (right) or less than (left) the parent node.</p>\n</section>","id":"5cc0c1b32479e176caf3b422","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>In this challenge, you will create a utility for your tree. Write a JavaScript method <code>isBinarySearchTree</code> which takes a tree as an input and returns a boolean value for whether the tree is a binary search tree or not. Use recursion whenever possible.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301624,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/check-if-tree-is-binary-search-tree","tests":[{"text":"<p>Your Binary Search Tree should return true when checked with <code>isBinarySearchTree()</code>.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    test.push(1);\n    test.push(5);\n    test.push(3);\n    test.push(2);\n    test.push(4);\n    return isBinarySearchTree(test) == true;\n  })()\n);"},{"text":"<p><code>isBinarySearchTree()</code> should return false when checked with a tree that is not a binary search tree.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    test.push(1);\n    test.root.left = new Node(1);\n    return isBinarySearchTree(test) == false;\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n  this.value = value;\n  this.left = null;\n  this.right = null;\n}\nfunction BinarySearchTree() {\n  this.root = null;\n}\nfunction isBinarySearchTree(tree) {\n  // Only change code below this line\n  \n  // Only change code above this line\n}","head":"","tail":"BinarySearchTree.prototype.push = function(val) {\n  var root = this.root;\n\n  if (!root) {\n    this.root = new Node(val);\n    return;\n  }\n\n  var currentNode = root;\n  var newNode = new Node(val);\n\n  while (currentNode) {\n    if (val < currentNode.value) {\n      if (!currentNode.left) {\n        currentNode.left = newNode;\n        break;\n      } else {\n        currentNode = currentNode.left;\n      }\n    } else {\n      if (!currentNode.right) {\n        currentNode.right = newNode;\n        break;\n      } else {\n        currentNode = currentNode.right;\n      }\n    }\n  }\n};","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"check-if-tree-is-binary-search-tree","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/find-the-minimum-and-maximum-height-of-a-binary-search-tree","prevChallengePath":"/learn/coding-interview-prep/data-structures/check-if-an-element-is-present-in-a-binary-search-tree","id":"5cc0c1b32479e176caf3b422"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/check-if-tree-is-binary-search-tree"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
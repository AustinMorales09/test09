{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/remove-elements-from-a-linked-list",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Remove Elements from a Linked List","description":"<section id=\"description\">\n<p>The next important method that any implementation of a linked list will need is a <code>remove</code> method. This method should take the element we want to remove as an argument, and then search the list to find and remove the node that contains that element.</p>\n<p>Whenever we remove a node from a linked list, it's important that we don't accidentally orphan the rest of the list in doing so. Recall that every node's <code>next</code> property points to the node that follows it in the list. If we're removing the middle element, say, we'll want to make sure that we have a connection from that element's previous node's <code>next</code> property to the middle element's <code>next</code> property (which is the next node in the list!)</p>\n<p>This might sound really confusing, so let's return to the conga line example so we have a good conceptual model. Picture yourself in a conga line, and the person directly in front of you leaves the line. The person who just left the line no longer has her hands on anyone in line--and you no longer have your hands on the person that left. You step forward and put your hands on next person you see.</p>\n<p>If the element we wish to remove is the <code>head</code> element, we reassign the <code>head</code> to the second node of the linked list.</p>\n</section>","id":"587d8251367417b2b2512c63","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a <code>remove</code> method that takes an element and removes it from the linked list.</p>\n<p><strong>Note:</strong> The <code>length</code> of the list should decrease by one every time an element is removed from the linked list.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301712,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/remove-elements-from-a-linked-list","tests":[{"text":"<p>Your <code>LinkedList</code> class should have a <code>remove</code> method.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.remove === 'function';\n  })()\n);"},{"text":"<p>Your <code>remove</code> method should reassign <code>head</code> to the second node when the first node is removed.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.remove('cat');\n    return test.head().element === 'dog';\n  })()\n);"},{"text":"<p>Your <code>remove</code> method should decrease the <code>length</code> of the linked list by one for every node removed.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('hamster');\n    test.remove('cat');\n    test.remove('fish');\n    return test.size() === 2;\n  })()\n);"},{"text":"<p>Your <code>remove</code> method should reassign the reference of the previous node of the removed node to the removed node's <code>next</code> reference.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('snake');\n    test.add('kitten');\n    test.remove('snake');\n    return test.head().next.next.element === 'kitten';\n  })()\n);"},{"text":"<p>Your <code>remove</code> method should not change the linked list if the element does not exist in the linked list.</p>","testString":"assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    test.remove('elephant');\n    return (\n      JSON.stringify(test.head()) ===\n      '{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n    );\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode  = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    // Only change code below this line\n\n    // Only change code above this line\n  };\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"remove-elements-from-a-linked-list","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/search-within-a-linked-list","prevChallengePath":"/learn/coding-interview-prep/data-structures/create-a-linked-list-class","id":"587d8251367417b2b2512c63"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/remove-elements-from-a-linked-list"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
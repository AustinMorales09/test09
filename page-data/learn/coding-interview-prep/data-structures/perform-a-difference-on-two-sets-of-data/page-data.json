{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/perform-a-difference-on-two-sets-of-data",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Perform a Difference on Two Sets of Data","description":"<section id=\"description\">\n<p>In this exercise we are going to perform a difference on 2 sets of data. We will create a method on our <code>Set</code> data structure called <code>difference</code>. A difference of sets should compare two sets and return the items present in the first set that are absent in the second. This method should take another <code>Set</code> as an argument and return the <code>difference</code> of the two sets.</p>\n<p>For example, if <code>setA = ['a','b','c']</code> and <code>setB = ['a','b','d','e']</code>, then the difference of setA and setB is: <code>setA.difference(setB) = ['c']</code>.</p>\n</section>","id":"587d8254367417b2b2512c6e","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301706,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/perform-a-difference-on-two-sets-of-data","tests":[{"text":"<p>Your <code>Set</code> class should have a <code>difference</code> method.</p>","testString":"assert(\n  (function () {\n    var test = new Set();\n    return typeof test.difference === 'function';\n  })()\n);"},{"text":"<p>Your <code>difference</code> method should return the proper collection.</p>","testString":"assert(\n  (function () {\n    var setA = new Set();\n    var setB = new Set();\n    setA.add('a');\n    setA.add('b');\n    setA.add('c');\n    setB.add('c');\n    setB.add('d');\n    var differenceSetAB = setA.difference(setB);\n    return (\n      differenceSetAB.size() === 2 &&\n      DeepEqual(differenceSetAB.values(), ['a', 'b'])\n    );\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"class Set {\n  constructor() {\n    // This will hold the set\n    this.dictionary = {};\n    this.length = 0;\n  }\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n  // This method will return all the values in the set\n  values() {\n    return Object.keys(this.dictionary);\n  }\n  // This method will add an element to the set\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = true;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will remove an element from a set\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will return the size of the set\n  size() {\n    return this.length;\n  }\n  // This is our union method \n  union(set) {\n    const newSet = new Set();\n    this.values().forEach(value => {\n      newSet.add(value);\n    })\n    set.values().forEach(value => {\n      newSet.add(value);\n    })\n\n    return newSet;\n  }\n  // This is our intersection method\n  intersection(set) {\n    const newSet = new Set();\n\n    let largeSet;\n    let smallSet;\n    if (this.dictionary.length > set.length) {\n      largeSet = this;\n      smallSet = set;\n    } else {\n      largeSet = set;\n      smallSet = this;\n    }\n\n    smallSet.values().forEach(value => {\n      if (largeSet.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n  // Only change code below this line\n  \n  // Only change code above this line\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"perform-a-difference-on-two-sets-of-data","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/perform-a-subset-check-on-two-sets-of-data","prevChallengePath":"/learn/coding-interview-prep/data-structures/perform-an-intersection-on-two-sets-of-data","id":"587d8254367417b2b2512c6e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/perform-a-difference-on-two-sets-of-data"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
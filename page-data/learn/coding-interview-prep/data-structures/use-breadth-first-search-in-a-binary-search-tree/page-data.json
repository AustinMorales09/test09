{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/data-structures/use-breadth-first-search-in-a-binary-search-tree",
    "result": {"data":{"challengeNode":{"challenge":{"block":"data-structures","title":"Use Breadth First Search in a Binary Search Tree","description":"<section id=\"description\">\n<p>Here we will introduce another tree traversal method: breadth-first search. In contrast to the depth-first search methods from the last challenge, breadth-first search explores all the nodes in a given level within a tree before continuing on to the next level. Typically, queues are utilized as helper data structures in the design of breadth-first search algorithms.</p>\n<p>In this method, we start by adding the root node to a queue. Then we begin a loop where we dequeue the first item in the queue, add it to a new array, and then inspect both its child subtrees. If its children are not null, they are each enqueued. This process continues until the queue is empty.</p>\n</section>","id":"587d8258367417b2b2512c7f","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Let's create a breadth-first search method in our tree called <code>levelOrder</code>. This method should return an array containing the values of all the tree nodes, explored in a breadth-first manner. Be sure to return the values in the array, not the nodes themselves. A level should be traversed from left to right. Next, let's write a similar method called <code>reverseLevelOrder</code> which performs the same search but in the reverse direction (right to left) at each level.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301718,"fields":{"blockName":"data-structures","slug":"/learn/coding-interview-prep/data-structures/use-breadth-first-search-in-a-binary-search-tree","tests":[{"text":"<p>The <code>BinarySearchTree</code> data structure should exist.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    }\n    return typeof test == 'object';\n  })()\n);"},{"text":"<p>The binary search tree should have a method called <code>levelOrder</code>.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    return typeof test.levelOrder == 'function';\n  })()\n);"},{"text":"<p>The binary search tree should have a method called <code>reverseLevelOrder</code>.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    return typeof test.reverseLevelOrder == 'function';\n  })()\n);"},{"text":"<p>The <code>levelOrder</code> method should return an array of the tree node values explored in level order.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.levelOrder !== 'function') {\n      return false;\n    }\n    test.add(7);\n    test.add(1);\n    test.add(9);\n    test.add(0);\n    test.add(3);\n    test.add(8);\n    test.add(10);\n    test.add(2);\n    test.add(5);\n    test.add(4);\n    test.add(6);\n    return test.levelOrder().join('') == '719038102546';\n  })()\n);"},{"text":"<p>The <code>reverseLevelOrder</code> method should return an array of the tree node values explored in reverse level order.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.reverseLevelOrder !== 'function') {\n      return false;\n    }\n    test.add(7);\n    test.add(1);\n    test.add(9);\n    test.add(0);\n    test.add(3);\n    test.add(8);\n    test.add(10);\n    test.add(2);\n    test.add(5);\n    test.add(4);\n    test.add(6);\n    return test.reverseLevelOrder().join('') == '791108305264';\n  })()\n);"},{"text":"<p>The <code>levelOrder</code> method should return <code>null</code> for an empty tree.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.levelOrder !== 'function') {\n      return false;\n    }\n    return test.levelOrder() == null;\n  })()\n);"},{"text":"<p>The <code>reverseLevelOrder</code> method should return <code>null</code> for an empty tree.</p>","testString":"assert(\n  (function () {\n    var test = false;\n    if (typeof BinarySearchTree !== 'undefined') {\n      test = new BinarySearchTree();\n    } else {\n      return false;\n    }\n    if (typeof test.reverseLevelOrder !== 'function') {\n      return false;\n    }\n    return test.reverseLevelOrder() == null;\n  })()\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"var displayTree = tree => console.log(JSON.stringify(tree, null, 2));\nfunction Node(value) {\n  this.value = value;\n  this.left = null;\n  this.right = null;\n}\nfunction BinarySearchTree() {\n  this.root = null;\n  // Only change code below this line\n  \n  // Only change code above this line\n}","head":"","tail":"BinarySearchTree.prototype = Object.assign(\n  BinarySearchTree.prototype,\n  {\n    add: function(value) {\n      function searchTree(node) {\n        if (value < node.value) {\n          if (node.left == null) {\n            node.left = new Node(value);\n            return;\n          } else if (node.left != null) {\n            return searchTree(node.left);\n          }\n        } else if (value > node.value) {\n          if (node.right == null) {\n            node.right = new Node(value);\n            return;\n          } else if (node.right != null) {\n            return searchTree(node.right);\n          }\n        } else {\n          return null;\n        }\n      }\n      var node = this.root;\n      if (node == null) {\n        this.root = new Node(value);\n        return;\n      } else {\n        return searchTree(node);\n      }\n    }\n  }\n);","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#data-structures","dashedName":"use-breadth-first-search-in-a-binary-search-tree","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"data-structures","isFirstStep":false,"template":null,"required":[],"nextBlock":"data-structures","nextChallengePath":"/learn/coding-interview-prep/data-structures/delete-a-leaf-node-in-a-binary-search-tree","prevChallengePath":"/learn/coding-interview-prep/data-structures/use-depth-first-search-in-a-binary-search-tree","id":"587d8258367417b2b2512c7f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function dfs(graph, root) {\n    var stack = [];\n    var tempV;\n    var visited = [];\n    var tempVNeighbors = [];\n    stack.push(root);\n    while (stack.length > 0) {\n        tempV = stack.pop();\n        if (visited.indexOf(tempV) == -1) {\n            visited.push(tempV);\n            tempVNeighbors = graph[tempV];\n            for (var i = 0; i < tempVNeighbors.length; i++) {\n                if (tempVNeighbors[i] == 1) {\n                    stack.push(i);\n                }\n            }\n        }\n    }\n    return visited;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/data-structures/use-breadth-first-search-in-a-binary-search-tree"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
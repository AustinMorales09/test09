{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/algorithms/inventory-update",
    "result": {"data":{"challengeNode":{"challenge":{"block":"algorithms","title":"Inventory Update","description":"<section id=\"description\">\n<p>Compare and update the inventory stored in a 2D array against a second 2D array of a fresh delivery. Update the current existing inventory item quantities (in <code>arr1</code>). If an item cannot be found, add the new item and quantity into the inventory array. The returned inventory array should be in alphabetical order by item.</p>\n</section>","id":"a56138aff60341a09ed6c480","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":16019,"fields":{"blockName":"algorithms","slug":"/learn/coding-interview-prep/algorithms/inventory-update","tests":[{"text":"<p>The function <code>updateInventory</code> should return an array.</p>","testString":"assert.isArray(\n  updateInventory(\n    [\n      [21, 'Bowling Ball'],\n      [2, 'Dirty Sock'],\n      [1, 'Hair Pin'],\n      [5, 'Microphone']\n    ],\n    [\n      [2, 'Hair Pin'],\n      [3, 'Half-Eaten Apple'],\n      [67, 'Bowling Ball'],\n      [7, 'Toothpaste']\n    ]\n  )\n);"},{"text":"<p><code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return an array with a length of 6.</p>","testString":"assert.equal(\n  updateInventory(\n    [\n      [21, 'Bowling Ball'],\n      [2, 'Dirty Sock'],\n      [1, 'Hair Pin'],\n      [5, 'Microphone']\n    ],\n    [\n      [2, 'Hair Pin'],\n      [3, 'Half-Eaten Apple'],\n      [67, 'Bowling Ball'],\n      [7, 'Toothpaste']\n    ]\n  ).length,\n  6\n);"},{"text":"<p><code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return <code>[[88, \"Bowling Ball\"], [2, \"Dirty Sock\"], [3, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [5, \"Microphone\"], [7, \"Toothpaste\"]]</code>.</p>","testString":"assert.deepEqual(\n  updateInventory(\n    [\n      [21, 'Bowling Ball'],\n      [2, 'Dirty Sock'],\n      [1, 'Hair Pin'],\n      [5, 'Microphone']\n    ],\n    [\n      [2, 'Hair Pin'],\n      [3, 'Half-Eaten Apple'],\n      [67, 'Bowling Ball'],\n      [7, 'Toothpaste']\n    ]\n  ),\n  [\n    [88, 'Bowling Ball'],\n    [2, 'Dirty Sock'],\n    [3, 'Hair Pin'],\n    [3, 'Half-Eaten Apple'],\n    [5, 'Microphone'],\n    [7, 'Toothpaste']\n  ]\n);"},{"text":"<p><code>updateInventory([[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]], [])</code> should return <code>[[21, \"Bowling Ball\"], [2, \"Dirty Sock\"], [1, \"Hair Pin\"], [5, \"Microphone\"]]</code>.</p>","testString":"assert.deepEqual(\n  updateInventory(\n    [\n      [21, 'Bowling Ball'],\n      [2, 'Dirty Sock'],\n      [1, 'Hair Pin'],\n      [5, 'Microphone']\n    ],\n    []\n  ),\n  [\n    [21, 'Bowling Ball'],\n    [2, 'Dirty Sock'],\n    [1, 'Hair Pin'],\n    [5, 'Microphone']\n  ]\n);"},{"text":"<p><code>updateInventory([], [[2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [67, \"Bowling Ball\"], [7, \"Toothpaste\"]])</code> should return <code>[[67, \"Bowling Ball\"], [2, \"Hair Pin\"], [3, \"Half-Eaten Apple\"], [7, \"Toothpaste\"]]</code>.</p>","testString":"assert.deepEqual(\n  updateInventory(\n    [],\n    [\n      [2, 'Hair Pin'],\n      [3, 'Half-Eaten Apple'],\n      [67, 'Bowling Ball'],\n      [7, 'Toothpaste']\n    ]\n  ),\n  [\n    [67, 'Bowling Ball'],\n    [2, 'Hair Pin'],\n    [3, 'Half-Eaten Apple'],\n    [7, 'Toothpaste']\n  ]\n);"},{"text":"<p><code>updateInventory([[0, \"Bowling Ball\"], [0, \"Dirty Sock\"], [0, \"Hair Pin\"], [0, \"Microphone\"]], [[1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [1, \"Bowling Ball\"], [1, \"Toothpaste\"]])</code> should return <code>[[1, \"Bowling Ball\"], [0, \"Dirty Sock\"], [1, \"Hair Pin\"], [1, \"Half-Eaten Apple\"], [0, \"Microphone\"], [1, \"Toothpaste\"]]</code>.</p>","testString":"assert.deepEqual(\n  updateInventory(\n    [\n      [0, 'Bowling Ball'],\n      [0, 'Dirty Sock'],\n      [0, 'Hair Pin'],\n      [0, 'Microphone']\n    ],\n    [\n      [1, 'Hair Pin'],\n      [1, 'Half-Eaten Apple'],\n      [1, 'Bowling Ball'],\n      [1, 'Toothpaste']\n    ]\n  ),\n  [\n    [1, 'Bowling Ball'],\n    [0, 'Dirty Sock'],\n    [1, 'Hair Pin'],\n    [1, 'Half-Eaten Apple'],\n    [0, 'Microphone'],\n    [1, 'Toothpaste']\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function updateInventory(arr1, arr2) {\n    return arr1;\n}\n\n// Example inventory lists\nvar curInv = [\n    [21, \"Bowling Ball\"],\n    [2, \"Dirty Sock\"],\n    [1, \"Hair Pin\"],\n    [5, \"Microphone\"]\n];\n\nvar newInv = [\n    [2, \"Hair Pin\"],\n    [3, \"Half-Eaten Apple\"],\n    [67, \"Bowling Ball\"],\n    [7, \"Toothpaste\"]\n];\n\nupdateInventory(curInv, newInv);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#algorithms","dashedName":"inventory-update","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"algorithms","isFirstStep":false,"template":null,"required":[],"nextBlock":"algorithms","nextChallengePath":"/learn/coding-interview-prep/algorithms/no-repeats-please","prevChallengePath":"/learn/coding-interview-prep/algorithms/find-the-symmetric-difference","id":"a56138aff60341a09ed6c480"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let binarySearch = (searchList, value) => {\n  let arrayPath = [];\n\n  // set initial L - M - R\n  let left = 0;\n  let right = searchList.length - 1;\n  let middle = Math.floor(right / 2);\n\n  // if first comparison finds value\n  if (searchList[middle] == value) {\n    arrayPath.push(searchList[middle]);\n    return arrayPath;\n  }\n\n  while (searchList[middle] !== value) {\n    // add to output array\n    arrayPath.push(searchList[middle]);\n\n    // not found\n    if (right < left) {\n      return 'Value Not Found';\n    }\n    // value is in left or right portion of array\n    // update L - M - R\n    if (searchList[middle] > value) {\n      right = middle - 1;\n      middle = left + Math.floor((right - left) / 2);\n    } else {\n      left = middle + 1;\n      middle = left + Math.floor((right - left) / 2);\n    }\n\n    // if found update output array and exit\n    if (searchList[middle] == value) {\n      arrayPath.push(searchList[middle]);\n\n      break;\n    }\n  }\n  return arrayPath;\n};","head":"","tail":"const _testArray = [\n  0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 49, 70\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/algorithms/inventory-update"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
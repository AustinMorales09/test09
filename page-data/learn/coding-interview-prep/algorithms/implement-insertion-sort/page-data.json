{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/algorithms/implement-insertion-sort",
    "result": {"data":{"challengeNode":{"challenge":{"block":"algorithms","title":"Implement Insertion Sort","description":"<section id=\"description\">\n<p>The next sorting method we'll look at is insertion sort. This method works by building up a sorted array at the beginning of the list. It begins the sorted array with the first element. Then it inspects the next element and swaps it backwards into the sorted array until it is in sorted position. It continues iterating through the list and swapping new items backwards into the sorted portion until it reaches the end. This algorithm has quadratic time complexity in the average and worst cases.</p>\n<p><strong>Instructions:</strong> Write a function <code>insertionSort</code> which takes an array of integers as input and returns an array of these integers in sorted order from least to greatest.</p>\n</section>","id":"587d8259367417b2b2512c86","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301613,"fields":{"blockName":"algorithms","slug":"/learn/coding-interview-prep/algorithms/implement-insertion-sort","tests":[{"text":"<p><code>insertionSort</code> should be a function.</p>","testString":"assert(typeof insertionSort == 'function');"},{"text":"<p><code>insertionSort</code> should return a sorted array (least to greatest).</p>","testString":"assert(\n  isSorted(\n    insertionSort([\n      1,\n      4,\n      2,\n      8,\n      345,\n      123,\n      43,\n      32,\n      5643,\n      63,\n      123,\n      43,\n      2,\n      55,\n      1,\n      234,\n      92\n    ])\n  )\n);"},{"text":"<p><code>insertionSort([1,4,2,8,345,123,43,32,5643,63,123,43,2,55,1,234,92])</code> should return an array that is unchanged except for order.</p>","testString":"assert.sameMembers(\n  insertionSort([\n    1,\n    4,\n    2,\n    8,\n    345,\n    123,\n    43,\n    32,\n    5643,\n    63,\n    123,\n    43,\n    2,\n    55,\n    1,\n    234,\n    92\n  ]),\n  [1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]\n);"},{"text":"<p><code>insertionSort([5, 4, 33, 2, 8])</code> should return <code>[2, 4, 5, 8, 33]</code>.</p>","testString":"assert.deepEqual(insertionSort([5, 4, 33, 2, 8]), [2, 4, 5, 8, 33])"},{"text":"<p><code>insertionSort</code> should not use the built-in <code>.sort()</code> method.</p>","testString":"assert(isBuiltInSortUsed());"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function insertionSort(array) {\n  // Only change code below this line\n  return array;\n  // Only change code above this line\n}","head":"","tail":"function isSorted(a){\n  for(let i = 0; i < a.length - 1; i++)\n    if(a[i] > a[i + 1])\n      return false;\n  return true;\n}\n\nfunction isBuiltInSortUsed(){\n  let sortUsed = false;\n  Array.prototype.sort = () => sortUsed = true;\n  insertionSort([0, 1]);\n  return !sortUsed;\n}","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#algorithms","dashedName":"implement-insertion-sort","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"algorithms","isFirstStep":false,"template":null,"required":[],"nextBlock":"algorithms","nextChallengePath":"/learn/coding-interview-prep/algorithms/implement-quick-sort","prevChallengePath":"/learn/coding-interview-prep/algorithms/implement-selection-sort","id":"587d8259367417b2b2512c86"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let binarySearch = (searchList, value) => {\n  let arrayPath = [];\n\n  // set initial L - M - R\n  let left = 0;\n  let right = searchList.length - 1;\n  let middle = Math.floor(right / 2);\n\n  // if first comparison finds value\n  if (searchList[middle] == value) {\n    arrayPath.push(searchList[middle]);\n    return arrayPath;\n  }\n\n  while (searchList[middle] !== value) {\n    // add to output array\n    arrayPath.push(searchList[middle]);\n\n    // not found\n    if (right < left) {\n      return 'Value Not Found';\n    }\n    // value is in left or right portion of array\n    // update L - M - R\n    if (searchList[middle] > value) {\n      right = middle - 1;\n      middle = left + Math.floor((right - left) / 2);\n    } else {\n      left = middle + 1;\n      middle = left + Math.floor((right - left) / 2);\n    }\n\n    // if found update output array and exit\n    if (searchList[middle] == value) {\n      arrayPath.push(searchList[middle]);\n\n      break;\n    }\n  }\n  return arrayPath;\n};","head":"","tail":"const _testArray = [\n  0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 49, 70\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/algorithms/implement-insertion-sort"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
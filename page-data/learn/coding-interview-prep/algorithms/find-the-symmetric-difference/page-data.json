{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/algorithms/find-the-symmetric-difference",
    "result": {"data":{"challengeNode":{"challenge":{"block":"algorithms","title":"Find the Symmetric Difference","description":"<section id=\"description\">\n<p>The mathematical term <dfn>symmetric difference</dfn> (<code>△</code> or <code>⊕</code>) of two sets is the set of elements which are in either of the two sets but not in both. For example, for sets <code>A = {1, 2, 3}</code> and <code>B = {2, 3, 4}</code>, <code>A △ B = {1, 4}</code>.</p>\n<p>Symmetric difference is a binary operation, which means it operates on only two elements. So to evaluate an expression involving symmetric differences among <em>three</em> elements (<code>A △ B △ C</code>), you must complete one operation at a time. Thus, for sets <code>A</code> and <code>B</code> above, and <code>C = {2, 3}</code>, <code>A △ B △ C = (A △ B) △ C = {1, 4} △ {2, 3} = {1, 2, 3, 4}</code>.</p>\n</section>","id":"a3f503de51cf954ede28891d","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a function that takes two or more arrays and returns an array of their symmetric difference. The returned array must contain only unique values (<em>no duplicates</em>).</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":301611,"fields":{"blockName":"algorithms","slug":"/learn/coding-interview-prep/algorithms/find-the-symmetric-difference","tests":[{"text":"<p><code>sym([1, 2, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.</p>","testString":"assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4]), [3, 4, 5]);"},{"text":"<p><code>sym([1, 2, 3], [5, 2, 1, 4])</code> should contain only three elements.</p>","testString":"assert.equal(sym([1, 2, 3], [5, 2, 1, 4]).length, 3);"},{"text":"<p><code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.</p>","testString":"assert.sameMembers(sym([1, 2, 3, 3], [5, 2, 1, 4]), [3, 4, 5]);"},{"text":"<p><code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should contain only three elements.</p>","testString":"assert.equal(sym([1, 2, 3, 3], [5, 2, 1, 4]).length, 3);"},{"text":"<p><code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should return <code>[3, 4, 5]</code>.</p>","testString":"assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4, 5]), [3, 4, 5]);"},{"text":"<p><code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should contain only three elements.</p>","testString":"assert.equal(sym([1, 2, 3], [5, 2, 1, 4, 5]).length, 3);"},{"text":"<p><code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should return <code>[1, 4, 5]</code>.</p>","testString":"assert.sameMembers(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]), [1, 4, 5]);"},{"text":"<p><code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should contain only three elements.</p>","testString":"assert.equal(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]).length, 3);"},{"text":"<p><code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should return <code>[1, 4, 5]</code>.</p>","testString":"assert.sameMembers(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]), [1, 4, 5]);"},{"text":"<p><code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should contain only three elements.</p>","testString":"assert.equal(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]).length, 3);"},{"text":"<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should return <code>[2, 3, 4, 6, 7]</code>.</p>","testString":"assert.sameMembers(\n  sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]),\n  [2, 3, 4, 6, 7]\n);"},{"text":"<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should contain only five elements.</p>","testString":"assert.equal(\n  sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]).length,\n  5\n);"},{"text":"<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should return <code>[1, 2, 4, 5, 6, 7, 8, 9]</code>.</p>","testString":"assert.sameMembers(\n  sym(\n    [3, 3, 3, 2, 5],\n    [2, 1, 5, 7],\n    [3, 4, 6, 6],\n    [1, 2, 3],\n    [5, 3, 9, 8],\n    [1]\n  ),\n  [1, 2, 4, 5, 6, 7, 8, 9]\n);"},{"text":"<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should contain only eight elements.</p>","testString":"assert.equal(\n  sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])\n    .length,\n  8\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function sym(args) {\n  return args;\n}\n\nsym([1, 2, 3], [5, 2, 1, 4]);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#algorithms","dashedName":"find-the-symmetric-difference","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"algorithms","isFirstStep":true,"template":null,"required":[],"nextBlock":"algorithms","nextChallengePath":"/learn/coding-interview-prep/algorithms/inventory-update","prevChallengePath":"/learn/the-odin-project/top-introduction-to-flexbox/introduction-flexbox-question-k","id":"a3f503de51cf954ede28891d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let binarySearch = (searchList, value) => {\n  let arrayPath = [];\n\n  // set initial L - M - R\n  let left = 0;\n  let right = searchList.length - 1;\n  let middle = Math.floor(right / 2);\n\n  // if first comparison finds value\n  if (searchList[middle] == value) {\n    arrayPath.push(searchList[middle]);\n    return arrayPath;\n  }\n\n  while (searchList[middle] !== value) {\n    // add to output array\n    arrayPath.push(searchList[middle]);\n\n    // not found\n    if (right < left) {\n      return 'Value Not Found';\n    }\n    // value is in left or right portion of array\n    // update L - M - R\n    if (searchList[middle] > value) {\n      right = middle - 1;\n      middle = left + Math.floor((right - left) / 2);\n    } else {\n      left = middle + 1;\n      middle = left + Math.floor((right - left) / 2);\n    }\n\n    // if found update output array and exit\n    if (searchList[middle] == value) {\n      arrayPath.push(searchList[middle]);\n\n      break;\n    }\n  }\n  return arrayPath;\n};","head":"","tail":"const _testArray = [\n  0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 49, 70\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/algorithms/find-the-symmetric-difference"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
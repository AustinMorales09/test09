{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/coding-interview-prep/algorithms/no-repeats-please",
    "result": {"data":{"challengeNode":{"challenge":{"block":"algorithms","title":"No Repeats Please","description":"<section id=\"description\">\n<p>Return the number of total permutations of the provided string that don't have repeated consecutive letters. Assume that all characters in the provided string are each unique.</p>\n<p>For example, <code>aab</code> should return 2 because it has 6 total permutations (<code>aab</code>, <code>aab</code>, <code>aba</code>, <code>aba</code>, <code>baa</code>, <code>baa</code>), but only 2 of them (<code>aba</code> and <code>aba</code>) don't have the same letter (in this case <code>a</code>) repeating.</p>\n</section>","id":"a7bf700cd123b9a54eef01d5","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"coding-interview-prep","translationPending":false,"forumTopicId":16037,"fields":{"blockName":"algorithms","slug":"/learn/coding-interview-prep/algorithms/no-repeats-please","tests":[{"text":"<p><code>permAlone(\"aab\")</code> should return a number.</p>","testString":"assert.isNumber(permAlone('aab'));"},{"text":"<p><code>permAlone(\"aab\")</code> should return 2.</p>","testString":"assert.strictEqual(permAlone('aab'), 2);"},{"text":"<p><code>permAlone(\"aaa\")</code> should return 0.</p>","testString":"assert.strictEqual(permAlone('aaa'), 0);"},{"text":"<p><code>permAlone(\"aabb\")</code> should return 8.</p>","testString":"assert.strictEqual(permAlone('aabb'), 8);"},{"text":"<p><code>permAlone(\"abcdefa\")</code> should return 3600.</p>","testString":"assert.strictEqual(permAlone('abcdefa'), 3600);"},{"text":"<p><code>permAlone(\"abfdefa\")</code> should return 2640.</p>","testString":"assert.strictEqual(permAlone('abfdefa'), 2640);"},{"text":"<p><code>permAlone(\"zzzzzzzz\")</code> should return 0.</p>","testString":"assert.strictEqual(permAlone('zzzzzzzz'), 0);"},{"text":"<p><code>permAlone(\"a\")</code> should return 1.</p>","testString":"assert.strictEqual(permAlone('a'), 1);"},{"text":"<p><code>permAlone(\"aaab\")</code> should return 0.</p>","testString":"assert.strictEqual(permAlone('aaab'), 0);"},{"text":"<p><code>permAlone(\"aaabb\")</code> should return 12.</p>","testString":"assert.strictEqual(permAlone('aaabb'), 12);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function permAlone(str) {\n  return str;\n}\n\npermAlone('aab');","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/coding-interview-prep/#algorithms","dashedName":"no-repeats-please","certification":"coding-interview-prep","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"coding-interview-prep","block":"algorithms","isFirstStep":false,"template":null,"required":[],"nextBlock":"algorithms","nextChallengePath":"/learn/coding-interview-prep/algorithms/pairwise","prevChallengePath":"/learn/coding-interview-prep/algorithms/inventory-update","id":"a7bf700cd123b9a54eef01d5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"let binarySearch = (searchList, value) => {\n  let arrayPath = [];\n\n  // set initial L - M - R\n  let left = 0;\n  let right = searchList.length - 1;\n  let middle = Math.floor(right / 2);\n\n  // if first comparison finds value\n  if (searchList[middle] == value) {\n    arrayPath.push(searchList[middle]);\n    return arrayPath;\n  }\n\n  while (searchList[middle] !== value) {\n    // add to output array\n    arrayPath.push(searchList[middle]);\n\n    // not found\n    if (right < left) {\n      return 'Value Not Found';\n    }\n    // value is in left or right portion of array\n    // update L - M - R\n    if (searchList[middle] > value) {\n      right = middle - 1;\n      middle = left + Math.floor((right - left) / 2);\n    } else {\n      left = middle + 1;\n      middle = left + Math.floor((right - left) / 2);\n    }\n\n    // if found update output array and exit\n    if (searchList[middle] == value) {\n      arrayPath.push(searchList[middle]);\n\n      break;\n    }\n  }\n  return arrayPath;\n};","head":"","tail":"const _testArray = [\n  0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 49, 70\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/coding-interview-prep/algorithms/no-repeats-please"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/knights-tour",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Knight's tour","description":"<section id=\"description\">\n<p>Knight's Tour Problem: You have an empty <code>width</code> * <code>height</code> chessboard, but for a single knight on some square. The knight must perform a sequence of legal moves that result in the knight visiting every square on the chessboard exactly once. Note that it is <em>not</em> a requirement that the tour be \"closed\"; that is, the knight need not end within a single move of its start position.</p>\n</section>","id":"5a23c84252665b21eecc7ed5","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes <code>width</code> and <code>height</code> as parameters and returns the number of initial positions from where it is possible to achieve the task stated above.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302297,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/knights-tour","tests":[{"text":"<p><code>knightTour</code> should be a function.</p>","testString":"assert(typeof knightTour == 'function');"},{"text":"<p><code>knightTour(6, 6)</code> should return a number.</p>","testString":"assert(typeof knightTour(6, 6) == 'number');"},{"text":"<p><code>knightTour(6, 6)</code> should return <code>36</code>.</p>","testString":"assert.equal(knightTour(6, 6), 36);"},{"text":"<p><code>knightTour(5, 6)</code> should return <code>30</code>.</p>","testString":"assert.equal(knightTour(5, 6), 30);"},{"text":"<p><code>knightTour(4, 6)</code> should return <code>12</code>.</p>","testString":"assert.equal(knightTour(4, 6), 12);"},{"text":"<p><code>knightTour(7, 3)</code> should return <code>10</code>.</p>","testString":"assert.equal(knightTour(7, 3), 10);"},{"text":"<p><code>knightTour(8, 6)</code> should return <code>48</code>.</p>","testString":"assert.equal(knightTour(8, 6), 48);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function knightTour(width, height) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"knights-tour","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/largest-int-from-concatenated-ints","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problemunbounded","id":"5a23c84252665b21eecc7ed5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/knights-tour"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
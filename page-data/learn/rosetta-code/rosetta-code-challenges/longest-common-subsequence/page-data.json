{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/longest-common-subsequence",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Longest common subsequence","description":"<section id=\"description\">\n<p>The <strong>longest common subsequence</strong> (or <strong>LCS</strong>) of groups A and B is the longest group of elements from A and B that are common between the two groups and in the same order in each group. For example, the sequences <code>1234</code> and <code>1224533324</code> have an LCS of <code>1234</code>:</p>\n<p><u>1234</u></p>\n<p><u>12</u>245<u>3</u>332<u>4</u></p>\n<p>For a string example, consider the sequences <code>thisisatest</code> and <code>testing123testing</code>. An LCS would be <code>tsitest</code>:</p>\n<p><u>t</u>hi<u>si</u>sa<u>test</u></p>\n<p><u>t</u>e<u>s</u>t<u>i</u>ng123<u>test</u>ing.</p>\n<p>Your code only needs to deal with strings.</p>\n</section>","id":"5e6dd1278e6ca105cde40ea9","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a case-sensitive function that returns the LCS of two strings. You don't need to show multiple LCS's.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385271,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/longest-common-subsequence","tests":[{"text":"<p><code>lcs</code> should be a function.</p>","testString":"assert(typeof lcs == 'function');"},{"text":"<p><code>lcs(\"thisisatest\", \"testing123testing\")</code> should return a string.</p>","testString":"assert(typeof lcs('thisisatest', 'testing123testing') == 'string');"},{"text":"<p><code>lcs(\"thisisatest\", \"testing123testing\")</code> should return <code>\"tsitest\"</code>.</p>","testString":"assert.equal(lcs('thisisatest', 'testing123testing'), 'tsitest');"},{"text":"<p><code>lcs(\"ABCDGH\", \"AEDFHR\")</code> should return <code>\"ADH\"</code>.</p>","testString":"assert.equal(lcs('ABCDGH', 'AEDFHR'), 'ADH');"},{"text":"<p><code>lcs(\"AGGTAB\", \"GXTXAYB\")</code> should return <code>\"GTAB\"</code>.</p>","testString":"assert.equal(lcs('AGGTAB', 'GXTXAYB'), 'GTAB');"},{"text":"<p><code>lcs(\"BDACDB\", \"BDCB\")</code> should return <code>\"BDCB\"</code>.</p>","testString":"assert.equal(lcs('BDACDB', 'BDCB'), 'BDCB');"},{"text":"<p><code>lcs(\"ABAZDC\", \"BACBAD\")</code> should return <code>\"ABAD\"</code>.</p>","testString":"assert.equal(lcs('ABAZDC', 'BACBAD'), 'ABAD');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function lcs(a, b) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"longest-common-subsequence","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/longest-increasing-subsequence","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/long-multiplication","id":"5e6dd1278e6ca105cde40ea9"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/longest-common-subsequence"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/zhang-suen-thinning-algorithm",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Zhang-Suen thinning algorithm","description":"<section id=\"description\">\n<p>This is an algorithm used to thin a black and white i.e. one bit per pixel images. For example, with an input image of:</p>\n<pre><code class=\"language-js\">const testImage1 = [\n '                               ',\n '#########       ########       ',\n '###   ####     ####  ####      ',\n '###    ###     ###    ###      ',\n '###   ####     ###             ',\n '#########      ###             ',\n '### ####       ###    ###      ',\n '###  ####  ### ####  #### ###  ',\n '###   #### ###  ########  ###  ',\n '                               '\n];\n</code></pre>\n<p>It produces the thinned output:</p>\n<pre><code class=\"language-js\">[ '                               ',\n  '########         ######        ',\n  '#      #        ##             ',\n  '#       #       #              ',\n  '#      #        #              ',\n  '###### #        #              ',\n  '#     ##        #              ',\n  '#      #    #   ##    ##   #   ',\n  '#       #         ####         ',\n  '                               ' ];\n</code></pre>\n<h2>Algorithm</h2>\n<p>Assume black pixels are one and white pixels zero, and that the input image is a rectangular N by M array of ones and zeroes. The algorithm operates on all black pixels P1 that can have eight neighbours. The neighbours are, in order, arranged as:</p>\n<p>$$\\begin{array}{|c|c|c|}\n\\hline\nP9 &#x26; P2              &#x26; P3\\\\ \\hline\nP8 &#x26; \\boldsymbol{P1} &#x26; P4\\\\ \\hline\nP7 &#x26; P6              &#x26; P5\\\\ \\hline\n\\end{array}$$</p>\n<p>Obviously the boundary pixels of the image cannot have the full eight neighbours.</p>\n<ul>\n<li>Define $A(P1)$ = the number of transitions from white to black, ($0 \\to 1$) in the sequence P2, P3, P4, P5, P6, P7, P8, P9, P2. (Note the extra P2 at the end - it is circular).</li>\n<li>Define $B(P1)$ = the number of black pixel neighbours of P1. ($= \\sum(P2 \\ldots P9)$)</li>\n</ul>\n<p><strong>Step 1:</strong></p>\n<p>All pixels are tested and pixels satisfying all the following conditions (simultaneously) are just noted at this stage.</p>\n<ol>\n<li>The pixel is black and has eight neighbours</li>\n<li>$2 \\le B(P1) \\le 6$</li>\n<li>$A(P1) = 1$</li>\n<li>At least one of $P2$, $P4$ and $P6$ is white</li>\n<li>At least one of $P4$, $P6$ and $P8$ is white</li>\n</ol>\n<p>After iterating over the image and collecting all the pixels satisfying all step 1 conditions, all these condition satisfying pixels are set to white.</p>\n<p><strong>Step 2:</strong></p>\n<p>All pixels are again tested and pixels satisfying all the following conditions are just noted at this stage.</p>\n<ol>\n<li>The pixel is black and has eight neighbours</li>\n<li>$2 \\le B(P1) \\le 6$</li>\n<li>$A(P1) = 1$</li>\n<li>At least one of $P2$, $P4$ and $P8$ is white</li>\n<li>At least one of $P2$, $P6$ and $P8$ is white</li>\n</ol>\n<p>After iterating over the image and collecting all the pixels satisfying all step 2 conditions, all these condition satisfying pixels are again set to white.</p>\n<p><strong>Iteration:</strong></p>\n<p>If any pixels were set in this round of either step 1 or step 2 then all steps are repeated until no image pixels are so changed.</p>\n</section>","id":"594810f028c0303b75339ad7","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a routine to perform Zhang-Suen thinning on the provided <code>image</code>, an array of strings, where each string represents single line of the image. In the string, <code>#</code> represents black pixel, and whitespace represents white pixel. Function should return thinned image, using the same representation.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302347,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/zhang-suen-thinning-algorithm","tests":[{"text":"<p><code>thinImage</code> should be a function.</p>","testString":"assert.equal(typeof thinImage, 'function');"},{"text":"<p><code>thinImage</code> should return an array.</p>","testString":"assert(Array.isArray(thinImage(_testImage1)));"},{"text":"<p><code>thinImage</code> should return an array of strings.</p>","testString":"assert.equal(typeof thinImage(_testImage1)[0], 'string');"},{"text":"<p><code>thinImage(testImage1)</code> should return a thinned image as in the example.</p>","testString":"assert.deepEqual(thinImage(_testImage1), expected1);"},{"text":"<p><code>thinImage(testImage2)</code> should return a thinned image.</p>","testString":"assert.deepEqual(thinImage(_testImage2), expected2);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function thinImage(image) {\n\n}\n\nconst testImage1 = [\n  '                               ',\n  '#########       ########       ',\n  '###   ####     ####  ####      ',\n  '###    ###     ###    ###      ',\n  '###   ####     ###             ',\n  '#########      ###             ',\n  '### ####       ###    ###      ',\n  '###  ####  ### ####  #### ###  ',\n  '###   #### ###  ########  ###  ',\n  '                               '\n];","head":"","tail":"const _testImage1 = [\n  '                               ',\n  '#########       ########       ',\n  '###   ####     ####  ####      ',\n  '###    ###     ###    ###      ',\n  '###   ####     ###             ',\n  '#########      ###             ',\n  '### ####       ###    ###      ',\n  '###  ####  ### ####  #### ###  ',\n  '###   #### ###  ########  ###  ',\n  '                               '\n];\nconst expected1 = [\n  '                               ',\n  '########         ######        ',\n  '#      #        ##             ',\n  '#       #       #              ',\n  '#      #        #              ',\n  '###### #        #              ',\n  '#     ##        #              ',\n  '#      #    #   ##    ##   #   ',\n  '#       #         ####         ',\n  '                               '\n];\nconst _testImage2 = [\n  '                                                          ',\n  ' #################                   #############        ',\n  ' ##################               ################        ',\n  ' ###################            ##################        ',\n  ' ########     #######          ###################        ',\n  '   ######     #######         #######       ######        ',\n  '   ######     #######        #######                      ',\n  '   #################         #######                      ',\n  '   ################          #######                      ',\n  '   #################         #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######        #######                      ',\n  '   ######     #######         #######       ######        ',\n  ' ########     #######          ###################        ',\n  ' ########     ####### ######    ################## ###### ',\n  ' ########     ####### ######      ################ ###### ',\n  ' ########     ####### ######         ############# ###### ',\n  '                                                          '];\nconst expected2 = [\n  '                                                          ',\n  '                                                          ',\n  '    # ##########                       #######            ',\n  '     ##        #                   ####       #           ',\n  '     #          #                 ##                      ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     ############               #                         ',\n  '     #          #               #                         ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #          #                #                        ',\n  '     #                            ##                      ',\n  '     #                             ############           ',\n  '                       ###                          ###   ',\n  '                                                          ',\n  '                                                          '\n];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"zhang-suen-thinning-algorithm","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/zig-zag-matrix","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/zeckendorf-number-representation","id":"594810f028c0303b75339ad7"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/zhang-suen-thinning-algorithm"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
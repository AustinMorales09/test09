{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/knapsack-problem0-1",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Knapsack problem/0-1","description":"<section id=\"description\">\n<p>The 0-1 knapsack problem is defined as follows:</p>\n<p>You are given an array of objects representing items to be put in a knapsack. The objects have 3 attributes: name, weight, and value. The items need to be selected so that the total weight does not exceed the maximum weight and the value is maximized.</p>\n</section>","id":"5a23c84252665b21eecc7ed1","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to solve the knapsack problem. The function is given the array of objects and the maximum weight as parameters. It should return the maximum total value possible.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":323649,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problem0-1","tests":[{"text":"<p><code>knapsack([{ name:'map', weight:9, value:150 }, { name:'compass', weight:13, value:35 }, { name:'water', weight:153, value:200 }, { name:'sandwich', weight:50, value:160 }, { name:'glucose', weight:15, value:60 }, { name:'tin', weight:68, value:45 }, { name:'banana', weight:27, value:60 }, { name:'apple', weight:39, value:40 }], 100)</code> should return <code>405</code>.</p>","testString":"assert.equal(\n  knapsack(\n    [\n      { name: 'map', weight: 9, value: 150 },\n      { name: 'compass', weight: 13, value: 35 },\n      { name: 'water', weight: 153, value: 200 },\n      { name: 'sandwich', weight: 50, value: 160 },\n      { name: 'glucose', weight: 15, value: 60 },\n      { name: 'tin', weight: 68, value: 45 },\n      { name: 'banana', weight: 27, value: 60 },\n      { name: 'apple', weight: 39, value: 40 }\n    ],\n    100\n  ),\n  405\n);"},{"text":"<p><code>knapsack([{ name:'map', weight:9, value:150 }, { name:'compass', weight:13, value:35 }, { name:'water', weight:153, value:200 }, { name:'sandwich', weight:50, value:160 }, { name:'glucose', weight:15, value:60 }, { name:'tin', weight:68, value:45 }, { name:'banana', weight:27, value:60 }, { name:'apple', weight:39, value:40 }], 200)</code> should return <code>510</code>.</p>","testString":"assert.equal(\n  knapsack(\n    [\n      { name: 'map', weight: 9, value: 150 },\n      { name: 'compass', weight: 13, value: 35 },\n      { name: 'water', weight: 153, value: 200 },\n      { name: 'sandwich', weight: 50, value: 160 },\n      { name: 'glucose', weight: 15, value: 60 },\n      { name: 'tin', weight: 68, value: 45 },\n      { name: 'banana', weight: 27, value: 60 },\n      { name: 'apple', weight: 39, value: 40 }\n    ],\n    200\n  ),\n  510\n);"},{"text":"<p><code>knapsack([{ name:'cheese', weight:23, value:30 }, { name:'beer', weight:52, value:10 }, { name:'suntan cream', weight:11, value:70 }, { name:'camera', weight:32, value:30 }, { name:'T-shirt', weight:24, value:15 }, { name:'trousers', weight:48, value:10 }, { name:'umbrella', weight:73, value:40 }], 100)</code> should return <code>145</code>.</p>","testString":"assert.equal(\n  knapsack(\n    [\n      { name: 'cheese', weight: 23, value: 30 },\n      { name: 'beer', weight: 52, value: 10 },\n      { name: 'suntan cream', weight: 11, value: 70 },\n      { name: 'camera', weight: 32, value: 30 },\n      { name: 'T-shirt', weight: 24, value: 15 },\n      { name: 'trousers', weight: 48, value: 10 },\n      { name: 'umbrella', weight: 73, value: 40 }\n    ],\n    100\n  ),\n  145\n);"},{"text":"<p><code>knapsack([{ name:'cheese', weight:23, value:30 }, { name:'beer', weight:52, value:10 }, { name:'suntan cream', weight:11, value:70 }, { name:'camera', weight:32, value:30 }, { name:'T-shirt', weight:24, value:15 }, { name:'trousers', weight:48, value:10 }, { name:'umbrella', weight:73, value:40 }], 200)</code> should return <code>185</code>.</p>","testString":"assert.equal(\n  knapsack(\n    [\n      { name: 'cheese', weight: 23, value: 30 },\n      { name: 'beer', weight: 52, value: 10 },\n      { name: 'suntan cream', weight: 11, value: 70 },\n      { name: 'camera', weight: 32, value: 30 },\n      { name: 'T-shirt', weight: 24, value: 15 },\n      { name: 'trousers', weight: 48, value: 10 },\n      { name: 'umbrella', weight: 73, value: 40 }\n    ],\n    200\n  ),\n  185\n);"},{"text":"<p><code>knapsack([{ name:'waterproof trousers', weight:42, value:70 }, { name:'waterproof overclothes', weight:43, value:75 }, { name:'note-case', weight:22, value:80 }, { name:'sunglasses', weight:7, value:20 }, { name:'towel', weight:18, value:12 }, { name:'socks', weight:4, value:50 }, { name:'book', weight:30, value:10 }], 100)</code> should return <code>237</code>.</p>","testString":"assert.equal(\n  knapsack(\n    [\n      { name: 'waterproof trousers', weight: 42, value: 70 },\n      { name: 'waterproof overclothes', weight: 43, value: 75 },\n      { name: 'note-case', weight: 22, value: 80 },\n      { name: 'sunglasses', weight: 7, value: 20 },\n      { name: 'towel', weight: 18, value: 12 },\n      { name: 'socks', weight: 4, value: 50 },\n      { name: 'book', weight: 30, value: 10 }\n    ],\n    100\n  ),\n  237\n);"},{"text":"<p><code>knapsack([{ name:'waterproof trousers', weight:42, value:70 }, { name:'waterproof overclothes', weight:43, value:75 }, { name:'note-case', weight:22, value:80 }, { name:'sunglasses', weight:7, value:20 }, { name:'towel', weight:18, value:12 }, { name:'socks', weight:4, value:50 }, { name:'book', weight:30, value:10 }], 200)</code> should return <code>317</code>.'</p>","testString":"assert.equal(\n  knapsack(\n    [\n      { name: 'waterproof trousers', weight: 42, value: 70 },\n      { name: 'waterproof overclothes', weight: 43, value: 75 },\n      { name: 'note-case', weight: 22, value: 80 },\n      { name: 'sunglasses', weight: 7, value: 20 },\n      { name: 'towel', weight: 18, value: 12 },\n      { name: 'socks', weight: 4, value: 50 },\n      { name: 'book', weight: 30, value: 10 }\n    ],\n    200\n  ),\n  317\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function knapsack(items, maxweight) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"knapsack-problem0-1","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problembounded","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/kaprekar-numbers","id":"5a23c84252665b21eecc7ed1"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problem0-1"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
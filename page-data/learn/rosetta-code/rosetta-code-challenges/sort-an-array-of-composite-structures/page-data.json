{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/sort-an-array-of-composite-structures",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Sort an array of composite structures","description":"<section id=\"description\">\n<p>Write a function that takes an array of objects as a parameter. The function should sort the array according to the 'key' attribute of the objects and return the sorted array.</p>\n</section>","id":"5a23c84252665b21eecc7ffe","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302306,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/sort-an-array-of-composite-structures","tests":[{"text":"<p><code>sortByKey</code> should be a function.</p>","testString":"assert(typeof sortByKey == 'function');"},{"text":"<p><code>sortByKey([{key: 3, value: \"foo\"}, {key: 2, value: \"bar\"}, {key: 4, value: \"baz\"}, {key: 1, value: 42}, {key: 5, value: \"another string\"}])</code> should return an array.</p>","testString":"assert(\n  Array.isArray(\n    sortByKey([\n      { key: 3, value: 'foo' },\n      { key: 2, value: 'bar' },\n      { key: 4, value: 'baz' },\n      { key: 1, value: 42 },\n      { key: 5, value: 'another string' }\n    ])\n  )\n);"},{"text":"<p><code>sortByKey([{key: 3, value: \"foo\"}, {key: 2, value: \"bar\"}, {key: 4, value: \"baz\"}, {key: 1, value: 42}, {key: 5, value: \"another string\"}])</code> should return <code>[{key: 1, value: 42}, {key: 2, value: \"bar\"}, {key: 3, value: \"foo\"}, {key: 4, value: \"baz\"}, {key: 5, value: \"another string\"}]</code>.</p>","testString":"assert.deepEqual(\n  sortByKey([\n    { key: 3, value: 'foo' },\n    { key: 2, value: 'bar' },\n    { key: 4, value: 'baz' },\n    { key: 1, value: 42 },\n    { key: 5, value: 'another string' }\n  ]),\n  [\n    { key: 1, value: 42 },\n    { key: 2, value: 'bar' },\n    { key: 3, value: 'foo' },\n    { key: 4, value: 'baz' },\n    { key: 5, value: 'another string' }\n  ]\n);"},{"text":"<p><code>sortByKey([{key: 3, name: \"Joe\"}, {key: 4, name: \"Bill\"}, {key: 20, name: \"Alice\"}, {key: 5, name: \"Harry\"}])</code> should return <code>[{key: 3, name: \"Joe\"}, {key: 4, name: \"Bill\"}, {key: 5, name: \"Harry\"}, {key: 20, name: \"Alice\"}]</code>.</p>","testString":"assert.deepEqual(\n  sortByKey([\n    { key: 3, name: 'Joe' },\n    { key: 4, name: 'Bill' },\n    { key: 20, name: 'Alice' },\n    { key: 5, name: 'Harry' }\n  ]),\n  [\n    { key: 3, name: 'Joe' },\n    { key: 4, name: 'Bill' },\n    { key: 5, name: 'Harry' },\n    { key: 20, name: 'Alice' }\n  ]\n);"},{"text":"<p><code>sortByKey([{key: 2341, name: \"Adam\"}, {key: 122, name: \"Bernie\"}, {key: 19, name: \"David\"}, {key: 5531, name: \"Joe\"}, {key: 1234, name: \"Walter\"}])</code> should return <code>[{key: 19, name: \"David\"}, {key: 122, name: \"Bernie\"}, {key: 1234, name: \"Walter\"}, {key: 2341, name: \"Adam\"}, {key: 5531, name: \"Joe\"}]</code>.</p>","testString":"assert.deepEqual(\n  sortByKey([\n    { key: 2341, name: 'Adam' },\n    { key: 122, name: 'Bernie' },\n    { key: 19, name: 'David' },\n    { key: 5531, name: 'Joe' },\n    { key: 1234, name: 'Walter' }\n  ]),\n  [\n    { key: 19, name: 'David' },\n    { key: 122, name: 'Bernie' },\n    { key: 1234, name: 'Walter' },\n    { key: 2341, name: 'Adam' },\n    { key: 5531, name: 'Joe' }\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function sortByKey(arr) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"sort-an-array-of-composite-structures","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sort-disjoint-sublist","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sha-256","id":"5a23c84252665b21eecc7ffe"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/sort-an-array-of-composite-structures"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
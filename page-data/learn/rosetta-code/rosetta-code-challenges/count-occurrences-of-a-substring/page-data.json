{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/count-occurrences-of-a-substring",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Count occurrences of a substring","description":"<section id=\"description\">\n<p>Create a function, or show a built-in function, to count the number of non-overlapping occurrences of a substring inside a string.</p>\n<p>The function should take two arguments:</p>\n<ul>\n  <li>the first argument being the string to search, and</li>\n  <li>the second a substring to be searched for.</li>\n</ul>\n<p>It should return an integer count.</p>\n<p>The matching should yield the highest number of non-overlapping matches.</p>\n<p>In general, this essentially means matching from left-to-right or right-to-left.</p>\n</section>","id":"596fda99c69f779975a1b67d","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302237,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/count-occurrences-of-a-substring","tests":[{"text":"<p><code>countSubstring</code> should be a function.</p>","testString":"assert(typeof countSubstring === 'function');"},{"text":"<p><code>countSubstring(\"the three truths\", \"th\")</code> should return <code>3</code>.</p>","testString":"assert.equal(countSubstring(testCases[0], searchString[0]), results[0]);"},{"text":"<p><code>countSubstring(\"ababababab\", \"abab\")</code> should return <code>2</code>.</p>","testString":"assert.equal(countSubstring(testCases[1], searchString[1]), results[1]);"},{"text":"<p><code>countSubstring(\"abaabba*bbaba*bbab\", \"a*b\")</code> should return <code>2</code>.</p>","testString":"assert.equal(countSubstring(testCases[2], searchString[2]), results[2]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function countSubstring(str, subStr) {\n\n  return true;\n}","head":"","tail":"const testCases = ['the three truths', 'ababababab', 'abaabba*bbaba*bbab'];\nconst searchString = ['th', 'abab', 'a*b'];\nconst results = [3, 2, 2];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"count-occurrences-of-a-substring","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/count-the-coins","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/convert-seconds-to-compound-duration","id":"596fda99c69f779975a1b67d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/count-occurrences-of-a-substring"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
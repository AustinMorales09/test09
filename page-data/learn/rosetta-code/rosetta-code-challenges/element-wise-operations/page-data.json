{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/element-wise-operations",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Element-wise operations","description":"<section id=\"description\">\n<p>Implement basic element-wise matrix-matrix and scalar-matrix operations.</p>\n<p><strong>Implement:</strong></p>\n<ul>\n  <li>addition</li>\n  <li>subtraction</li>\n  <li>multiplication</li>\n  <li>division</li>\n  <li>exponentiation</li>\n</ul>\n<p>The first parameter will be the operation to be performed, for example, \"m_add\" for matrix addition and \"s_add\" for scalar addition. The second and third parameters will be the matrices on which the operations are to be performed.</p>\n</section>","id":"599c333915e0ea32d04d4bec","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302252,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/element-wise-operations","tests":[{"text":"<p><code>operation</code> should be a function.</p>","testString":"assert(typeof operation === 'function');"},{"text":"<p><code>operation(\"m_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    'm_add',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [2, 4],\n    [6, 8]\n  ]\n);"},{"text":"<p><code>operation(\"s_add\",[[1,2],[3,4]],2)</code> should return <code>[[3,4],[5,6]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    's_add',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    2\n  ),\n  [\n    [3, 4],\n    [5, 6]\n  ]\n);"},{"text":"<p><code>operation(\"m_sub\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    'm_sub',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [0, 0],\n    [0, 0]\n  ]\n);"},{"text":"<p><code>operation(\"m_mult\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    'm_mult',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [1, 4],\n    [9, 16]\n  ]\n);"},{"text":"<p><code>operation(\"m_div\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    'm_div',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [1, 1],\n    [1, 1]\n  ]\n);"},{"text":"<p><code>operation(\"m_exp\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    'm_exp',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [1, 4],\n    [27, 256]\n  ]\n);"},{"text":"<p><code>operation(\"m_add\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.</p>","testString":"assert.deepEqual(\n  operation(\n    'm_add',\n    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8]\n    ],\n    [\n      [9, 10, 11, 12],\n      [13, 14, 15, 16]\n    ]\n  ),\n  [\n    [10, 12, 14, 16],\n    [18, 20, 22, 24]\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function operation(op, arr1, arr2) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"element-wise-operations","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/emirp-primes","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/dot-product","id":"599c333915e0ea32d04d4bec"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/element-wise-operations"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
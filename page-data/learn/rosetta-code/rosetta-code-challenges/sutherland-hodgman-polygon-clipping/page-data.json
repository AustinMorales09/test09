{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/sutherland-hodgman-polygon-clipping",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Sutherland-Hodgman polygon clipping","description":"<section id=\"description\">\n<p>The Sutherland-Hodgman clipping algorithm finds the polygon that is the intersection between an arbitrary polygon (the \"subject polygon\") and a convex polygon (the \"clip polygon\"). It is used in computer graphics (especially 2D graphics) to reduce the complexity of a scene being displayed by eliminating parts of a polygon that do not need to be displayed. Take the closed polygon defined by the points:</p>\n<pre>[(50, 150), (200, 50), (350, 150), (350, 300), (250, 300), (200, 250), (150, 350), (100, 250), (100, 200)]</pre>\n<p>and clip it by the rectangle defined by the points:</p>\n<pre>[(100, 100), (300, 100), (300, 300), (100, 300)]</pre>\n</section>","id":"5a23c84252665b21eecc8045","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes 2 arrays as parameters. The first array contains the points of the subject polygon and the second array contains the points of the clipping polygon. The function should return an array containing the points of the clipped polygon. Each number should be rounded to 3 decimal places.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302336,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/sutherland-hodgman-polygon-clipping","tests":[{"text":"<p><code>clip</code> should be a function.</p>","testString":"assert(typeof clip == 'function');"},{"text":"<p><code>clip([[50, 150], [200, 50], [350, 150], [350, 300], [250, 300], [200, 250], [150, 350], [100, 250], [100, 200]], [[100, 100], [300, 100], [300, 300], [100, 300]])</code> should return an array.</p>","testString":"assert(\n  Array.isArray(\n    clip(\n      [\n        [50, 150],\n        [200, 50],\n        [350, 150],\n        [350, 300],\n        [250, 300],\n        [200, 250],\n        [150, 350],\n        [100, 250],\n        [100, 200]\n      ],\n      [\n        [100, 100],\n        [300, 100],\n        [300, 300],\n        [100, 300]\n      ]\n    )\n  )\n);"},{"text":"<p><code>clip([[50, 150], [200, 50], [350, 150], [350, 300], [250, 300], [200, 250], [150, 350], [100, 250], [100, 200]], [[100, 100], [300, 100], [300, 300], [100, 300]])</code> should return <code>[[100, 116.667], [125, 100], [275, 100], [300, 116.667], [300, 300], [250, 300], [200, 250], [175, 300], [125, 300], [100, 250]]</code>.</p>","testString":"assert.deepEqual(\n  clip(\n    [\n      [50, 150],\n      [200, 50],\n      [350, 150],\n      [350, 300],\n      [250, 300],\n      [200, 250],\n      [150, 350],\n      [100, 250],\n      [100, 200]\n    ],\n    [\n      [100, 100],\n      [300, 100],\n      [300, 300],\n      [100, 300]\n    ]\n  ),\n  [\n    [100, 116.667],\n    [125, 100],\n    [275, 100],\n    [300, 116.667],\n    [300, 300],\n    [250, 300],\n    [200, 250],\n    [175, 300],\n    [125, 300],\n    [100, 250]\n  ]\n);"},{"text":"<p><code>clip([[150, 200], [400, 450], [30, 50]], [[10, 10], [300, 200], [400, 600], [100, 300]])</code> should return <code>[[150, 200], [350, 400], [348.611, 394.444], [30, 50]]</code>.</p>","testString":"assert.deepEqual(\n  clip(\n    [\n      [150, 200],\n      [400, 450],\n      [30, 50]\n    ],\n    [\n      [10, 10],\n      [300, 200],\n      [400, 600],\n      [100, 300]\n    ]\n  ),\n  [\n    [150, 200],\n    [350, 400],\n    [348.611, 394.444],\n    [30, 50]\n  ]\n);"},{"text":"<p><code>clip([[250, 200], [100, 450], [130, 250]], [[50, 60], [100, 230], [400, 600], [100, 300]])</code> should return <code>[[129.167, 329.167], [119.565, 319.565], [121.854, 304.305]]</code>.</p>","testString":"assert.deepEqual(\n  clip(\n    [\n      [250, 200],\n      [100, 450],\n      [130, 250]\n    ],\n    [\n      [50, 60],\n      [100, 230],\n      [400, 600],\n      [100, 300]\n    ]\n  ),\n  [\n    [129.167, 329.167],\n    [119.565, 319.565],\n    [121.854, 304.305]\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function clip(subjectPolygon, clipPolygon) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"sutherland-hodgman-polygon-clipping","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/symmetric-difference","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sum-to-100","id":"5a23c84252665b21eecc8045"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/sutherland-hodgman-polygon-clipping"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
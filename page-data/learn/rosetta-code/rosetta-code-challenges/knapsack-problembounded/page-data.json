{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/knapsack-problembounded",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Knapsack problem/Bounded","description":"<section id=\"description\">\n<p>The bounded knapsack problem is defined as follows:</p>\n<p>You are given an array of objects representing items to be put in a knapsack. The objects have 4 attributes: name, pieces (the number of the particular item), weight, and value. The items need to be selected so that the total weight does not exceed the maximum weight and the value is maximized. Keep in mind that each item can appear between 0 and <code>pieces</code> times.</p>\n</section>","id":"5a23c84252665b21eecc7ed2","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to solve the knapsack problem. The function is given the array of objects and the maximum weight as parameters. It should return the maximum total value possible.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":323652,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problembounded","tests":[{"text":"<p><code>findBestPack([{ name:'map', weight:9, value:150, pieces:1 }, { name:'compass', weight:13, value:35, pieces:1 }, { name:'water', weight:153, value:200, pieces:2 }, { name:'sandwich', weight:50, value:60, pieces:2 }, { name:'glucose', weight:15, value:60, pieces:2 }, { name:'tin', weight:68, value:45, pieces:3 }, { name:'banana', weight:27, value:60, pieces:3 }, { name:'apple', weight:39, value:40, pieces:3 }, { name:'cheese', weight:23, value:30, pieces:1 }, { name:'beer', weight:52, value:10, pieces:3 }, { name:'suntan, cream', weight:11, value:70, pieces:1 }, { name:'camera', weight:32, value:30, pieces:1 }, { name:'T-shirt', weight:24, value:15, pieces:2 }], 300)</code> should return <code>755</code>.</p>","testString":"assert.equal(\n  findBestPack(\n    [\n      { name: 'map', weight: 9, value: 150, pieces: 1 },\n      { name: 'compass', weight: 13, value: 35, pieces: 1 },\n      { name: 'water', weight: 153, value: 200, pieces: 2 },\n      { name: 'sandwich', weight: 50, value: 60, pieces: 2 },\n      { name: 'glucose', weight: 15, value: 60, pieces: 2 },\n      { name: 'tin', weight: 68, value: 45, pieces: 3 },\n      { name: 'banana', weight: 27, value: 60, pieces: 3 },\n      { name: 'apple', weight: 39, value: 40, pieces: 3 },\n      { name: 'cheese', weight: 23, value: 30, pieces: 1 },\n      { name: 'beer', weight: 52, value: 10, pieces: 3 },\n      { name: 'suntan, cream', weight: 11, value: 70, pieces: 1 },\n      { name: 'camera', weight: 32, value: 30, pieces: 1 },\n      { name: 'T-shirt', weight: 24, value: 15, pieces: 2 }\n    ],\n    300\n  ),\n  755\n);"},{"text":"<p><code>findBestPack([{ name:'map', weight:9, value:150, pieces:1 }, { name:'compass', weight:13, value:35, pieces:1 }, { name:'water', weight:153, value:200, pieces:2 }, { name:'sandwich', weight:50, value:60, pieces:2 }, { name:'glucose', weight:15, value:60, pieces:2 }, { name:'tin', weight:68, value:45, pieces:3 }, { name:'banana', weight:27, value:60, pieces:3 }, { name:'apple', weight:39, value:40, pieces:3 }, { name:'cheese', weight:23, value:30, pieces:1 }, { name:'beer', weight:52, value:10, pieces:3 }, { name:'suntan, cream', weight:11, value:70, pieces:1 }, { name:'camera', weight:32, value:30, pieces:1 }, { name:'T-shirt', weight:24, value:15, pieces:2 }], 400)</code> should return <code>875</code>.</p>","testString":"assert.equal(\n  findBestPack(\n    [\n      { name: 'map', weight: 9, value: 150, pieces: 1 },\n      { name: 'compass', weight: 13, value: 35, pieces: 1 },\n      { name: 'water', weight: 153, value: 200, pieces: 2 },\n      { name: 'sandwich', weight: 50, value: 60, pieces: 2 },\n      { name: 'glucose', weight: 15, value: 60, pieces: 2 },\n      { name: 'tin', weight: 68, value: 45, pieces: 3 },\n      { name: 'banana', weight: 27, value: 60, pieces: 3 },\n      { name: 'apple', weight: 39, value: 40, pieces: 3 },\n      { name: 'cheese', weight: 23, value: 30, pieces: 1 },\n      { name: 'beer', weight: 52, value: 10, pieces: 3 },\n      { name: 'suntan, cream', weight: 11, value: 70, pieces: 1 },\n      { name: 'camera', weight: 32, value: 30, pieces: 1 },\n      { name: 'T-shirt', weight: 24, value: 15, pieces: 2 }\n    ],\n    400\n  ),\n  875\n);"},{"text":"<p><code>findBestPack([{ name:'map', weight:9, value:150, pieces:1 }, { name:'compass', weight:13, value:35, pieces:1 }, { name:'water', weight:153, value:200, pieces:2 }, { name:'sandwich', weight:50, value:60, pieces:2 }, { name:'glucose', weight:15, value:60, pieces:2 }, { name:'tin', weight:68, value:45, pieces:3 }, { name:'banana', weight:27, value:60, pieces:3 }, { name:'apple', weight:39, value:40, pieces:3 }, { name:'cheese', weight:23, value:30, pieces:1 }, { name:'beer', weight:52, value:10, pieces:3 }, { name:'suntan, cream', weight:11, value:70, pieces:1 }, { name:'camera', weight:32, value:30, pieces:1 }, { name:'T-shirt', weight:24, value:15, pieces:2 }], 500)</code> should return <code>1015</code>.</p>","testString":"assert.equal(\n  findBestPack(\n    [\n      { name: 'map', weight: 9, value: 150, pieces: 1 },\n      { name: 'compass', weight: 13, value: 35, pieces: 1 },\n      { name: 'water', weight: 153, value: 200, pieces: 2 },\n      { name: 'sandwich', weight: 50, value: 60, pieces: 2 },\n      { name: 'glucose', weight: 15, value: 60, pieces: 2 },\n      { name: 'tin', weight: 68, value: 45, pieces: 3 },\n      { name: 'banana', weight: 27, value: 60, pieces: 3 },\n      { name: 'apple', weight: 39, value: 40, pieces: 3 },\n      { name: 'cheese', weight: 23, value: 30, pieces: 1 },\n      { name: 'beer', weight: 52, value: 10, pieces: 3 },\n      { name: 'suntan, cream', weight: 11, value: 70, pieces: 1 },\n      { name: 'camera', weight: 32, value: 30, pieces: 1 },\n      { name: 'T-shirt', weight: 24, value: 15, pieces: 2 }\n    ],\n    500\n  ),\n  1015\n);"},{"text":"<p><code>findBestPack([{ name:'map', weight:9, value:150, pieces:1 }, { name:'compass', weight:13, value:35, pieces:1 }, { name:'water', weight:153, value:200, pieces:2 }, { name:'sandwich', weight:50, value:60, pieces:2 }, { name:'glucose', weight:15, value:60, pieces:2 }, { name:'tin', weight:68, value:45, pieces:3 }, { name:'banana', weight:27, value:60, pieces:3 }, { name:'apple', weight:39, value:40, pieces:3 }, { name:'cheese', weight:23, value:30, pieces:1 }, { name:'beer', weight:52, value:10, pieces:3 }, { name:'suntan, cream', weight:11, value:70, pieces:1 }, { name:'camera', weight:32, value:30, pieces:1 }, { name:'T-shirt', weight:24, value:15, pieces:2 }], 600)</code> should return <code>1120</code>.</p>","testString":"assert.equal(\n  findBestPack(\n    [\n      { name: 'map', weight: 9, value: 150, pieces: 1 },\n      { name: 'compass', weight: 13, value: 35, pieces: 1 },\n      { name: 'water', weight: 153, value: 200, pieces: 2 },\n      { name: 'sandwich', weight: 50, value: 60, pieces: 2 },\n      { name: 'glucose', weight: 15, value: 60, pieces: 2 },\n      { name: 'tin', weight: 68, value: 45, pieces: 3 },\n      { name: 'banana', weight: 27, value: 60, pieces: 3 },\n      { name: 'apple', weight: 39, value: 40, pieces: 3 },\n      { name: 'cheese', weight: 23, value: 30, pieces: 1 },\n      { name: 'beer', weight: 52, value: 10, pieces: 3 },\n      { name: 'suntan, cream', weight: 11, value: 70, pieces: 1 },\n      { name: 'camera', weight: 32, value: 30, pieces: 1 },\n      { name: 'T-shirt', weight: 24, value: 15, pieces: 2 }\n    ],\n    600\n  ),\n  1120\n);"},{"text":"<p><code>findBestPack([{ name:'map', weight:9, value:150, pieces:1 }, { name:'compass', weight:13, value:35, pieces:1 }, { name:'water', weight:153, value:200, pieces:2 }, { name:'sandwich', weight:50, value:60, pieces:2 }, { name:'glucose', weight:15, value:60, pieces:2 }, { name:'tin', weight:68, value:45, pieces:3 }, { name:'banana', weight:27, value:60, pieces:3 }, { name:'apple', weight:39, value:40, pieces:3 }, { name:'cheese', weight:23, value:30, pieces:1 }, { name:'beer', weight:52, value:10, pieces:3 }, { name:'suntan, cream', weight:11, value:70, pieces:1 }, { name:'camera', weight:32, value:30, pieces:1 }, { name:'T-shirt', weight:24, value:15, pieces:2 }], 700)</code> should return <code>1225</code>.</p>","testString":"assert.equal(\n  findBestPack(\n    [\n      { name: 'map', weight: 9, value: 150, pieces: 1 },\n      { name: 'compass', weight: 13, value: 35, pieces: 1 },\n      { name: 'water', weight: 153, value: 200, pieces: 2 },\n      { name: 'sandwich', weight: 50, value: 60, pieces: 2 },\n      { name: 'glucose', weight: 15, value: 60, pieces: 2 },\n      { name: 'tin', weight: 68, value: 45, pieces: 3 },\n      { name: 'banana', weight: 27, value: 60, pieces: 3 },\n      { name: 'apple', weight: 39, value: 40, pieces: 3 },\n      { name: 'cheese', weight: 23, value: 30, pieces: 1 },\n      { name: 'beer', weight: 52, value: 10, pieces: 3 },\n      { name: 'suntan, cream', weight: 11, value: 70, pieces: 1 },\n      { name: 'camera', weight: 32, value: 30, pieces: 1 },\n      { name: 'T-shirt', weight: 24, value: 15, pieces: 2 }\n    ],\n    700\n  ),\n  1225\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function findBestPack(data, maxweight) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"knapsack-problembounded","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problemcontinuous","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problem0-1","id":"5a23c84252665b21eecc7ed2"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problembounded"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/state-name-puzzle",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"State name puzzle","description":"<section id=\"description\">\n<p><strong>State name</strong> is a <em>word puzzle</em> in which you take the letters from two U.S. state names and rearrange them to form the names of two different U.S. states.</p>\n</section>","id":"5a23c84252665b21eecc8024","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to solve the challenge for a given array of actual U.S. state names, and for fictional state names.</p>\n<p>The function should return an array. Each element should be an object in this form: <code>{\"from\":[],\"to\":[]}</code>. The <code>from</code> array should contain the original names and the <code>to</code> array should contain the resultant names.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302323,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/state-name-puzzle","tests":[{"text":"<p><code>solve</code> should be a function.</p>","testString":"assert(typeof solve == 'function');"},{"text":"<p><code>solve([\"New Mexico\", \"New York\", \"North Carolina \", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\"])</code> should return an array.</p>","testString":"assert(\n  Array.isArray(\n    solve([\n      'New Mexico',\n      'New York',\n      'North Carolina ',\n      'North Dakota',\n      'Ohio',\n      'Oklahoma',\n      'Oregon',\n      'Pennsylvania',\n      'Rhode Island',\n      'South Carolina',\n      'South Dakota'\n    ])\n  )\n);"},{"text":"<p><code>solve([\"New Mexico\", \"New York\", \"North Carolina \", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\"])</code> should return <code>[{ from: [\"North Carolina \", \"South Dakota\"], to: [\"North Dakota\", \"South Carolina\"] }]</code>.</p>","testString":"assert.deepEqual(\n  solve([\n    'New Mexico',\n    'New York',\n    'North Carolina ',\n    'North Dakota',\n    'Ohio',\n    'Oklahoma',\n    'Oregon',\n    'Pennsylvania',\n    'Rhode Island',\n    'South Carolina',\n    'South Dakota'\n  ]),\n  [\n    {\n      from: ['North Carolina ', 'South Dakota'],\n      to: ['North Dakota', 'South Carolina']\n    }\n  ]\n);"},{"text":"<p><code>solve([\"New York\", \"New Kory\", \"Wen Kory\", \"York New\", \"Kory New\", \"New Kory\"])</code> should return <code>[{ from: [\"New Kory\", \"New York\"], to: [\"Wen Kory\", \"York New\"] }, { from: [\"New Kory\", \"New York\"], to: [\"Kory New\", \"Wen Kory\"] }, { from: [\"New Kory\", \"New York\"], to: [\"Kory New\", \"York New\"] }, { from: [\"New York\", \"Wen Kory\"], to: [\"New Kory\", \"York New\"] }, { from: [\"New York\", \"Wen Kory\"], to: [\"Kory New\", \"New Kory\"] }, { from: [\"New York\", \"Wen Kory\"], to: [\"Kory New\", \"York New\"] }, { from: [\"New York\", \"York New\"], to: [\"New Kory\", \"Wen Kory\"] }, { from: [\"New York\", \"York New\"], to: [\"Kory New\", \"New Kory\"] }, { from: [\"New York\", \"York New\"], to: [\"Kory New\", \"Wen Kory\"] }, { from: [\"Kory New\", \"New York\"], to: [\"New Kory\", \"Wen Kory\"] }, { from: [\"Kory New\", \"New York\"], to: [\"New Kory\", \"York New\"] }, { from: [\"Kory New\", \"New York\"], to: [\"Wen Kory\", \"York New\"] }, { from: [\"New Kory\", \"Wen Kory\"], to: [\"Kory New\", \"York New\"] }, { from: [\"New Kory\", \"York New\"], to: [\"Kory New\", \"Wen Kory\"] }, { from: [\"Kory New\", \"New Kory\"], to: [\"Wen Kory\", \"York New\"] }]</code>.</p>","testString":"assert.deepEqual(\n  solve([\n    'New York',\n    'New Kory',\n    'Wen Kory',\n    'York New',\n    'Kory New',\n    'New Kory'\n  ]),\n  [\n    { from: ['New Kory', 'New York'], to: ['Wen Kory', 'York New'] },\n    { from: ['New Kory', 'New York'], to: ['Kory New', 'Wen Kory'] },\n    { from: ['New Kory', 'New York'], to: ['Kory New', 'York New'] },\n    { from: ['New York', 'Wen Kory'], to: ['New Kory', 'York New'] },\n    { from: ['New York', 'Wen Kory'], to: ['Kory New', 'New Kory'] },\n    { from: ['New York', 'Wen Kory'], to: ['Kory New', 'York New'] },\n    { from: ['New York', 'York New'], to: ['New Kory', 'Wen Kory'] },\n    { from: ['New York', 'York New'], to: ['Kory New', 'New Kory'] },\n    { from: ['New York', 'York New'], to: ['Kory New', 'Wen Kory'] },\n    { from: ['Kory New', 'New York'], to: ['New Kory', 'Wen Kory'] },\n    { from: ['Kory New', 'New York'], to: ['New Kory', 'York New'] },\n    { from: ['Kory New', 'New York'], to: ['Wen Kory', 'York New'] },\n    { from: ['New Kory', 'Wen Kory'], to: ['Kory New', 'York New'] },\n    { from: ['New Kory', 'York New'], to: ['Kory New', 'Wen Kory'] },\n    { from: ['Kory New', 'New Kory'], to: ['Wen Kory', 'York New'] }\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function solve(input) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"state-name-puzzle","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/stern-brocot-sequence","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/split-a-character-string-based-on-change-of-character","id":"5a23c84252665b21eecc8024"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/state-name-puzzle"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
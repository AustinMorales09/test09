{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/gray-code",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Gray code","description":"<section id=\"description\">\n<p>Gray code is a form of binary encoding where transitions between consecutive numbers differ by only one bit.</p>\n<p>This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs.</p>\n<p>It is also useful for generating inputs for Karnaugh maps in order from left to right or top to bottom.</p>\n</section>","id":"5a23c84252665b21eecc7e80","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a function to encode a number to and decode a number from Gray code. The function should will have 2 parameters.</p>\n<p>The first would be a boolean. The function should encode for true and decode for false. The second parameter would be the number to be encoded/decoded.</p>\n<p>Display the normal binary representations, Gray code representations, and decoded Gray code values for all 5-bit binary numbers (0-31 inclusive, leading 0's not necessary).</p>\n<p>There are many possible Gray codes. The following encodes what is called \"binary reflected Gray code.\"</p>\n<p>Encoding (MSB is bit 0, b is binary, g is Gray code):</p>\n<pre>if b[i-1] = 1\n  g[i] = not b[i]\nelse\n  g[i] = b[i]\n</pre>\n<p>Or:</p>\n<pre>g = b xor (b logically right shifted 1 time)\n</pre>\n<p>Decoding (MSB is bit 0, b is binary, g is Gray code):</p>\n<pre>b[0] = g[0]<br>\nfor other bits:\nb[i] = g[i] xor b[i-1]\n</pre>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302276,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/gray-code","tests":[{"text":"<p><code>gray</code> should be a function.</p>","testString":"assert(typeof gray == 'function');"},{"text":"<p><code>gray(true,177)</code> should return a number.</p>","testString":"assert(typeof gray(true, 177) == 'number');"},{"text":"<p><code>gray(true,177)</code> should return <code>233</code>.</p>","testString":"assert.equal(gray(true, 177), 233);"},{"text":"<p><code>gray(true,425)</code> should return <code>381</code>.</p>","testString":"assert.equal(gray(true, 425), 381);"},{"text":"<p><code>gray(true,870)</code> should return <code>725</code>.</p>","testString":"assert.equal(gray(true, 870), 725);"},{"text":"<p><code>gray(false,233)</code> should return <code>177</code>.</p>","testString":"assert.equal(gray(false, 233), 177);"},{"text":"<p><code>gray(false,381)</code> should return <code>425</code>.</p>","testString":"assert.equal(gray(false, 381), 425);"},{"text":"<p><code>gray(false,725)</code> should return <code>870</code>.</p>","testString":"assert.equal(gray(false, 725), 870);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function gray(enc, number) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"gray-code","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/greatest-common-divisor","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/generatorexponential","id":"5a23c84252665b21eecc7e80"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/gray-code"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
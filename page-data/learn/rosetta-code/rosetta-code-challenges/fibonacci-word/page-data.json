{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/fibonacci-word",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Fibonacci word","description":"<section id=\"description\">\n<p>The Fibonacci Word Sequence may be created in a manner analogous to the Fibonacci Sequence, but it focuses on iterating concatenation.</p>\n<pre>Define  F_Word<sub>1</sub>  as  <strong>1</strong>\nDefine  F_Word<sub>2</sub>  as  <strong>0</strong>\nForm   F_Word<sub>3</sub>  as  F_Word<sub>2</sub>   concatenated with  F_Word<sub>1</sub>   i.e.:  <strong>01</strong>\nForm   F_Word<sub>n</sub>  as  F_Word<sub>n-1</sub>  concatenated with  F_word<sub>n-2</sub>\n</pre>\n<p>Entropy calculation is required in this challenge, <a href=\"https://www.freecodecamp.org/learn/coding-interview-prep/rosetta-code/entropy\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">as shown in this Rosetta Code challenge</a></p>\n</section>","id":"5992e222d397f00d21122931","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to return the first <code>n</code> Fibonacci Words. The number of <code>n</code> is provided as a parameter to the function. The function should return an array of objects. The objects should be of the form: <code>{ N: 1, Length: 1, Entropy: 0, Word: '1' }</code>. <code>Entropy</code> is computed for the string <code>Word</code> and rounded to 8 decimal digits of accuracy. Note that the indices of this sequence start at <code>1</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302269,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/fibonacci-word","tests":[{"text":"<p><code>fibWord</code> should be a function.</p>","testString":"assert(typeof fibWord === 'function');"},{"text":"<p><code>fibWord(5)</code> should return an array.</p>","testString":"assert(Array.isArray(fibWord(5)));"},{"text":"<p><code>fibWord(5)</code> should return <code>[{ N:1, Length:1, Entropy:0, Word:\"1\" },{ N:2, Length:1, Entropy:0, Word:\"0\" },{ N:3, Length:2, Entropy:1, Word:\"01\" },{ N:4, Length:3, Entropy:0.91829583, Word:\"010\" },{ N:5, Length:5, Entropy:0.97095059, Word:\"01001\" }]</code>.</p>","testString":"assert.deepEqual(fibWord(5), words5);"},{"text":"<p><code>fibWord(7)</code> should return <code>[{ N:1, Length:1, Entropy:0, Word:\"1\" },{ N:2, Length:1, Entropy:0, Word:\"0\" },{ N:3, Length:2, Entropy:1, Word:\"01\" },{ N:4, Length:3, Entropy:0.91829583, Word:\"010\" },{ N:5, Length:5, Entropy:0.97095059, Word:\"01001\" }, { N:6, Length:8, Entropy:0.954434, Word:'01001010' }, { N:7, Length:13, Entropy:0.9612366, Word:'0100101001001' }]</code>.</p>","testString":"assert.deepEqual(fibWord(7), words7);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function fibWord(n) {\n\n}","head":"","tail":"const words5 = [\n  { N: 1, Length: 1, Entropy: 0, Word: '1' },\n  { N: 2, Length: 1, Entropy: 0, Word: '0' },\n  { N: 3, Length: 2, Entropy: 1, Word: '01' },\n  { N: 4, Length: 3, Entropy: 0.91829583, Word: '010' },\n  { N: 5, Length: 5, Entropy: 0.97095059, Word: '01001' }\n];\n\nconst words7 = [\n  { N: 1, Length: 1, Entropy: 0, Word: '1' },\n  { N: 2, Length: 1, Entropy: 0, Word: '0' },\n  { N: 3, Length: 2, Entropy: 1, Word: '01' },\n  { N: 4, Length: 3, Entropy: 0.91829583, Word: '010' },\n  { N: 5, Length: 5, Entropy: 0.97095059, Word: '01001' },\n  { N: 6, Length: 8, Entropy: 0.954434, Word: '01001010' },\n  { N: 7, Length: 13, Entropy: 0.9612366, Word: '0100101001001' }\n];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"fibonacci-word","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/fizzbuzz","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/fibonacci-sequence","id":"5992e222d397f00d21122931"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/fibonacci-word"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
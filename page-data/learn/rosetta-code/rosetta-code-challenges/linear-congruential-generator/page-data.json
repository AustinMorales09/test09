{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/linear-congruential-generator",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Linear congruential generator","description":"<section id=\"description\">\n<p>A linear congruential generator (LCG) is an <em>algorithm</em> that yields a sequence of pseudo-randomized numbers calculated with a discontinuous piecewise linear equation. All linear congruential generators use this formula:</p>\n<p>$$r_{n + 1} = (a \\times r_n + c) \\bmod m$$</p>\n<p>Where:</p>\n<ul>\n<li>$ r_0 $ is a seed.</li>\n<li>$r_1$, $r_2$, $r_3$, ..., are the random numbers.</li>\n<li>$a$, $c$, $m$ are constants.</li>\n</ul>\n<p>If one chooses the values of $a$, $c$ and $m$ with care, then the generator produces a uniform distribution of integers from $0$ to $m - 1$.</p>\n<p><abbr title=\"linear congruential generator\">LCG</abbr> numbers have poor quality. $r_n$ and $r_{n + 1}$ are not independent, as true random numbers would be. Anyone who knows $r_n$ can predict $r_{n + 1}$, therefore <abbr title=\"linear congruential generator\">LCG</abbr> is not cryptographically secure. The <abbr title=\"linear congruential generator\">LCG</abbr> is still good enough for simple tasks like Miller-Rabin primality test, or FreeCell deals. Among the benefits of the <abbr title=\"linear congruential generator\">LCG</abbr>, one can easily reproduce a sequence of numbers, from the same $r_0$. One can also reproduce such sequence with a different programming language, because the formula is so simple.</p>\n</section>","id":"5e4ce2f5ac708cc68c1df261","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes $r_0,a,c,m,n$ as parameters and returns $r_n$.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385266,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/linear-congruential-generator","tests":[{"text":"<p><code>linearCongGenerator</code> should be a function.</p>","testString":"assert(typeof linearCongGenerator == 'function');"},{"text":"<p><code>linearCongGenerator(324, 1145, 177, 2148, 3)</code> should return a number.</p>","testString":"assert(typeof linearCongGenerator(324, 1145, 177, 2148, 3) == 'number');"},{"text":"<p><code>linearCongGenerator(324, 1145, 177, 2148, 3)</code> should return <code>855</code>.</p>","testString":"assert.equal(linearCongGenerator(324, 1145, 177, 2148, 3), 855);"},{"text":"<p><code>linearCongGenerator(234, 11245, 145, 83648, 4)</code> should return <code>1110</code>.</p>","testString":"assert.equal(linearCongGenerator(234, 11245, 145, 83648, 4), 1110);"},{"text":"<p><code>linearCongGenerator(85, 11, 1234, 214748, 5)</code> should return <code>62217</code>.</p>","testString":"assert.equal(linearCongGenerator(85, 11, 1234, 214748, 5), 62217);"},{"text":"<p><code>linearCongGenerator(0, 1103515245, 12345, 2147483648, 1)</code> should return <code>12345</code>.</p>","testString":"assert.equal(linearCongGenerator(0, 1103515245, 12345, 2147483648, 1), 12345);"},{"text":"<p><code>linearCongGenerator(0, 1103515245, 12345, 2147483648, 2)</code> should return <code>1406932606</code>.</p>","testString":"assert.equal(\n  linearCongGenerator(0, 1103515245, 12345, 2147483648, 2),\n  1406932606\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function linearCongGenerator(r0, a, c, m, n) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"linear-congruential-generator","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/long-multiplication","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/levenshtein-distance","id":"5e4ce2f5ac708cc68c1df261"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/linear-congruential-generator"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
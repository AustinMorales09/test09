{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/knapsack-problemcontinuous",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Knapsack problem/Continuous","description":"<section id=\"description\">\n<p>A thief burgles a butcher's shop, where he can select from some items.</p>\n<p>The thief knows the weights and prices of each items. Because he has a knapsack with a limit on the maximum weight that it can carry, he wants to select the items such that he would have his profit maximized. He may cut the items; the item has a reduced price after cutting that is proportional to the original price by the ratio of masses. That means: half of an item has half the price of the original.</p>\n</section>","id":"5a23c84252665b21eecc7ed3","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes an array of objects representing the items available in the shop. Each object has 3 attributes: name, weight, and value. The function also takes the maximum weight as a parameter. The function should return the maximum value possible, and the total weight of the selected items should not exceed the maximum weight.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":323654,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problemcontinuous","tests":[{"text":"<p><code>knapContinuous([{ \"weight\":3.8, \"value\":36, name:\"beef\" }, { \"weight\":5.4, \"value\":43, name:\"pork\" }, { \"weight\":3.6, \"value\":90, name:\"ham\" }, { \"weight\":2.4, \"value\":45, name:\"greaves\" }, { \"weight\":4.0, \"value\":30, name:\"flitch\" }, { \"weight\":2.5, \"value\":56, name:\"brawn\" }, { \"weight\":3.7, \"value\":67, name:\"welt\" }, { \"weight\":3.0, \"value\":95, name:\"salami\" }, { \"weight\":5.9, \"value\":98, name:\"sausage\" }], 10)</code> should return <code>257.875</code>.</p>","testString":"assert.equal(\n  knapContinuous(\n    [\n      { weight: 3.8, value: 36, name: 'beef' },\n      { weight: 5.4, value: 43, name: 'pork' },\n      { weight: 3.6, value: 90, name: 'ham' },\n      { weight: 2.4, value: 45, name: 'greaves' },\n      { weight: 4.0, value: 30, name: 'flitch' },\n      { weight: 2.5, value: 56, name: 'brawn' },\n      { weight: 3.7, value: 67, name: 'welt' },\n      { weight: 3.0, value: 95, name: 'salami' },\n      { weight: 5.9, value: 98, name: 'sausage' }\n    ],\n    10\n  ),\n  257.875\n);"},{"text":"<p><code>knapContinuous([{ \"weight\":3.8, \"value\":36, name:\"beef\" }, { \"weight\":5.4, \"value\":43, name:\"pork\" }, { \"weight\":3.6, \"value\":90, name:\"ham\" }, { \"weight\":2.4, \"value\":45, name:\"greaves\" }, { \"weight\":4.0, \"value\":30, name:\"flitch\" }, { \"weight\":2.5, \"value\":56, name:\"brawn\" }, { \"weight\":3.7, \"value\":67, name:\"welt\" }, { \"weight\":3.0, \"value\":95, name:\"salami\" }, { \"weight\":5.9, \"value\":98, name:\"sausage\" }], 12)</code> should return <code>295.05405405405406</code>.</p>","testString":"assert.equal(\n  knapContinuous(\n    [\n      { weight: 3.8, value: 36, name: 'beef' },\n      { weight: 5.4, value: 43, name: 'pork' },\n      { weight: 3.6, value: 90, name: 'ham' },\n      { weight: 2.4, value: 45, name: 'greaves' },\n      { weight: 4.0, value: 30, name: 'flitch' },\n      { weight: 2.5, value: 56, name: 'brawn' },\n      { weight: 3.7, value: 67, name: 'welt' },\n      { weight: 3.0, value: 95, name: 'salami' },\n      { weight: 5.9, value: 98, name: 'sausage' }\n    ],\n    12\n  ),\n  295.05405405405406\n);"},{"text":"<p><code>knapContinuous([{ \"weight\":3.8, \"value\":36, name:\"beef\" }, { \"weight\":5.4, \"value\":43, name:\"pork\" }, { \"weight\":3.6, \"value\":90, name:\"ham\" }, { \"weight\":2.4, \"value\":45, name:\"greaves\" }, { \"weight\":4.0, \"value\":30, name:\"flitch\" }, { \"weight\":2.5, \"value\":56, name:\"brawn\" }, { \"weight\":3.7, \"value\":67, name:\"welt\" }, { \"weight\":3.0, \"value\":95, name:\"salami\" }, { \"weight\":5.9, \"value\":98, name:\"sausage\" }], 15)</code> should return <code>349.3783783783784</code>.</p>","testString":"assert.equal(\n  knapContinuous(\n    [\n      { weight: 3.8, value: 36, name: 'beef' },\n      { weight: 5.4, value: 43, name: 'pork' },\n      { weight: 3.6, value: 90, name: 'ham' },\n      { weight: 2.4, value: 45, name: 'greaves' },\n      { weight: 4.0, value: 30, name: 'flitch' },\n      { weight: 2.5, value: 56, name: 'brawn' },\n      { weight: 3.7, value: 67, name: 'welt' },\n      { weight: 3.0, value: 95, name: 'salami' },\n      { weight: 5.9, value: 98, name: 'sausage' }\n    ],\n    15\n  ),\n  349.3783783783784\n);"},{"text":"<p><code>knapContinuous([{ \"weight\":3.8, \"value\":36, name:\"beef\" }, { \"weight\":5.4, \"value\":43, name:\"pork\" }, { \"weight\":3.6, \"value\":90, name:\"ham\" }, { \"weight\":2.4, \"value\":45, name:\"greaves\" }, { \"weight\":4.0, \"value\":30, name:\"flitch\" }, { \"weight\":2.5, \"value\":56, name:\"brawn\" }, { \"weight\":3.7, \"value\":67, name:\"welt\" }, { \"weight\":3.0, \"value\":95, name:\"salami\" }, { \"weight\":5.9, \"value\":98, name:\"sausage\" }], 22)</code> should return <code>459.5263157894737</code>.</p>","testString":"assert.equal(\n  knapContinuous(\n    [\n      { weight: 3.8, value: 36, name: 'beef' },\n      { weight: 5.4, value: 43, name: 'pork' },\n      { weight: 3.6, value: 90, name: 'ham' },\n      { weight: 2.4, value: 45, name: 'greaves' },\n      { weight: 4.0, value: 30, name: 'flitch' },\n      { weight: 2.5, value: 56, name: 'brawn' },\n      { weight: 3.7, value: 67, name: 'welt' },\n      { weight: 3.0, value: 95, name: 'salami' },\n      { weight: 5.9, value: 98, name: 'sausage' }\n    ],\n    22\n  ),\n  459.5263157894737\n);"},{"text":"<p><code>knapContinuous([{ \"weight\":3.8, \"value\":36, name:\"beef\" }, { \"weight\":5.4, \"value\":43, name:\"pork\" }, { \"weight\":3.6, \"value\":90, name:\"ham\" }, { \"weight\":2.4, \"value\":45, name:\"greaves\" }, { \"weight\":4.0, \"value\":30, name:\"flitch\" }, { \"weight\":2.5, \"value\":56, name:\"brawn\" }, { \"weight\":3.7, \"value\":67, name:\"welt\" }, { \"weight\":3.0, \"value\":95, name:\"salami\" }, { \"weight\":5.9, \"value\":98, name:\"sausage\" }], 24)</code> should return <code>478.4736842105263</code>.</p>","testString":"assert.equal(\n  knapContinuous(\n    [\n      { weight: 3.8, value: 36, name: 'beef' },\n      { weight: 5.4, value: 43, name: 'pork' },\n      { weight: 3.6, value: 90, name: 'ham' },\n      { weight: 2.4, value: 45, name: 'greaves' },\n      { weight: 4.0, value: 30, name: 'flitch' },\n      { weight: 2.5, value: 56, name: 'brawn' },\n      { weight: 3.7, value: 67, name: 'welt' },\n      { weight: 3.0, value: 95, name: 'salami' },\n      { weight: 5.9, value: 98, name: 'sausage' }\n    ],\n    24\n  ),\n  478.4736842105263\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function knapContinuous(items, maxweight) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"knapsack-problemcontinuous","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problemunbounded","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problembounded","id":"5a23c84252665b21eecc7ed3"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/knapsack-problemcontinuous"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
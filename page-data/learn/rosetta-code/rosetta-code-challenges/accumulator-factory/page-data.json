{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/accumulator-factory",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Accumulator factory","description":"<section id=\"description\">\n<p>A problem posed by Paul Graham is that of creating a function that takes a single (numeric) argument and which returns another function that is an accumulator. The returned accumulator function in turn also takes a single numeric argument, and returns the sum of all the numeric values passed in so far to that accumulator (including the initial value passed when the accumulator was created).</p>\n</section>","id":"594810f028c0303b75339ace","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Create a function that takes a number $n$ and generates accumulator functions that return the sum of every number ever passed to them.</p>\n<p><strong>Rules:</strong></p>\n<p>Do not use global variables.</p>\n<p><strong>Hint:</strong></p>\n<p>Closures save outer state.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302222,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/accumulator-factory","tests":[{"text":"<p><code>accumulator</code> should be a function.</p>","testString":"assert(typeof accumulator === 'function');"},{"text":"<p><code>accumulator(0)</code> should return a function.</p>","testString":"assert(typeof accumulator(0) === 'function');"},{"text":"<p><code>accumulator(0)(2)</code> should return a number.</p>","testString":"assert(typeof accumulator(0)(2) === 'number');"},{"text":"<p>Passing in the values 3, -4, 1.5, and 5 should return 5.5.</p>","testString":"assert(testFn(5) === 5.5);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function accumulator(sum) {\n\n}","head":"","tail":"const testFn = typeof accumulator(3) === 'function' && accumulator(3);\nif (testFn) {\n  testFn(-4);\n  testFn(1.5);\n}","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"accumulator-factory","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/ackermann-function","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/abundant-deficient-and-perfect-number-classifications","id":"594810f028c0303b75339ace"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/accumulator-factory"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
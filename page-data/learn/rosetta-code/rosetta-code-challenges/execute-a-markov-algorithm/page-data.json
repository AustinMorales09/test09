{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/execute-a-markov-algorithm",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Execute a Markov algorithm","description":"<section id=\"description\">\n<p>Markov Concepts are used in machine learning, because of its simple approach in data manipulation. With a set number of <code>rules</code> you can manipulate given <code>data</code> to create a desired <code>output</code>.</p>\n<p>We have added in the background:</p>\n<p>The <code>rules</code> in the form of nested array, and the <code>data</code> in the form of array, too. And the desired <code>outputs</code>.</p>\n<p>The <code>rules</code>:</p>\n<pre><code class=\"language-js\">let rules=[\n[\n\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\n\"the shop -> my brother\",\"a never used -> .terminating rule\"\n],\n\n[\n \"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\n \"the shop -> my brother\",\"a never used -> .terminating rule\"\n],\n\n[\n \"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\n \"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\n \"the shop -> my brother\",\"a never used -> .terminating rule\"\n],\n\n[\n \"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\n \"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\n \"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"\n],\n\n[\n\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\n\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"\n]\n\n];\n</code></pre>\n<p>The <code>data</code>:</p>\n<pre><code class=\"language-js\">let data=[\n        \"I bought a B of As from T S.\",\n        \"I bought a B of As from T S.\",\n        \"I bought a B of As W my Bgage from T S.\",\n        \"_1111*11111_\",\n        \"000000A000000\"\n        ];\n</code></pre>\n<p>The <code>outputs</code>:</p>\n<pre><code class=\"language-js\">let outputs=[\n    \"I bought a bag of apples from my brother.\",\n    \"I bought a bag of apples from T shop.\",\n    \"I bought a bag of apples with my money from T shop.\",\n    \"11111111111111111111\",\n    \"00011H1111000\"\n    ]\n</code></pre>\n<p>Using Markov Algorithm, change the <code>data</code> into the desired <code>outputs</code> using the <code>rules</code> provided for you.</p>\n</section>","id":"59e09e6d412c5939baa02d16","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302260,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/execute-a-markov-algorithm","tests":[{"text":"<p><code>markov</code> should be a function.</p>","testString":"assert(typeof markov === 'function');"},{"text":"<p><code>markov([\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return the string <code>I bought a bag of apples from my brother.</code>.</p>","testString":"assert.deepEqual(markov(rules[0], datas[0]), outputs[0]);"},{"text":"<p><code>markov([\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As from T S.\")</code> should return the string <code>I bought a bag of apples from T shop.</code>.</p>","testString":"assert.deepEqual(markov(rules[1], datas[1]), outputs[1]);"},{"text":"<p><code>markov([\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\"I bought a B of As W my Bgage from T S.\")</code> should return the string <code>I bought a bag of apples with my money from T shop.</code>.</p>","testString":"assert.deepEqual(markov(rules[2], datas[2]), outputs[2]);"},{"text":"<p><code>markov([\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\"_1111*11111_\")</code> should return the string <code>11111111111111111111</code>.</p>","testString":"assert.deepEqual(markov(rules[3], datas[3]), outputs[3]);"},{"text":"<p><code>markov([\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"],\"\")</code> should return the string <code>00011H1111000</code>.</p>","testString":"assert.deepEqual(markov(rules[4], datas[4]), outputs[4]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function markov(rules,data) {\n\n}","head":"","tail":"\nlet rules=[[\"A -> apple\",\"B -> bag\",\"S -> shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\n            [\"A -> apple\",\"B -> bag\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\n            [\"A -> apple\",\"WWWW -> with\",\"Bgage -> ->.*\",\"B -> bag\",\"->.* -> money\",\"W -> WW\",\"S -> .shop\",\"T -> the\",\"the shop -> my brother\",\"a never used -> .terminating rule\"],\n            [\"_+1 -> _1+\",\"1+1 -> 11+\",\"1! -> !1\",\",! -> !+\",\"_! -> _\",\"1*1 -> x,@y\",\"1x -> xX\",\"X, -> 1,1\",\"X1 -> 1X\",\"_x -> _X\",\",x -> ,X\",\"y1 -> 1y\",\"y_ -> _\",\"1@1 -> x,@y\",\"1@_ -> @_\",\",@_ -> !_\",\"++ -> +\",\"_1 -> 1\",\"1+_ -> 1\",\"_+_ -> \"],\n            [\"A0 -> 1B\",\"0A1 -> C01\",\"1A1 -> C11\",\"0B0 -> A01\",\"1B0 -> A11\",\"B1 -> 1B\",\"0C0 -> B01\",\"1C0 -> B11\",\"0C1 -> H01\",\"1C1 -> H11\"]];\nlet datas=[\"I bought a B of As from T S.\",\n            \"I bought a B of As from T S.\",\n            \"I bought a B of As W my Bgage from T S.\",\n            \"_1111*11111_\",\n            \"000000A000000\"];\nlet outputs=[\"I bought a bag of apples from my brother.\",\n            \"I bought a bag of apples from T shop.\",\n            \"I bought a bag of apples with my money from T shop.\",\n            \"11111111111111111111\",\n            \"00011H1111000\"]\n","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"execute-a-markov-algorithm","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/execute-brain","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/evaluate-binomial-coefficients","id":"59e09e6d412c5939baa02d16"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/execute-a-markov-algorithm"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
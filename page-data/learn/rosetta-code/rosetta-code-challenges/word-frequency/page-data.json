{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/word-frequency",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Word frequency","description":"<section id=\"description\">\n<p>Given a text string and an integer n, return the n most common words in the file (and the number of their occurrences) in decreasing frequency.</p>\n</section>","id":"5e94a54cc7b022105bf0fd2c","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to count the occurrences of each word and return the n most commons words along with the number of their occurrences in decreasing frequency.</p>\n<p>The function should return a 2D array with each of the elements in the following form: <code>[word, freq]</code>. <code>word</code> should be the lowercase version of the word and <code>freq</code> the number denoting the count.</p>\n<p>The function should return an empty array, if no string is provided.</p>\n<p>The function should be case insensitive, for example, the strings \"Hello\" and \"hello\" should be treated the same.</p>\n<p>You can treat words that have special characters such as underscores, dashes, apostrophes, commas, etc., as distinct words.</p>\n<p>For example, given the string \"Hello hello goodbye\", your function should return <code>[['hello', 2], ['goodbye', 1]]</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":393913,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/word-frequency","tests":[{"text":"<p><code>wordFrequency</code> should be a function.</p>","testString":"assert(typeof wordFrequency == 'function');"},{"text":"<p><code>wordFrequency</code> should return an array.</p>","testString":"assert(Array.isArray(wordFrequency('test')));"},{"text":"<p><code>wordFrequency(\"Hello hello world\", 2)</code> should return <code>[['hello', 2], ['world', 1]]</code></p>","testString":"assert.deepEqual(wordFrequency(example_1, 2), example_1_solution);"},{"text":"<p><code>wordFrequency(\"The quick brown fox jumped over the lazy dog\", 1)</code> should return <code>[['the', 2]]</code></p>","testString":"assert.deepEqual(wordFrequency(example_2, 1), example_2_solution);"},{"text":"<p><code>wordFrequency(\"Opensource opensource open-source open source\", 1)</code> should return <code>[['opensource', 2]]</code></p>","testString":"assert.deepEqual(wordFrequency(example_3, 1), example_3_solution);"},{"text":"<p><code>wordFrequency(\"Apple App apply aPP aPPlE\", 3)</code> should return <code>[['app', 2], ['apple', 2], ['apply', 1]]</code> or <code>[['apple', 2], ['app', 2], ['apply', 1]]</code></p>","testString":"const arr = JSON.stringify(wordFrequency(example_4, 3));\nassert(arr === example_4_solution_a || arr === example_4_solution_b);"},{"text":"<p><code>wordFrequency(\"c d a d c a b d d c\", 4)</code> should return <code>[['d', 4], ['c', 3], ['a', 2], ['b', 1]]</code></p>","testString":"assert.deepEqual(wordFrequency(example_5, 4), example_5_solution);"},{"text":"<p><code>wordFrequency(\"\", 5)</code> should return <code>[]</code></p>","testString":"assert.deepEqual(wordFrequency(example_6, 5), example_6_solution);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function wordFrequency(txt, n) {\n\n}","head":"var example_1 = 'Hello hello world';\nvar example_1_solution = [['hello', 2], ['world', 1]];\nvar example_2 = 'The quick brown fox jumped over the lazy dog';\nvar example_2_solution = [['the', 2]];\nvar example_3 = 'Opensource opensource open-source open source';\nvar example_3_solution = [['opensource', 2]];\nvar example_4 = 'Apple App apply aPP aPPlE';\nvar example_4_solution_a = \"[[\\\"app\\\",2],[\\\"apple\\\",2],[\\\"apply\\\",1]]\";\nvar example_4_solution_b = \"[[\\\"apple\\\",2],[\\\"app\\\",2],[\\\"apply\\\",1]]\";\nvar example_5 = 'c d a d c a b d d c';\nvar example_5_solution = [['d', 4], ['c', 3], ['a', 2], ['b', 1]];\nvar example_6 = '';\nvar example_6_solution = [];","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"word-frequency","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/word-wrap","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/vector-dot-product","id":"5e94a54cc7b022105bf0fd2c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/word-frequency"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
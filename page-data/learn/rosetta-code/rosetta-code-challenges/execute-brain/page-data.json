{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/execute-brain",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Execute Brain****","description":"<section id=\"description\">\n<p>Write a function to implement a Brain**** interpreter. The function will take a string as a parameter and should return a string as the output. More details are given below:</p>\n<p>RCBF is a set of <a href=\"https://rosettacode.org/wiki/Brainf***\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Brainf***</a> compilers and interpreters written for Rosetta Code in a variety of languages.</p>\n<p>Below are links to each of the versions of RCBF.</p>\n<p>An implementation need only properly implement the following instructions:</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>></code></td>\n<td>Move the pointer to the right</td>\n</tr>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Move the pointer to the left</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>Increment the memory cell under the pointer</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>Decrement the memory cell under the pointer</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>Output the character signified by the cell at the pointer</td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td>Input a character and store it in the cell at the pointer</td>\n</tr>\n<tr>\n<td><code>[</code></td>\n<td>Jump past the matching <code>]</code> if the cell under the pointer is 0</td>\n</tr>\n<tr>\n<td><code>]</code></td>\n<td>Jump back to the matching <code>[</code> if the cell under the pointer is nonzero</td>\n</tr>\n</tbody>\n</table>\n<p>Any cell size is allowed, EOF (<em>E</em>nd-<em>O</em>-<em>F</em>ile) support is optional, as is whether you have bounded or unbounded memory.</p>\n</section>","id":"59e0a8df964e4540d5abe599","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302261,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/execute-brain","tests":[{"text":"<p><code>brain(hello)</code> should return a string</p>","testString":"assert(typeof brain(hello) === 'string');"},{"text":"<p><code>brain(\"++++++[>++++++++++&#x3C;-]>+++++.\")</code> should return \"A\"</p>","testString":"assert.equal(brain('++++++[>++++++++++<-]>+++++.'), 'A');"},{"text":"<p><code>brain(hello)</code> should return <code>Hello World!\\n</code></p>","testString":"assert.equal(brain(hello), 'Hello World!\\n');"},{"text":"<p><code>brain(fib)</code> should return <code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89</code></p>","testString":"assert.equal(brain(fib), '1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function brain(prog) {\n\n}","head":"let fib=`+\n\n++\n\n+++\n\n++++\n\n+>+>>\n\n>>++++\n\n+++++++\n\n++++++++\n\n+++++++++\n\n++++++++++\n\n++++++>++++\n\n++++++++++++\n\n+++++++++++++\n\n+++<<<<<<[>[>>\n\n>>>>+>+<<<<<<<-\n\n]>>>>>>>[<<<<<<<\n\n+>>>>>>>-]<[>++++\n\n++++++[-<-[>>+>+<<\n\n<-]>>>[<<<+>>>-]+<[\n\n>[-]<[-]]>[<<[>>>+<<\n\n<-]>>[-]]<<]>>>[>>+>+\n\n<<<-]>>>[<<<+>>>-]+<[>\n\n[-]<[-]]>[<<+>>[-]]<<<<\n\n<<<]>>>>>[++++++++++++++\n\n+++++++++++++++++++++++++\n\n+++++++++.[-]]++++++++++<[\n\n->-<]>+++++++++++++++++++++\n\n+++++++++++++++++++++++++++.\n\n[-]<<<<<<<<<<<<[>>>+>+<<<<-]>\n\n>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]\n\n<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+\n\n>-]>[<+>-]<<<-]`;\nlet hello='++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.'","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"execute-brain","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/extensible-prime-generator","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/execute-a-markov-algorithm","id":"59e0a8df964e4540d5abe599"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/execute-brain"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/top-rank-per-group",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Top rank per group","description":"<section id=\"description\">\n<p>Find the top <code>n</code> ranked data in each group, where <code>n</code> is provided as a parameter. Name of the rank and the group are also provided as parameter.</p>\n<p>Given the following data:</p>\n<pre><code class=\"language-js\">testData1 = [\n  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },\n  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },\n  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },\n  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },\n  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },\n  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },\n  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }\n];\n</code></pre>\n<p>One could rank top 10 employees in each department by calling:</p>\n<pre><code class=\"language-js\">topRankPerGroup(10, testData1, 'dept', 'salary')\n</code></pre>\n<p>Given the following data:</p>\n<pre><code class=\"language-js\">testData2 = [\n  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },\n  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },\n  { name: 'Titanic', genre: 'drama', rating: 7.3 },\n  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },\n  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }\n];\n</code></pre>\n<p>One could rank the top-rated movie in each genre by calling:</p>\n<pre><code class=\"language-js\">topRankPerGroup(1, testData2, 'genre', 'rating')\n</code></pre>\n<p>The function should return an array with an array for each group containing the top <code>n</code> objects.</p>\n<p>For example, given data:</p>\n<pre><code class=\"language-js\">[\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D050' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D050' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D050' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D101' }\n];\n</code></pre>\n<p>Top two ranking employees in each department by salary would be:</p>\n<pre><code class=\"language-js\">[ [ { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D050' },\n    { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D050' } ],\n  [ { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D101' },\n    { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D101' } ] ]\n</code></pre>\n</section>","id":"595011cba5a81735713873bd","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302339,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/top-rank-per-group","tests":[{"text":"<p><code>topRankPerGroup</code> should be a function.</p>","testString":"assert(typeof topRankPerGroup === 'function');"},{"text":"<p><code>topRankPerGroup</code> should return undefined on negative n values.</p>","testString":"assert(typeof topRankPerGroup(-1, []) === 'undefined');"},{"text":"<p>For <code>topRankPerGroup(10, testData1, 'dept', 'salary')</code>, the first result in the first group should be <code>{ name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050'}</code>.</p>","testString":"assert.deepEqual(res1[0][0], { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050'});"},{"text":"<p>For <code>topRankPerGroup(10, testData1, 'dept', 'salary')</code>, the last result in the last group should be <code>{ name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' }</code>.</p>","testString":"assert.deepEqual(res1[3][3], { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' });"},{"text":"<p><code>topRankPerGroup(1, ...)</code> should return only top ranking result per group.</p>","testString":"assert.equal(res2[2].length, 1);"},{"text":"<p><code>topRankPerGroup(2, ...)</code> should return two ranking results per group.</p>","testString":"assert.equal(res3[2][1].name, 'Maze Runner');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function topRankPerGroup(n, data, groupName, rankName) {\n\n  return true;\n}","head":"","tail":"const testData1 = [\n  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },\n  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },\n  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },\n  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },\n  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },\n  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },\n  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }\n];\n\nconst res1 = topRankPerGroup(10, testData1, 'dept', 'salary');\n\nconst testData2 = [\n  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },\n  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },\n  { name: 'Titanic', genre: 'drama', rating: 7.3 },\n  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },\n  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }\n];\n\nconst res2 = topRankPerGroup(1, testData2, 'genre', 'rating');\nconst res3 = topRankPerGroup(2, testData2, 'genre', 'rating');","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"top-rank-per-group","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/towers-of-hanoi","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/topological-sort","id":"595011cba5a81735713873bd"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/top-rank-per-group"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
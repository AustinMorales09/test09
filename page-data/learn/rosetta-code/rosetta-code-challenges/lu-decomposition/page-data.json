{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/lu-decomposition",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"LU decomposition","description":"<section id=\"description\">\n<p>Every square matrix $A$ can be decomposed into a product of a lower triangular matrix $L$ and a upper triangular matrix $U$. This is known as the LU decomposition.</p>\n<p>$A = LU$</p>\n<p>It is a modified form of Gaussian elimination.</p>\n<p>While the Cholesky decomposition only works for symmetric, positive definite matrices, the more general LU decomposition works for any square matrix.</p>\n<p>There are several algorithms for calculating $L$ and $U$.</p>\n<p>To derive <em>Crout's algorithm</em> for a 3x3 example, we have to solve the following system:</p>\n<p>\\begin{align}A = \\begin{pmatrix} a_{11} &#x26; a_{12} &#x26; a_{13}\\\\ a_{21} &#x26; a_{22} &#x26; a_{23}\\\\ a_{31} &#x26; a_{32} &#x26; a_{33}\\\\ \\end{pmatrix}= \\begin{pmatrix} l_{11} &#x26; 0 &#x26; 0 \\\\ l_{21} &#x26; l_{22} &#x26; 0 \\\\ l_{31} &#x26; l_{32} &#x26; l_{33}\\\\ \\end{pmatrix} \\begin{pmatrix} u_{11} &#x26; u_{12} &#x26; u_{13} \\\\ 0 &#x26; u_{22} &#x26; u_{23} \\\\ 0 &#x26; 0 &#x26; u_{33} \\end{pmatrix} = LU\\end{align}</p>\n<p>We now would have to solve 9 equations with 12 unknowns. To make the system uniquely solvable, usually the diagonal elements of $L$ are set to 1</p>\n<p>$l_{11}=1$</p>\n<p>$l_{22}=1$</p>\n<p>$l_{33}=1$</p>\n<p>so we get a solvable system of 9 unknowns and 9 equations.</p>\n<p>\\begin{align}A = \\begin{pmatrix} a_{11} &#x26; a_{12} &#x26; a_{13}\\\\ a_{21} &#x26; a_{22} &#x26; a_{23}\\\\ a_{31} &#x26; a_{32} &#x26; a_{33}\\\\ \\end{pmatrix} = \\begin{pmatrix} 1 &#x26; 0 &#x26; 0 \\\\ l_{21} &#x26; 1 &#x26; 0 \\\\ l_{31} &#x26; l_{32} &#x26; 1\\\\ \\end{pmatrix} \\begin{pmatrix} u_{11} &#x26; u_{12} &#x26; u_{13} \\\\ 0 &#x26; u_{22} &#x26; u_{23} \\\\ 0 &#x26; 0 &#x26; u_{33} \\end{pmatrix} = \\begin{pmatrix} u_{11} &#x26; u_{12} &#x26; u_{13} \\\\ u_{11}l_{21} &#x26; u_{12}l_{21}+u_{22} &#x26; u_{13}l_{21}+u_{23} \\\\ u_{11}l_{31} &#x26; u_{12}l_{31}+u_{22}l_{32} &#x26; u_{13}l_{31} + u_{23}l_{32}+u_{33} \\end{pmatrix} = LU\\end{align}</p>\n<p>Solving for the other $l$ and $u$, we get the following equations:</p>\n<p>$u_{11}=a_{11}$</p>\n<p>$u_{12}=a_{12}$</p>\n<p>$u_{13}=a_{13}$</p>\n<p>$u_{22}=a_{22} - u_{12}l_{21}$</p>\n<p>$u_{23}=a_{23} - u_{13}l_{21}$</p>\n<p>$u_{33}=a_{33} - (u_{13}l_{31} + u_{23}l_{32})$</p>\n<p>and for $l$:</p>\n<p>$l_{21}=\\frac{1}{u_{11}} a_{21}$</p>\n<p>$l_{31}=\\frac{1}{u_{11}} a_{31}$</p>\n<p>$l_{32}=\\frac{1}{u_{22}} (a_{32} - u_{12}l_{31})$</p>\n<p>We see that there is a calculation pattern, which can be expressed as the following formulas, first for $U$</p>\n<p>$u_{ij} = a_{ij} - \\sum_{k=1}^{i-1} u_{kj}l_{ik}$</p>\n<p>and then for $L$</p>\n<p>$l_{ij} = \\frac{1}{u_{jj}} (a_{ij} - \\sum_{k=1}^{j-1} u_{kj}l_{ik})$</p>\n<p>We see in the second formula that to get the $l_{ij}$ below the diagonal, we have to divide by the diagonal element (pivot) $u_{jj}$, so we get problems when $u_{jj}$ is either 0 or very small, which leads to numerical instability.</p>\n<p>The solution to this problem is <em>pivoting</em> $A$, which means rearranging the rows of $A$, prior to the $LU$ decomposition, in a way that the largest element of each column gets onto the diagonal of $A$. Rearranging the rows means to multiply $A$ by a permutation matrix $P$:</p>\n<p>$PA \\Rightarrow A'$</p>\n<p>Example:</p>\n<p>\\begin{align} \\begin{pmatrix} 0 &#x26; 1 \\\\ 1 &#x26; 0 \\end{pmatrix} \\begin{pmatrix} 1 &#x26; 4 \\\\ 2 &#x26; 3 \\end{pmatrix} \\Rightarrow \\begin{pmatrix} 2 &#x26; 3 \\\\ 1 &#x26; 4 \\end{pmatrix} \\end{align}</p>\n<p>The decomposition algorithm is then applied on the rearranged matrix so that</p>\n<p>$PA = LU$</p>\n</section>","id":"5e6decd8ec8d7db960950d1c","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>The task is to implement a routine which will take a square nxn matrix $A$ and return a lower triangular matrix $L$, a upper triangular matrix $U$ and a permutation matrix $P$, so that the above equation is fulfilled. The returned value should be in the form <code>[L, U, P]</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385280,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/lu-decomposition","tests":[{"text":"<p><code>luDecomposition</code> should be a function.</p>","testString":"assert(typeof luDecomposition == 'function');"},{"text":"<p><code>luDecomposition([[1, 3, 5], [2, 4, 7], [1, 1, 0]])</code> should return a array.</p>","testString":"assert(\n  Array.isArray(\n    luDecomposition([\n      [1, 3, 5],\n      [2, 4, 7],\n      [1, 1, 0]\n    ])\n  )\n);"},{"text":"<p><code>luDecomposition([[1, 3, 5], [2, 4, 7], [1, 1, 0]])</code> should return <code>[[[1, 0, 0], [0.5, 1, 0], [0.5, -1, 1]], [[2, 4, 7], [0, 1, 1.5], [0, 0, -2]], [[0, 1, 0], [1, 0, 0], [0, 0, 1]]]</code>.</p>","testString":"assert.deepEqual(\n  luDecomposition([\n    [1, 3, 5],\n    [2, 4, 7],\n    [1, 1, 0]\n  ]),\n  [\n    [\n      [1, 0, 0],\n      [0.5, 1, 0],\n      [0.5, -1, 1]\n    ],\n    [\n      [2, 4, 7],\n      [0, 1, 1.5],\n      [0, 0, -2]\n    ],\n    [\n      [0, 1, 0],\n      [1, 0, 0],\n      [0, 0, 1]\n    ]\n  ]\n);"},{"text":"<p><code>luDecomposition([[11, 9, 24, 2], [1, 5, 2, 6], [3, 17, 18, 1], [2, 5, 7, 1]])</code> should return <code>[[[1, 0, 0, 0], [0.2727272727272727, 1, 0, 0], [0.09090909090909091, 0.2875, 1, 0], [0.18181818181818182, 0.23124999999999996, 0.0035971223021580693, 1]], [[11, 9, 24, 2], [0, 14.545454545454547, 11.454545454545455, 0.4545454545454546], [0, 0, -3.4749999999999996, 5.6875], [0, 0, 0, 0.510791366906476]], [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]]</code>.</p>","testString":"assert.deepEqual(\n  luDecomposition([\n    [11, 9, 24, 2],\n    [1, 5, 2, 6],\n    [3, 17, 18, 1],\n    [2, 5, 7, 1]\n  ]),\n  [\n    [\n      [1, 0, 0, 0],\n      [0.2727272727272727, 1, 0, 0],\n      [0.09090909090909091, 0.2875, 1, 0],\n      [0.18181818181818182, 0.23124999999999996, 0.0035971223021580693, 1]\n    ],\n    [\n      [11, 9, 24, 2],\n      [0, 14.545454545454547, 11.454545454545455, 0.4545454545454546],\n      [0, 0, -3.4749999999999996, 5.6875],\n      [0, 0, 0, 0.510791366906476]\n    ],\n    [\n      [1, 0, 0, 0],\n      [0, 0, 1, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 1]\n    ]\n  ]\n);"},{"text":"<p><code>luDecomposition([[1, 1, 1], [4, 3, -1], [3, 5, 3]])</code> should return <code>[[[1, 0, 0], [0.75, 1, 0], [0.25, 0.09090909090909091, 1]], [[4, 3, -1], [0, 2.75, 3.75], [0, 0, 0.9090909090909091]], [[0, 1, 0], [0, 0, 1], [1, 0, 0]]]</code>.</p>","testString":"assert.deepEqual(\n  luDecomposition([\n    [1, 1, 1],\n    [4, 3, -1],\n    [3, 5, 3]\n  ]),\n  [\n    [\n      [1, 0, 0],\n      [0.75, 1, 0],\n      [0.25, 0.09090909090909091, 1]\n    ],\n    [\n      [4, 3, -1],\n      [0, 2.75, 3.75],\n      [0, 0, 0.9090909090909091]\n    ],\n    [\n      [0, 1, 0],\n      [0, 0, 1],\n      [1, 0, 0]\n    ]\n  ]\n);"},{"text":"<p><code>luDecomposition([[1, -2, 3], [2, -5, 12], [0, 2, -10]])</code> should return <code>[[[1, 0, 0], [0, 1, 0], [0.5, 0.25, 1]], [[2, -5, 12], [0, 2, -10], [0, 0, -0.5]], [[0, 1, 0], [0, 0, 1], [1, 0, 0]]]</code>.</p>","testString":"assert.deepEqual(\n  luDecomposition([\n    [1, -2, 3],\n    [2, -5, 12],\n    [0, 2, -10]\n  ]),\n  [\n    [\n      [1, 0, 0],\n      [0, 1, 0],\n      [0.5, 0.25, 1]\n    ],\n    [\n      [2, -5, 12],\n      [0, 2, -10],\n      [0, 0, -0.5]\n    ],\n    [\n      [0, 1, 0],\n      [0, 0, 1],\n      [1, 0, 0]\n    ]\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function luDecomposition(A) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"lu-decomposition","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/lucas-lehmer-test","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/loop-over-multiple-arrays-simultaneously","id":"5e6decd8ec8d7db960950d1c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/lu-decomposition"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/self-describing-numbers",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Self Describing Numbers","description":"<section id=\"description\">\n<p>There are several so-called \"self-describing\" or \"self-descriptive\" integers.</p>\n<p>An integer is said to be \"self-describing\" if it has the property that, when digit positions are labeled 0 to N-1, the digit in each position is equal to the number of times that digit appears in the number.</p>\n<p>For example, <strong>2020</strong> is a four-digit self describing number:</p>\n<ul>\n    <li> position 0 has value 2 and there are two 0s in the number; </li>\n    <li> position 1 has value 0 and there are no 1s in the number; </li>\n    <li> position 2 has value 2 and there are two 2s; </li>\n    <li> position 3 has value 0 and there are zero 3s; </li>\n</ul>\n<p>Self-describing numbers &#x3C; 100,000,000 are: 1210, 2020, 21200, 3211000, 42101000.</p>\n</section>","id":"5eaf48389ee512d4d103684b","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes a positive integer as a parameter. If it is self-describing return true. Otherwise, return false.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385289,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/self-describing-numbers","tests":[{"text":"<p><code>isSelfDescribing</code> should be a function.</p>","testString":"assert(typeof isSelfDescribing == 'function');"},{"text":"<p><code>isSelfDescribing()</code> should return a boolean.</p>","testString":"assert(typeof isSelfDescribing(2020) == 'boolean');"},{"text":"<p><code>isSelfDescribing(2020)</code> should return <code>true</code>.</p>","testString":"assert.equal(isSelfDescribing(2020), true);"},{"text":"<p><code>isSelfDescribing(3021)</code> should return <code>false</code>.</p>","testString":"assert.equal(isSelfDescribing(3021), false);"},{"text":"<p><code>isSelfDescribing(3211000)</code> should return <code>true</code>.</p>","testString":"assert.equal(isSelfDescribing(3211000), true);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function isSelfDescribing(n) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"self-describing-numbers","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/self-referential-sequence","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sedols","id":"5eaf48389ee512d4d103684b"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/self-describing-numbers"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
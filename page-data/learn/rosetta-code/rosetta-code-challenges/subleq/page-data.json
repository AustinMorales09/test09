{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/subleq",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Subleq","description":"<section id=\"description\">\n<p>Subleq is an example of a One-Instruction Set Computer (OISC).</p>\n<p>It is named after its only instruction, which is <strong>SU</strong>btract and <strong>B</strong>ranch if <strong>L</strong>ess than or <strong>EQ</strong>ual to zero.</p>\n<p>Your task is to create an interpreter which emulates such a machine.</p>\n<p>The machine's memory consists of an array of signed integers. Any reasonable word size is fine, but the memory must be able to hold negative as well as positive numbers.</p>\n<p>Execution begins with the instruction pointer aimed at the first word, which is address 0. It proceeds as follows:</p>\n<ol>\n  <li>Let A, B, and C be the value stored in the three consecutive words in memory starting at the instruction pointer.</li>\n  <li>Advance the instruction pointer 3 words to point at the address after the one containing C.</li>\n  <li>If A is -1, then a character is read from standard input and its code point stored in the address given by B. C is unused.</li>\n  <li>If B is -1, then the number contained in the address given by A is interpreted as a code point and the corresponding character output. C is again unused.</li>\n  <li>Otherwise, both A and B are treated as the addresses of memory locations. The number contained in the address given by A is subtracted from the number at the address given by B (and the result stored back in address B). If the result is zero or negative, the value C becomes the new instruction pointer.</li>\n  <li>If the instruction pointer becomes negative, execution halts.</li>\n</ol>\n<p>Other negative addresses besides -1 may be treated as equivalent to -1, or generate an error, as you see fit.</p>\n<p>Your solution should accept a program to execute on the machine, separately from the input fed to the program itself.</p>\n<p>This program should be in raw subleq \"machine code\" - whitespace-separated decimal numbers, with no symbolic names or other assembly-level extensions, to be loaded into memory starting at address 0. Show the output of your solution when fed this \"Hello, world!\" program. (Note that the example assumes ASCII or a superset of it, such as any of the Latin-N character sets or Unicode. You may translate it into another character set if your implementation is on a non-ASCiI-compatible environment.)</p>\n<pre>15 17 -1 17 -1 -1 16 1 -1 16 3 -1 15 15 0 0 -1 72 101 108 108 111 44 32 119 111 114 108 100 33 10 0</pre>\n<p>Which corresponds to something like this in a hypothetical assembler language:</p>\n<pre>start:\n    zero, message, -1\n    message, -1, -1\n    neg1, start+1, -1\n    neg1, start+3, -1\n    zero, zero, start\nzero: 0\nneg1: -1\nmessage: \"Hello, world!\\n\\0\"\n</pre>\n</section>","id":"5a23c84252665b21eecc8038","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes an array of integers as a parameter. This represents the memory elements. The function should interpret the sequence and return the output string. For this task, assume that there is no standard input.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302328,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/subleq","tests":[{"text":"<p><code>Subleq</code> should be a function.</p>","testString":"assert(typeof Subleq == 'function');"},{"text":"<p><code>Subleq([15, 17, -1, 17, -1, -1, 16, 1, -1, 16, 3, -1, 15, 15, 0, 0, -1, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 0])</code> should return a string.</p>","testString":"assert(\n  typeof Subleq([\n    15,\n    17,\n    -1,\n    17,\n    -1,\n    -1,\n    16,\n    1,\n    -1,\n    16,\n    3,\n    -1,\n    15,\n    15,\n    0,\n    0,\n    -1,\n    72,\n    101,\n    108,\n    108,\n    111,\n    44,\n    32,\n    119,\n    111,\n    114,\n    108,\n    100,\n    33,\n    0\n  ]) == 'string'\n);"},{"text":"<p><code>Subleq([15, 17, -1, 17, -1, -1, 16, 1, -1, 16, 3, -1, 15, 15, 0, 0, -1, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 0])</code> should return <code>\"Hello, world!\"</code>.</p>","testString":"assert.equal(\n  Subleq([\n    15,\n    17,\n    -1,\n    17,\n    -1,\n    -1,\n    16,\n    1,\n    -1,\n    16,\n    3,\n    -1,\n    15,\n    15,\n    0,\n    0,\n    -1,\n    72,\n    101,\n    108,\n    108,\n    111,\n    44,\n    32,\n    119,\n    111,\n    114,\n    108,\n    100,\n    33,\n    0\n  ]),\n  'Hello, world!'\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Subleq(mem) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"subleq","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sudoku","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/strip-control-codes-and-extended-characters-from-a-string","id":"5a23c84252665b21eecc8038"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/subleq"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/tokenize-a-string-with-escaping",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Tokenize a string with escaping","description":"<section id=\"description\">\n<p>Write a function or program that can split a string at each non-escaped occurrence of a separator character.</p>\n<p>It should accept three input parameters:</p>\n<ul>\n  <li>The <strong>string</strong></li>\n  <li>The <strong>separator character</strong></li>\n  <li>The <strong>escape character</strong></li>\n</ul>\n<p>It should output a list of strings.</p>\n<p>Rules for splitting:</p>\n<ul>\n  <li>The fields that were separated by the separators, become the elements of the output list.</li>\n  <li>Empty fields should be preserved, even at the start and end.</li>\n</ul>\n<p>Rules for escaping:</p>\n<ul>\n  <li>\"Escaped\" means preceded by an occurrence of the escape character that is not already escaped itself.</li>\n  <li>When the escape character precedes a character that has no special meaning, it still counts as an escape (but does not do anything special).</li>\n  <li>Each occurrences of the escape character that was used to escape something, should not become part of the output.</li>\n</ul>\n<p>Demonstrate that your function satisfies the following test-case:</p>\n<p>Given the string</p>\n<pre>one^|uno||three^^^^|four^^^|^cuatro|</pre>\n<p>and using <code>|</code> as a separator and <code>^</code> as escape character, your function should output the following array:</p>\n<pre>  ['one|uno', '', 'three^^', 'four^|cuatro', '']\n</pre>\n</section>","id":"594faaab4e2a8626833e9c3d","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302338,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/tokenize-a-string-with-escaping","tests":[{"text":"<p><code>tokenize</code> should be a function.</p>","testString":"assert(typeof tokenize === 'function');"},{"text":"<p><code>tokenize</code> should return an array.</p>","testString":"assert(typeof tokenize('a', 'b', 'c') === 'object');"},{"text":"<p><code>tokenize('one^|uno||three^^^^|four^^^|^cuatro|', '|', '^')</code> should return <code>['one|uno', '', 'three^^', 'four^|cuatro', '']</code></p>","testString":"assert.deepEqual(tokenize(testStr1, '|', '^'), res1);"},{"text":"<p><code>tokenize('a@&#x26;bcd&#x26;ef&#x26;&#x26;@@hi', '&#x26;', '@')</code> should return <code>['a&#x26;bcd', 'ef', '', '@hi']</code></p>","testString":"assert.deepEqual(tokenize(testStr2, '&', '@'), res2);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function tokenize(str, sep, esc) {\n  return true;\n}","head":"","tail":"const testStr1 = 'one^|uno||three^^^^|four^^^|^cuatro|';\nconst res1 = ['one|uno', '', 'three^^', 'four^|cuatro', ''];\n\n// TODO add more tests\nconst testStr2 = 'a@&bcd&ef&&@@hi';\nconst res2 = ['a&bcd', 'ef', '', '@hi'];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"tokenize-a-string-with-escaping","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/topological-sort","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/taxicab-numbers","id":"594faaab4e2a8626833e9c3d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/tokenize-a-string-with-escaping"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/balanced-brackets",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Balanced brackets","description":"<section id=\"description\">\n<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>\n<p><strong>Examples:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>][</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>[][]</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>][]</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>[]][[]</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>[[[[]]]]</code></td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n</section>","id":"594dc6c729e5700999302b45","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302230,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/balanced-brackets","tests":[{"text":"<p><code>isBalanced</code> should be a function.</p>","testString":"assert(typeof isBalanced === 'function');"},{"text":"<p><code>isBalanced(\"[]\")</code> should return true.</p>","testString":"assert(isBalanced(testCases[0]));"},{"text":"<p><code>isBalanced(\"]][[[][][][]][\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[1]));"},{"text":"<p><code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.</p>","testString":"assert(isBalanced(testCases[2]));"},{"text":"<p><code>isBalanced(\"][\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[3]));"},{"text":"<p><code>isBalanced(\"[[[]]]][[]\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[4]));"},{"text":"<p><code>isBalanced(\"][[]\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[5]));"},{"text":"<p><code>isBalanced(\"][[][]][[[]]\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[6]));"},{"text":"<p><code>isBalanced(\"[[][]]][\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[7]));"},{"text":"<p><code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[8]));"},{"text":"<p><code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[9]));"},{"text":"<p><code>isBalanced(\"][]][[][\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[10]));"},{"text":"<p><code>isBalanced(\"[[]][[][]]\")</code> should return true.</p>","testString":"assert(isBalanced(testCases[11]));"},{"text":"<p><code>isBalanced(\"[[]]\")</code> should return true.</p>","testString":"assert(isBalanced(testCases[12]));"},{"text":"<p><code>isBalanced(\"]][]][[]][[[\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[13]));"},{"text":"<p><code>isBalanced(\"][]][][[\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[14]));"},{"text":"<p><code>isBalanced(\"][][\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[15]));"},{"text":"<p><code>isBalanced(\"[]]]\")</code> should return false.</p>","testString":"assert(!isBalanced(testCases[16]));"},{"text":"<p><code>isBalanced(\"\")</code> should return true.</p>","testString":"assert(isBalanced(testCases[17]));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function isBalanced(str) {\n\n  return true;\n}","head":"","tail":"const testCases = [\n  '[]',\n  ']][[[][][][]][',\n  '[][[[[][][[[]]]]]]',\n  '][',\n  '[[[]]]][[]',\n  '][[]',\n  '][[][]][[[]]',\n  '[[][]]][',\n  '[[[]]][[]]]][][[',\n  '[]][[]]][[[[][]]',\n  '][]][[][',\n  '[[]][[][]]',\n  '[[]]',\n  ']][]][[]][[[',\n  '][]][][[',\n  '][][',\n  '[]]]',\n  ''\n];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"balanced-brackets","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/circles-of-given-radius-through-two-points","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/babbage-problem","id":"594dc6c729e5700999302b45"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/balanced-brackets"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
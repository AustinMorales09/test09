{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/ackermann-function",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Ackermann function","description":"<section id=\"description\">\n<p>The Ackermann function is a classic example of a recursive function, notable especially because it is not a primitive recursive function. It grows very quickly in value, as does the size of its call tree.</p>\n<p>The Ackermann function is usually defined as follows:</p>\n<p>$A(m, n) = \\begin{cases} n+1 &#x26; \\mbox{if } m = 0 \\\\ A(m-1, 1) &#x26; \\mbox{if } m > 0 \\mbox{ and } n = 0 \\\\ A(m-1, A(m, n-1)) &#x26; \\mbox{if } m > 0 \\mbox{ and } n > 0. \\end{cases}$</p>\n<p>Its arguments are never negative and it always terminates.</p>\n</section>","id":"594810f028c0303b75339acf","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function which returns the value of $A(m, n)$. Arbitrary precision is preferred (since the function grows so quickly), but not required.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302223,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/ackermann-function","tests":[{"text":"<p><code>ack</code> should be a function.</p>","testString":"assert(typeof ack === 'function');"},{"text":"<p><code>ack(0, 0)</code> should return 1.</p>","testString":"assert(ack(0, 0) === 1);"},{"text":"<p><code>ack(1, 1)</code> should return 3.</p>","testString":"assert(ack(1, 1) === 3);"},{"text":"<p><code>ack(2, 5)</code> should return 13.</p>","testString":"assert(ack(2, 5) === 13);"},{"text":"<p><code>ack(3, 3)</code> should return 61.</p>","testString":"assert(ack(3, 3) === 61);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function ack(m, n) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"ackermann-function","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/align-columns","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/accumulator-factory","id":"594810f028c0303b75339acf"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/ackermann-function"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
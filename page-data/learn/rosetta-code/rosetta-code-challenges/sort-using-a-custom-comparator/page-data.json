{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/sort-using-a-custom-comparator",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Sort using a custom comparator","description":"<section id=\"description\">\n<p>Write a function to sort an array (or list) of strings in order of descending length, and in ascending lexicographic order for strings of equal length.</p>\n</section>","id":"5a23c84252665b21eecc8016","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302309,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/sort-using-a-custom-comparator","tests":[{"text":"<p><code>lengthSorter</code> should be a function.</p>","testString":"assert(typeof lengthSorter == 'function');"},{"text":"<p><code>lengthSorter([\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"])</code> should return an array.</p>","testString":"assert(\n  Array.isArray(\n    lengthSorter([\n      'Here',\n      'are',\n      'some',\n      'sample',\n      'strings',\n      'to',\n      'be',\n      'sorted'\n    ])\n  )\n);"},{"text":"<p><code>lengthSorter([\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"])</code> should return <code>[\"strings\", \"sample\", \"sorted\", \"Here\", \"some\", \"are\", \"be\", \"to\"]</code>.</p>","testString":"assert.deepEqual(\n  lengthSorter([\n    'Here',\n    'are',\n    'some',\n    'sample',\n    'strings',\n    'to',\n    'be',\n    'sorted'\n  ]),\n  ['strings', 'sample', 'sorted', 'Here', 'some', 'are', 'be', 'to']\n);"},{"text":"<p><code>lengthSorter([\"I\", \"hope\", \"your\", \"day\", \"is\", \"going\", \"good\", \"?\"])</code> should return <code>[\"going\", \"good\", \"hope\", \"your\", \"day\", \"is\", \"?\",\"I\"]</code>.</p>","testString":"assert.deepEqual(\n  lengthSorter(['I', 'hope', 'your', 'day', 'is', 'going', 'good', '?']),\n  ['going', 'good', 'hope', 'your', 'day', 'is', '?', 'I']\n);"},{"text":"<p><code>lengthSorter([\"Mine\", \"is\", \"going\", \"great\"])</code> should return <code>[\"going\", \"great\", \"Mine\", \"is\"]</code>.</p>","testString":"assert.deepEqual(lengthSorter(['Mine', 'is', 'going', 'great']), [\n  'going',\n  'great',\n  'Mine',\n  'is'\n]);"},{"text":"<p><code>lengthSorter([\"Have\", \"fun\", \"sorting\", \"!!\"])</code> should return <code>[\"sorting\", \"Have\", \"fun\", \"!!\"]</code>.</p>","testString":"assert.deepEqual(lengthSorter(['Have', 'fun', 'sorting', '!!']), [\n  'sorting',\n  'Have',\n  'fun',\n  '!!'\n]);"},{"text":"<p><code>lengthSorter([\"Everything\", \"is\", \"good\", \"!!\"])</code> should return <code>[\"Everything\", \"good\", \"!!\", \"is\"]</code>.</p>","testString":"assert.deepEqual(lengthSorter(['Everything', 'is', 'good', '!!']), [\n  'Everything',\n  'good',\n  '!!',\n  'is'\n]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function lengthSorter(arr) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"sort-using-a-custom-comparator","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sorting-algorithmsbead-sort","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sort-stability","id":"5a23c84252665b21eecc8016"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/sort-using-a-custom-comparator"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/k-d-tree",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"K-d tree","description":"<section id=\"description\">\n<p>A k-d tree (short for <em>k</em>-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. k-d trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbor searches). k-d trees are a special case of binary space partitioning trees. k-d trees are not suitable, however, for efficiently finding the nearest neighbor in high dimensional spaces. As a general rule, if the dimensionality is <em>k</em>, the number of points in the data, <em>N</em>, should be <em>N</em> â‰« 2<sup><i>k</i></sup>. Otherwise, when k-d trees are used with high-dimensional data, most of the points in the tree will be evaluated and the efficiency is no better than exhaustive search, and other methods such as approximate nearest-neighbor are used instead.</p>\n</section>","id":"5a23c84252665b21eecc7ecb","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to perform a nearest neighbour search using k-d tree. The function takes two parameters: an array of k-dimensional points, and a single k-dimensional point whose nearest neighbour should be returned by the function. A k-dimensional point will be given as an array of k elements.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302295,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/k-d-tree","tests":[{"text":"<p><code>kdNN</code> should be a function.</p>","testString":"assert(typeof kdNN == 'function');"},{"text":"<p><code>kdNN([[[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]], [9, 2])</code> should return an array.</p>","testString":"assert(\n  Array.isArray(\n    kdNN(\n      [\n        [2, 3],\n        [5, 4],\n        [9, 6],\n        [4, 7],\n        [8, 1],\n        [7, 2]\n      ],\n      [9, 2]\n    )\n  )\n);"},{"text":"<p><code>kdNN([[[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]], [9, 2])</code> should return <code>[ 8, 1 ]</code>.</p>","testString":"assert.deepEqual(\n  kdNN(\n    [\n      [2, 3],\n      [5, 4],\n      [9, 6],\n      [4, 7],\n      [8, 1],\n      [7, 2]\n    ],\n    [9, 2]\n  ),\n  [8, 1]\n);"},{"text":"<p><code>kdNN([[[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]], [7, 1])</code> should return <code>[ 8, 1 ]</code>.</p>","testString":"assert.deepEqual(\n  kdNN(\n    [\n      [2, 3],\n      [5, 4],\n      [9, 6],\n      [4, 7],\n      [8, 1],\n      [7, 2]\n    ],\n    [7, 1]\n  ),\n  [8, 1]\n);"},{"text":"<p><code>kdNN([[[2, 3], [5, 4], [9, 6], [4, 7], [8, 1], [7, 2]], [3, 2])</code> should return <code>[ 2, 3 ]</code>.</p>","testString":"assert.deepEqual(\n  kdNN(\n    [\n      [2, 3],\n      [5, 4],\n      [9, 6],\n      [4, 7],\n      [8, 1],\n      [7, 2]\n    ],\n    [3, 2]\n  ),\n  [2, 3]\n);"},{"text":"<p><code>kdNN([[2, 3, 1], [9, 4, 5], [4, 6, 7], [1, 2, 5], [7, 8, 9], [3, 6, 1]], [1, 2, 3])</code> should return <code>[ 1, 2, 5 ]</code>.</p>","testString":"assert.deepEqual(\n  kdNN(\n    [\n      [2, 3, 1],\n      [9, 4, 5],\n      [4, 6, 7],\n      [1, 2, 5],\n      [7, 8, 9],\n      [3, 6, 1]\n    ],\n    [1, 2, 3]\n  ),\n  [1, 2, 5]\n);"},{"text":"<p><code>kdNN([[2, 3, 1], [9, 4, 5], [4, 6, 7], [1, 2, 5], [7, 8, 9], [3, 6, 1]], [4, 5, 6])</code> should return <code>[ 4, 6, 7 ]</code>.</p>","testString":"assert.deepEqual(\n  kdNN(\n    [\n      [2, 3, 1],\n      [9, 4, 5],\n      [4, 6, 7],\n      [1, 2, 5],\n      [7, 8, 9],\n      [3, 6, 1]\n    ],\n    [4, 5, 6]\n  ),\n  [4, 6, 7]\n);"},{"text":"<p><code>kdNN([[2, 3, 1], [9, 4, 5], [4, 6, 7], [1, 2, 5], [7, 8, 9], [3, 6, 1]], [8, 8, 8])</code> should return <code>[ 7, 8, 9 ]</code>.</p>","testString":"assert.deepEqual(\n  kdNN(\n    [\n      [2, 3, 1],\n      [9, 4, 5],\n      [4, 6, 7],\n      [1, 2, 5],\n      [7, 8, 9],\n      [3, 6, 1]\n    ],\n    [8, 8, 8]\n  ),\n  [7, 8, 9]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function kdNN(fpoints, fpoint) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"k-d-tree","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/kaprekar-numbers","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/josephus-problem","id":"5a23c84252665b21eecc7ecb"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/k-d-tree"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
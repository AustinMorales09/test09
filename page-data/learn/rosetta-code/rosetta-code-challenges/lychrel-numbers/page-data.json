{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/lychrel-numbers",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Lychrel numbers","description":"<section id=\"description\">\n<ol>\n  <li>Take an integer <code>n₀</code>, greater than zero.</li>\n  <li>Form the next number <code>n</code> of the series by reversing <code>n₀</code> and adding it to <code>n₀</code></li>\n  <li>Stop when <code>n</code> becomes palindromic - i.e. the digits of <code>n</code> in reverse order == <code>n</code>.</li>\n</ol>\n<p>The above recurrence relation when applied to most starting numbers <code>n</code> = 1, 2, ... terminates in a palindrome quite quickly.</p>\n<p>For example if <code>n₀</code> = 12 we get:</p>\n<pre><code class=\"language-bash\">12\n12 + 21 = 33,  a palindrome!\n</code></pre>\n<p>And if <code>n₀</code> = 55 we get:</p>\n<pre><code class=\"language-bash\">55\n55 + 55 = 110\n110 + 011 = 121,  a palindrome!\n</code></pre>\n<p>Notice that the check for a palindrome happens <em>after</em> an addition.</p>\n<p>Some starting numbers seem to go on forever; the recurrence relation for 196 has been calculated for millions of repetitions forming numbers with millions of digits, without forming a palindrome. These numbers that do not end in a palindrome are called <strong>Lychrel numbers</strong>.</p>\n<p>For the purposes of this task a Lychrel number is any starting number that does not form a palindrome within 500 (or more) iterations.</p>\n<p><strong>Seed and related Lychrel numbers:</strong></p>\n<p>Any integer produced in the sequence of a Lychrel number is also a Lychrel number.</p>\n<p>In general, any sequence from one Lychrel number <em>might</em> converge to join the sequence from a prior Lychrel number candidate; for example the sequences for the numbers 196 and then 689 begin:</p>\n<pre><code class=\"language-bash\">    196\n    196 + 691 = 887\n    887 + 788 = 1675\n    1675 + 5761 = 7436\n    7436 + 6347 = 13783\n    13783 + 38731 = 52514\n    52514 + 41525 = 94039\n    ...\n    689\n    689 + 986 = 1675\n    1675 + 5761 = 7436\n    ...\n</code></pre>\n<p>So we see that the sequence starting with 689 converges to, and continues with the same numbers as that for 196.</p>\n<p>Because of this we can further split the Lychrel numbers into true <strong>Seed</strong> Lychrel number candidates, and <strong>Related</strong> numbers that produce no palindromes but have integers in their sequence seen as part of the sequence generated from a lower Lychrel number.</p>\n</section>","id":"5ea2815a8640bcc6cb7dab3c","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes a number as a parameter. Return true if the number is a Lynchrel number. Otherwise, return false. Remember that the iteration limit is 500.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385287,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/lychrel-numbers","tests":[{"text":"<p><code>isLychrel</code> should be a function.</p>","testString":"assert(typeof isLychrel === 'function');"},{"text":"<p><code>isLychrel(12)</code> should return a boolean.</p>","testString":"assert(typeof isLychrel(12) === 'boolean');"},{"text":"<p><code>isLychrel(12)</code> should return <code>false</code>.</p>","testString":"assert.equal(isLychrel(12), false);"},{"text":"<p><code>isLychrel(55)</code> should return <code>false</code>.</p>","testString":"assert.equal(isLychrel(55), false);"},{"text":"<p><code>isLychrel(196)</code> should return <code>true</code>.</p>","testString":"assert.equal(isLychrel(196), true);"},{"text":"<p><code>isLychrel(879)</code> should return <code>true</code>.</p>","testString":"assert.equal(isLychrel(879), true);"},{"text":"<p><code>isLychrel(44987)</code> should return <code>false</code>.</p>","testString":"assert.equal(isLychrel(44987), false);"},{"text":"<p><code>isLychrel(7059)</code> should return <code>true</code>.</p>","testString":"assert.equal(isLychrel(7059), true);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function isLychrel(n) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"lychrel-numbers","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/lzw-compression","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/luhn-test-of-credit-card-numbers","id":"5ea2815a8640bcc6cb7dab3c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/lychrel-numbers"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
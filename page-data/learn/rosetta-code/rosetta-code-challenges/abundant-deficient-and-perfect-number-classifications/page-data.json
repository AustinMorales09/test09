{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/abundant-deficient-and-perfect-number-classifications",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Abundant, deficient and perfect number classifications","description":"<section id=\"description\">\n<p>These define three classifications of positive integers based on their proper divisors.</p>\n<p>Let $P(n)$ be the sum of the proper divisors of <code>n</code> where proper divisors are all positive integers <code>n</code> other than <code>n</code> itself.</p>\n<p>If <code>P(n) &#x3C; n</code> then <code>n</code> is classed as <code>deficient</code></p>\n<p>If <code>P(n) === n</code> then <code>n</code> is classed as <code>perfect</code></p>\n<p>If <code>P(n) > n</code> then <code>n</code> is classed as <code>abundant</code></p>\n<p><strong>Example</strong>: <code>6</code> has proper divisors of <code>1</code>, <code>2</code>, and <code>3</code>. <code>1 + 2 + 3 = 6</code>, so <code>6</code> is classed as a perfect number.</p>\n</section>","id":"594810f028c0303b75339acd","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Implement a function that calculates how many of the integers from <code>1</code> to <code>num</code> (inclusive) are in each of the three classes. Output the result as an array in the following format <code>[deficient, perfect, abundant]</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302221,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/abundant-deficient-and-perfect-number-classifications","tests":[{"text":"<p><code>getDPA</code> should be a function.</p>","testString":"assert(typeof getDPA === 'function');"},{"text":"<p><code>getDPA(5000)</code> should return an array.</p>","testString":"assert(Array.isArray(getDPA(5000)));"},{"text":"<p><code>getDPA(5000)</code> return array should have a length of <code>3</code>.</p>","testString":"assert(getDPA(5000).length === 3);"},{"text":"<p><code>getDPA(5000)</code> should return <code>[3758, 3, 1239]</code>.</p>","testString":"assert.deepEqual(getDPA(5000), [3758, 3, 1239]);"},{"text":"<p><code>getDPA(10000)</code> should return <code>[7508, 4, 2488]</code>.</p>","testString":"assert.deepEqual(getDPA(10000), [7508, 4, 2488]);"},{"text":"<p><code>getDPA(20000)</code> should return <code>[15043, 4, 4953]</code>.</p>","testString":"assert.deepEqual(getDPA(20000), [15043, 4, 4953]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function getDPA(num) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"abundant-deficient-and-perfect-number-classifications","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/accumulator-factory","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/abc-problem","id":"594810f028c0303b75339acd"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/abundant-deficient-and-perfect-number-classifications"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
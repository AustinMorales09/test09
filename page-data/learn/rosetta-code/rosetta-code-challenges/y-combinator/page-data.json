{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/y-combinator",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Y combinator","description":"<section id=\"description\">\n<p>In strict <a href=\"https://www.freecodecamp.org/news/the-principles-of-functional-programming/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">functional programming</a> and the lambda calculus, functions (lambda expressions) don't have state and are only allowed to refer to arguments of enclosing functions. This rules out the usual definition of a recursive function wherein a function is associated with the state of a variable and this variable's state is used in the body of the function.</p>\n<p>The Y combinator is itself a stateless function that, when applied to another stateless function, returns a recursive version of the function. The Y combinator is the simplest of the class of such functions, called fixed-point combinators.</p>\n</section>","id":"594810f028c0303b75339ad5","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Define the stateless Y combinator function and use it to compute the factorials. The <code>factorial(N)</code> function is already given to you.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302345,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/y-combinator","tests":[{"text":"<p>Y should return a function.</p>","testString":"assert.equal(typeof Y((f) => (n) => n), 'function');"},{"text":"<p>factorial(1) should return 1.</p>","testString":"assert.equal(factorial(1), 1);"},{"text":"<p>factorial(2) should return 2.</p>","testString":"assert.equal(factorial(2), 2);"},{"text":"<p>factorial(3) should return 6.</p>","testString":"assert.equal(factorial(3), 6);"},{"text":"<p>factorial(4) should return 24.</p>","testString":"assert.equal(factorial(4), 24);"},{"text":"<p>factorial(10) should return 3628800.</p>","testString":"assert.equal(factorial(10), 3628800);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Y(f) {\n  return function() {\n\n  };\n}\n\nvar factorial = Y(function(f) {\n  return function (n) {\n    return n > 1 ? n * f(n - 1) : 1;\n  };\n});","head":"","tail":"var factorial = Y(f => n => (n > 1 ? n * f(n - 1) : 1));","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"y-combinator","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/zeckendorf-number-representation","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/word-wrap","id":"594810f028c0303b75339ad5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/y-combinator"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
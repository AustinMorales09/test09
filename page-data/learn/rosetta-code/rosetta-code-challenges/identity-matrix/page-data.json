{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/identity-matrix",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Identity matrix","description":"<section id=\"description\">\n<p>An <em>identity matrix</em> is a square matrix of size \\( n \\times n \\), where the diagonal elements are all <code>1</code>s (ones), and all the other elements are all <code>0</code>s (zeroes).</p>\n<ul>\n  <li style='list-style: none;'>\\(\\displaystyle I_{n}=\\begin{bmatrix} 1 &#x26; 0 &#x26; 0 \\cr 0 &#x26; 1 &#x26; 0 \\cr 0 &#x26; 0 &#x26; 1 \\cr \\end{bmatrix}\\)</li>\n</ul>\n</section>","id":"5a23c84252665b21eecc7eb1","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes a number <code>n</code> as a parameter and returns the identity matrix of order \\( n \\times n \\).</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302290,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/identity-matrix","tests":[{"text":"<p><code>idMatrix</code> should be a function.</p>","testString":"assert(typeof idMatrix == 'function');"},{"text":"<p><code>idMatrix(1)</code> should return an array.</p>","testString":"assert(Array.isArray(idMatrix(1)));"},{"text":"<p><code>idMatrix(1)</code> should return <code>[ [ 1 ] ]</code>.</p>","testString":"assert.deepEqual(idMatrix(1), results[0]);"},{"text":"<p><code>idMatrix(2)</code> should return <code>[ [ 1, 0 ], [ 0, 1 ] ]</code>.</p>","testString":"assert.deepEqual(idMatrix(2), results[1]);"},{"text":"<p><code>idMatrix(3)</code> should return <code>[ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ]</code>.</p>","testString":"assert.deepEqual(idMatrix(3), results[2]);"},{"text":"<p><code>idMatrix(4)</code> should return <code>[ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ]</code>.</p>","testString":"assert.deepEqual(idMatrix(4), results[3]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function idMatrix(n) {\n\n}","head":"","tail":"let results=[[ [ 1 ] ],\n[ [ 1, 0 ], [ 0, 1 ] ],\n[ [ 1, 0, 0 ], [ 0, 1, 0 ], [ 0, 0, 1 ] ],\n[ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ]]","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"identity-matrix","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/iterated-digits-squaring","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/iban","id":"5a23c84252665b21eecc7eb1"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/identity-matrix"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
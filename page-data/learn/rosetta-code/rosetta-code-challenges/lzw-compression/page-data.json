{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/lzw-compression",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"LZW compression","description":"<section id=\"description\">\n<p>The Lempel-Ziv-Welch (LZW) algorithm provides loss-less data compression.</p>\n</section>","id":"5ea2815e364d9a2222ea55f8","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes two parameters. The first parameter is a boolean where <code>true</code> indicates compress and <code>false</code> indicates decompress. The second parameter is either a string or an array to be processed. If it is a string to be compressed, return an array of numbers. If it's an array of numbers to be decompressed, return a string.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385288,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/lzw-compression","tests":[{"text":"<p><code>LZW</code> should be a function.</p>","testString":"assert(typeof LZW === 'function');"},{"text":"<p><code>LZW(true, \"TOBEORNOTTOBEORTOBEORNOT\")</code> should return a array.</p>","testString":"assert(Array.isArray(LZW(true, 'TOBEORNOTTOBEORTOBEORNOT')));"},{"text":"<p><code>LZW(false, [84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263])</code> should return a string.</p>","testString":"assert(\n  typeof LZW(false, [\n    84,\n    79,\n    66,\n    69,\n    79,\n    82,\n    78,\n    79,\n    84,\n    256,\n    258,\n    260,\n    265,\n    259,\n    261,\n    263\n  ]) === 'string'\n);"},{"text":"<p><code>LZW(true, \"TOBEORNOTTOBEORTOBEORNOT\")</code> should return <code>[84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263]</code>.</p>","testString":"assert.deepEqual(LZW(true, 'TOBEORNOTTOBEORTOBEORNOT'), [\n  84,\n  79,\n  66,\n  69,\n  79,\n  82,\n  78,\n  79,\n  84,\n  256,\n  258,\n  260,\n  265,\n  259,\n  261,\n  263\n]);"},{"text":"<p><code>LZW(false, [84, 79, 66, 69, 79, 82, 78, 79, 84, 256, 258, 260, 265, 259, 261, 263])</code> should return <code>\"TOBEORNOTTOBEORTOBEORNOT\"</code>.</p>","testString":"assert.equal(\n  LZW(false, [\n    84,\n    79,\n    66,\n    69,\n    79,\n    82,\n    78,\n    79,\n    84,\n    256,\n    258,\n    260,\n    265,\n    259,\n    261,\n    263\n  ]),\n  'TOBEORNOTTOBEORTOBEORNOT'\n);"},{"text":"<p><code>LZW(true, \"0123456789\")</code> should return <code>[48, 49, 50, 51, 52, 53, 54, 55, 56, 57]</code>.</p>","testString":"assert.deepEqual(LZW(true, '0123456789'), [\n  48,\n  49,\n  50,\n  51,\n  52,\n  53,\n  54,\n  55,\n  56,\n  57\n]);"},{"text":"<p><code>LZW(false, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57])</code> should return <code>\"0123456789\"</code>.</p>","testString":"assert.equal(\n  LZW(false, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]),\n  '0123456789'\n);"},{"text":"<p><code>LZW(true, \"BABAABAAA\")</code> should return <code>[66, 65, 256, 257, 65, 260]</code>.</p>","testString":"assert.deepEqual(LZW(true, 'BABAABAAA'), [66, 65, 256, 257, 65, 260]);"},{"text":"<p><code>LZW(false, [66, 65, 256, 257, 65, 260])</code> should return <code>\"BABAABAAA\"</code>.</p>","testString":"assert.equal(LZW(false, [66, 65, 256, 257, 65, 260]), 'BABAABAAA');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function LZW (compressData, input) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"lzw-compression","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/s-expressions","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/lychrel-numbers","id":"5ea2815e364d9a2222ea55f8"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/lzw-compression"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
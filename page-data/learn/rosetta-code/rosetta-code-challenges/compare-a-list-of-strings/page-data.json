{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/compare-a-list-of-strings",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Compare a list of strings","description":"<section id=\"description\">\n<p>A list is an ordered set of values that may contain duplicates. Here is an example:</p>\n<pre><code class=\"language-js\">const list = [['AA',  'BB', 'CC'], ['AA', 'ACB', 'AA'], [], ['AA']];\n</code></pre>\n<p>Given a list of arbitrarily many strings, implement a function for each of the following conditions:</p>\n<ul>\n  <li>test if they are all lexically equal</li>\n  <li>test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)</li>\n</ul>\n</section>","id":"596e457071c35c882915b3e4","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302235,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/compare-a-list-of-strings","tests":[{"text":"<p><code>allEqual</code> should be a function.</p>","testString":"assert(typeof allEqual === 'function');"},{"text":"<p><code>azSorted</code> should be a function.</p>","testString":"assert(typeof azSorted === 'function');"},{"text":"<p><code>allEqual([\"AA\", \"AA\", \"AA\", \"AA\"])</code> should return true.</p>","testString":"assert(allEqual(testCases[0]));"},{"text":"<p><code>azSorted([\"AA\", \"AA\", \"AA\", \"AA\"])</code> should return false.</p>","testString":"assert(!azSorted(testCases[0]));"},{"text":"<p><code>allEqual([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> should return false.</p>","testString":"assert(!allEqual(testCases[1]));"},{"text":"<p><code>azSorted([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> should return true.</p>","testString":"assert(azSorted(testCases[1]));"},{"text":"<p><code>allEqual([])</code> should return true.</p>","testString":"assert(allEqual(testCases[2]));"},{"text":"<p><code>azSorted([])</code> should return true.</p>","testString":"assert(azSorted(testCases[2]));"},{"text":"<p><code>allEqual([\"AA\"])</code> should return true.</p>","testString":"assert(allEqual(testCases[3]));"},{"text":"<p><code>azSorted([\"AA\"])</code> should return true.</p>","testString":"assert(azSorted(testCases[3]));"},{"text":"<p><code>allEqual([\"BB\", \"AA\"])</code> should return false.</p>","testString":"assert(!allEqual(testCases[4]));"},{"text":"<p><code>azSorted([\"BB\", \"AA\"])</code> should return false.</p>","testString":"assert(!azSorted(testCases[4]));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function allEqual(arr) {\n\n  return true;\n}\n\nfunction azSorted(arr) {\n\n  return true;\n}","head":"","tail":"const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"compare-a-list-of-strings","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/convert-seconds-to-compound-duration","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/comma-quibbling","id":"596e457071c35c882915b3e4"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/compare-a-list-of-strings"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
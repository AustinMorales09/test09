{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/letter-frequency",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Letter frequency","description":"<section id=\"description\">\n<p>Given a string, calculate the frequency of each character.</p>\n<p>All characters should be counted. This includes lower and upper case letters, digits, whitespace, special characters, or any other distinct characters.</p>\n</section>","id":"5e4ce2bbac708cc68c1df25f","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function to count the occurrences of each character in a given string.</p>\n<p>The function should return a 2D array with each of the elements in the following form: <code>['char', freq]</code>. The character should be a string with a length of 1, and frequency is a number denoting the count.</p>\n<p>For example, given the string \"ab\", your function should return <code>[['a', 1], ['b', 1]]</code>.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385263,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/letter-frequency","tests":[{"text":"<p><code>letterFrequency</code> should be a function.</p>","testString":"assert(typeof letterFrequency == 'function');"},{"text":"<p><code>letterFrequency(\"Not all that Mrs. Bennet, however\")</code> should return an array.</p>","testString":"assert(Array.isArray(letterFrequency('Not all that Mrs. Bennet, however')));"},{"text":"<p><code>letterFrequency(\"Not all that Mrs. Bennet, however\")</code> should return <code>[[\" \", 5], [\",\", 1], [\".\", 1], [\"B\", 1], [\"M\", 1], [\"N\", 1], [\"a\", 2], [\"e\", 4], [\"h\", 2], [\"l\", 2], [\"n\", 2], [\"o\", 2], [\"r\", 2], [\"s\", 1], [\"t\", 4], [\"v\", 1], [\"w\", 1]]</code>.</p>","testString":"assert.deepEqual(letterFrequency('Not all that Mrs. Bennet, however'), [\n  [' ', 5],\n  [',', 1],\n  ['.', 1],\n  ['B', 1],\n  ['M', 1],\n  ['N', 1],\n  ['a', 2],\n  ['e', 4],\n  ['h', 2],\n  ['l', 2],\n  ['n', 2],\n  ['o', 2],\n  ['r', 2],\n  ['s', 1],\n  ['t', 4],\n  ['v', 1],\n  ['w', 1]\n]);"},{"text":"<p><code>letterFrequency(\"daughters, could ask on the \")</code> should return <code>[[\" \", 5],[\",\", 1],[\"a\", 2],[\"c\", 1],[\"d\", 2],[\"e\", 2],[\"g\", 1],[\"h\", 2],[\"k\", 1],[\"l\", 1],[\"n\", 1],[\"o\", 2],[\"r\", 1],[\"s\", 2],[\"t\", 2],[\"u\", 2]]</code>.</p>","testString":"assert.deepEqual(letterFrequency('daughters, could ask on the '), [\n  [' ', 5],\n  [',', 1],\n  ['a', 2],\n  ['c', 1],\n  ['d', 2],\n  ['e', 2],\n  ['g', 1],\n  ['h', 2],\n  ['k', 1],\n  ['l', 1],\n  ['n', 1],\n  ['o', 2],\n  ['r', 1],\n  ['s', 2],\n  ['t', 2],\n  ['u', 2]\n]);"},{"text":"<p><code>letterFrequency(\"husband any satisfactory description\")</code> should return <code>[[\" \", 3], [\"a\", 4], [\"b\", 1], [\"c\", 2], [\"d\", 2], [\"e\", 1], [\"f\", 1], [\"h\", 1], [\"i\", 3], [\"n\", 3], [\"o\", 2], [\"p\", 1], [\"r\", 2], [\"s\", 4], [\"t\", 3], [\"u\", 1], [\"y\", 2]]</code>.</p>","testString":"assert.deepEqual(letterFrequency('husband any satisfactory description'), [\n  [' ', 3],\n  ['a', 4],\n  ['b', 1],\n  ['c', 2],\n  ['d', 2],\n  ['e', 1],\n  ['f', 1],\n  ['h', 1],\n  ['i', 3],\n  ['n', 3],\n  ['o', 2],\n  ['p', 1],\n  ['r', 2],\n  ['s', 4],\n  ['t', 3],\n  ['u', 1],\n  ['y', 2]\n]);"},{"text":"<p><code>letterFrequency(\"in various ways--with barefaced\")</code> should return <code>[[\" \", 3], [\"-\", 2], [\"a\", 4], [\"b\", 1], [\"c\", 1], [\"d\", 1], [\"e\", 2], [\"f\", 1], [\"h\", 1], [\"i\", 3], [\"n\", 1], [\"o\", 1], [\"r\", 2], [\"s\", 2], [\"t\", 1], [\"u\", 1], [\"v\", 1], [\"w\", 2], [\"y\", 1]]</code>.</p>","testString":"assert.deepEqual(letterFrequency('in various ways--with barefaced'), [\n  [' ', 3],\n  ['-', 2],\n  ['a', 4],\n  ['b', 1],\n  ['c', 1],\n  ['d', 1],\n  ['e', 2],\n  ['f', 1],\n  ['h', 1],\n  ['i', 3],\n  ['n', 1],\n  ['o', 1],\n  ['r', 2],\n  ['s', 2],\n  ['t', 1],\n  ['u', 1],\n  ['v', 1],\n  ['w', 2],\n  ['y', 1]\n]);"},{"text":"<p><code>letterFrequency(\"distant surmises; but he eluded\")</code> should return <code>[[\" \", 4], [\";\", 1], [\"a\", 1], [\"b\", 1], [\"d\", 3], [\"e\", 4], [\"h\", 1], [\"i\", 2], [\"l\", 1], [\"m\", 1], [\"n\", 1], [\"r\", 1], [\"s\", 4], [\"t\", 3], [\"u\", 3]]</code>.</p>","testString":"assert.deepEqual(letterFrequency('distant surmises; but he eluded'), [\n  [' ', 4],\n  [';', 1],\n  ['a', 1],\n  ['b', 1],\n  ['d', 3],\n  ['e', 4],\n  ['h', 1],\n  ['i', 2],\n  ['l', 1],\n  ['m', 1],\n  ['n', 1],\n  ['r', 1],\n  ['s', 4],\n  ['t', 3],\n  ['u', 3]\n]);"},{"text":"<p><code>letterFrequency(\"last obliged to accept the second-hand,\")</code> should return <code>[[\" \", 5], [\",\", 1], [\"-\", 1], [\"a\", 3], [\"b\", 1], [\"c\", 3], [\"d\", 3], [\"e\", 4], [\"g\", 1], [\"h\", 2], [\"i\", 1], [\"l\", 2], [\"n\", 2], [\"o\", 3], [\"p\", 1], [\"s\", 2], [\"t\", 4]]</code>.</p>","testString":"assert.deepEqual(letterFrequency('last obliged to accept the second-hand,'), [\n  [' ', 5],\n  [',', 1],\n  ['-', 1],\n  ['a', 3],\n  ['b', 1],\n  ['c', 3],\n  ['d', 3],\n  ['e', 4],\n  ['g', 1],\n  ['h', 2],\n  ['i', 1],\n  ['l', 2],\n  ['n', 2],\n  ['o', 3],\n  ['p', 1],\n  ['s', 2],\n  ['t', 4]\n]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function letterFrequency(txt) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"letter-frequency","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/levenshtein-distance","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/left-factorials","id":"5e4ce2bbac708cc68c1df25f"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/letter-frequency"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/general-fizzbuzz",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"General FizzBuzz","description":"<section id=\"description\">\n<p>Write a generalized version of <a href=\"https://rosettacode.org/wiki/FizzBuzz\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">FizzBuzz</a> that works for any list of factors, along with their words.</p>\n<p>This is basically a \"fizzbuzz\" implementation where the rules of the game are supplied to the user. Create a function to implement this. The function should take two parameters.</p>\n<p>The first will be an array with the FizzBuzz rules. For example: <code>[ [3, \"Fizz\"] , [5, \"Buzz\"] ]</code>.</p>\n<p>This indicates that <code>Fizz</code> should be printed if the number is a multiple of 3 and <code>Buzz</code> if it is a multiple of 5. If it is a multiple of both then the strings should be concatenated in the order specified in the array. In this case, <code>FizzBuzz</code> if the number is a multiple of 3 and 5.</p>\n<p>The second parameter is the number for which the function should return a string as stated above.</p>\n</section>","id":"5a23c84252665b21eecc7e78","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302273,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/general-fizzbuzz","tests":[{"text":"<p><code>genFizzBuzz</code> should be a function.</p>","testString":"assert(typeof genFizzBuzz == 'function');"},{"text":"<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 6)</code> should return a string.</p>","testString":"assert(\n  typeof genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    6\n  ) == 'string'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 6)</code> should return <code>\"Fizz\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    6\n  ),\n  'Fizz'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 10)</code> should return <code>\"Buzz\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    10\n  ),\n  'Buzz'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Buzz\"],[5, \"Fizz\"]], 12)</code> should return <code>\"Buzz\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Buzz'],\n      [5, 'Fizz']\n    ],\n    12\n  ),\n  'Buzz'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Buzz\"],[5, \"Fizz\"]], 13)</code> should return <code>\"13\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Buzz'],\n      [5, 'Fizz']\n    ],\n    13\n  ),\n  '13'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Buzz\"],[5, \"Fizz\"]], 15)</code> should return <code>\"BuzzFizz\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Buzz'],\n      [5, 'Fizz']\n    ],\n    15\n  ),\n  'BuzzFizz'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 15)</code> should return <code>\"FizzBuzz\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    15\n  ),\n  'FizzBuzz'\n);"},{"text":"<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"],[7, \"Baxx\"]], 105)</code> should return <code>\"FizzBuzzBaxx\"</code>.</p>","testString":"assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz'],\n      [7, 'Baxx']\n    ],\n    105\n  ),\n  'FizzBuzzBaxx'\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function genFizzBuzz(rules, num) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"general-fizzbuzz","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/generate-lower-case-ascii-alphabet","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/gaussian-elimination","id":"5a23c84252665b21eecc7e78"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/general-fizzbuzz"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
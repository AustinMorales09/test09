{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/s-expressions",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"S-Expressions","description":"<section id=\"description\">\n<p><a href=\"https://rosettacode.org/wiki/S-expressions\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">S-Expressions</a> are one convenient way to parse and store data.</p>\n</section>","id":"59667989bf71cf555dd5d2ff","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a simple reader/parser for S-Expressions that handles quoted and unquoted strings, integers and floats.</p>\n<p>The function should read a single but nested S-Expression from a string and return it as a (nested) array.</p>\n<p>Newlines and other whitespace may be ignored unless contained within a quoted string.</p>\n<p>\"<code>()</code>\" inside quoted strings are not interpreted, but treated as part of the string.</p>\n<p>Handling escaped quotes inside a string is optional; thus \"<code>(foo\"bar)</code>\" may be treated as a string \"<code>foo\"bar</code>\", or as an error.</p>\n<p>For this, the reader need not recognize <code>\\</code> for escaping, but should, in addition, recognize numbers if the language has appropriate data types.</p>\n<p>Note that with the exception of <code>()\"</code> (<code>\\</code> if escaping is supported) and whitespace, there are no special characters. Anything else is allowed without quotes.</p>\n<p>The reader should be able to read the following input</p>\n<pre>((data \"quoted data\" 123 4.5)\n(data (!@# (4.5) \"(more\" \"data)\")))\n</pre>\n<p>and turn it into a native data structure.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302303,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/s-expressions","tests":[{"text":"<p><code>parseSexpr</code> should be a function.</p>","testString":"assert(typeof parseSexpr === 'function');"},{"text":"<p><code>parseSexpr('(data1 data2 data3)')</code> should return <code>['data1', 'data2', 'data3']</code></p>","testString":"assert.deepEqual(parseSexpr(simpleSExpr), simpleSolution);"},{"text":"<p><code>parseSexpr('((data \"quoted data\" 123 4.5) (data (!@# (4.5) \"(more\" \"data)\")))')</code> should return <code>[['data', '\"quoted data\"', 123, 4.5], ['data', ['!@#', [4.5], '\"(more\"', '\"data)\"']]]</code>.</p>","testString":"assert.deepEqual(parseSexpr(basicSExpr), basicSolution);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function parseSexpr(str) {\n\n  return true;\n}","head":"","tail":"const simpleSExpr = '(data1 data2 data3)';\nconst simpleSolution = ['data1', 'data2', 'data3'];\n\nconst basicSExpr = '((data \"quoted data\" 123 4.5) (data (!@# (4.5) \"(more\" \"data)\")))';\nconst basicSolution = [[\"data\",\"\\\"quoted data\\\"\",123,4.5],[\"data\",[\"!@#\",[4.5],\"\\\"(more\\\"\",\"\\\"data)\\\"\"]]];","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"s-expressions","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sailors-coconuts-and-a-monkey-problem","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/lzw-compression","id":"59667989bf71cf555dd5d2ff"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/s-expressions"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
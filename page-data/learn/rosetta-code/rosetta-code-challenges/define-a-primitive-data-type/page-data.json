{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/define-a-primitive-data-type",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Define a primitive data type","description":"<section id=\"description\">\n<p>Define a type that behaves like an integer but has a lowest valid value of 1 and a highest valid value of 10.</p>\n<p>Error handling:</p>\n<ul>\n  <li>If you try to instantiate a <code>Num</code> with a value outside of 1 - 10, it should throw a <code>TypeError</code> with an error message of <code>'Out of range'</code>.</li>\n  <li>If you try to instantiate a <code>Num</code> with a value that is not a number, it should throw a <code>TypeError</code> with an error message of <code>'Not a Number'</code>.</li>\n</ul>\n</section>","id":"597089c87eec450c68aa1643","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302248,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/define-a-primitive-data-type","tests":[{"text":"<p><code>Num</code> should be a function.</p>","testString":"assert(typeof Num === 'function');"},{"text":"<p><code>new Num(4)</code> should return an object.</p>","testString":"assert(typeof new Num(4) === 'object');"},{"text":"<p><code>new Num('test')</code> should throw a TypeError with message 'Not a Number'.</p>","testString":"assert.throws(() => new Num('test'), TypeError);"},{"text":"<p><code>new Num(0)</code> should throw a TypeError with message 'Out of range'.</p>","testString":"assert.throws(() => new Num(0), TypeError);"},{"text":"<p><code>new Num(-5)</code> should throw a TypeError with message 'Out of range'.</p>","testString":"assert.throws(() => new Num(-5), TypeError);"},{"text":"<p><code>new Num(10)</code> should throw a TypeError with message 'Out of range'.</p>","testString":"assert.throws(() => new Num(11), TypeError);"},{"text":"<p><code>new Num(20)</code> should throw a TypeError with message 'Out of range'.</p>","testString":"assert.throws(() => new Num(20), TypeError);"},{"text":"<p><code>new Num(3) + new Num(4)</code> should equal 7.</p>","testString":"assert.equal(new Num(3) + new Num(4), 7);"},{"text":"<p><code>new Num(3) - new Num(4)</code> should equal -1.</p>","testString":"assert.equal(new Num(3) - new Num(4), -1);"},{"text":"<p><code>new Num(3) * new Num(4)</code> should equal 12.</p>","testString":"assert.equal(new Num(3) * new Num(4), 12);"},{"text":"<p><code>new Num(3) / new Num(4)</code> should equal 0.75.</p>","testString":"assert.equal(new Num(3) / new Num(4), 0.75);"},{"text":"<p><code>new Num(3) &#x3C; new Num(4)</code> should be true.</p>","testString":"assert(new Num(3) < new Num(4));"},{"text":"<p><code>new Num(3) > new Num(4)</code> should be false.</p>","testString":"assert(!(new Num(3) > new Num(4)));"},{"text":"<p><code>(new Num(5)).toString()</code> should return '5'</p>","testString":"assert.equal(new Num(5).toString(), '5');"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function Num(n) {\n\n  return n;\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"define-a-primitive-data-type","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/department-numbers","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/deepcopy","id":"597089c87eec450c68aa1643"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/define-a-primitive-data-type"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
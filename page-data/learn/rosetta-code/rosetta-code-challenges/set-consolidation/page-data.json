{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/set-consolidation",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Set consolidation","description":"<section id=\"description\">\n<p>Given two sets of items then if any item is common to any set then the result of applying <em>consolidation</em> to those sets is a set of sets whose contents is:</p>\n<ul>\n  <li>The two input sets if no common item exists between the two input sets of items.</li>\n  <li>The single set that is the union of the two input sets if they share a common item.</li>\n</ul>\n<p>Given N sets of items where N > 2 then the result is the same as repeatedly replacing all combinations of two sets by their consolidation until no further consolidation between set pairs is possible. If N &#x3C; 2 then consolidation has no strict meaning and the input can be returned.</p>\n<p>Here are some examples:</p>\n<p><strong>Example 1:</strong></p>\n<p>Given the two sets <code>{A,B}</code> and <code>{C,D}</code> then there is no common element between the sets and the result is the same as the input.</p>\n<p><strong>Example 2:</strong></p>\n<p>Given the two sets <code>{A,B}</code> and <code>{B,D}</code> then there is a common element <code>B</code> between the sets and the result is the single set <code>{B,D,A}</code>. (Note that order of items in a set is immaterial: <code>{A,B,D}</code> is the same as <code>{B,D,A}</code> and <code>{D,A,B}</code>, etc).</p>\n<p><strong>Example 3:</strong></p>\n<p>Given the three sets <code>{A,B}</code> and <code>{C,D}</code> and <code>{D,B}</code> then there is no common element between the sets <code>{A,B}</code> and <code>{C,D}</code> but the sets <code>{A,B}</code> and <code>{D,B}</code> do share a common element that consolidates to produce the result <code>{B,D,A}</code>. On examining this result with the remaining set, <code>{C,D}</code>, they share a common element and so consolidate to the final output of the single set <code>{A,B,C,D}</code></p>\n<p><strong>Example 4:</strong></p>\n<p>The consolidation of the five sets:</p>\n<p><code>{H,I,K}</code>, <code>{A,B}</code>, <code>{C,D}</code>, <code>{D,B}</code>, and <code>{F,G,H}</code></p>\n<p>Is the two sets:</p>\n<p><code>{A, C, B, D}</code>, and <code>{G, F, I, H, K}</code></p>\n</section>","id":"5eb3e4af7d0e7b760b46cedc","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Write a function that takes an array of strings as a parameter. Each string is represents a set with the characters representing the set elements. The function should return a 2D array containing the consolidated sets. Note: Each set should be sorted.</p>\n</section>","notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":385319,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/set-consolidation","tests":[{"text":"<p><code>setConsolidation</code> should be a function.</p>","testString":"assert(typeof setConsolidation === 'function');"},{"text":"<p><code>setConsolidation([\"AB\", \"CD\"])</code> should return a array.</p>","testString":"assert(Array.isArray(setConsolidation(['AB', 'CD'])));"},{"text":"<p><code>setConsolidation([\"AB\", \"CD\"])</code> should return <code>[[\"C\", \"D\"], [\"A\", \"B\"]]</code>.</p>","testString":"assert.deepEqual(setConsolidation(['AB', 'CD']), [\n  ['C', 'D'],\n  ['A', 'B']\n]);"},{"text":"<p><code>setConsolidation([\"AB\", \"BD\"])</code> should return <code>[[\"A\", \"B\", \"D\"]]</code>.</p>","testString":"assert.deepEqual(setConsolidation(['AB', 'BD']), [['A', 'B', 'D']]);"},{"text":"<p><code>setConsolidation([\"AB\", \"CD\", \"DB\"])</code> should return <code>[[\"A\", \"B\", \"C\", \"D\"]]</code>.</p>","testString":"assert.deepEqual(setConsolidation(['AB', 'CD', 'DB']), [['A', 'B', 'C', 'D']]);"},{"text":"<p><code>setConsolidation([\"HIK\", \"AB\", \"CD\", \"DB\", \"FGH\"])</code> should return <code>[[\"F\", \"G\", \"H\", \"I\", \"K\"], [\"A\", \"B\", \"C\", \"D\"]]</code>.</p>","testString":"assert.deepEqual(setConsolidation(['HIK', 'AB', 'CD', 'DB', 'FGH']), [\n  ['F', 'G', 'H', 'I', 'K'],\n  ['A', 'B', 'C', 'D']\n]);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function setConsolidation(sets) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"set-consolidation","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/set-of-real-numbers","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/semiprime","id":"5eb3e4af7d0e7b760b46cedc"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/set-consolidation"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
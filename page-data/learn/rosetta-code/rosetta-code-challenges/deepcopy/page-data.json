{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/deepcopy",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Deepcopy","description":"<section id=\"description\">\n<p>Write a function that returns a deep copy of a given object. The copy must not be the same object that was given.</p>\n<p>This task will not test for:</p>\n<ul>\n  <li>Objects with properties that are functions</li>\n  <li>Date objects or object with properties that are Date objects</li>\n  <li>RegEx or object with properties that are RegEx objects</li>\n  <li>Prototype copying</li>\n</ul>\n</section>","id":"596a8888ab7c01048de257d5","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302247,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/deepcopy","tests":[{"text":"<p><code>deepcopy</code> should be a function.</p>","testString":"assert(typeof deepcopy === 'function');"},{"text":"<p><code>deepcopy({test: \"test\"})</code> should return an object.</p>","testString":"assert(typeof deepcopy(obj1) === 'object');"},{"text":"<p><code>deepcopy</code> should not return the same object that was provided.</p>","testString":"assert(deepcopy(obj2) != obj2);"},{"text":"<p>When passed an object containing an array, <code>deepcopy</code> should return a deep copy of the object.</p>","testString":"assert.deepEqual(deepcopy(obj2), obj2);"},{"text":"<p>When passed an object containing another object, <code>deepcopy</code>  should return a deep copy of the object.</p>","testString":"assert.deepEqual(deepcopy(obj3), obj3);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function deepcopy(obj) {\n\n  return true;\n}","head":"","tail":"const obj1 = { test: 'test' };\nconst obj2 = {\n  t: 'test',\n  a: ['an', 'array']\n};\nconst obj3 = {\n  t: 'try',\n  o: obj2\n};","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"deepcopy","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/define-a-primitive-data-type","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/deal-cards-for-freecell","id":"596a8888ab7c01048de257d5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/deepcopy"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/rosetta-code/rosetta-code-challenges/sudoku",
    "result": {"data":{"challengeNode":{"challenge":{"block":"rosetta-code-challenges","title":"Sudoku","description":"<section id=\"description\">\n<p>Write a function to solve a partially filled-in normal 9x9 Sudoku grid and return the result. The blank fields are represented by <code>-1</code>.</p>\n</section>","id":"5a23c84252665b21eecc803c","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Rosetta","videoUrl":null,"superBlock":"rosetta-code","translationPending":false,"forumTopicId":302329,"fields":{"blockName":"rosetta-code-challenges","slug":"/learn/rosetta-code/rosetta-code-challenges/sudoku","tests":[{"text":"<p><code>solveSudoku</code> should be a function.</p>","testString":"assert(typeof solveSudoku == 'function');"},{"text":"<p><code>solveSudoku([[8, 1, 9, -1, -1, 5, -1, -1, -1],[-1, -1, 2, -1, -1, -1, 7, 5, -1],[-1, 3, 7, 1, -1, 4, -1, 6, -1],[4, -1, -1, 5, 9, -1, 1, -1, -1],[7, -1, -1, 3, -1, 8, -1, -1, 2],[-1, -1, 3, -1, 6, 2, -1, -1, 7],[-1, 5, -1, 7, -1, 9, 2, 1, -1],[-1, 6, 4, -1, -1, -1, 9, -1, -1],[-1, -1, -1, 2, -1, -1, 4, 3, 8]])</code> should return an array.</p>","testString":"assert(\n  Array.isArray(\n    solveSudoku([\n      [8, 1, 9, -1, -1, 5, -1, -1, -1],\n      [-1, -1, 2, -1, -1, -1, 7, 5, -1],\n      [-1, 3, 7, 1, -1, 4, -1, 6, -1],\n      [4, -1, -1, 5, 9, -1, 1, -1, -1],\n      [7, -1, -1, 3, -1, 8, -1, -1, 2],\n      [-1, -1, 3, -1, 6, 2, -1, -1, 7],\n      [-1, 5, -1, 7, -1, 9, 2, 1, -1],\n      [-1, 6, 4, -1, -1, -1, 9, -1, -1],\n      [-1, -1, -1, 2, -1, -1, 4, 3, 8]\n    ])\n  )\n);"},{"text":"<p><code>solveSudoku([[8, 1, 9, -1, -1, 5, -1, -1, -1],[-1, -1, 2, -1, -1, -1, 7, 5, -1],[-1, 3, 7, 1, -1, 4, -1, 6, -1],[4, -1, -1, 5, 9, -1, 1, -1, -1],[7, -1, -1, 3, -1, 8, -1, -1, 2],[-1, -1, 3, -1, 6, 2, -1, -1, 7],[-1, 5, -1, 7, -1, 9, 2, 1, -1],[-1, 6, 4, -1, -1, -1, 9, -1, -1],[-1, -1, -1, 2, -1, -1, 4, 3, 8]])</code> should return <code>[[8, 1, 9, 6, 7, 5, 3, 2, 4],[6, 4, 2, 9, 8, 3, 7, 5, 1],[5, 3, 7, 1, 2, 4, 8, 6, 9],[4, 2, 6, 5, 9, 7, 1, 8, 3],[7, 9, 5, 3, 1, 8, 6, 4, 2],[1, 8, 3, 4, 6, 2, 5, 9, 7],[3, 5, 8, 7, 4, 9, 2, 1, 6],[2, 6, 4, 8, 3, 1, 9, 7, 5],[9, 7, 1, 2, 5, 6, 4, 3, 8]]</code>.</p>","testString":"assert.deepEqual(\n  solveSudoku([\n    [8, 1, 9, -1, -1, 5, -1, -1, -1],\n    [-1, -1, 2, -1, -1, -1, 7, 5, -1],\n    [-1, 3, 7, 1, -1, 4, -1, 6, -1],\n    [4, -1, -1, 5, 9, -1, 1, -1, -1],\n    [7, -1, -1, 3, -1, 8, -1, -1, 2],\n    [-1, -1, 3, -1, 6, 2, -1, -1, 7],\n    [-1, 5, -1, 7, -1, 9, 2, 1, -1],\n    [-1, 6, 4, -1, -1, -1, 9, -1, -1],\n    [-1, -1, -1, 2, -1, -1, 4, 3, 8]\n  ]),\n  [\n    [8, 1, 9, 6, 7, 5, 3, 2, 4],\n    [6, 4, 2, 9, 8, 3, 7, 5, 1],\n    [5, 3, 7, 1, 2, 4, 8, 6, 9],\n    [4, 2, 6, 5, 9, 7, 1, 8, 3],\n    [7, 9, 5, 3, 1, 8, 6, 4, 2],\n    [1, 8, 3, 4, 6, 2, 5, 9, 7],\n    [3, 5, 8, 7, 4, 9, 2, 1, 6],\n    [2, 6, 4, 8, 3, 1, 9, 7, 5],\n    [9, 7, 1, 2, 5, 6, 4, 3, 8]\n  ]\n);"},{"text":"<p><code>solveSudoku([[5, 3, -1, -1, 2, 4, 7, -1, -1],[-1, -1, 2, -1, -1, -1, 8, -1, -1],[1, -1, -1, 7, -1, 3, 9, -1, 2],[-1, -1, 8, -1, 7, 2, -1, 4, 9],[-1, 2, -1, 9, 8, -1, -1, 7, -1],[7, 9, -1, -1, -1, -1, -1, 8, -1],[-1, -1, -1, -1, 3, -1, 5, -1, 6],[9, 6, -1, -1, 1, -1, 3, -1, -1],[-1, 5, -1, 6, 9, -1, -1, 1, -1]])</code> should return <code>[[5, 3, 9, 8, 2, 4, 7, 6, 1],[6, 7, 2, 1, 5, 9, 8, 3, 4],[1, 8, 4, 7, 6, 3, 9, 5, 2],[3, 1, 8, 5, 7, 2, 6, 4, 9],[4, 2, 5, 9, 8, 6, 1, 7, 3],[7, 9, 6, 3, 4, 1, 2, 8, 5],[8, 4, 1, 2, 3, 7, 5, 9, 6],[9, 6, 7, 4, 1, 5, 3, 2, 8],[2, 5, 3, 6, 9, 8, 4, 1, 7]]</code>.</p>","testString":"assert.deepEqual(\n  solveSudoku([\n    [5, 3, -1, -1, 2, 4, 7, -1, -1],\n    [-1, -1, 2, -1, -1, -1, 8, -1, -1],\n    [1, -1, -1, 7, -1, 3, 9, -1, 2],\n    [-1, -1, 8, -1, 7, 2, -1, 4, 9],\n    [-1, 2, -1, 9, 8, -1, -1, 7, -1],\n    [7, 9, -1, -1, -1, -1, -1, 8, -1],\n    [-1, -1, -1, -1, 3, -1, 5, -1, 6],\n    [9, 6, -1, -1, 1, -1, 3, -1, -1],\n    [-1, 5, -1, 6, 9, -1, -1, 1, -1]\n  ]),\n  [\n    [5, 3, 9, 8, 2, 4, 7, 6, 1],\n    [6, 7, 2, 1, 5, 9, 8, 3, 4],\n    [1, 8, 4, 7, 6, 3, 9, 5, 2],\n    [3, 1, 8, 5, 7, 2, 6, 4, 9],\n    [4, 2, 5, 9, 8, 6, 1, 7, 3],\n    [7, 9, 6, 3, 4, 1, 2, 8, 5],\n    [8, 4, 1, 2, 3, 7, 5, 9, 6],\n    [9, 6, 7, 4, 1, 5, 3, 2, 8],\n    [2, 5, 3, 6, 9, 8, 4, 1, 7]\n  ]\n);"},{"text":"<p><code>solveSudoku([[-1, -1, 3, -1, 2, -1, 6, -1, -1],[9, -1, -1, 3, -1, 5, -1, -1, 1],[-1, -1, 1, 8, -1, 6, 4, -1, -1],[-1, -1, 8, 1, -1, 2, 9, -1, -1],[7, -1, -1, -1, -1, -1, -1, -1, 8],[-1, -1, 6, 7, -1, 8, 2, -1, -1],[-1, -1, 2, 6, -1, 9, 5, -1, -1],[8, -1, -1, 2, -1, 3, -1, -1, 9],[-1, -1, 5, -1, 1, -1, 3, -1, -1]])</code> should return <code>[[4, 8, 3, 9, 2, 1, 6, 5, 7],[9, 6, 7, 3, 4, 5, 8, 2, 1],[2, 5, 1, 8, 7, 6, 4, 9, 3],[5, 4, 8, 1, 3, 2, 9, 7, 6],[7, 2, 9, 5, 6, 4, 1, 3, 8],[1, 3, 6, 7, 9, 8, 2, 4, 5],[3, 7, 2, 6, 8, 9, 5, 1, 4],[8, 1, 4, 2, 5, 3, 7, 6, 9],[6, 9, 5, 4, 1, 7, 3, 8, 2]]</code>.</p>","testString":"assert.deepEqual(\n  solveSudoku([\n    [-1, -1, 3, -1, 2, -1, 6, -1, -1],\n    [9, -1, -1, 3, -1, 5, -1, -1, 1],\n    [-1, -1, 1, 8, -1, 6, 4, -1, -1],\n    [-1, -1, 8, 1, -1, 2, 9, -1, -1],\n    [7, -1, -1, -1, -1, -1, -1, -1, 8],\n    [-1, -1, 6, 7, -1, 8, 2, -1, -1],\n    [-1, -1, 2, 6, -1, 9, 5, -1, -1],\n    [8, -1, -1, 2, -1, 3, -1, -1, 9],\n    [-1, -1, 5, -1, 1, -1, 3, -1, -1]\n  ]),\n  [\n    [4, 8, 3, 9, 2, 1, 6, 5, 7],\n    [9, 6, 7, 3, 4, 5, 8, 2, 1],\n    [2, 5, 1, 8, 7, 6, 4, 9, 3],\n    [5, 4, 8, 1, 3, 2, 9, 7, 6],\n    [7, 2, 9, 5, 6, 4, 1, 3, 8],\n    [1, 3, 6, 7, 9, 8, 2, 4, 5],\n    [3, 7, 2, 6, 8, 9, 5, 1, 4],\n    [8, 1, 4, 2, 5, 3, 7, 6, 9],\n    [6, 9, 5, 4, 1, 7, 3, 8, 2]\n  ]\n);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function solveSudoku(puzzle) {\n\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/rosetta-code/#rosetta-code-challenges","dashedName":"sudoku","certification":"rosetta-code","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"rosetta-code","block":"rosetta-code-challenges","isFirstStep":false,"template":null,"required":[],"nextBlock":"rosetta-code-challenges","nextChallengePath":"/learn/rosetta-code/rosetta-code-challenges/sum-digits-of-an-integer","prevChallengePath":"/learn/rosetta-code/rosetta-code-challenges/subleq","id":"5a23c84252665b21eecc803c"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}","head":"","tail":"const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/rosetta-code/rosetta-code-challenges/sudoku"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/responsive-web-design/applied-visual-design/create-a-more-complex-shape-using-css-and-html",
    "result": {"data":{"challengeNode":{"challenge":{"block":"applied-visual-design","title":"Create a More Complex Shape Using CSS and HTML","description":"<section id=\"description\">\n<p>One of the most popular shapes in the world is the heart shape, and in this challenge you'll create one using pure CSS. But first, you need to understand the <code>::before</code> and <code>::after</code> pseudo-elements. <code>::before</code> creates a pseudo-element that is the first child of the selected element; <code>::after</code> creates a pseudo-element that is the last child of the selected element. In the following example, a <code>::before</code> pseudo-element is used to add a rectangle to an element with the class <code>heart</code>:</p>\n<pre><code class=\"language-css\">.heart::before {\n  content: \"\";\n  background-color: yellow;\n  border-radius: 25%;\n  position: absolute;\n  height: 50px;\n  width: 70px;\n  top: -50px;\n  left: 5px;\n}\n</code></pre>\n<p>For the <code>::before</code> and <code>::after</code> pseudo-elements to function properly, they must have a defined <code>content</code> property. This property is usually used to add things like a photo or text to the selected element. When the <code>::before</code> and <code>::after</code> pseudo-elements are used to make shapes, the <code>content</code> property is still required, but it's set to an empty string. In the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with height and width of <code>50px</code> and <code>70px</code>, respectively. This rectangle has round corners due to its 25% <code>border-radius</code> and is positioned absolutely at <code>5px</code> from the left and <code>50px</code> above the top of the element.</p>\n</section>","id":"587d78a6367417b2b2512ade","hasEditableBoundaries":false,"instructions":"<section id=\"instructions\">\n<p>Transform the element on the screen to a heart. In the <code>.heart::after</code> selector, change the <code>background-color</code> to <code>pink</code> and the <code>border-radius</code> to 50%.</p>\n<p>Next, target the element with the class <code>heart</code> (just <code>heart</code>) and fill in the <code>transform</code> property. Use the <code>rotate()</code> function with -45 degrees.</p>\n<p>Finally, in the <code>.heart::before</code> selector, set its <code>content</code> property to an empty string.</p>\n</section>","notes":null,"challengeType":0,"helpCategory":"HTML-CSS","videoUrl":"https://scrimba.com/c/cPpz4fr","superBlock":"responsive-web-design","translationPending":false,"forumTopicId":301050,"fields":{"blockName":"applied-visual-design","slug":"/learn/responsive-web-design/applied-visual-design/create-a-more-complex-shape-using-css-and-html","tests":[{"text":"<p>The <code>background-color</code> property of the <code>.heart::after</code> selector should be <code>pink</code>.</p>","testString":"const heartAfter = code.match(/\\.heart::after\\s*{[\\s\\S]+?[^\\}]}/g)[0];\nassert(\n  /({|;)\\s*background-color\\s*:\\s*pink\\s*(;|})/g.test(heartAfter)\n);"},{"text":"<p>The <code>border-radius</code> of the <code>.heart::after</code> selector should be 50%.</p>","testString":"assert(code.match(/border-radius\\s*?:\\s*?50%/gi).length == 2);"},{"text":"<p>The <code>transform</code> property for the <code>heart</code> class should use a <code>rotate()</code> function set to -45 degrees.</p>","testString":"assert(code.match(/transform\\s*?:\\s*?rotate\\(\\s*?-45deg\\s*?\\)/gi));"},{"text":"<p>The <code>content</code> of the <code>.heart::before</code> selector should be an empty string.</p>","testString":"assert(code.match(/\\.heart::before\\s*?{\\s*?content\\s*?:\\s*?(\"|')\\1\\s*?;/gi));"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<style>\n  .heart {\n    position: absolute;\n    margin: auto;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-color: pink;\n    height: 50px;\n    width: 50px;\n    transform: ;\n  }\n  .heart::after {\n    background-color: blue;\n    content: \"\";\n    border-radius: 25%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 0px;\n    left: 25px;\n  }\n  .heart::before {\n    content: ;\n    background-color: pink;\n    border-radius: 50%;\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: -25px;\n    left: 0px;\n  }\n</style>\n<div class=\"heart\"></div>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/responsive-web-design/#applied-visual-design","dashedName":"create-a-more-complex-shape-using-css-and-html","certification":"responsive-web-design","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"responsive-web-design","block":"applied-visual-design","isFirstStep":false,"template":null,"required":[],"nextBlock":"applied-visual-design","nextChallengePath":"/learn/responsive-web-design/applied-visual-design/learn-how-the-css-keyframes-and-animation-properties-work","prevChallengePath":"/learn/responsive-web-design/applied-visual-design/create-a-graphic-using-css","id":"587d78a6367417b2b2512ade"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":0,"challengeFiles":[{"name":"index","ext":"html","contents":"<style>\n  .balls {\n    border-radius: 50%;\n    position: fixed;\n    width: 50px;\n    height: 50px;\n    top: 60%;\n    animation-name: jump;\n    animation-duration: 2s;\n    animation-iteration-count: infinite;\n  }\n  #red {\n    background: red;\n    left: 25%;\n    animation-timing-function: linear;\n  }\n  #blue {\n    background: blue;\n    left: 50%;\n    animation-timing-function: ease-out;\n  }\n  #green {\n    background: green;\n    left: 75%;\n    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);\n  }\n\n  @keyframes jump {\n    50% {\n      top: 10%;\n    }\n  }\n</style>\n<div class=\"balls\" id=\"red\"></div>\n<div class=\"balls\" id=\"blue\"></div>\n<div class=\"balls\" id=\"green\"></div>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"}]}},"slug":"/learn/responsive-web-design/applied-visual-design/create-a-more-complex-shape-using-css-and-html"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
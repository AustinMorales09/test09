{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/project-euler/project-euler-problems-1-to-100/problem-70-totient-permutation",
    "result": {"data":{"challengeNode":{"challenge":{"block":"project-euler-problems-1-to-100","title":"Problem 70: Totient permutation","description":"<section id=\"description\">\n<p>Euler's Totient function, ${\\phi}(n)$ (sometimes called the phi function), is used to determine the number of positive numbers less than or equal to <code>n</code> which are relatively prime to <code>n</code>. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, ${\\phi}(9) = 6$. The number 1 is considered to be relatively prime to every positive number, so ${\\phi}(1) = 1$.</p>\n<p>Interestingly, ${\\phi}(87109) = 79180$, and it can be seen that 87109 is a permutation of 79180.</p>\n<p>Find the value of <code>n</code>, 1 &#x3C; <code>n</code> &#x3C; <code>limit</code>, for which ${\\phi}(n)$ is a permutation of <code>n</code> and the ratio $\\displaystyle\\frac{n}{{\\phi}(n)}$ produces a minimum.</p>\n</section>","id":"5900f3b21000cf542c50fec5","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Euler","videoUrl":null,"superBlock":"project-euler","translationPending":false,"forumTopicId":302183,"fields":{"blockName":"project-euler-problems-1-to-100","slug":"/learn/project-euler/project-euler-problems-1-to-100/problem-70-totient-permutation","tests":[{"text":"<p><code>totientPermutation(10000)</code> should return a number.</p>","testString":"assert(typeof totientPermutation(10000) === 'number');"},{"text":"<p><code>totientPermutation(10000)</code> should return <code>4435</code>.</p>","testString":"assert.strictEqual(totientPermutation(10000), 4435);"},{"text":"<p><code>totientPermutation(100000)</code> should return <code>75841</code>.</p>","testString":"assert.strictEqual(totientPermutation(100000), 75841);"},{"text":"<p><code>totientPermutation(500000)</code> should return <code>474883</code>.</p>","testString":"assert.strictEqual(totientPermutation(500000), 474883);"},{"text":"<p><code>totientPermutation(10000000)</code> should return <code>8319823</code>.</p>","testString":"assert.strictEqual(totientPermutation(10000000), 8319823);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function totientPermutation(limit) {\n\n  return true;\n}\n\ntotientPermutation(10000);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/project-euler/#project-euler-problems-1-to-100","dashedName":"problem-70-totient-permutation","certification":"project-euler","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"project-euler","block":"project-euler-problems-1-to-100","isFirstStep":false,"template":null,"required":[],"nextBlock":"project-euler-problems-1-to-100","nextChallengePath":"/learn/project-euler/project-euler-problems-1-to-100/problem-71-ordered-fractions","prevChallengePath":"/learn/project-euler/project-euler-problems-1-to-100/problem-69-totient-maximum","id":"5900f3b21000cf542c50fec5"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function arrangedProbability(limit) {\n  // Based on https://www.mathblog.dk/project-euler-100-blue-discs-two-blue/\n  let blue = 15;\n  let discs = 21;\n\n  while (discs < limit) {\n    const nextBlue = 3 * blue + 2 * discs - 2;\n    const nextDiscs = 4 * blue + 3 * discs - 3;\n\n    blue = nextBlue;\n    discs = nextDiscs;\n  }\n  return blue;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/project-euler/project-euler-problems-1-to-100/problem-70-totient-permutation"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/project-euler/project-euler-problems-1-to-100/problem-19-counting-sundays",
    "result": {"data":{"challengeNode":{"challenge":{"block":"project-euler-problems-1-to-100","title":"Problem 19: Counting Sundays","description":"<section id=\"description\">\n<p>You are given the following information, but you may prefer to do some research for yourself.</p>\n<ul>\n  <li>1 Jan 1900 was a Monday.</li>\n  <li>Thirty days has September,<br>April, June and November.<br>All the rest have thirty-one,<br>Saving February alone,<br>Which has twenty-eight, rain or shine.<br>And on leap years, twenty-nine.</li>\n  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>\n</ul>\n<p>How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>\n</section>","id":"5900f37f1000cf542c50fe92","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Euler","videoUrl":null,"superBlock":"project-euler","translationPending":false,"forumTopicId":301827,"fields":{"blockName":"project-euler-problems-1-to-100","slug":"/learn/project-euler/project-euler-problems-1-to-100/problem-19-counting-sundays","tests":[{"text":"<p><code>countingSundays(1943, 1946)</code> should return a number.</p>","testString":"assert(typeof countingSundays(1943, 1946) === 'number');"},{"text":"<p><code>countingSundays(1943, 1946)</code> should return 6.</p>","testString":"assert.strictEqual(countingSundays(1943, 1946), 6);"},{"text":"<p><code>countingSundays(1995, 2000)</code> should return 10.</p>","testString":"assert.strictEqual(countingSundays(1995, 2000), 10);"},{"text":"<p><code>countingSundays(1901, 2000)</code> should return 171.</p>","testString":"assert.strictEqual(countingSundays(1901, 2000), 171);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function countingSundays(firstYear, lastYear) {\n\n  return true;\n}\n\ncountingSundays(1943, 1946);","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/project-euler/#project-euler-problems-1-to-100","dashedName":"problem-19-counting-sundays","certification":"project-euler","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"project-euler","block":"project-euler-problems-1-to-100","isFirstStep":false,"template":null,"required":[],"nextBlock":"project-euler-problems-1-to-100","nextChallengePath":"/learn/project-euler/project-euler-problems-1-to-100/problem-20-factorial-digit-sum","prevChallengePath":"/learn/project-euler/project-euler-problems-1-to-100/problem-18-maximum-path-sum-i","id":"5900f37f1000cf542c50fe92"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"function arrangedProbability(limit) {\n  // Based on https://www.mathblog.dk/project-euler-100-blue-discs-two-blue/\n  let blue = 15;\n  let discs = 21;\n\n  while (discs < limit) {\n    const nextBlue = 3 * blue + 2 * discs - 2;\n    const nextDiscs = 4 * blue + 3 * discs - 3;\n\n    blue = nextBlue;\n    discs = nextDiscs;\n  }\n  return blue;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/project-euler/project-euler-problems-1-to-100/problem-19-counting-sundays"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
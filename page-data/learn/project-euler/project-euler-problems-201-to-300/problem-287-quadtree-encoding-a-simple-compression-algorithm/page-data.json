{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/project-euler/project-euler-problems-201-to-300/problem-287-quadtree-encoding-a-simple-compression-algorithm",
    "result": {"data":{"challengeNode":{"challenge":{"block":"project-euler-problems-201-to-300","title":"Problem 287: Quadtree encoding (a simple compression algorithm)","description":"<section id=\"description\">\n<p>The quadtree encoding allows us to describe a $2^N×2^N$ black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:</p>\n<ul>\n<li>the first bit deals with the complete $2^N×2^N$ region;</li>\n<li>\"0\" denotes a split:\n<ul>\n<li>the current $2^n×2^n$ region is divided into 4 sub-regions of dimension $2^{n - 1}×2^{n - 1}$,</li>\n<li>the next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;</li>\n</ul>\n</li>\n<li>\"10\" indicates that the current region contains only black pixels;</li>\n<li>\"11\" indicates that the current region contains only white pixels.</li>\n</ul>\n<p>Consider the following 4×4 image (colored marks denote places where a split can occur):</p>\n<img class=\"img-responsive center-block\" alt=\"4x4 image with colored marks denoting place where split can occur\" src=\"https://cdn.freecodecamp.org/curriculum/project-euler/quadtree-encoding-a-simple-compression-algorithm.gif\" style=\"background-color: white; padding: 10px;\">\n<p>This image can be described by several sequences, for example : \"<strong><span style=\"color: red\">0</span></strong><strong><span style=\"color: blue\">0</span></strong>10101010<strong><span style=\"color: green\">0</span></strong>1011111011<strong><span style=\"color: orange\">0</span></strong>10101010\", of length 30, or \"<strong><span style=\"color: red\">0</span></strong>10<strong><span style=\"color: green\">0</span></strong>101111101110\", of length 16, which is the minimal sequence for this image.</p>\n<p>For a positive integer $N$, define $D_N$ as the $2^N×2^N$ image with the following coloring scheme:</p>\n<ul>\n<li>the pixel with coordinates $x = 0$, $y = 0$ corresponds to the bottom left pixel,</li>\n<li>if ${(x - 2^{N - 1})}^2 + {(y - 2^{N - 1})}^2 ≤ 2^{2N - 2}$ then the pixel is black,</li>\n<li>otherwise the pixel is white.</li>\n</ul>\n<p>What is the length of the minimal sequence describing $D_{24}$?</p>\n</section>","id":"5900f48b1000cf542c50ff9e","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"Euler","videoUrl":null,"superBlock":"project-euler","translationPending":false,"forumTopicId":301938,"fields":{"blockName":"project-euler-problems-201-to-300","slug":"/learn/project-euler/project-euler-problems-201-to-300/problem-287-quadtree-encoding-a-simple-compression-algorithm","tests":[{"text":"<p><code>quadtreeEncoding()</code> should return <code>313135496</code>.</p>","testString":"assert.strictEqual(quadtreeEncoding(), 313135496);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function quadtreeEncoding() {\n\n  return true;\n}\n\nquadtreeEncoding();","head":"","tail":"","editableRegionBoundaries":[],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/project-euler/#project-euler-problems-201-to-300","dashedName":"problem-287-quadtree-encoding-a-simple-compression-algorithm","certification":"project-euler","disableLoopProtectTests":true,"disableLoopProtectPreview":false,"superBlock":"project-euler","block":"project-euler-problems-201-to-300","isFirstStep":false,"template":null,"required":[],"nextBlock":"project-euler-problems-201-to-300","nextChallengePath":"/learn/project-euler/project-euler-problems-201-to-300/problem-288-an-enormous-factorial","prevChallengePath":"/learn/project-euler/project-euler-problems-201-to-300/problem-286-scoring-probabilities","id":"5900f48b1000cf542c50ff9e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"// solution required","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/project-euler/project-euler-problems-201-to-300/problem-287-quadtree-encoding-a-simple-compression-algorithm"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
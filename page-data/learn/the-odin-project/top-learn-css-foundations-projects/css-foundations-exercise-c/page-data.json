{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/the-odin-project/top-learn-css-foundations-projects/css-foundations-exercise-c",
    "result": {"data":{"challengeNode":{"challenge":{"block":"top-learn-css-foundations-projects","title":"CSS Foundations Exercise C","description":"<section id=\"description\">\n<p>Let's build a little off the previous exercise, in which you added multiple classes to a single element in order to apply two different rules to it.</p>\n<ol>\n<li>You should see a black background and white text on the first <code>button</code> element.</li>\n<li>You should see a yellow background on the second <code>button</code> element.</li>\n<li>You should set a font size of <code>28px</code> using a grouping selector.</li>\n<li>You should have a list of fonts containing <code>Helvetica</code> and <code>Times New Roman</code> with <code>sans-serif</code> as a fallback.</li>\n<li>You should see a unique class name on each element.</li>\n<li>You should have a grouping selector for styles that both elements share.</li>\n</ol>\n</section>","id":"63ee3fe9381756f9716727f1","hasEditableBoundaries":false,"instructions":null,"notes":null,"challengeType":14,"helpCategory":"Odin","videoUrl":null,"superBlock":"the-odin-project","translationPending":false,"forumTopicId":null,"fields":{"blockName":"top-learn-css-foundations-projects","slug":"/learn/the-odin-project/top-learn-css-foundations-projects/css-foundations-exercise-c","tests":[{"text":"<p>You should have a <code>black</code> background on the first element.</p>","testString":"const classes = document.querySelectorAll('button')?.[0].classList;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`.${classes[0]}`);\n\nassert.equal(style?.backgroundColor, 'black');\n"},{"text":"<p>Your first element should have a text color of <code>white</code>.</p>","testString":"\nconst classes = document.querySelectorAll('button')?.[0].classList;\n\nconst style = new __helpers.CSSHelp(document).getStyle(`.${classes[0]}`);\n\nassert.equal(style?.color, 'white');\n"},{"text":"<p>You should set the <code>font-size</code> for both elements to <code>28px</code> using a grouping selector.</p>","testString":"const classOne = document.querySelectorAll('button')?.[0].classList?.[0];\nconst classTwo = document.querySelectorAll('button')?.[1].classList?.[0];\n\nfunction eitherOr() {\n  const a = new __helpers.CSSHelp(document)\n  return a.getStyle(`.${classOne}, .${classTwo}`) ?? a.getStyle(`.${classTwo}, .${classOne}`);\n}\nassert.equal(eitherOr()?.fontSize, '28px');"},{"text":"<p>You have a unique class name on each element.</p>","testString":"const elementOneClasses = document.querySelectorAll('button')?.[0].classList;\nconst elementTwoClasses = document.querySelectorAll('button')?.[1].classList;\n\nfor(let i = 0; i < elementOneClasses.length; i++){\n    assert(![...elementTwoClasses].includes(elementOneClasses[i]));\n}\n"},{"text":"<p>You should have a grouping selector for styles that both elements share.</p>","testString":"const classOne = document.querySelectorAll('button')?.[0].classList?.[0];\nconst classTwo = document.querySelectorAll('button')?.[1].classList?.[0];\n\nfunction eitherOr() {\n  const a = new __helpers.CSSHelp(document)\n  return a.getStyle(`.${classOne}, .${classTwo}`) ?? a.getStyle(`.${classTwo}, .${classOne}`);\n}\nassert.exists(eitherOr());"},{"text":"<p>You should have a list of fonts containing <code>Helvetica</code> and <code>Times New Roman</code> with <code>sans-serif</code> as a fallback.</p>","testString":"const classOne = document.querySelectorAll('button')?.[0].classList?.[0];\nconst classTwo = document.querySelectorAll('button')?.[1].classList?.[0];\n\nfunction eitherOr() {\n  const a = new __helpers.CSSHelp(document)\n  return a.getStyle(`.${classOne}, .${classTwo}`) ?? a.getStyle(`.${classTwo}, .${classOne}`);\n}\n\nassert.equal(eitherOr()?.fontFamily, 'Helvetica, \"Times New Roman\", sans-serif');"},{"text":"<p>Each element should only have one class.</p>","testString":"const elementOneClasses = document.querySelectorAll('button')?.[0].classList;\nconst elementTwoClasses = document.querySelectorAll('button')?.[1].classList;\n\nassert(elementOneClasses.length === 1 && elementTwoClasses.length === 1);"}]},"required":[],"usesMultifileEditor":false,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Grouping Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <button>Click Me!</button>\n    <button>No, Click Me!</button>\n  </body>\n</html>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]},{"fileKey":"stylescss","ext":"css","name":"styles","contents":"","head":"","tail":"","editableRegionBoundaries":[],"history":["styles.css"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/the-odin-project/#top-learn-css-foundations-projects","dashedName":"css-foundations-exercise-c","certification":"the-odin-project","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"the-odin-project","block":"top-learn-css-foundations-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"top-learn-css-foundations-projects","nextChallengePath":"/learn/the-odin-project/top-learn-css-foundations-projects/css-foundations-exercise-d","prevChallengePath":"/learn/the-odin-project/top-learn-css-foundations-projects/css-foundations-exercise-b","id":"63ee3fe9381756f9716727f1"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":14,"challengeFiles":[{"name":"index","ext":"html","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Descendant Combinator</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n  </head>\n  <body>\n    <div class=\"container\">\n      <p class=\"text\">This should be styled.</p>\n    </div>\n    <p class=\"text\">This should be unstyled.</p>\n    <p class=\"text\">This should be unstyled.</p>\n    <div class=\"container\">\n      <p class=\"text\">This should be styled.</p>\n      <p class=\"text\">This should be styled.</p>\n    </div>\n  </body>\n</html>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"},{"name":"styles","ext":"css","contents":".container .text {\n  background-color: yellow;\n  color: red;\n  font-size: 20px;\n  text-align: center;\n}","head":"","tail":"","history":["styles.css"],"fileKey":"stylescss"}]}},"slug":"/learn/the-odin-project/top-learn-css-foundations-projects/css-foundations-exercise-c"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
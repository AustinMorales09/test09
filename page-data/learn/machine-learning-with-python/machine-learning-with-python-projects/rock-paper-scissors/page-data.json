{
    "componentChunkName": "component---src-templates-challenges-projects-frontend-show-tsx",
    "path": "/learn/machine-learning-with-python/machine-learning-with-python-projects/rock-paper-scissors",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":462376,"title":"Rock Paper Scissors","description":"<section id=\"description\">\n<p>For this challenge, you will create a program to play Rock, Paper, Scissors. A program that picks at random will usually win 50% of the time. To pass this challenge your program must play matches against four different bots, winning at least 60% of the games in each match.</p>\n<p>You will be <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-rock-paper-scissors/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">working on this project with our Gitpod starter code</a>.</p>\n<p>We are still developing the interactive instructional part of the machine learning curriculum. For now, you will have to use other resources to learn how to pass this challenge.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>In the file <code>RPS.py</code> you are provided with a function called <code>player</code>. The function takes an argument that is a string describing the last move of the opponent (\"R\", \"P\", or \"S\"). The function should return a string representing the next move for it to play (\"R\", \"P\", or \"S\").</p>\n<p>A player function will receive an empty string as an argument for the first game in a match since there is no previous play.</p>\n<p>The file <code>RPS.py</code> shows an example function that you will need to update. The example function is defined with two arguments (<code>player(prev_play, opponent_history = [])</code>). The function is never called with a second argument so that one is completely optional. The reason why the example function contains a second argument (<code>opponent_history = []</code>) is because that is the only way to save state between consecutive calls of the <code>player</code> function. You only need the <code>opponent_history</code> argument if you want to keep track of the opponent_history.</p>\n<p><em>Hint: To defeat all four opponents, your program may need to have multiple strategies that change depending on the plays of the opponent.</em></p>\n<h2>Development</h2>\n<p>Do not modify <code>RPS_game.py</code>. Write all your code in <code>RPS.py</code>. For development, you can use <code>main.py</code> to test your code.</p>\n<p><code>main.py</code> imports the game function and bots from <code>RPS_game.py</code>.</p>\n<p>To test your code, play a game with the <code>play</code> function. The <code>play</code> function takes four arguments:</p>\n<ul>\n<li>two players to play against each other (the players are actually functions)</li>\n<li>the number of games to play in the match</li>\n<li>an optional argument to see a log of each game. Set it to <code>True</code> to see these messages.</li>\n</ul>\n<pre><code class=\"language-py\">play(player1, player2, num_games[, verbose])\n</code></pre>\n<p>For example, here is how you would call the function if you want <code>player</code> and <code>quincy</code> to play 1000 games against each other and you want to see the results of each game:</p>\n<pre><code class=\"language-py\">play(player, quincy, 1000, verbose=True)\n</code></pre>\n<h2>Testing</h2>\n<p>The unit tests for this project are in <code>test_module.py</code>. We imported the tests from <code>test_module.py</code> to <code>main.py</code> for your convenience. If you uncomment the last line in <code>main.py</code>, the tests will run automatically whenever you run <code>python main.py</code> in the console.</p>\n<h2>Submitting</h2>\n<p>Copy your project's URL and submit it to freeCodeCamp.</p>\n</section>","challengeType":10,"helpCategory":"Python","superBlock":"machine-learning-with-python","block":"machine-learning-with-python-projects","translationPending":false,"fields":{"blockName":"machine-learning-with-python-projects","slug":"/learn/machine-learning-with-python/machine-learning-with-python-projects/rock-paper-scissors","tests":[{"text":"<p>It should pass all Python tests.</p>","testString":""}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/machine-learning-with-python/#machine-learning-with-python-projects","dashedName":"rock-paper-scissors","certification":"machine-learning-with-python","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"machine-learning-with-python","block":"machine-learning-with-python-projects","isFirstStep":true,"template":null,"required":[],"nextBlock":"machine-learning-with-python-projects","nextChallengePath":"/learn/machine-learning-with-python/machine-learning-with-python-projects/cat-and-dog-image-classifier","prevChallengePath":"/learn/machine-learning-with-python/how-neural-networks-work/how-convolutional-neural-networks-work","id":"5e46f8d6ac417301a38fb92d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":10,"challengeFiles":[]}},"slug":"/learn/machine-learning-with-python/machine-learning-with-python-projects/rock-paper-scissors"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/back-end-development-and-apis/mongodb-and-mongoose/perform-classic-updates-by-running-find-edit-then-save",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301541,"title":"Perform Classic Updates by Running Find, Edit, then Save","description":"<section id=\"description\">\n<p>In the good old days, this was what you needed to do if you wanted to edit a document, and be able to use it somehow (e.g. sending it back in a server response). Mongoose has a dedicated updating method: <code>Model.update()</code>. It is bound to the low-level mongo driver. It can bulk-edit many documents matching certain criteria, but it doesnâ€™t send back the updated document, only a 'status' message. Furthermore, it makes model validations difficult, because it just directly calls the mongo driver.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Modify the <code>findEditThenSave</code> function to find a person by <code>_id</code> (use any of the above methods) with the parameter <code>personId</code> as search key. Add <code>\"hamburger\"</code> to the list of the person's <code>favoriteFoods</code> (you can use <code>Array.push()</code>). Then - inside the find callback - <code>save()</code> the updated <code>Person</code>.</p>\n<p><strong>Note:</strong> This may be tricky, if in your Schema, you declared <code>favoriteFoods</code> as an Array, without specifying the type (i.e. <code>[String]</code>). In that case, <code>favoriteFoods</code> defaults to Mixed type, and you have to manually mark it as edited using <code>document.markModified('edited-field')</code>. See our <a href=\"https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Mongoose article</a>.</p>\n</section>","challengeType":2,"helpCategory":"JavaScript","superBlock":"back-end-development-and-apis","block":"mongodb-and-mongoose","translationPending":false,"fields":{"blockName":"mongodb-and-mongoose","slug":"/learn/back-end-development-and-apis/mongodb-and-mongoose/perform-classic-updates-by-running-find-edit-then-save","tests":[{"text":"<p>Find-edit-update an item should succeed</p>","testString":"(getUserInput) =>\n  $.post(getUserInput('url') + '/_api/find-edit-save', {\n    name: 'Poldo',\n    age: 40,\n    favoriteFoods: ['spaghetti']\n  }).then(\n    (data) => {\n      assert.equal(data.name, 'Poldo', 'item.name is not what is expected');\n      assert.equal(data.age, 40, 'item.age is not what expected');\n      assert.deepEqual(\n        data.favoriteFoods,\n        ['spaghetti', 'hamburger'],\n        'item.favoriteFoods is not what expected'\n      );\n      assert.equal(data.__v, 1, 'The item should be previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/back-end-development-and-apis/#mongodb-and-mongoose","dashedName":"perform-classic-updates-by-running-find-edit-then-save","certification":"back-end-development-and-apis","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"back-end-development-and-apis","block":"mongodb-and-mongoose","isFirstStep":false,"template":null,"required":[],"nextBlock":"mongodb-and-mongoose","nextChallengePath":"/learn/back-end-development-and-apis/mongodb-and-mongoose/perform-new-updates-on-a-document-using-model-findoneandupdate","prevChallengePath":"/learn/back-end-development-and-apis/mongodb-and-mongoose/use-model-findbyid-to-search-your-database-by-id","id":"587d7fb8367417b2b2512c0e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":2,"challengeFiles":[]}},"slug":"/learn/back-end-development-and-apis/mongodb-and-mongoose/perform-classic-updates-by-running-find-edit-then-save"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
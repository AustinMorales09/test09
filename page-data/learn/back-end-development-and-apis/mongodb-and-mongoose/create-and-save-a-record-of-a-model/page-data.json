{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/back-end-development-and-apis/mongodb-and-mongoose/create-and-save-a-record-of-a-model",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301536,"title":"Create and Save a Record of a Model","description":"<section id=\"description\">\n<p>In this challenge you will have to create and save a record of a model.</p>\n</section>","instructions":"<section id=\"instructions\">\n<p>Within the <code>createAndSavePerson</code> function, create a document instance using the <code>Person</code> model constructor you built before. Pass to the constructor an object having the fields <code>name</code>, <code>age</code>, and <code>favoriteFoods</code>. Their types must conform to the ones in the <code>personSchema</code>. Then, call the method <code>document.save()</code> on the returned document instance. Pass to it a callback using the Node convention. This is a common pattern; all the following CRUD methods take a callback function like this as the last argument.</p>\n<pre><code class=\"language-js\">/* Example */\n\n// ...\nperson.save(function(err, data) {\n  //   ...do your stuff here...\n});\n</code></pre>\n</section>","challengeType":2,"helpCategory":"JavaScript","superBlock":"back-end-development-and-apis","block":"mongodb-and-mongoose","translationPending":false,"fields":{"blockName":"mongodb-and-mongoose","slug":"/learn/back-end-development-and-apis/mongodb-and-mongoose/create-and-save-a-record-of-a-model","tests":[{"text":"<p>Creating and saving a db item should succeed</p>","testString":"(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/create-and-save-person').then(\n    (data) => {\n      assert.isString(data.name, '\"item.name\" should be a String');\n      assert.isNumber(data.age, '28', '\"item.age\" should be a Number');\n      assert.isArray(\n        data.favoriteFoods,\n        '\"item.favoriteFoods\" should be an Array'\n      );\n      assert.equal(data.__v, 0, 'The db item should be not previously edited');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/back-end-development-and-apis/#mongodb-and-mongoose","dashedName":"create-and-save-a-record-of-a-model","certification":"back-end-development-and-apis","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"back-end-development-and-apis","block":"mongodb-and-mongoose","isFirstStep":false,"template":null,"required":[],"nextBlock":"mongodb-and-mongoose","nextChallengePath":"/learn/back-end-development-and-apis/mongodb-and-mongoose/create-many-records-with-model-create","prevChallengePath":"/learn/back-end-development-and-apis/mongodb-and-mongoose/create-a-model","id":"587d7fb6367417b2b2512c09"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":2,"challengeFiles":[]}},"slug":"/learn/back-end-development-and-apis/mongodb-and-mongoose/create-and-save-a-record-of-a-model"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
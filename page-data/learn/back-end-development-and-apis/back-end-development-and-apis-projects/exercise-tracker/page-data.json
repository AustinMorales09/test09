{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301505,"title":"Exercise Tracker","description":"<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://exercise-tracker.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://exercise-tracker.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-exercisetracker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-exercisetracker/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>","instructions":"<section id=\"instructions\">\n<p>Your responses should have the following structures.</p>\n<p>Exercise:</p>\n<pre><code class=\"language-js\">{\n  username: \"fcc_test\",\n  description: \"test\",\n  duration: 60,\n  date: \"Mon Jan 01 1990\",\n  _id: \"5fb5853f734231456ccb3b05\"\n}\n</code></pre>\n<p>User:</p>\n<pre><code class=\"language-js\">{\n  username: \"fcc_test\",\n  _id: \"5fb5853f734231456ccb3b05\"\n}\n</code></pre>\n<p>Log:</p>\n<pre><code class=\"language-js\">{\n  username: \"fcc_test\",\n  count: 1,\n  _id: \"5fb5853f734231456ccb3b05\",\n  log: [{\n    description: \"test\",\n    duration: 60,\n    date: \"Mon Jan 01 1990\",\n  }]\n}\n</code></pre>\n<p><strong>Hint:</strong> For the <code>date</code> property, the <code>toDateString</code> method of the <code>Date</code> API can be used to achieve the expected output.</p>\n</section>","challengeType":4,"helpCategory":"JavaScript","superBlock":"back-end-development-and-apis","block":"back-end-development-and-apis-projects","translationPending":false,"fields":{"blockName":"back-end-development-and-apis-projects","slug":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker","tests":[{"text":"<p>You should provide your own project, not the example URL.</p>","testString":"(getUserInput) => {\n  const url = getUserInput('url');\n  assert(\n    !/.*\\/exercise-tracker\\.freecodecamp\\.rocks/.test(getUserInput('url'))\n  );\n};"},{"text":"<p>You can <code>POST</code> to <code>/api/users</code> with form data <code>username</code> to create a new user.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  assert.isTrue(res.ok);\n  if(!res.ok) {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"},{"text":"<p>The returned response from <code>POST /api/users</code> with form data <code>username</code> will be an object with <code>username</code> and <code>_id</code> properties.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    assert.exists(_id);\n    assert.exists(username);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"},{"text":"<p>You can make a <code>GET</code> request to <code>/api/users</code> to get a list of all users.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users');\n  assert.isTrue(res.ok);\n  if(!res.ok) {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"},{"text":"<p>The <code>GET</code> request to <code>/api/users</code> returns an array.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users');\n  if(res.ok){\n    const users = await res.json();\n    assert.isArray(users);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"},{"text":"<p>Each element in the array returned from <code>GET /api/users</code> is an object literal containing a user's <code>username</code> and <code>_id</code>.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users');\n  if(res.ok){\n    const users = await res.json();\n    const user = users[0];\n    assert.exists(user);\n    assert.exists(user.username);\n    assert.exists(user._id);\n    assert.isString(user.username);\n    assert.isString(user._id);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"},{"text":"<p>You can <code>POST</code> to <code>/api/users/:_id/exercises</code> with form data <code>description</code>, <code>duration</code>, and optionally <code>date</code>. If no date is supplied, the current date will be used.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: 'Mon Jan 01 1990'\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-01`\n    });\n  assert.isTrue(addRes.ok);\n  if(!addRes.ok) {\n    throw new Error(`${addRes.status} ${addRes.statusText}`)\n  };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"},{"text":"<p>The response returned from <code>POST /api/users/:_id/exercises</code> will be the user object with the exercise fields added.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: 'Mon Jan 01 1990'\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-01`\n    });\n    if (addRes.ok) {\n      const actual = await addRes.json();\n      assert.deepEqual(actual, expected);\n      assert.isString(actual.description);\n      assert.isNumber(actual.duration);\n      assert.isString(actual.date);\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"},{"text":"<p>You can make a <code>GET</code> request to <code>/api/users/:_id/logs</code> to retrieve a full exercise log of any user.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if (addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n    assert.isTrue(logRes.ok);\n    if(!logRes.ok) {\n      throw new Error(`${logRes.status} ${logRes.statusText}`)\n    };\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"},{"text":"<p>A request to a user's log <code>GET /api/users/:_id/logs</code> returns a user object with a <code>count</code> property representing the number of exercises that belong to that user.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if (addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if (logRes.ok) {\n        const { count } = await logRes.json();\n        assert(count);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"},{"text":"<p>A <code>GET</code> request to <code>/api/users/:_id/logs</code> will return the user object with a <code>log</code> array of all the exercises added.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  })\n  if(res.ok){\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok){\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok) {\n        const {log} = await logRes.json();\n        assert.isArray(log);\n        assert.equal(1, log.length);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"},{"text":"<p>Each item in the <code>log</code> array that is returned from <code>GET /api/users/:_id/logs</code> is an object that should have a <code>description</code>, <code>duration</code>, and <code>date</code> properties.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + `/api/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n     const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok) {\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.exists(exercise);\n        assert.exists(exercise.description);\n        assert.exists(exercise.duration);\n        assert.exists(exercise.date);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      };\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`)\n  };\n};"},{"text":"<p>The <code>description</code> property of any object in the <code>log</code> array that is returned from <code>GET /api/users/:_id/logs</code> should be a string.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0,29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok){\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.isString(exercise.description);\n        assert.equal(exercise.description, expected.description);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"},{"text":"<p>The <code>duration</code> property of any object in the <code>log</code> array that is returned from <code>GET /api/users/:_id/logs</code> should be a number.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0,29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok){\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.isNumber(exercise.duration);\n        assert.equal(exercise.duration, expected.duration);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"},{"text":"<p>The <code>date</code> property of any object in the <code>log</code> array that is returned from <code>GET /api/users/:_id/logs</code> should be a string. Use the <code>dateString</code> format of the <code>Date</code> API.</p>","testString":"async(getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: `username=fcc_test_${Date.now()}`.substring(0,29)\n  });\n  if(res.ok) {\n    const {_id, username} = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toLocaleDateString(\"en-US\", {\n        timeZone: \"UTC\", weekday: \"short\", month: \"short\",\n        day: \"2-digit\", year: \"numeric\"\n      }).replaceAll(',', '')\n    };\n    const addRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `description=${expected.description}&duration=${expected.duration}`\n    });\n    if(addRes.ok) {\n      const logRes = await fetch(url + `/api/users/${_id}/logs`);\n      if(logRes.ok){\n        const {log} = await logRes.json();\n        const exercise = log[0];\n        assert.isString(exercise.date);\n        assert.equal(exercise.date, expected.date);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${addRes.status} ${addRes.statusText}`);\n    };\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  };\n};"},{"text":"<p>You can add <code>from</code>, <code>to</code> and <code>limit</code> parameters to a <code>GET /api/users/:_id/logs</code> request to retrieve part of the log of any user. <code>from</code> and <code>to</code> are dates in <code>yyyy-mm-dd</code> format. <code>limit</code> is an integer of how many logs to send back.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/users', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `username=fcc_test_${Date.now()}`.substring(0, 29)\n  });\n  if (res.ok) {\n    const { _id, username } = await res.json();\n    const expected = {\n      username,\n      description: 'test',\n      duration: 60,\n      _id,\n      date: new Date().toDateString()\n    };\n    const addExerciseRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-01`\n    });\n    const addExerciseTwoRes = await fetch(url + `/api/users/${_id}/exercises`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: `description=${expected.description}&duration=${expected.duration}&date=1990-01-03`\n    });\n    if (addExerciseRes.ok && addExerciseTwoRes.ok) {\n      const logRes = await fetch(\n        url + `/api/users/${_id}/logs?from=1989-12-31&to=1990-01-04`\n      );\n      if (logRes.ok) {\n        const { log } = await logRes.json();\n        assert.isArray(log);\n        assert.equal(2, log.length);\n      } else {\n        throw new Error(`${logRes.status} ${logRes.statusText}`);\n      }\n      const limitRes = await fetch(\n        url + `/api/users/${_id}/logs?limit=1`\n      );\n      if (limitRes.ok) {\n        const { log } = await limitRes.json();\n        assert.isArray(log);\n        assert.equal(1, log.length);\n      } else {\n        throw new Error(`${limitRes.status} ${limitRes.statusText}`);\n      }\n      const filterDateBeforeLimitRes = await fetch(\n        url + `/api/users/${_id}/logs?from=1990-01-02&to=1990-01-04&limit=1`\n      );\n      if (filterDateBeforeLimitRes.ok) {\n        const { log } = await filterDateBeforeLimitRes.json();\n        assert.isArray(log);\n        assert.equal(1, log.length);\n      } else {\n        throw new Error(`${filterDateBeforeLimitRes.status} ${filterDateBeforeLimitRes.statusText}`);\n      }\n    } else {\n      throw new Error(`${res.status} ${res.statusText}`);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/back-end-development-and-apis/#back-end-development-and-apis-projects","dashedName":"exercise-tracker","certification":"back-end-development-and-apis","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"back-end-development-and-apis","block":"back-end-development-and-apis-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"back-end-development-and-apis-projects","nextChallengePath":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/file-metadata-microservice","prevChallengePath":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice","id":"5a8b073d06fa14fcfde687aa"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":4,"challengeFiles":[]}},"slug":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
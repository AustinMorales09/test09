{
    "componentChunkName": "component---src-templates-challenges-projects-backend-show-tsx",
    "path": "/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice",
    "result": {"data":{"challengeNode":{"challenge":{"forumTopicId":301509,"title":"URL Shortener Microservice","description":"<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://url-shortener-microservice.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://url-shortener-microservice.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-urlshortener/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-urlshortener/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>","instructions":"<section id=\"instructions\">\n<p><strong>HINT:</strong> Do not forget to use a body parsing middleware to handle the POST requests. Also, you can use the function <code>dns.lookup(host, cb)</code> from the <code>dns</code> core module to verify a submitted URL.</p>\n</section>","challengeType":4,"helpCategory":"JavaScript","superBlock":"back-end-development-and-apis","block":"back-end-development-and-apis-projects","translationPending":false,"fields":{"blockName":"back-end-development-and-apis-projects","slug":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice","tests":[{"text":"<p>You should provide your own project, not the example URL.</p>","testString":"(getUserInput) => {\n  assert(\n    !/.*\\/url-shortener-microservice\\.freecodecamp\\.rocks/.test(\n      getUserInput('url')\n    )\n  );\n};"},{"text":"<p>You can POST a URL to <code>/api/shorturl</code> and get a JSON response with <code>original_url</code> and <code>short_url</code> properties. Here's an example: <code>{ original_url : 'https://freeCodeCamp.org', short_url : 1}</code></p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const urlVariable = Date.now();\n  const fullUrl = `${url}/?v=${urlVariable}`\n  const res = await fetch(url + '/api/shorturl', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `url=${fullUrl}`\n  });\n  if (res.ok) {\n    const { short_url, original_url } = await res.json();\n    assert.isNotNull(short_url);\n    assert.strictEqual(original_url, `${url}/?v=${urlVariable}`);\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"},{"text":"<p>When you visit <code>/api/shorturl/&#x3C;short_url></code>, you will be redirected to the original URL.</p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const urlVariable = Date.now();\n  const fullUrl = `${url}/?v=${urlVariable}`\n  let shortenedUrlVariable;\n  const postResponse = await fetch(url + '/api/shorturl', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `url=${fullUrl}`\n  });\n  if (postResponse.ok) {\n    const { short_url } = await postResponse.json();\n    shortenedUrlVariable = short_url;\n  } else {\n    throw new Error(`${postResponse.status} ${postResponse.statusText}`);\n  }\n  const getResponse = await fetch(\n    url + '/api/shorturl/' + shortenedUrlVariable\n  );\n  if (getResponse) {\n    const { redirected, url } = getResponse;\n    assert.isTrue(redirected);\n    assert.strictEqual(url,fullUrl);\n  } else {\n    throw new Error(`${getResponse.status} ${getResponse.statusText}`);\n  }\n};"},{"text":"<p>If you pass an invalid URL that doesn't follow the valid <code>http://www.example.com</code> format, the JSON response will contain <code>{ error: 'invalid url' }</code></p>","testString":"async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/shorturl', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `url=ftp:/john-doe.invalidTLD`\n  });\n  if (res.ok) {\n    const { error } = await res.json();\n    assert.isNotNull(error);\n    assert.strictEqual(error.toLowerCase(), 'invalid url');\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"}]}}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/back-end-development-and-apis/#back-end-development-and-apis-projects","dashedName":"url-shortener-microservice","certification":"back-end-development-and-apis","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"back-end-development-and-apis","block":"back-end-development-and-apis-projects","isFirstStep":false,"template":null,"required":[],"nextBlock":"back-end-development-and-apis-projects","nextChallengePath":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/exercise-tracker","prevChallengePath":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/request-header-parser-microservice","id":"bd7158d8c443edefaeb5bd0e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":4,"challengeFiles":[]}},"slug":"/learn/back-end-development-and-apis/back-end-development-and-apis-projects/url-shortener-microservice"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
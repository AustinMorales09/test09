{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/review-dom-manipulation-by-building-a-rock-paper-scissors-game/step-1",
    "result": {"data":{"challengeNode":{"challenge":{"block":"review-dom-manipulation-by-building-a-rock-paper-scissors-game","title":"Step 1","description":"<section id=\"description\">\n<p>The first step is to build out the function that will generate a random choice for the computer.</p>\n<p>The <code>getRandomComputerResult</code> function will be used to get the computer's choice. Inside that function, you should see an <code>options</code> array with <code>\"Rock\"</code>, <code>\"Paper\"</code>, and <code>\"Scissors\"</code>.</p>\n<p>Your task is to complete the <code>getRandomComputerResult</code> function so that it returns a random option from the <code>options</code> array.</p>\n<p><strong>Tips</strong></p>\n<ul>\n<li>You can use <code>Math.random()</code> and <code>Math.floor()</code> to help you get a random whole number. This will represent the index number for the <code>options</code> array.</li>\n<li>You can use the random index to access the option from the <code>options</code> array.</li>\n</ul>\n</section>","id":"663d0ab797cb716189ffcc0a","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":0,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"review-dom-manipulation-by-building-a-rock-paper-scissors-game","slug":"/learn/javascript-algorithms-and-data-structures-v8/review-dom-manipulation-by-building-a-rock-paper-scissors-game/step-1","tests":[{"text":"<p>Your <code>getRandomComputerResult</code> function should return a string.</p>","testString":"assert.isString(getRandomComputerResult());"},{"text":"<p>Your <code>getRandomComputerResult</code> function should return one of the options in the <code>options</code> array.</p>","testString":"assert.include([\"Rock\", \"Paper\", \"Scissors\"], getRandomComputerResult());"},{"text":"<p>Your <code>getRandomComputerResult</code> function should return a random option each time.</p>","testString":"const results = new Set();\n\nfor (let i = 0; i < 50; i++) {\n  results.add(getRandomComputerResult());\n}\n\nassert.hasAllKeys(results, [\"Rock\", \"Paper\", \"Scissors\"]);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]},{"fileKey":"stylescss","ext":"css","name":"styles","contents":"*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}\n","head":"","tail":"","editableRegionBoundaries":[],"history":["styles.css"]},{"fileKey":"scriptjs","ext":"js","name":"script","contents":"function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n\n}\nconsole.log(getRandomComputerResult());","head":"","tail":"","editableRegionBoundaries":[0,6],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#review-dom-manipulation-by-building-a-rock-paper-scissors-game","dashedName":"step-1","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"review-dom-manipulation-by-building-a-rock-paper-scissors-game","isFirstStep":true,"template":null,"required":[],"nextBlock":"review-dom-manipulation-by-building-a-rock-paper-scissors-game","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/review-dom-manipulation-by-building-a-rock-paper-scissors-game/step-2","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-form-validation-by-building-a-calorie-counter/step-96","id":"663d0ab797cb716189ffcc0a"},"projectPreview":{"showProjectPreview":true,"challengeData":{"challengeType":0,"challengeFiles":[{"name":"index","ext":"html","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"},{"name":"styles","ext":"css","contents":"*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}\n","head":"","tail":"","history":["styles.css"],"fileKey":"stylescss"},{"name":"script","ext":"js","contents":"function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n\n  if (hasPlayerWonTheRound(userOption, computerResult)) {\n    playerScore++;\n    return `Player wins! ${userOption} beats ${computerResult}`;\n  } else if (computerResult === userOption) {\n    return `It's a tie! Both chose ${userOption}`;\n  } else {\n    computerScore++;\n    return `Computer wins! ${computerResult} beats ${userOption}`;\n  }\n}\n\nconst playerScoreSpanElement = document.getElementById(\"player-score\");\nconst computerScoreSpanElement = document.getElementById(\"computer-score\");\nconst roundResultsMsg = document.getElementById(\"results-msg\");\nconst winnerMsgElement = document.getElementById(\"winner-msg\");\nconst optionsContainer = document.querySelector(\".options-container\");\nconst resetGameBtn = document.getElementById(\"reset-game-btn\");\n\nfunction showResults(userOption) {\n  roundResultsMsg.innerText = getRoundResults(userOption);\n  computerScoreSpanElement.innerText = computerScore;\n  playerScoreSpanElement.innerText = playerScore;\n\n  if (playerScore === 3 || computerScore === 3) {\n    winnerMsgElement.innerText = `${\n      playerScore === 3 ? \"Player\" : \"Computer\"\n    } has won the game!`;\n\n    resetGameBtn.style.display = \"block\";\n    optionsContainer.style.display = \"none\";\n  }\n\n};\n\nfunction resetGame() {\n  playerScore = 0;\n  computerScore = 0;\n  computerScoreSpanElement.innerText = computerScore;\n  playerScoreSpanElement.innerText = playerScore;\n  roundResultsMsg.innerText = \"\";\n  winnerMsgElement.innerText = \"\";\n  optionsContainer.style.display = \"block\";\n  resetGameBtn.style.display = \"none\";\n}\n\n\nresetGameBtn.addEventListener(\"click\", resetGame);\n\nconst rockBtn = document.getElementById(\"rock-btn\");\nconst paperBtn = document.getElementById(\"paper-btn\");\nconst scissorsBtn = document.getElementById(\"scissors-btn\");\n\nrockBtn.addEventListener(\"click\", function () {\n  showResults(\"Rock\");\n});\n\npaperBtn.addEventListener(\"click\", function () {\n  showResults(\"Paper\");\n});\n\nscissorsBtn.addEventListener(\"click\", function () {\n  showResults(\"Scissors\");\n});","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/review-dom-manipulation-by-building-a-rock-paper-scissors-game/step-1"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-regular-expressions-by-building-a-spam-filter/step-35",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-regular-expressions-by-building-a-spam-filter","title":"Step 35","description":"<section id=\"description\">\n<p>To put everything you have learned together, update your <code>dearRegex</code> to map the vowels to the corresponding numbers (note that <code>i</code> should match <code>1</code>, and also match the pipe symbol <code>|</code>), and to match whole words.</p>\n<p>With that, your spam filter project is complete.</p>\n</section>","id":"642349b5b7bae31af21cd5f8","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":0,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-regular-expressions-by-building-a-spam-filter","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-regular-expressions-by-building-a-spam-filter/step-35","tests":[{"text":"<p>Your <code>dearRegex</code> should use a character class to match <code>e</code> or <code>3</code>.</p>","testString":"assert.match(dearRegex.source, /\\[(e3|3e)\\]/);"},{"text":"<p>Your <code>dearRegex</code> should use a character class to match <code>a</code>, <code>@</code>, or <code>4</code>.</p>","testString":"assert.match(dearRegex.source, /\\[(a@4|a4@|4a@|4@a|@a4|@4a)\\]/);"},{"text":"<p>Your <code>dearRegex</code> should use a character class to match <code>i</code>, <code>1</code>, or <code>|</code>.</p>","testString":"assert.match(dearRegex.source, /\\[(i1\\||i\\|1|1i\\||1\\|i|\\|1i|\\|i1)\\]/);"},{"text":"<p>Your <code>dearRegex</code> should use a non-capturing group.</p>","testString":"assert.match(dearRegex.source, /\\(\\?:/);"},{"text":"<p>Your <code>dearRegex</code> should use a non-capturing group to match <code>\\s</code> or <code>^</code>.</p>","testString":"assert.match(dearRegex.source, /\\(\\?:(\\^\\|\\\\s|\\\\s\\|\\^)\\)/);"},{"text":"<p>Your <code>dearRegex</code> should use a second non-capturing group.</p>","testString":"assert.lengthOf(dearRegex.source.match(/\\(\\?:/g), 2);"},{"text":"<p>Your <code>dearRegex</code> should use a non-capturing group to match <code>\\s</code> or <code>$</code>.</p>","testString":"assert.match(dearRegex.source, /\\(\\?:(\\$\\|\\\\s|\\\\s\\|\\$)\\)/);"},{"text":"<p>Your <code>dearRegex</code> should match <code>dear friend</code>.</p>","testString":"assert.match('dear friend', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should match <code>d34r fr13nd</code>.</p>","testString":"assert.match('d34r fr13nd', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should match <code>d3@r fr|3nd</code>.</p>","testString":"assert.match('d3@r fr|3nd', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should match <code>my dear friend Naomi</code>.</p>","testString":"assert.match('my dear friend Naomi', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should match <code>dear friend Naomi</code></p>","testString":"assert.match('dear friend Naomi', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should match <code>my dear friend</code>.</p>","testString":"assert.match('my dear friend', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should not match <code>non-dear friend</code>.</p>","testString":"assert.notMatch('non-dear friend', dearRegex);"},{"text":"<p>Your <code>dearRegex</code> should not match <code>dear friend-o</code>.</p>","testString":"assert.notMatch('dear friend-o', dearRegex);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]},{"fileKey":"stylescss","ext":"css","name":"styles","contents":"*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["styles.css"]},{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+ (?:hundred|thousand|million|billion)? dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\nconst stockRegex = /(?:^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]r[t7](?:$|\\s)/i;\nconst dearRegex = /dear friend/i;\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex, dearRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});","head":"","tail":"","editableRegionBoundaries":[8,10],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-regular-expressions-by-building-a-spam-filter","dashedName":"step-35","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-regular-expressions-by-building-a-spam-filter","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-basic-algorithmic-thinking-by-building-a-number-sorter","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-basic-algorithmic-thinking-by-building-a-number-sorter/step-1","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-regular-expressions-by-building-a-spam-filter/step-34","id":"642349b5b7bae31af21cd5f8"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":0,"challengeFiles":[{"name":"index","ext":"html","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Learn Regular Expressions by Building a Spam Filter</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n\n  <body>\n    <header class=\"main-text\">\n      <h1 class=\"title\">Is this Spam?</h1>\n      <p class=\"description\">\n        Enter a phrase to check if it would be marked as spam or not.\n      </p>\n    </header>\n\n    <main>\n      <label class=\"message-label\" for=\"message-input\">Message: </label>\n      <textarea\n        placeholder=\"Enter message here\"\n        value=\"\"\n        type=\"text\"\n        name=\"message\"\n        id=\"message-input\"\n        rows=\"10\"\n        cols=\"40\"\n      ></textarea>\n      <button class=\"btn\" id=\"check-message-btn\" type=\"button\">\n        Check message\n      </button>\n      <p id=\"result\"></p>\n    </main>\n\n    <footer class=\"footer\">&copy; freeCodeCamp</footer>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"},{"name":"styles","ext":"css","contents":"*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n  color: var(--light-grey);\n}\n\nbody,\n#message-input:placeholder-shown {\n  text-align: center;\n}\n\ntextarea {\n  max-width: 90%;\n}\n\n.main-text {\n  margin: 25px 0;\n}\n\n.title {\n  font-size: 2.5rem;\n}\n\n.description {\n  margin-top: 15px;\n  font-size: 1.4rem;\n}\n\n.message-label {\n  display: block;\n  margin-bottom: 20px;\n  font-size: 1.5rem;\n}\n\n#message-input:placeholder-shown,\ntextarea {\n  font-size: 1.1rem;\n}\n\n.btn {\n  display: block;\n  cursor: pointer;\n  width: 200px;\n  margin: 10px auto;\n  color: var(--dark-grey);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n#result {\n  font-size: 2rem;\n  margin: 20px 0;\n}\n\n.footer {\n  margin-top: 10px;\n}","head":"","tail":"","history":["styles.css"],"fileKey":"stylescss"},{"name":"script","ext":"js","contents":"const messageInput = document.getElementById(\"message-input\");\nconst result = document.getElementById(\"result\");\nconst checkMessageButton = document.getElementById(\"check-message-btn\");\n\nconst helpRegex = /please help|assist me/i;\nconst dollarRegex = /[0-9]+ (?:hundred|thousand|million|billion)? dollars/i;\nconst freeRegex = /(?:^|\\s)fr[e3][e3] m[o0]n[e3]y(?:$|\\s)/i;\nconst stockRegex = /(?:^|\\s)[s5][t7][o0][c{[(]k [a@4]l[e3]r[t7](?:$|\\s)/i;\nconst dearRegex = /(?:^|\\s)d[e3][a@4]r fr[i1|][e3]nd(?:$|\\s)/i;\n\nconst denyList = [helpRegex, dollarRegex, freeRegex, stockRegex, dearRegex];\n\nconst isSpam = (msg) => denyList.some((regex) => regex.test(msg));\n\ncheckMessageButton.addEventListener(\"click\", () => {\n  if (messageInput.value === \"\") {\n    alert(\"Please enter a message.\");\n    return;\n  }\n\n  result.textContent = isSpam(messageInput.value)\n    ? \"Oh no! This looks like a spam message.\"\n    : \"This message does not seem to contain any spam.\";\n  messageInput.value = \"\";\n});","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-regular-expressions-by-building-a-spam-filter/step-35"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
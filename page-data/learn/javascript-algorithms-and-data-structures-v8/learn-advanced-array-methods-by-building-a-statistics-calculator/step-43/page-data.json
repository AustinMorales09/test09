{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-advanced-array-methods-by-building-a-statistics-calculator/step-43",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-advanced-array-methods-by-building-a-statistics-calculator","title":"Step 43","description":"<section id=\"description\">\n<p>Your next calculation is the <dfn>range</dfn>, which is the difference between the largest and smallest numbers in the list.</p>\n<p>You previously learned about the global <code>Math</code> object. <code>Math</code> has a <code>.min()</code> method to get the smallest number from a series of numbers, and the <code>.max()</code> method to get the largest number. Here's an example that gets the smallest number from an array:</p>\n<pre><code class=\"language-js\">const numbersArr = [2, 3, 1];\n\nconsole.log(Math.min(...numbersArr));\n// Expected output: 1\n</code></pre>\n<p>Declare a <code>getRange</code> function that takes the same <code>array</code> parameter you have been using. Using <code>Math.min()</code>, <code>Math.max()</code>, and the spread operator, return the difference between the largest and smallest numbers in the list.</p>\n</section>","id":"6352f179bdca23221298a5ba","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":0,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-advanced-array-methods-by-building-a-statistics-calculator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-advanced-array-methods-by-building-a-statistics-calculator/step-43","tests":[{"text":"<p>You should define a <code>getRange</code> function.</p>","testString":"assert.isFunction(getRange);"},{"text":"<p>Your <code>getRange</code> function should take an <code>array</code> parameter.</p>","testString":"assert.match(getRange.toString(), /array/);"},{"text":"<p>Your <code>getRange</code> function should use the spread operator on the <code>array</code> parameter.</p>","testString":"assert.match(code.split(\"getRange\")[1], /\\.\\.\\.array/);"},{"text":"<p>Your <code>getRange</code> function should use <code>Math.max</code> on the spread <code>array</code> parameter.</p>","testString":"assert.match(code.split(\"getRange\")[1], /Math\\.max\\(\\s*\\.\\.\\.array\\s*\\)/);"},{"text":"<p>Your <code>getRange</code> function should use <code>Math.min</code> on the spread <code>array</code> parameter.</p>","testString":"assert.match(code.split(\"getRange\")[1], /Math\\.min\\(\\s*\\.\\.\\.array\\s*\\)/);"},{"text":"<p>Your <code>getRange</code> function should return the difference between the largest and smallest numbers in the list.</p>","testString":"assert.equal(getRange([1, 2, 3, 4, 5]), 4);\nassert.equal(getRange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 9);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"indexhtml","ext":"html","name":"index","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>","head":"","tail":"","editableRegionBoundaries":[],"history":["index.html"]},{"fileKey":"stylescss","ext":"css","name":"styles","contents":"body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}","head":"","tail":"","editableRegionBoundaries":[],"history":["styles.css"]},{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  const median =\n    array.length % 2 === 0\n      ? getMean([sorted[array.length / 2], sorted[array.length / 2 - 1]])\n      : sorted[Math.floor(array.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\n\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n}","head":"","tail":"","editableRegionBoundaries":[28,30],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-advanced-array-methods-by-building-a-statistics-calculator","dashedName":"step-43","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-advanced-array-methods-by-building-a-statistics-calculator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-advanced-array-methods-by-building-a-statistics-calculator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-advanced-array-methods-by-building-a-statistics-calculator/step-44","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-advanced-array-methods-by-building-a-statistics-calculator/step-42","id":"6352f179bdca23221298a5ba"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":0,"challengeFiles":[{"name":"index","ext":"html","contents":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n    <form onsubmit=\"calculate(); return false;\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>","head":"","tail":"","history":["index.html"],"fileKey":"indexhtml"},{"name":"styles","ext":"css","contents":"body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}","head":"","tail":"","history":["styles.css"],"fileKey":"stylescss"},{"name":"script","ext":"js","contents":"const getMean = (array) => array.reduce((acc, el) => acc + el, 0) / array.length;\n\nconst getMedian = (array) => {\n  const sorted = array.slice().sort((a, b) => a - b);\n  const median =\n    array.length % 2 === 0\n      ? getMean([sorted[array.length / 2], sorted[array.length / 2 - 1]])\n      : sorted[Math.floor(array.length / 2)];\n  return median;\n}\n\nconst getMode = (array) => {\n  const counts = {};\n  array.forEach((el) => {\n    counts[el] = (counts[el] || 0) + 1;\n  })\n  if (new Set(Object.values(counts)).size === 1) {\n    return null;\n  }\n  const highest = Object.keys(counts).sort(\n    (a, b) => counts[b] - counts[a]\n  )[0];\n  const mode = Object.keys(counts).filter(\n    (el) => counts[el] === counts[highest]\n  );\n  return mode.join(\", \");\n}\n\nconst getRange = (array) => {\n  return Math.max(...array) - Math.min(...array);\n}\n\nconst getVariance = (array) => {\n  const mean = getMean(array);\n  const variance = array.reduce((acc, el) => {\n    const difference = el - mean;\n    const squared = difference ** 2;\n    return acc + squared;\n  }, 0) / array.length;\n  return variance;\n}\n\nconst getStandardDeviation = (array) => {\n  const variance = getVariance(array);\n  const standardDeviation = Math.sqrt(variance);\n  return standardDeviation;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n  \n  const mean = getMean(numbers);\n  const median = getMedian(numbers);\n  const mode = getMode(numbers);\n  const range = getRange(numbers);\n  const variance = getVariance(numbers);\n  const standardDeviation = getStandardDeviation(numbers);\n\n  document.querySelector(\"#mean\").textContent = mean;\n  document.querySelector(\"#median\").textContent = median;\n  document.querySelector(\"#mode\").textContent = mode;\n  document.querySelector(\"#range\").textContent = range;\n  document.querySelector(\"#variance\").textContent = variance;\n  document.querySelector(\"#standardDeviation\").textContent = standardDeviation;\n}","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-advanced-array-methods-by-building-a-statistics-calculator/step-43"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
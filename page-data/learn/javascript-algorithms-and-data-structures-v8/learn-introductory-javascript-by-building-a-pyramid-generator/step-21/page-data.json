{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-21",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 21","description":"<section id=\"description\">\n<p>Notice how the value inside your <code>rows</code> array has been changed directly? This is called <dfn>mutation</dfn>. As you learn more about arrays, you will learn when to mutate an array, and when you should not.</p>\n<p>Before moving on, this is a great opportunity to learn a common array use. Currently, your code accesses the last element in the array with <code>rows[2]</code>. But you may not know how many elements are in an array when you want the last one.</p>\n<p>You can make use of the <code>.length</code> property of an array - this returns the number of elements in the array. To get the last element of any array, you can use the following syntax:</p>\n<pre><code class=\"language-js\">array[array.length - 1]\n</code></pre>\n<p><code>array.length</code> returns the number of elements in the array. By subtracting <code>1</code>, you get the index of the last element in the array. You can apply this same concept to your <code>rows</code> array.</p>\n<p>Update your <code>rows[2]</code> to dynamically access the last element in the <code>rows</code> array. Refer to the example above to help you.</p>\n<p>You should not see anything change in your console.</p>\n</section>","id":"6610bbed59bc2a0194d85533","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-21","tests":[{"text":"<p>You should use the <code>.length</code> property of your <code>rows</code> array.</p>","testString":"assert.match(code, /rows\\.length/);"},{"text":"<p>You should use <code>rows.length</code> in your bracket notation.</p>","testString":"assert.match(code, /rows\\[\\s*rows\\.length/);"},{"text":"<p>You should subtract <code>1</code> from the length in your bracket notation.</p>","testString":"assert.match(code, /rows\\[\\s*rows\\.length\\s*-\\s*1\\s*\\]/)"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nconsole.log(rows[0]);\nrows[2] = 10;\nconsole.log(rows);","head":"","tail":"","editableRegionBoundaries":[4,6],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-21","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-22","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-20","id":"6610bbed59bc2a0194d85533"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-21"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
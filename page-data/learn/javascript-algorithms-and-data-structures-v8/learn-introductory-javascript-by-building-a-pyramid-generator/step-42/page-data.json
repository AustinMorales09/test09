{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-42",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 42","description":"<section id=\"description\">\n<p>Now all of your numbers are appearing on the same line. This will not work for creating a pyramid.</p>\n<p>You will need to add a new line to each row. However, pressing the return key to insert a line break between quotes in JavaScript will result in a parsing error. Instead, you need to use the special <dfn>escape sequence</dfn> <code>\\n</code>, which is interpreted as a new line when the string is logged. For example:</p>\n<pre><code class=\"language-js\">lineOne = lineOne + \"\\n\" + lineTwo;\n</code></pre>\n<p>Use a second addition operator to concatenate a new line between the existing <code>result</code> value and the added <code>row</code> value.</p>\n</section>","id":"660f23b53db70af0f2620e78","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-42","tests":[{"text":"<p>You should use the <code>\\n</code> escape sequence. Remember that it needs to be a string, so it is wrapped in quotes.</p>","testString":"assert.match(code, /('|\")\\\\n\\1/);"},{"text":"<p>You should concatenate the <code>\\n</code> escape sequence to your <code>result</code> variable.</p>","testString":"assert.match(code, /result\\s*\\+\\s*('|\")\\\\n\\1/);"},{"text":"<p>You should concatenate your <code>row</code> variable to your <code>\\n</code> escape sequence.</p>","testString":"assert.match(code, /result\\s*\\+\\s*('|\")\\\\n\\1\\s*\\+\\s*row/);"},{"text":"<p>You should assign the entire concatenation back to your <code>result</code> variable. Don't forget your semi-colon.</p>","testString":"assert.match(code, /result\\s*=\\s*result\\s*\\+\\s*('|\")\\\\n\\1\\s*\\+\\s*row;/);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(i);\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + row;\n}\n\nconsole.log(result);","head":"","tail":"","editableRegionBoundaries":[10,14],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-42","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-43","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-41","id":"660f23b53db70af0f2620e78"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-42"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
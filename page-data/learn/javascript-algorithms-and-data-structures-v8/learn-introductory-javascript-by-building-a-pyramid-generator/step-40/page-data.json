{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-40",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 40","description":"<section id=\"description\">\n<p>To manipulate the <code>result</code> string, you will use a different type of loop. Specifically, a <code>for...of</code> loop, which iterates over each item in an iterable object and temporarily assigns it to a variable.</p>\n<p>The syntax for a <code>for...of</code> loop looks like:</p>\n<pre><code class=\"language-js\">for (const value of iterable) {\n\n}\n</code></pre>\n<p>Note that you can use <code>const</code> because the variable only exists for a single iteration, not during the entire loop.</p>\n<p>Create a <code>for...of</code> loop to iterate through your <code>rows</code> array, assigning each value to a <code>row</code> variable.</p>\n</section>","id":"660f207334fabaeac3269c38","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-40","tests":[{"text":"<p>You should use another <code>for</code> keyword.</p>","testString":"assert.lengthOf(code.match(/for/g), 2);"},{"text":"<p>You should declare a <code>row</code> variable.</p>","testString":"assert.match(code, /\\s+row\\s+/);"},{"text":"<p>You should use <code>const</code> to declare your <code>row</code> variable.</p>","testString":"assert.match(code, /const\\s+row\\s+/);"},{"text":"<p>Your <code>for...of</code> loop should declare your <code>row</code> variable.</p>","testString":"assert.match(code, /for\\s*\\(\\s*const\\s+row\\s+/);"},{"text":"<p>Your <code>row</code> variable should be extracted from <code>rows</code> using the <code>of</code> keyword.</p>","testString":"assert.match(code, /for\\s*\\(\\s*const\\s+row\\s+of\\s+rows\\s*\\)/);"},{"text":"<p>Your <code>for...of</code> loop body should be empty.</p>","testString":"assert.match(code, /for\\s*\\(\\s*const\\s+row\\s+of\\s+rows\\s*\\)\\s*\\{\\s*\\}/);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(i);\n}\n\nlet result = \"\"\n\n\n\nconsole.log(result);","head":"","tail":"","editableRegionBoundaries":[10,12],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-40","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-41","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-39","id":"660f207334fabaeac3269c38"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-40"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-12",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 12","description":"<section id=\"description\">\n<p>Before moving forward, you should take a moment to review the concepts you have learned.</p>\n<p>Use the <code>let</code> keyword to declare a <code>profession</code> variable and an <code>age</code> variable. Initialize <code>profession</code> with the string <code>\"teacher\"</code>, but do not initialize <code>age</code> with any value.</p>\n<p>Log both of your variables to the console to see the results.</p>\n</section>","id":"664ed97c55a99e5ffab759dc","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":0,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-12","tests":[{"text":"<p>You should declare a <code>profession</code> variable.</p>","testString":"assert.match(code, /(?:var|let|const)\\s+profession/);"},{"text":"<p>You should use <code>let</code> to declare the <code>profession</code> variable.</p>","testString":"assert.match(code, /let\\s+profession/);"},{"text":"<p>You should assign the string <code>\"teacher\"</code> to the <code>profession</code> variable.</p>","testString":"assert.strictEqual(profession, \"teacher\");"},{"text":"<p>You should declare an <code>age</code> variable.</p>","testString":"assert.match(code, /(?:var|let|const)\\s+age/);"},{"text":"<p>You should use <code>let</code> to declare the <code>age</code> variable.</p>","testString":"assert.match(code, /let\\s+age/);"},{"text":"<p>You should not assign a value to the <code>age</code> variable.</p>","testString":"assert.isUndefined(age);"},{"text":"<p>You should log <code>age</code> to the console.</p>","testString":"assert.match(code, /console\\.log\\(\\s*age\\s*\\);?/);"},{"text":"<p>You should log <code>profession</code> to the console.</p>","testString":"assert.match(code, /console\\.log\\(\\s*profession\\s*\\);?/);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let character = \"Hello\";\n","head":"","tail":"","editableRegionBoundaries":[1,3],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-12","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-13","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-11","id":"664ed97c55a99e5ffab759dc"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-12"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
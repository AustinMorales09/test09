{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-104",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 104","description":"<section id=\"description\">\n<p>The <code>.unshift()</code> method of an array allows you to add a value to the <strong>beginning</strong> of the array, unlike <code>.push()</code> which adds the value at the end of the array. Here is an example:</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3];\nnumbers.unshift(5);\n</code></pre>\n<p>The <code>numbers</code> array would now be <code>[5, 1, 2, 3]</code>.</p>\n<p>Use <code>const</code> to declare an <code>unshifted</code> variable, and assign it the result of calling <code>.unshift()</code> on your <code>numbers</code> array. Pass <code>5</code> as the argument. Then print your <code>unshifted</code> variable.</p>\n</section>","id":"660f4de78f775e480ba2e451","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-104","tests":[{"text":"<p>You should declare your <code>unshifted</code> variable.</p>","testString":"assert.match(code, /const\\s+unshifted/);"},{"text":"<p>You should call the <code>.unshift()</code> method on your <code>numbers</code> array.</p>","testString":"assert.match(code, /numbers\\.unshift\\(/);"},{"text":"<p>You should pass <code>5</code> as the argument to your <code>.unshift()</code> call.</p>","testString":"assert.deepEqual(numbers, [5,1,2,3]);"},{"text":"<p>You should assign the result of your <code>.unshift()</code> call to your <code>unshifted</code> variable.</p>","testString":"assert.equal(unshifted, 4);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\n/*while (rows.length < count) {\n  rows.push(padRow(rows.length + 1, count));\n}*/\n\n/*for (let i = count; i > 0; i--) {\n  rows.push(padRow(i, count));\n}*/\n\nconst numbers = [1, 2, 3];\n\nconsole.log(numbers);\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","editableRegionBoundaries":[21,25],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-104","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-105","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-103","id":"660f4de78f775e480ba2e451"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-104"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
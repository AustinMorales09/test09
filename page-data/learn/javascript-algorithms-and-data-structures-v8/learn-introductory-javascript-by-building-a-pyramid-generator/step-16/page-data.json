{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-16",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 16","description":"<section id=\"description\">\n<p>You can also perform subtraction (<code>-</code>), multiplication (<code>*</code>), and division (<code>/</code>). Feel free to experiment with the operators and numbers in your <code>console.log</code>. When you are ready to move on, remove the <code>console.log</code>.</p>\n</section>","id":"660ef857f2806aa626d29d17","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-16","tests":[{"text":"<p>You should not have a <code>console.log()</code> in your code.</p>","testString":"assert.notMatch(code, /console/);"},{"text":"<p>Your <code>character</code> variable should still have the value <code>\"Hello\"</code>.</p>","testString":"assert.equal(character, \"Hello\");"},{"text":"<p>Your <code>count</code> variable should still have the value <code>8</code>.</p>","testString":"assert.equal(count, 8);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let character = 'Hello';\nlet count = 8;\nconsole.log(count + 1);","head":"","tail":"","editableRegionBoundaries":[1,4],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-16","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-17","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-15","id":"660ef857f2806aa626d29d17"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-16"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
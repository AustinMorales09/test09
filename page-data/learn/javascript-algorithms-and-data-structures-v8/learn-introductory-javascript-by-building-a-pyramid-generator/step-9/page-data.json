{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-9",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 9","description":"<section id=\"description\">\n<p>The default value of an uninitialized variable is <code>undefined</code>. This is a special data type that represents a value that does not have a definition yet.</p>\n<p>You can still assign a value to an uninitialized variable. Here is an example:</p>\n<pre><code class=\"language-js\">let uninitialized;\nuninitialized = \"assigned\";\n</code></pre>\n<p>Assign the string <code>\"Test\"</code> to your <code>secondCharacter</code> variable below your declaration. Open the console to see how your log has changed.</p>\n</section>","id":"6610b8f6a98d25f4d485a94d","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-9","tests":[{"text":"<p>You should not initialize <code>secondCharacter</code>. Remember that initialization means assigning a value when you declare the variable.</p>","testString":"assert.notMatch(code, /let\\s+secondCharacter\\s*=/);"},{"text":"<p>You should use the assignment operator on <code>secondCharacter</code>.</p>","testString":"assert.match(code, /secondCharacter\\s*=/);"},{"text":"<p>You should assign the string <code>\"Test\"</code> to your <code>secondCharacter</code> variable.</p>","testString":"assert.equal(secondCharacter, \"Test\");"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let character = 'Hello';\nconsole.log(character);\ncharacter = \"World\";\nlet secondCharacter;\n\nconsole.log(secondCharacter);","head":"","tail":"","editableRegionBoundaries":[0,7],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-9","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-10","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-8","id":"6610b8f6a98d25f4d485a94d"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-9"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
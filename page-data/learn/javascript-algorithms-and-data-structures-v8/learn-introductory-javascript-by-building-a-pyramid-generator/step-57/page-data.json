{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-57",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 57","description":"<section id=\"description\">\n<p>Below the <code>return</code> statement, log the string <code>\"This works!\"</code> to the console.</p>\n<p>After doing that, you will see that the string <code>\"This works!\"</code> does not display in the console, and the <code>console.log(\"This works!\")</code> line is greyed out.</p>\n<p>Copy the console log and paste it above the <code>return</code> statement. Now, the string <code>\"This works!\"</code> should appear in the console.</p>\n<p>An important thing to know about the <code>return</code> keyword is that it does not just define a value to be returned from your function, it also stops the execution of your code inside a function or a block statement. This means any code after a <code>return</code> statement will not run.</p>\n</section>","id":"6610c77d50636722e5b6be17","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-57","tests":[{"text":"<p>Your <code>padRow</code> function should return the <code>test</code> variable.</p>","testString":"assert.equal(padRow(\"Naomi\"), \"Testing\");"},{"text":"<p>Your first <code>console.log</code> should come after your <code>return</code> keyword.</p>","testString":"assert.match(padRow.toString(), /return\\s+test;\\s+console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);/);"},{"text":"<p>Your second <code>console.log</code> should come before your <code>return</code> keyword.</p>","testString":"assert.match(padRow.toString(), /console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);\\s+return\\s+test;/);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  const test = \"Testing\";\n  \n  return test;\n\n}\n\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","editableRegionBoundaries":[4,12],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-57","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-58","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-56","id":"6610c77d50636722e5b6be17"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-57"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
{
    "componentChunkName": "component---src-templates-challenges-classic-show-tsx",
    "path": "/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-23",
    "result": {"data":{"challengeNode":{"challenge":{"block":"learn-introductory-javascript-by-building-a-pyramid-generator","title":"Step 23","description":"<section id=\"description\">\n<p>In the last few steps, you learned all about working with arrays. Take a moment to review what you have learned.</p>\n<p>Start by declaring a <code>cities</code> variable and initializing it as an array of the strings <code>\"London\"</code>, <code>\"New York\"</code>, and <code>\"Mumbai\"</code>. Then log that variable to the console.</p>\n<p>After logging, change the last element of <code>cities</code> to the string <code>\"Mexico City\"</code>, then log the <code>cities</code> variable again.</p>\n<p>When done correctly, you should see this output in the console.</p>\n<pre><code class=\"language-js\">[ \"London\", \"New York\", \"Mumbai\" ]\n[ \"London\", \"New York\", \"Mexico City\" ]\n</code></pre>\n</section>","id":"665732da4815b70bb083915e","hasEditableBoundaries":true,"instructions":null,"notes":null,"challengeType":1,"helpCategory":"JavaScript","videoUrl":null,"superBlock":"javascript-algorithms-and-data-structures-v8","translationPending":false,"forumTopicId":null,"fields":{"blockName":"learn-introductory-javascript-by-building-a-pyramid-generator","slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-23","tests":[{"text":"<p>You should use <code>let</code> to declare a <code>cities</code> variable.</p>","testString":"assert.match(code, /let\\s+cities/);"},{"text":"<p>You should assign an array of the strings <code>\"London\"</code>, <code>\"New York\"</code>, and <code>\"Mumbai\"</code> to the <code>cities</code> variable.</p>","testString":"assert.match(code, /let\\s+cities\\s*=\\s*\\[\\s*(\"|'|`)London\\1\\s*,\\s*(\"|'|`)New York\\2\\s*,\\s*(\"|'|`)Mumbai\\3\\s*\\]/);"},{"text":"<p>You should use <code>console.log()</code> to log the entire <code>cities</code> array to the console.</p>","testString":"assert.match(code, /console\\.log\\(\\s*cities\\s*\\)/);"},{"text":"<p>You should update the last element of the <code>cities</code> array to the string <code>\"Mexico City\"</code>. Remember that you can access the last element of an array using <code>array[array.length - 1]</code>.</p>","testString":"assert.deepEqual(cities, [\"London\", \"New York\", \"Mexico City\"]);"},{"text":"<p>You should have two <code>console.log(cities)</code> statements in your code.</p>","testString":"assert.lengthOf(code.match(/console\\.log\\(\\s*cities\\s*\\)/g), 2);"}]},"required":[],"usesMultifileEditor":true,"challengeFiles":[{"fileKey":"scriptjs","ext":"js","name":"script","contents":"let character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\n\nconsole.log(rows);","head":"","tail":"","editableRegionBoundaries":[3,5],"history":["script.js"]}]}}},"pageContext":{"challengeMeta":{"blockHashSlug":"/learn/javascript-algorithms-and-data-structures-v8/#learn-introductory-javascript-by-building-a-pyramid-generator","dashedName":"step-23","certification":"javascript-algorithms-and-data-structures-v8","disableLoopProtectTests":false,"disableLoopProtectPreview":false,"superBlock":"javascript-algorithms-and-data-structures-v8","block":"learn-introductory-javascript-by-building-a-pyramid-generator","isFirstStep":false,"template":null,"required":[],"nextBlock":"learn-introductory-javascript-by-building-a-pyramid-generator","nextChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-24","prevChallengePath":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-22","id":"665732da4815b70bb083915e"},"projectPreview":{"showProjectPreview":false,"challengeData":{"challengeType":1,"challengeFiles":[{"name":"script","ext":"js","contents":"const character = \"!\";\nconst count = 10;\nconst rows = [];\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\nfor (let i = 1; i <= count; i++) {\n  if (inverted) {\n    rows.unshift(padRow(i, count));\n  } else {\n    rows.push(padRow(i, count));\n  }\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);","head":"","tail":"","history":["script.js"],"fileKey":"scriptjs"}]}},"slug":"/learn/javascript-algorithms-and-data-structures-v8/learn-introductory-javascript-by-building-a-pyramid-generator/step-23"}},
    "staticQueryHashes": ["1800977889","4268002518"]}
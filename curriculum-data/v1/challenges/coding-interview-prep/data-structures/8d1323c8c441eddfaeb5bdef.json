{
  "id": "8d1323c8c441eddfaeb5bdef",
  "title": "Create a Set Class",
  "challengeType": 1,
  "forumTopicId": 301632,
  "dashedName": "create-a-set-class",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "class Set {\n  constructor() {\n    // Dictionary will hold the items of our set\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  // This method will return all the values in the set\n  values() {\n    return Object.values(this.dictionary);\n  }\n\n  // Only change code below this line\n  \n  // Only change code above this line\n}",
      "error": null,
      "seed": "class Set {\n  constructor() {\n    // Dictionary will hold the items of our set\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  // This method will return all the values in the set\n  values() {\n    return Object.values(this.dictionary);\n  }\n\n  // Only change code below this line\n  \n  // Only change code above this line\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "class Set {\n  constructor() {\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  values() {\n    return Object.values(this.dictionary);\n  }\n\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = element;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n\n  size() {\n    return this.length;\n  }\n}",
        "error": null,
        "seed": "class Set {\n  constructor() {\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  values() {\n    return Object.values(this.dictionary);\n  }\n\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = element;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n\n  size() {\n    return this.length;\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>Set</code> class should have an <code>add</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    return typeof test.add === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>add</code> method should not add duplicate values.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.add('a');\n    var vals = test.values();\n    return vals[0] === 'a' && vals[1] === 'b' && vals.length === 2;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>add</code> method should return <code>true</code> when a value has been successfully added.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    var result = test.add('a');\n    return result != undefined && result === true;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>add</code> method should return <code>false</code> when a duplicate value is added.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    var result = test.add('a');\n    return result != undefined && result === false;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>Set</code> class should have a <code>remove</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    return typeof test.remove === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>remove</code> method should only remove items that are present in the set.</p>",
      "testString": "assert.deepEqual(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.remove('c');\n    return test.values();\n  })(),\n  ['a', 'b']\n);"
    },
    {
      "text": "<p>Your <code>remove</code> method should remove the given item from the set.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.remove('a');\n    var vals = test.values();\n    return vals[0] === 'b' && vals.length === 1;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>Set</code> class should have a <code>size</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    return typeof test.size === 'function';\n  })()\n);"
    },
    {
      "text": "<p>The <code>size</code> method should return the number of elements in the collection.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    test.add('a');\n    test.add('b');\n    test.remove('a');\n    return test.size() === 1;\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In this exercise we are going to create a class named <code>Set</code> to emulate an abstract data structure called \"set\". A set is like an array, but it cannot contain duplicate values. The typical use for a set is to simply check for the presence of an item. We can see how the ES6 <code>Set</code> object works in the example below:</p>\n<pre><code class=\"language-js\">const set1 = new Set([1, 2, 3, 5, 5, 2, 0]);\nconsole.log(set1);\n// output: {1, 2, 3, 5, 0}\nconsole.log(set1.has(1));\n// output: true\nconsole.log(set1.has(6));\n// output: false\n</code></pre>\n<p>First, we will create an add method that adds a value to our set collection as long as the value does not already exist in the set. Then we will create a remove method that removes a value from the set collection if it already exists. And finally, we will create a size method that returns the number of elements inside the set collection.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create an <code>add</code> method that adds a unique value to the set collection and returns <code>true</code> if the value was successfully added and <code>false</code> otherwise.</p>\n<p>Create a <code>remove</code> method that accepts a value and checks if it exists in the set. If it does, then this method should remove it from the set collection, and return <code>true</code>. Otherwise, it should return <code>false</code>. Create a <code>size</code> method that returns the size of the set collection.</p>\n</section>",
  "translationPending": false,
  "block": "data-structures",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 6,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
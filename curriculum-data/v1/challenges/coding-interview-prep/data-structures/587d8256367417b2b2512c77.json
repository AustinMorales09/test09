{
  "id": "587d8256367417b2b2512c77",
  "title": "Adjacency List",
  "challengeType": 1,
  "forumTopicId": 301620,
  "dashedName": "adjacency-list",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "var undirectedAdjList = {};",
      "error": null,
      "seed": "var undirectedAdjList = {};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "var undirectedAdjList = {\n  James: ['Jeff'],\n  Jill: ['Jenny'],\n  Jenny: ['Jill', 'Jeff'],\n  Jeff: ['James', 'Jenny']\n};",
        "error": null,
        "seed": "var undirectedAdjList = {\n  James: ['Jeff'],\n  Jill: ['Jenny'],\n  Jenny: ['Jill', 'Jeff'],\n  Jeff: ['James', 'Jenny']\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>undirectedAdjList</code> should only contain four nodes.</p>",
      "testString": "assert(Object.keys(undirectedAdjList).length === 4);"
    },
    {
      "text": "<p>There should be an edge between <code>Jeff</code> and <code>James</code>.</p>",
      "testString": "assert(\n  undirectedAdjList.James.indexOf('Jeff') !== -1 &&\n    undirectedAdjList.Jeff.indexOf('James') !== -1\n);"
    },
    {
      "text": "<p>There should be an edge between <code>Jill</code> and <code>Jenny</code>.</p>",
      "testString": "assert(\n  undirectedAdjList.Jill.indexOf('Jenny') !== -1 &&\n    undirectedAdjList.Jenny.indexOf('Jill') !== -1\n);"
    },
    {
      "text": "<p>There should be an edge between <code>Jeff</code> and <code>Jenny</code>.</p>",
      "testString": "assert(\n  undirectedAdjList.Jeff.indexOf('Jenny') !== -1 &&\n    undirectedAdjList.Jenny.indexOf('Jeff') !== -1\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Graphs can be represented in different ways. Here we describe one way, which is called an <dfn>adjacency list</dfn>. An adjacency list is essentially a bulleted list where the left side is the node and the right side lists all the other nodes it's connected to. Below is a representation of an adjacency list.</p>\n<blockquote>Node1: Node2, Node3<br>Node2: Node1<br>Node3: Node1</blockquote>\n<p>Above is an undirected graph because <code>Node1</code> is connected to <code>Node2</code> and <code>Node3</code>, and that information is consistent with the connections <code>Node2</code> and <code>Node3</code> show. An adjacency list for a directed graph would mean each row of the list shows direction. If the above was directed, then <code>Node2: Node1</code> would mean there the directed edge is pointing from <code>Node2</code> towards <code>Node1</code>. We can represent the undirected graph above as an adjacency list by putting it within a JavaScript object.</p>\n<pre><code class=\"language-js\">var undirectedG = {\n  Node1: [\"Node2\", \"Node3\"],\n  Node2: [\"Node1\"],\n  Node3: [\"Node1\"]\n};\n</code></pre>\n<p>This can also be more simply represented as an array where the nodes just have numbers rather than string labels.</p>\n<pre><code class=\"language-js\">var undirectedGArr = [\n  [1, 2], // Node1\n  [0],    // Node2\n  [0]     // Node3\n];\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a social network as an undirected graph with 4 nodes/people named <code>James</code>, <code>Jill</code>, <code>Jenny</code>, and <code>Jeff</code>. There are edges/relationships between James and Jeff, Jill and Jenny, and Jeff and Jenny.</p>\n</section>",
  "translationPending": false,
  "block": "data-structures",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 41,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d8251367417b2b2512c63",
  "title": "Remove Elements from a Linked List",
  "challengeType": 1,
  "forumTopicId": 301712,
  "dashedName": "remove-elements-from-a-linked-list",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode  = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    // Only change code below this line\n\n    // Only change code above this line\n  };\n}",
      "error": null,
      "seed": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode  = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    // Only change code below this line\n\n    // Only change code above this line\n  };\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        var currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    if (head === null) {\n      return;\n    }\n    var previous;\n    var currentNode = head;\n\n    while (currentNode.next !== null && currentNode.element !== element) {\n      previous = currentNode;\n      currentNode = currentNode.next;\n    }\n    \n    if (currentNode.next === null && currentNode.element !== element) {\n      return;\n    }\n    else if (previous) {\n      previous.next = currentNode.next;\n    } else {\n      head = currentNode.next;\n    }\n\n    length--;\n  };\n} ",
        "error": null,
        "seed": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        var currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    if (head === null) {\n      return;\n    }\n    var previous;\n    var currentNode = head;\n\n    while (currentNode.next !== null && currentNode.element !== element) {\n      previous = currentNode;\n      currentNode = currentNode.next;\n    }\n    \n    if (currentNode.next === null && currentNode.element !== element) {\n      return;\n    }\n    else if (previous) {\n      previous.next = currentNode.next;\n    } else {\n      head = currentNode.next;\n    }\n\n    length--;\n  };\n} "
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>LinkedList</code> class should have a <code>remove</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.remove === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>remove</code> method should reassign <code>head</code> to the second node when the first node is removed.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.remove('cat');\n    return test.head().element === 'dog';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>remove</code> method should decrease the <code>length</code> of the linked list by one for every node removed.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('hamster');\n    test.remove('cat');\n    test.remove('fish');\n    return test.size() === 2;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>remove</code> method should reassign the reference of the previous node of the removed node to the removed node's <code>next</code> reference.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('snake');\n    test.add('kitten');\n    test.remove('snake');\n    return test.head().next.next.element === 'kitten';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>remove</code> method should not change the linked list if the element does not exist in the linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    test.remove('elephant');\n    return (\n      JSON.stringify(test.head()) ===\n      '{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n    );\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The next important method that any implementation of a linked list will need is a <code>remove</code> method. This method should take the element we want to remove as an argument, and then search the list to find and remove the node that contains that element.</p>\n<p>Whenever we remove a node from a linked list, it's important that we don't accidentally orphan the rest of the list in doing so. Recall that every node's <code>next</code> property points to the node that follows it in the list. If we're removing the middle element, say, we'll want to make sure that we have a connection from that element's previous node's <code>next</code> property to the middle element's <code>next</code> property (which is the next node in the list!)</p>\n<p>This might sound really confusing, so let's return to the conga line example so we have a good conceptual model. Picture yourself in a conga line, and the person directly in front of you leaves the line. The person who just left the line no longer has her hands on anyone in line--and you no longer have your hands on the person that left. You step forward and put your hands on next person you see.</p>\n<p>If the element we wish to remove is the <code>head</code> element, we reassign the <code>head</code> to the second node of the linked list.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a <code>remove</code> method that takes an element and removes it from the linked list.</p>\n<p><strong>Note:</strong> The <code>length</code> of the list should decrease by one every time an element is removed from the linked list.</p>\n</section>",
  "translationPending": false,
  "block": "data-structures",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 20,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d8251367417b2b2512c65",
  "title": "Remove Elements from a Linked List by Index",
  "challengeType": 1,
  "forumTopicId": 301711,
  "dashedName": "remove-elements-from-a-linked-list-by-index",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n      head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode  = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  // Only change code below this line\n\n  // Only change code above this line\n}",
      "error": null,
      "seed": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function(){\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n      head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode  = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  // Only change code below this line\n\n  // Only change code above this line\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function (element) {\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function () {\n    return length;\n  };\n\n  this.head = function () {\n    return head;\n  };\n\n  this.add = function (element) {\n    var node = new Node(element);\n    if (head === null) {\n      head = node;\n    } else {\n      var currentNode = head;\n\n      while (currentNode.next) {\n        currentNode = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.removeAt = function (index) {\n    var currentNode = head;\n    var previous = head;\n    var count = 0;\n    if (index >= length || index < 0) {\n      return null;\n    }\n    if (index === 0) {\n      var removed = head.element;\n      head = currentNode.next;\n    } else {\n      while (count < index) {\n        previous = currentNode;\n        currentNode = currentNode.next;\n        count++;\n      }\n      var removed = previous.next.element;\n      previous.next = currentNode.next;\n    }\n    length--;\n    return removed;\n  };\n}",
        "error": null,
        "seed": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function (element) {\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function () {\n    return length;\n  };\n\n  this.head = function () {\n    return head;\n  };\n\n  this.add = function (element) {\n    var node = new Node(element);\n    if (head === null) {\n      head = node;\n    } else {\n      var currentNode = head;\n\n      while (currentNode.next) {\n        currentNode = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.removeAt = function (index) {\n    var currentNode = head;\n    var previous = head;\n    var count = 0;\n    if (index >= length || index < 0) {\n      return null;\n    }\n    if (index === 0) {\n      var removed = head.element;\n      head = currentNode.next;\n    } else {\n      while (count < index) {\n        previous = currentNode;\n        currentNode = currentNode.next;\n        count++;\n      }\n      var removed = previous.next.element;\n      previous.next = currentNode.next;\n    }\n    length--;\n    return removed;\n  };\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>LinkedList</code> class should have a <code>removeAt</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.removeAt === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>removeAt</code> method should reduce the <code>length</code> of the linked list by one.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    test.removeAt(1);\n    return test.size() === 2;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>removeAt</code> method should remove the element at the specified index from the linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    test.add('bird');\n    test.removeAt(1);\n    return (\n      JSON.stringify(test.head()) ===\n      '{\"element\":\"cat\",\"next\":{\"element\":\"kitten\",\"next\":{\"element\":\"bird\",\"next\":null}}}'\n    );\n  })()\n);"
    },
    {
      "text": "<p>When only one element is present in the linked list, your <code>removeAt</code> method should remove and return the element at specified index, and reduce the length of the linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    var removedItem = test.removeAt(0);\n    return test.head() === null && test.size() === 0 && removedItem === 'cat';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>removeAt</code> method should return the element of the removed node.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    return test.removeAt(1) === 'dog';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>removeAt</code> method should return <code>null</code> and the linked list should not change if the given index is less than <code>0</code>.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    var removedItem = test.removeAt(-1);\n    return (\n      removedItem === null &&\n      JSON.stringify(test.head()) ===\n        '{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n    );\n  })()\n);"
    },
    {
      "text": "<p>Your <code>removeAt</code> method should return <code>null</code> and the linked list should not change if the given index is greater than or equal to the <code>length</code> of the list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    var removedItem = test.removeAt(3);\n    return (\n      removedItem === null &&\n      JSON.stringify(test.head()) ===\n        '{\"element\":\"cat\",\"next\":{\"element\":\"dog\",\"next\":{\"element\":\"kitten\",\"next\":null}}}'\n    );\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Before we move on to another data structure, let's get a couple of last bits of practice with linked lists.</p>\n<p>Let's write a <code>removeAt</code> method that removes the <code>element</code> at a given <code>index</code>. The method should be called <code>removeAt(index)</code>. To remove an <code>element</code> at a certain <code>index</code>, we'll need to keep a running count of each node as we move along the linked list.</p>\n<p>A common technique used to iterate through the elements of a linked list involves a <dfn>'runner'</dfn>, or sentinel, that 'points' at the nodes that your code is comparing. In our case, starting at the <code>head</code> of our list, we start with a <code>currentIndex</code> variable that starts at <code>0</code>. The <code>currentIndex</code> should increment by one for each node we pass.</p>\n<p>Just like our <code>remove(element)</code> method, which <a href=\"/learn/coding-interview-prep/data-structures/remove-elements-from-a-linked-list\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">we covered in a previous lesson</a>, we need to be careful not to orphan the rest of our list when we remove the node in our <code>removeAt(index)</code> method. We keep our nodes contiguous by making sure that the node that has reference to the removed node has a reference to the next node.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a <code>removeAt(index)</code> method that removes and returns a node at a given <code>index</code>. The method should return <code>null</code> if the given <code>index</code> is either negative, or greater than or equal to the <code>length</code> of the linked list.</p>\n<p><strong>Note:</strong> Remember to keep count of the <code>currentIndex</code>.</p>\n</section>",
  "translationPending": false,
  "block": "data-structures",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 22,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
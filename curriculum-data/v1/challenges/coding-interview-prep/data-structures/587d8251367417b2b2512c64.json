{
  "id": "587d8251367417b2b2512c64",
  "title": "Search within a Linked List",
  "challengeType": 1,
  "forumTopicId": 301715,
  "dashedName": "search-within-a-linked-list",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function() {\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    var currentNode = head;\n    var previousNode;\n    if(currentNode.element === element){\n      head = currentNode.next;\n    } else {\n      while(currentNode.element !== element) {\n        previousNode = currentNode;\n        currentNode = currentNode.next;\n      }\n\n      previousNode.next = currentNode.next;\n    }\n\n    length --;\n  };\n\n  // Only change code below this line\n\n  // Only change code above this line\n}",
      "error": null,
      "seed": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function() {\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n      var currentNode = head;\n\n      while(currentNode.next){\n        currentNode = currentNode.next;\n      }\n\n      currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    var currentNode = head;\n    var previousNode;\n    if(currentNode.element === element){\n      head = currentNode.next;\n    } else {\n      while(currentNode.element !== element) {\n        previousNode = currentNode;\n        currentNode = currentNode.next;\n      }\n\n      previousNode.next = currentNode.next;\n    }\n\n    length --;\n  };\n\n  // Only change code below this line\n\n  // Only change code above this line\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function() {\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        var currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    var currentNode = head;\n    var previousNode;\n    if(currentNode.element === element){\n        head = currentNode.next;\n    } else {\n        while(currentNode.element !== element) {\n            previousNode = currentNode;\n            currentNode = currentNode.next;\n        }\n\n        previousNode.next = currentNode.next;\n    }\n\n    length --;\n  };\n\n  this.indexOf = function(element) {\n    if (head === null) return -1\n\n    let current = head;\n    let index = 0;\n\n    while (current.element !== element && current.next !== null) {\n      current = current.next;\n      index++\n    }\n\n    if (current.element !== element && current.next === null) {\n      return -1\n    }\n\n    return index;\n  }\n\n  this.elementAt = function(index) {\n    if (head === null) return undefined;\n\n    let current = head;\n    let currentIndex = 0;\n\n    while (currentIndex !== index && current.next !== null) {\n      current = current.next;\n      currentIndex++\n    }\n\n    if (currentIndex !== index && current.next === null) {\n      return undefined;\n    }\n\n    return current.element;\n  }\n\n  this.isEmpty = function() {\n    return length === 0;\n  }\n}",
        "error": null,
        "seed": "function LinkedList() {\n  var length = 0;\n  var head = null;\n\n  var Node = function(element){\n    this.element = element;\n    this.next = null;\n  };\n\n  this.size = function() {\n    return length;\n  };\n\n  this.head = function(){\n    return head;\n  };\n\n  this.add = function(element){\n    var node = new Node(element);\n    if(head === null){\n        head = node;\n    } else {\n        var currentNode = head;\n\n        while(currentNode.next){\n            currentNode  = currentNode.next;\n        }\n\n        currentNode.next = node;\n    }\n\n    length++;\n  };\n\n  this.remove = function(element){\n    var currentNode = head;\n    var previousNode;\n    if(currentNode.element === element){\n        head = currentNode.next;\n    } else {\n        while(currentNode.element !== element) {\n            previousNode = currentNode;\n            currentNode = currentNode.next;\n        }\n\n        previousNode.next = currentNode.next;\n    }\n\n    length --;\n  };\n\n  this.indexOf = function(element) {\n    if (head === null) return -1\n\n    let current = head;\n    let index = 0;\n\n    while (current.element !== element && current.next !== null) {\n      current = current.next;\n      index++\n    }\n\n    if (current.element !== element && current.next === null) {\n      return -1\n    }\n\n    return index;\n  }\n\n  this.elementAt = function(index) {\n    if (head === null) return undefined;\n\n    let current = head;\n    let currentIndex = 0;\n\n    while (currentIndex !== index && current.next !== null) {\n      current = current.next;\n      currentIndex++\n    }\n\n    if (currentIndex !== index && current.next === null) {\n      return undefined;\n    }\n\n    return current.element;\n  }\n\n  this.isEmpty = function() {\n    return length === 0;\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>LinkedList</code> class should have an <code>isEmpty</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.isEmpty === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>isEmpty</code> method should return <code>false</code> when there is at least one element in linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    return test.isEmpty() === false;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>isEmpty</code> method should return <code>true</code> when there are no elements in linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    return test.isEmpty() === true;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>LinkedList</code> class should have an <code>indexOf</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.indexOf === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>indexOf</code> method should return the index of a given element found in linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    return test.indexOf('cat') === 0;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>indexOf</code> method should return <code>-1</code> if the given element is not found in linked list</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    return test.indexOf('pony') === -1;\n  })()\n);"
    },
    {
      "text": "<p>Your <code>LinkedList</code> class should have an <code>elementAt</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    return typeof test.elementAt === 'function';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>elementAt</code> method should return the element found at a given index in linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    return test.elementAt(1) === 'dog';\n  })()\n);"
    },
    {
      "text": "<p>Your <code>elementAt</code> method should return <code>undefined</code> if the given element is not found at a given index in linked list.</p>",
      "testString": "assert(\n  (function () {\n    var test = new LinkedList();\n    test.add('cat');\n    test.add('dog');\n    test.add('kitten');\n    return test.elementAt(5) === undefined;\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Let's add a few more useful methods to our linked list class. Wouldn't it be useful if we could tell if our list was empty or not, as with our <code>Stack</code> and <code>Queue</code> classes?</p>\n<p>We should also be able to find specific elements in our linked list. Traversing through data structures is something you'll want to get a lot of practice with! Let's create an <code>indexOf</code> method that takes an <code>element</code> as an argument, and returns that element's <code>index</code> in the linked list. If the element is not found in the linked list, return <code>-1</code>.</p>\n<p>Let's also implement a method that does the opposite: an <code>elementAt</code> method that takes an <code>index</code> as an argument and returns the <code>element</code> at the given <code>index</code>. If no <code>element</code> is found, return <code>undefined</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write an <code>isEmpty</code> method that checks if the linked list is empty, an <code>indexOf</code> method that returns the <code>index</code> of a given element, and an <code>elementAt</code> that returns an <code>element</code> at a given <code>index</code>.</p>\n</section>",
  "translationPending": false,
  "block": "data-structures",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 21,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
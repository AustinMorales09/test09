{
  "id": "587d8254367417b2b2512c6f",
  "title": "Perform a Subset Check on Two Sets of Data",
  "challengeType": 1,
  "forumTopicId": 301707,
  "dashedName": "perform-a-subset-check-on-two-sets-of-data",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "class Set {\n  constructor() {\n    // This will hold the set\n    this.dictionary = {};\n    this.length = 0;\n  }\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n  // This method will return all the values in the set\n  values() {\n    return Object.keys(this.dictionary);\n  }\n  // This method will add an element to the set\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = true;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will remove an element from a set\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will return the size of the set\n  size() {\n    return this.length;\n  }\n  // This is our union method \n  union(set) {\n    const newSet = new Set();\n    this.values().forEach(value => {\n      newSet.add(value);\n    })\n    set.values().forEach(value => {\n      newSet.add(value);\n    })\n\n    return newSet;\n  }\n  // This is our intersection method\n  intersection(set) {\n    const newSet = new Set();\n\n    let largeSet;\n    let smallSet;\n    if (this.dictionary.length > set.length) {\n      largeSet = this;\n      smallSet = set;\n    } else {\n      largeSet = set;\n      smallSet = this;\n    }\n\n    smallSet.values().forEach(value => {\n      if (largeSet.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n\n  difference(set) {\n    const newSet = new Set();\n\n    this.values().forEach(value => {\n      if (!set.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n  // Only change code below this line\n  \n  // Only change code above this line\n}",
      "error": null,
      "seed": "class Set {\n  constructor() {\n    // This will hold the set\n    this.dictionary = {};\n    this.length = 0;\n  }\n  // This method will check for the presence of an element and return true or false\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n  // This method will return all the values in the set\n  values() {\n    return Object.keys(this.dictionary);\n  }\n  // This method will add an element to the set\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = true;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will remove an element from a set\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n  // This method will return the size of the set\n  size() {\n    return this.length;\n  }\n  // This is our union method \n  union(set) {\n    const newSet = new Set();\n    this.values().forEach(value => {\n      newSet.add(value);\n    })\n    set.values().forEach(value => {\n      newSet.add(value);\n    })\n\n    return newSet;\n  }\n  // This is our intersection method\n  intersection(set) {\n    const newSet = new Set();\n\n    let largeSet;\n    let smallSet;\n    if (this.dictionary.length > set.length) {\n      largeSet = this;\n      smallSet = set;\n    } else {\n      largeSet = set;\n      smallSet = this;\n    }\n\n    smallSet.values().forEach(value => {\n      if (largeSet.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n\n  difference(set) {\n    const newSet = new Set();\n\n    this.values().forEach(value => {\n      if (!set.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n  // Only change code below this line\n  \n  // Only change code above this line\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "class Set {\n  constructor() {\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  values() {\n    return Object.keys(this.dictionary);\n  }\n\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = true;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n\n  size() {\n    return this.length;\n  }\n\n  union(set) {\n    const newSet = new Set();\n    this.values().forEach(value => {\n      newSet.add(value);\n    })\n    set.values().forEach(value => {\n      newSet.add(value);\n    })\n\n    return newSet;\n  }\n\n  intersection(set) {\n    const newSet = new Set();\n\n    let largeSet;\n    let smallSet;\n    if (this.dictionary.length > set.length) {\n      largeSet = this;\n      smallSet = set;\n    } else {\n      largeSet = set;\n      smallSet = this;\n    }\n\n    smallSet.values().forEach(value => {\n      if (largeSet.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }  \n\n  difference(set) {\n    const newSet = new Set();\n\n    this.values().forEach(value => {\n      if (!set.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n\n  isSubsetOf(set) {\n    for(const value of this.values()){\n      if(!set.dictionary[value]) return false;\n    }\n    return true\n  }\n}",
        "error": null,
        "seed": "class Set {\n  constructor() {\n    this.dictionary = {};\n    this.length = 0;\n  }\n\n  has(element) {\n    return this.dictionary[element] !== undefined;\n  }\n\n  values() {\n    return Object.keys(this.dictionary);\n  }\n\n  add(element) {\n    if (!this.has(element)) {\n      this.dictionary[element] = true;\n      this.length++;\n      return true;\n    }\n\n    return false;\n  }\n\n  remove(element) {\n    if (this.has(element)) {\n      delete this.dictionary[element];\n      this.length--;\n      return true;\n    }\n\n    return false;\n  }\n\n  size() {\n    return this.length;\n  }\n\n  union(set) {\n    const newSet = new Set();\n    this.values().forEach(value => {\n      newSet.add(value);\n    })\n    set.values().forEach(value => {\n      newSet.add(value);\n    })\n\n    return newSet;\n  }\n\n  intersection(set) {\n    const newSet = new Set();\n\n    let largeSet;\n    let smallSet;\n    if (this.dictionary.length > set.length) {\n      largeSet = this;\n      smallSet = set;\n    } else {\n      largeSet = set;\n      smallSet = this;\n    }\n\n    smallSet.values().forEach(value => {\n      if (largeSet.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }  \n\n  difference(set) {\n    const newSet = new Set();\n\n    this.values().forEach(value => {\n      if (!set.dictionary[value]) {\n        newSet.add(value);\n      }\n    })\n\n    return newSet;\n  }\n\n  isSubsetOf(set) {\n    for(const value of this.values()){\n      if(!set.dictionary[value]) return false;\n    }\n    return true\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>Set</code> class should have a <code>isSubsetOf</code> method.</p>",
      "testString": "assert(\n  (function () {\n    var test = new Set();\n    return typeof test.isSubsetOf === 'function';\n  })()\n);"
    },
    {
      "text": "<p>The first <code>Set</code> should be contained in the second <code>Set</code>.</p>",
      "testString": "assert(\n  (function () {\n    var setA = new Set();\n    var setB = new Set();\n    setA.add('a');\n    setB.add('b');\n    setB.add('c');\n    setB.add('a');\n    setB.add('d');\n    var aIsSubsetOfB = setA.isSubsetOf(setB);\n    return aIsSubsetOfB === true;\n  })()\n);"
    },
    {
      "text": "<p><code>['a', 'b'].isSubsetOf(['a', 'b', 'c', 'd'])</code> should return <code>true</code>.</p>",
      "testString": "assert(\n  (function () {\n    var setA = new Set();\n    var setB = new Set();\n    setA.add('a');\n    setA.add('b');\n    setB.add('a');\n    setB.add('b');\n    setB.add('c');\n    setB.add('d');\n    var aIsSubsetOfB = setA.isSubsetOf(setB);\n    return aIsSubsetOfB === true;\n  })()\n);"
    },
    {
      "text": "<p><code>['a', 'b', 'c'].isSubsetOf(['a', 'b'])</code> should return <code>false</code>.</p>",
      "testString": "assert(\n  (function () {\n    var setA = new Set();\n    var setB = new Set();\n    setA.add('a');\n    setA.add('b');\n    setA.add('c');\n    setB.add('a');\n    setB.add('b');\n    var aIsSubsetOfB = setA.isSubsetOf(setB);\n    return aIsSubsetOfB === false;\n  })()\n);"
    },
    {
      "text": "<p><code>[].isSubsetOf([])</code> should return <code>true</code>.</p>",
      "testString": "assert(\n  (function () {\n    var setA = new Set();\n    var setB = new Set();\n    var aIsSubsetOfB = setA.isSubsetOf(setB);\n    return aIsSubsetOfB === true;\n  })()\n);"
    },
    {
      "text": "<p><code>['a', 'b'].isSubsetOf(['c', 'd'])</code> should return <code>false</code>.</p>",
      "testString": "assert(\n  (function () {\n    var setA = new Set();\n    var setB = new Set();\n    setA.add('a');\n    setA.add('b');\n    setB.add('c');\n    setB.add('d');\n    var aIsSubsetOfB = setA.isSubsetOf(setB);\n    return aIsSubsetOfB === false;\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In this exercise, we are going to perform a subset test on 2 sets of data. We will create a method on our <code>Set</code> data structure called <code>isSubsetOf</code>. This will compare the first set against the second, and if the first set is fully contained within the second, it will return <code>true</code>.</p>\n<p>For example, if <code>setA = ['a','b']</code> and <code>setB = ['a','b','c','d']</code>, then <code>setA</code> is a subset of <code>setB</code>, so <code>setA.isSubsetOf(setB)</code> should return <code>true</code>.</p>\n</section>",
  "translationPending": false,
  "block": "data-structures",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 10,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "a3f503de51cf954ede28891d",
  "title": "Find the Symmetric Difference",
  "challengeType": 1,
  "forumTopicId": 301611,
  "dashedName": "find-the-symmetric-difference",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sym(args) {\n  return args;\n}\n\nsym([1, 2, 3], [5, 2, 1, 4]);",
      "error": null,
      "seed": "function sym(args) {\n  return args;\n}\n\nsym([1, 2, 3], [5, 2, 1, 4]);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function sym() {\n  var arrays = [].slice.call(arguments);\n  return arrays.reduce(function (symDiff, arr) {\n    return symDiff.concat(arr).filter(function (val, idx, theArr) {\n      return theArr.indexOf(val) === idx\n        && (symDiff.indexOf(val) === -1 || arr.indexOf(val) === -1);\n    });\n  });\n}\nsym([1, 2, 3], [5, 2, 1, 4]);",
        "error": null,
        "seed": "function sym() {\n  var arrays = [].slice.call(arguments);\n  return arrays.reduce(function (symDiff, arr) {\n    return symDiff.concat(arr).filter(function (val, idx, theArr) {\n      return theArr.indexOf(val) === idx\n        && (symDiff.indexOf(val) === -1 || arr.indexOf(val) === -1);\n    });\n  });\n}\nsym([1, 2, 3], [5, 2, 1, 4]);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sym([1, 2, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.</p>",
      "testString": "assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4]), [3, 4, 5]);"
    },
    {
      "text": "<p><code>sym([1, 2, 3], [5, 2, 1, 4])</code> should contain only three elements.</p>",
      "testString": "assert.equal(sym([1, 2, 3], [5, 2, 1, 4]).length, 3);"
    },
    {
      "text": "<p><code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should return <code>[3, 4, 5]</code>.</p>",
      "testString": "assert.sameMembers(sym([1, 2, 3, 3], [5, 2, 1, 4]), [3, 4, 5]);"
    },
    {
      "text": "<p><code>sym([1, 2, 3, 3], [5, 2, 1, 4])</code> should contain only three elements.</p>",
      "testString": "assert.equal(sym([1, 2, 3, 3], [5, 2, 1, 4]).length, 3);"
    },
    {
      "text": "<p><code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should return <code>[3, 4, 5]</code>.</p>",
      "testString": "assert.sameMembers(sym([1, 2, 3], [5, 2, 1, 4, 5]), [3, 4, 5]);"
    },
    {
      "text": "<p><code>sym([1, 2, 3], [5, 2, 1, 4, 5])</code> should contain only three elements.</p>",
      "testString": "assert.equal(sym([1, 2, 3], [5, 2, 1, 4, 5]).length, 3);"
    },
    {
      "text": "<p><code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should return <code>[1, 4, 5]</code>.</p>",
      "testString": "assert.sameMembers(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]), [1, 4, 5]);"
    },
    {
      "text": "<p><code>sym([1, 2, 5], [2, 3, 5], [3, 4, 5])</code> should contain only three elements.</p>",
      "testString": "assert.equal(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]).length, 3);"
    },
    {
      "text": "<p><code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should return <code>[1, 4, 5]</code>.</p>",
      "testString": "assert.sameMembers(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]), [1, 4, 5]);"
    },
    {
      "text": "<p><code>sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])</code> should contain only three elements.</p>",
      "testString": "assert.equal(sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]).length, 3);"
    },
    {
      "text": "<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should return <code>[2, 3, 4, 6, 7]</code>.</p>",
      "testString": "assert.sameMembers(\n  sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]),\n  [2, 3, 4, 6, 7]\n);"
    },
    {
      "text": "<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])</code> should contain only five elements.</p>",
      "testString": "assert.equal(\n  sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]).length,\n  5\n);"
    },
    {
      "text": "<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should return <code>[1, 2, 4, 5, 6, 7, 8, 9]</code>.</p>",
      "testString": "assert.sameMembers(\n  sym(\n    [3, 3, 3, 2, 5],\n    [2, 1, 5, 7],\n    [3, 4, 6, 6],\n    [1, 2, 3],\n    [5, 3, 9, 8],\n    [1]\n  ),\n  [1, 2, 4, 5, 6, 7, 8, 9]\n);"
    },
    {
      "text": "<p><code>sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])</code> should contain only eight elements.</p>",
      "testString": "assert.equal(\n  sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])\n    .length,\n  8\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The mathematical term <dfn>symmetric difference</dfn> (<code>△</code> or <code>⊕</code>) of two sets is the set of elements which are in either of the two sets but not in both. For example, for sets <code>A = {1, 2, 3}</code> and <code>B = {2, 3, 4}</code>, <code>A △ B = {1, 4}</code>.</p>\n<p>Symmetric difference is a binary operation, which means it operates on only two elements. So to evaluate an expression involving symmetric differences among <em>three</em> elements (<code>A △ B △ C</code>), you must complete one operation at a time. Thus, for sets <code>A</code> and <code>B</code> above, and <code>C = {2, 3}</code>, <code>A △ B △ C = (A △ B) △ C = {1, 4} △ {2, 3} = {1, 2, 3, 4}</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a function that takes two or more arrays and returns an array of their symmetric difference. The returned array must contain only unique values (<em>no duplicates</em>).</p>\n</section>",
  "translationPending": false,
  "block": "algorithms",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
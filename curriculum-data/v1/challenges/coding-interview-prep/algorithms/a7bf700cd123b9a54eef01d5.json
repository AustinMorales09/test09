{
  "id": "a7bf700cd123b9a54eef01d5",
  "title": "No Repeats Please",
  "challengeType": 1,
  "forumTopicId": 16037,
  "dashedName": "no-repeats-please",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function permAlone(str) {\n  return str;\n}\n\npermAlone('aab');",
      "error": null,
      "seed": "function permAlone(str) {\n  return str;\n}\n\npermAlone('aab');"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function permAlone(str) {\n  return permuter(str).filter(function(perm) {\n    return !perm.match(/(.)\\1/g);\n  }).length;\n}\n\nfunction permuter(str) {\n  // http://staff.roguecc.edu/JMiller/JavaScript/permute.html\n  //permArr: Global array which holds the list of permutations\n  //usedChars: Global utility array which holds a list of \"currently-in-use\" characters\n  var permArr = [], usedChars = [];\n  function permute(input) {\n    //convert input into a char array (one element for each character)\n    var i, ch, chars = input.split(\"\");\n    for (i = 0; i < chars.length; i++) {\n      //get and remove character at index \"i\" from char array\n      ch = chars.splice(i, 1);\n      //add removed character to the end of used characters\n      usedChars.push(ch);\n      //when there are no more characters left in char array to add, add used chars to list of permutations\n      if (chars.length === 0) permArr[permArr.length] = usedChars.join(\"\");\n      //send characters (minus the removed one from above) from char array to be permuted\n      permute(chars.join(\"\"));\n      //add removed character back into char array in original position\n      chars.splice(i, 0, ch);\n      //remove the last character used off the end of used characters array\n      usedChars.pop();\n    }\n  }\n  permute(str);\n  return permArr;\n}\n\npermAlone('aab');",
        "error": null,
        "seed": "function permAlone(str) {\n  return permuter(str).filter(function(perm) {\n    return !perm.match(/(.)\\1/g);\n  }).length;\n}\n\nfunction permuter(str) {\n  // http://staff.roguecc.edu/JMiller/JavaScript/permute.html\n  //permArr: Global array which holds the list of permutations\n  //usedChars: Global utility array which holds a list of \"currently-in-use\" characters\n  var permArr = [], usedChars = [];\n  function permute(input) {\n    //convert input into a char array (one element for each character)\n    var i, ch, chars = input.split(\"\");\n    for (i = 0; i < chars.length; i++) {\n      //get and remove character at index \"i\" from char array\n      ch = chars.splice(i, 1);\n      //add removed character to the end of used characters\n      usedChars.push(ch);\n      //when there are no more characters left in char array to add, add used chars to list of permutations\n      if (chars.length === 0) permArr[permArr.length] = usedChars.join(\"\");\n      //send characters (minus the removed one from above) from char array to be permuted\n      permute(chars.join(\"\"));\n      //add removed character back into char array in original position\n      chars.splice(i, 0, ch);\n      //remove the last character used off the end of used characters array\n      usedChars.pop();\n    }\n  }\n  permute(str);\n  return permArr;\n}\n\npermAlone('aab');"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>permAlone(\"aab\")</code> should return a number.</p>",
      "testString": "assert.isNumber(permAlone('aab'));"
    },
    {
      "text": "<p><code>permAlone(\"aab\")</code> should return 2.</p>",
      "testString": "assert.strictEqual(permAlone('aab'), 2);"
    },
    {
      "text": "<p><code>permAlone(\"aaa\")</code> should return 0.</p>",
      "testString": "assert.strictEqual(permAlone('aaa'), 0);"
    },
    {
      "text": "<p><code>permAlone(\"aabb\")</code> should return 8.</p>",
      "testString": "assert.strictEqual(permAlone('aabb'), 8);"
    },
    {
      "text": "<p><code>permAlone(\"abcdefa\")</code> should return 3600.</p>",
      "testString": "assert.strictEqual(permAlone('abcdefa'), 3600);"
    },
    {
      "text": "<p><code>permAlone(\"abfdefa\")</code> should return 2640.</p>",
      "testString": "assert.strictEqual(permAlone('abfdefa'), 2640);"
    },
    {
      "text": "<p><code>permAlone(\"zzzzzzzz\")</code> should return 0.</p>",
      "testString": "assert.strictEqual(permAlone('zzzzzzzz'), 0);"
    },
    {
      "text": "<p><code>permAlone(\"a\")</code> should return 1.</p>",
      "testString": "assert.strictEqual(permAlone('a'), 1);"
    },
    {
      "text": "<p><code>permAlone(\"aaab\")</code> should return 0.</p>",
      "testString": "assert.strictEqual(permAlone('aaab'), 0);"
    },
    {
      "text": "<p><code>permAlone(\"aaabb\")</code> should return 12.</p>",
      "testString": "assert.strictEqual(permAlone('aaabb'), 12);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Return the number of total permutations of the provided string that don't have repeated consecutive letters. Assume that all characters in the provided string are each unique.</p>\n<p>For example, <code>aab</code> should return 2 because it has 6 total permutations (<code>aab</code>, <code>aab</code>, <code>aba</code>, <code>aba</code>, <code>baa</code>, <code>baa</code>), but only 2 of them (<code>aba</code> and <code>aba</code>) don't have the same letter (in this case <code>a</code>) repeating.</p>\n</section>",
  "translationPending": false,
  "block": "algorithms",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 15,
  "certification": "coding-interview-prep",
  "superBlock": "coding-interview-prep",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
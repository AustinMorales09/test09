{
  "id": "65c4f300da28d8da361bfa93",
  "title": "Step 14",
  "challengeType": 20,
  "dashedName": "step-14",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        22
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "class TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n            pass\n\n",
      "error": null,
      "seed": "class TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n            pass\n\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should remove the <code>pass</code> keyword from the <code>elif</code> block.</p>",
      "testString": "({\n  test: () => {\n    const pyClassStr = runPython(\n      `str(_Node(_code).find_class(\"BinarySearchTree\"))`\n    );\n    assert.notInclude(pyClassStr, \"pass\");\n  },\n});\n"
    },
    {
      "text": "<p>You should call the <code>self._insert()</code> method passing <code>node.right</code> and <code>key</code> as the arguments.</p>",
      "testString": "({ test: () => assert.match(code, /self\\._insert\\(\\s*node\\.right\\s*,\\s*key\\s*\\)/) });"
    },
    {
      "text": "<p>You should assign the result of your <code>self._insert()</code> call to the right attribute (<code>node.right</code>) of the current node.</p>",
      "testString": "({ test: () => assert.match(code, /node\\.right\\s*=\\s*self\\._insert\\(\\s*node\\.right\\s*,\\s*key\\s*\\)/) });"
    }
  ],
  "description": "<section id=\"description\">\n<p>Inside your <code>elif</code> clause, replace <code>pass</code> with a call to the <code>_insert</code> method with right child of the current node as the first argument  and <code>key</code> as the second argument. Assign the result to the <code>right</code> attribute of the current node.</p>\n</section>",
  "translationPending": false,
  "block": "learn-tree-traversal-by-building-a-binary-search-tree",
  "hasEditableBoundaries": true,
  "order": 12,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 13,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
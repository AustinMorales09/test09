{
  "id": "65c63a4c4da62e9ae18e321a",
  "title": "Step 19",
  "challengeType": 20,
  "dashedName": "step-19",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        27,
        29
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "\nclass TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n\n            node.right = self._insert(node.right, key)\n        return node\n\n    def insert(self, key):\n        self.root = self._insert(self.root, key)\n",
      "error": null,
      "seed": "\nclass TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n\n            node.right = self._insert(node.right, key)\n        return node\n\n    def insert(self, key):\n        self.root = self._insert(self.root, key)\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a <code>_search</code> method. Note the leading underscore and remember to use <code>pass</code>.</p>",
      "testString": "({ test: () => assert.match(code, /def\\s+_search/) });"
    },
    {
      "text": "<p>Your <code>_search</code> method should take three parameters: <code>self</code>, <code>node</code>, and <code>key</code>.</p>",
      "testString": "({ test: () => assert.match(code, /def\\s+_search\\(\\s*self\\s*,\\s*node\\s*,\\s*key\\s*\\)/) });"
    }
  ],
  "description": "<section id=\"description\">\n<p>It's time to work on the search functionality. Just like you created a helper method <code>_insert</code> for the <code>insert</code> method, you need to create a helper method <code>_search</code> for the <code>search</code> method.</p>\n<p>Define the <code>_search</code> method with three parameters, namely <code>self</code>,<code>node</code> and <code>key</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-tree-traversal-by-building-a-binary-search-tree",
  "hasEditableBoundaries": true,
  "order": 12,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 18,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
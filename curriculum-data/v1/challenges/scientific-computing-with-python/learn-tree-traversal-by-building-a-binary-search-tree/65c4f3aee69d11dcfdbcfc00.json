{
  "id": "65c4f3aee69d11dcfdbcfc00",
  "title": "Step 18",
  "challengeType": 20,
  "dashedName": "step-18",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        14,
        30
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "\nclass TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n\n            node.right = self._insert(node.right, key)\n        return node\n\n    def insert(self, key):\n        pass\n\n",
      "error": null,
      "seed": "\nclass TreeNode:\n\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\n\nclass BinarySearchTree:\n\n    def __init__(self):\n        self.root = None\n\n    def _insert(self, node, key):\n        if node is None:\n            return TreeNode(key)\n\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n\n            node.right = self._insert(node.right, key)\n        return node\n\n    def insert(self, key):\n        pass\n\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should remove the <code>pass</code> keyword from the <code>insert</code> method.</p>",
      "testString": "({\n  test: () => {\n    assert.isFalse(\n      runPython(\n        `_Node(_code).find_class(\"BinarySearchTree\").find_function(\"insert\").has_pass()`\n      )\n    );\n  },\n});\n"
    },
    {
      "text": "<p>You should recursively call the <code>_insert()</code> method using <code>self._insert()</code></p>",
      "testString": "({ test: () =>\n  {\n    const transformedCode = code.replace(/\\r/g, \"\");        \n    const ins = __helpers.python.getDef(\"\\n\"+transformedCode, \"insert\");\n    const {function_body} = ins;    \n    assert(function_body.match(/self\\._insert\\s*\\([^(]*\\)/));\n  }\n})"
    },
    {
      "text": "<p>You should pass <code>self.root</code> and <code>key</code> to your <code>_insert()</code> call.</p>",
      "testString": "({ test: () =>\n  {\n    const transformedCode = code.replace(/\\r/g, \"\");        \n    const ins = __helpers.python.getDef(\"\\n\"+transformedCode, \"insert\");\n    const {function_body} = ins;    \n    assert(function_body.match(/self\\._insert\\s*\\(\\s*self\\.root\\s*,\\s*key\\s*\\)/));\n  }\n})"
    },
    {
      "text": "<p>You should assign the return value of your <code>_insert()</code> call to <code>self.root</code>.</p>",
      "testString": "({ test: () =>\n  {\n    const transformedCode = code.replace(/\\r/g, \"\");        \n    const ins = __helpers.python.getDef(\"\\n\"+transformedCode, \"insert\");\n    const {function_body} = ins;    \n    assert(function_body.match(/^\\s{8}self\\.root\\s*=\\s*self\\._insert\\s*\\(\\s*self\\.root\\s*,\\s*key\\s*\\)/m));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now, inside the <code>insert</code> method, you need to call the helper method <code>_insert()</code> that we defined earlier.\nHere, <code>_insert</code> has encapsulated the implementation of the insertion logic. This is useful for recursion and for keeping the implementation details hidden from the user.</p>\n<p>Delete <code>pass</code> and assign <code>self._insert(self.root, key)</code> to <code>self.root</code>.</p>\n<p>Note that:</p>\n<ul>\n<li><code>self.root</code> passes the root node of the tree as the first argument. This is the starting point for the insertion process.</li>\n<li><code>key</code>: passes the <code>key</code> value you want to insert as the second argument.</li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "learn-tree-traversal-by-building-a-binary-search-tree",
  "hasEditableBoundaries": true,
  "order": 12,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 17,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65ef1d924ff2e5c7031c6ce8",
  "title": "Step 18",
  "challengeType": 20,
  "dashedName": "step-18",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        28,
        32
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\n    if square_target < 0:\n        raise ValueError('Square root of negative number is not defined in real numbers')\n    if square_target == 1:\n        root = 1\n        print(f'The square root of {square_target} is 1')\n    elif square_target == 0:\n        root = 0\n        print(f'The square root of {square_target} is 0')\n\n    else:\n        low = 0\n        high = max(1, square_target)\n        root = None\n        \n        for _ in range(max_iterations):\n            mid = (low + high) / 2\n            square_mid = mid**2\n\n            if abs(square_mid - square_target) < tolerance:\n                root = mid\n                break\n\n            elif square_mid < square_target:\n                low = mid\n            else:\n                high = mid\n\n        if root is None:\n            print(f\"Failed to converge within {max_iterations} iterations.\")\n        \n",
      "error": null,
      "seed": "def square_root_bisection(square_target, tolerance=1e-7, max_iterations=100):\n    if square_target < 0:\n        raise ValueError('Square root of negative number is not defined in real numbers')\n    if square_target == 1:\n        root = 1\n        print(f'The square root of {square_target} is 1')\n    elif square_target == 0:\n        root = 0\n        print(f'The square root of {square_target} is 0')\n\n    else:\n        low = 0\n        high = max(1, square_target)\n        root = None\n        \n        for _ in range(max_iterations):\n            mid = (low + high) / 2\n            square_mid = mid**2\n\n            if abs(square_mid - square_target) < tolerance:\n                root = mid\n                break\n\n            elif square_mid < square_target:\n                low = mid\n            else:\n                high = mid\n\n        if root is None:\n            print(f\"Failed to converge within {max_iterations} iterations.\")\n        \n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create an <code>else</code> clause.</p>",
      "testString": "({\n    test: () => \n    {\n         assert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_ifs()[0].find_conditions()[1] == _Node()`));\n    }\n})\n"
    },
    {
      "text": "<p>You should print <code>f'The square root of {square_target} is approximately {root}'</code> within the <code>else</code> body.</p>",
      "testString": "({\n    test: () => \n    {\n        assert(runPython(`_Node(_code).find_function(\"square_root_bisection\").find_ifs()[1].find_bodies()[2].find_ifs()[0].find_bodies()[1].is_equivalent(\"print(f'The square root of {square_target} is approximately {root}')\")`));\n    }\n})\n"
    }
  ],
  "description": "<section id=\"description\">\n<p>Create an <code>else</code> clause to handle the case where the value of <code>root</code> is not <code>None</code>, indicating that a root hass been found. If it is not <code>None</code>, print the message <code>'The square root of {square_target} is approximately {root}'</code>. Remember to format using an f-string.</p>\n</section>",
  "translationPending": false,
  "block": "learn-the-bisection-method-by-finding-the-square-root-of-a-number",
  "hasEditableBoundaries": true,
  "order": 4,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 17,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65ef190c6b51e9b5a5f7ed29",
  "title": "Step 2",
  "challengeType": 20,
  "dashedName": "step-2",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        1,
        4
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "\ndef square_root_bisection():\n    pass\n",
      "error": null,
      "seed": "\ndef square_root_bisection():\n    pass\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your function should have these parameters: <code>square_target</code>, <code>tolerance = 1e-7</code>, and <code>max_iterations = 100</code>. The order matters.</p>",
      "testString": "({\n    test: () => assert(runPython(`_Node(_code).find_function(\"square_root_bisection\").has_args(\"square_target, tolerance=1e-7, max_iterations=100\")`))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Give the <code>square_root_bisection</code> function the following parameters:</p>\n<ul>\n<li><code>square_target</code>: The number for which you want to find the square root.</li>\n<li><code>tolerance</code> (optional): The acceptable difference between the square of the approximate root value and the actual target value (default is <code>1e-7</code>).  The tolerance <code>1e-7</code> implies that the solution will be accurate to within <code>0.0000001</code> of the true value and is a good default choice that balances accuracy and performance.</li>\n<li><code>max_iterations</code> (optional): The maximum number of iterations to perform (default is <code>100</code>). If the method doesn't converge within this limit, you'll assume the solution is not found.</li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "learn-the-bisection-method-by-finding-the-square-root-of-a-number",
  "hasEditableBoundaries": true,
  "order": 4,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
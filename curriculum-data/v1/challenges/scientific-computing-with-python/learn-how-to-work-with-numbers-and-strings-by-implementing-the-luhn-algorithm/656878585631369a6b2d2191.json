{
  "id": "656878585631369a6b2d2191",
  "title": "Step 4",
  "challengeType": 20,
  "dashedName": "step-4",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        5
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def main():\n    card_number = '4111-1111-4555-1142'\n    card_translation = str.maketrans({'-': '', ' ': ''})\n    ",
      "error": null,
      "seed": "def main():\n    card_number = '4111-1111-4555-1142'\n    card_translation = str.maketrans({'-': '', ' ': ''})\n    "
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create a <code>translated_card_number</code> variable within <code>main</code>.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\n        const { function_body } = main;\n\n        assert.match(function_body, / +translated_card_number\\s*=/);\n    }\n})"
    },
    {
      "text": "<p>You should assign <code>translated_card_number</code> a value of <code>card_number.translate(card_translation)</code>.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const main = __helpers.python.getDef(\"\\n\" + transformedCode, \"main\");\n        const { function_body } = main;\n\n        assert.match(function_body, / +translated_card_number\\s*=\\s*card_number\\.translate\\(\\s*card_translation\\s*\\)/);\n    }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Defining the translation does not in itself translate the string. The <code>translate</code> method must be called on the string to be translated with the translation table as an argument:</p>\n<pre><code class=\"language-py\">my_string = \"tamperlot\"\ntranslation_table = str.maketrans({'t': 'c', 'l': 'b'})\ntranslated_string = my_string.translate(translation_table)\n</code></pre>\n<p>Create a variable called <code>translated_card_number</code> and assign it the result of calling the <code>translate</code> method on <code>card_number</code> with <code>card_translation</code> as an argument.</p>\n</section>",
  "translationPending": false,
  "block": "learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm",
  "hasEditableBoundaries": true,
  "order": 1,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 3,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65687e069cf4e0c85b0a06b1",
  "title": "Step 30",
  "challengeType": 20,
  "dashedName": "step-30",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        8,
        17
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def verify_card_number(card_number):\n    sum_of_odd_digits = 0\n    card_number_reversed = card_number[::-1]\n    odd_digits = card_number_reversed[::2]\n\n    for digit in odd_digits:\n        sum_of_odd_digits += int(digit)\n\n    sum_of_even_digits = 0\n    even_digits = card_number_reversed[1::2]\n    for digit in even_digits:\n        number = int(digit) * 2\n        if number >= 10:\n            number = (number // 10) + (number % 10)\n            print(number)\n        \ndef main():\n    card_number = '4111-1111-4555-1142'\n    card_translation = str.maketrans({'-': '', ' ': ''})\n    translated_card_number = card_number.translate(card_translation)\n\n    verify_card_number(translated_card_number)\n\nmain()",
      "error": null,
      "seed": "def verify_card_number(card_number):\n    sum_of_odd_digits = 0\n    card_number_reversed = card_number[::-1]\n    odd_digits = card_number_reversed[::2]\n\n    for digit in odd_digits:\n        sum_of_odd_digits += int(digit)\n\n    sum_of_even_digits = 0\n    even_digits = card_number_reversed[1::2]\n    for digit in even_digits:\n        number = int(digit) * 2\n        if number >= 10:\n            number = (number // 10) + (number % 10)\n            print(number)\n        \ndef main():\n    card_number = '4111-1111-4555-1142'\n    card_translation = str.maketrans({'-': '', ' ': ''})\n    translated_card_number = card_number.translate(card_translation)\n\n    verify_card_number(translated_card_number)\n\nmain()"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have <code>sum_of_even_digits += number</code> within the <code>for</code> loop.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const for_loop = __helpers.python.getBlock(\"\\n\" + transformedCode, \"for digit in even_digits\");\n        const {block_body} = for_loop;\n\n        assert.match(block_body, /sum_of_even_digits\\s*\\+=\\s*number/);\n    }\n})"
    },
    {
      "text": "<p>You should not have <code>print(number)</code> within the <code>for</code> loop.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const verify_card_number = __helpers.python.getDef(\"\\n\" + transformedCode, \"verify_card_number\");\n        const { function_body } = verify_card_number;\n\n        const no_comments = __helpers.python.removeComments(function_body);\n\n        assert.notMatch(no_comments, /print\\s*\\(\\s*number\\s*\\)/);\n    }\n})"
    },
    {
      "text": "<p>You should not have <code>sum_of_even_digits += number</code> within the <code>if</code> statement.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        const if_statement = __helpers.python.getBlock(\"\\n\" + transformedCode, \"if number >= 10\");\n        const {block_body} = if_statement;\n\n        assert.notMatch(block_body, /sum_of_even_digits *\\+= *number/);\n    }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Outside of the <code>if</code> statement, add <code>number</code> to <code>sum_of_even_digits</code>. Also, remove the <code>print</code> call.</p>\n</section>",
  "translationPending": false,
  "block": "learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm",
  "hasEditableBoundaries": true,
  "order": 1,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 29,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
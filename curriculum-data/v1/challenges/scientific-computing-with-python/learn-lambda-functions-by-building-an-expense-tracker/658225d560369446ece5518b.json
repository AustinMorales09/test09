{
  "id": "658225d560369446ece5518b",
  "title": "Step 5",
  "challengeType": 20,
  "dashedName": "step-5",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        3
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount})\n\nexpenses = []",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount})\n\nexpenses = []"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should add a second key-value pair to the dictionary you are passing as the argument to the <code>.append()</code> method.</p>",
      "testString": "({ test: () => assert(runPython(`\nimport ast\nnode = _Node(_code).find_function(\"add_expense\").find_calls(\"append\")[0].find_call_args()\nlen(node) == 1 and isinstance(node[0].tree, ast.Dict) and len(node[0].tree.keys) == 2\n`)) })"
    },
    {
      "text": "<p>You should pass <code>{'amount': amount, 'category': category}</code> as the argument to the <code>.append()</code> method.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"add_expense\").has_stmt(\"expenses.append({'amount': amount, 'category': category})\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Add another key-value pair to the dictionary you are appending to the <code>expense</code> list. Use the string <code>'category'</code> as the key, and the <code>category</code> parameter as the value.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 4,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
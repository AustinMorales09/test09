{
  "id": "65824dfdb6815d563b2d3256",
  "title": "Step 29",
  "challengeType": 20,
  "dashedName": "step-29",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        24
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n    \ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        print('3. Show total expenses')\n        print('4. Filter expenses by category')\n        print('5. Exit')\n        ",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n    \ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        print('3. Show total expenses')\n        print('4. Filter expenses by category')\n        print('5. Exit')\n        "
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a variable named <code>choice</code> within your <code>while</code> loop.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].has_variable(\"choice\")\n`)) })"
    },
    {
      "text": "<p>You should assign the result of the <code>input()</code> function, with the string <code>'Enter your choice: '</code> as its argument, to your <code>choice</code> variable.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_variable(\"choice\").is_equivalent(\"choice = input('Enter your choice: ')\")\n`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <code>input()</code> function takes a user input and it returns the user input in the form of a string.</p>\n<p>Inside your <code>while</code> loop, call the <code>input()</code> function passing the string <code>'Enter your choice: '</code> as the argument, and assign the result to a variable named <code>choice</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 28,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
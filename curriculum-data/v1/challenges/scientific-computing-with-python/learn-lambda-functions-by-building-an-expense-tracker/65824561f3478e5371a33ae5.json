{
  "id": "65824561f3478e5371a33ae5",
  "title": "Step 24",
  "challengeType": 20,
  "dashedName": "step-24",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        12,
        15
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n\nexpenses = []",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n\nexpenses = []"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should define a function named <code>main()</code> without parameters.</p>",
      "testString": "({ test: () => assert(runPython(`\n    import inspect    \n    inspect.isfunction(main)\n    sig = str(inspect.signature(main))\n    sig == '()'\n  `))\n})"
    },
    {
      "text": "<p>You should move the <code>expenses</code> list inside the <code>main()</code> function body.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_body().is_equivalent(\"expenses = []\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>The next step is to define the main function, which will be the entry point of the interactive expense tracker program.</p>\n<p>Define a function named <code>main</code> without parameters. Fill the function body with the <code>expenses</code> list you created at the beginning of this project. You will use this list to store the expense records.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 23,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
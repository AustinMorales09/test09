{
  "id": "658246c28575d653d1f89b59",
  "title": "Step 25",
  "challengeType": 20,
  "dashedName": "step-25",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        12,
        16
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\ndef main():\n    expenses = []\n    ",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\ndef main():\n    expenses = []\n    "
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create a <code>while</code> loop using <code>True</code> as the condition within your <code>main()</code> function.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_conditions()[0].is_equivalent(\"True\")`)) })"
    },
    {
      "text": "<p>You should print <code>'\\nExpense Tracker'</code> in your <code>while</code> loop.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")[0].is_equivalent(\"print('\\\\\\\\nExpense Tracker')\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>A <code>while</code> loop is another kind of loop that runs a portion of code until a specified condition is <code>True</code>:</p>\n<pre><code class=\"language-py\">while condition:\n    &#x3C;code>\n</code></pre>\n<p>Below the <code>expenses</code> list, create a <code>while</code> loop. Use <code>True</code> for the condition, and print the string <code>'\\nExpense Tracker'</code> inside the loop body to show the title of the program.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 24,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
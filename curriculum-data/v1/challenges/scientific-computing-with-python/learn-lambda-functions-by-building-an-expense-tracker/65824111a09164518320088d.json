{
  "id": "65824111a09164518320088d",
  "title": "Step 22",
  "challengeType": 20,
  "dashedName": "step-22",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        10,
        13
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    lambda expense: expense['category'] == category\n\nexpenses = []",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    lambda expense: expense['category'] == category\n\nexpenses = []"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should call <code>filter()</code> inside the <code>filter_expenses_by_category</code> function.</p>",
      "testString": "({ test: () => assert(runPython(`len(_Node(_code).find_function(\"filter_expenses_by_category\").find_calls(\"filter\")) == 1`)) })"
    },
    {
      "text": "<p>You should pass <code>lambda expense: expense['category'] == category</code> as the first argument to the <code>filter()</code> call.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").find_calls(\"filter\")[0].find_call_args()[0].is_equivalent(\"lambda expense: expense['category'] == category\")`)) })"
    },
    {
      "text": "<p>You should pass <code>expenses</code> as the second argument to the <code>filter()</code> call.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"filter_expenses_by_category\").find_calls(\"filter\")[0].find_call_args()[1].is_equivalent(\"expenses\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <code>filter()</code> function allows you to select items from an iterable, such as a list, based on the output of a function:</p>\n<pre><code class=\"language-py\">filter(my_function, my_list)\n</code></pre>\n<p><code>filter()</code> takes a function as its first argument and an iterable as its second argument. It returns an iterator, which is a special object that enables you to iterate over the elements of a collection, like a list.</p>\n<p>The result of the example above is an iterator containing the elements of <code>my_list</code> for which <code>my_function</code> returns <code>True</code>.</p>\n<p>Within the <code>filter_expenses_by_category</code> function, call <code>filter()</code> passing the <code>lambda</code> function you wrote in the previous step as the first argument and the <code>expenses</code> list as the second argument.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 21,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65824c7b4e2da85597693dcf",
  "title": "Step 28",
  "challengeType": 20,
  "dashedName": "step-28",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        15,
        21
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        ",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        "
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have <code>print('3. Show total expenses')</code> in your <code>while</code> loop.</p>",
      "testString": "({ test: () => assert(runPython(`\ncall_lst = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1. Add an expense')\", \"print('2. List all expenses')\", \"print('3. Show total expenses')\"]\nall(call_lst[n].is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })"
    },
    {
      "text": "<p>You should have <code>print('4. Filter expenses by category')</code> in your <code>while</code> loop.</p>",
      "testString": "({ test: () => assert(runPython(`\ncall_lst = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1. Add an expense')\", \"print('2. List all expenses')\", \"print('3. Show total expenses')\", \"print('4. Filter expenses by category')\"]\nall(call_lst[n].is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })"
    },
    {
      "text": "<p>You should have <code>print('5. Exit')</code> in your <code>while</code> loop.</p>",
      "testString": "({ test: () => assert(runPython(`\ncall_lst = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_calls(\"print\")\ntest_lst = [\"print('\\\\\\\\nExpense Tracker')\", \"print('1. Add an expense')\", \"print('2. List all expenses')\", \"print('3. Show total expenses')\", \"print('4. Filter expenses by category')\", \"print('5. Exit')\"]\nall(call_lst[n].is_equivalent(i) for n, i in enumerate(test_lst))\n`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Provide the other menu options by printing the following three strings in your <code>while</code> loop: <code>'3. Show total expenses'</code>, <code>'4. Filter expenses by category'</code>, and <code>'5. Exit'</code>. Keep adding the <code>print()</code> calls in order.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 27,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
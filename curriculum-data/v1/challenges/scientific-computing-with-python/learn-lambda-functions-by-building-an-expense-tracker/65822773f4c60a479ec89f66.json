{
  "id": "65822773f4c60a479ec89f66",
  "title": "Step 7",
  "challengeType": 20,
  "dashedName": "step-7",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        3,
        6
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    pass\n\nexpenses = []",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    pass\n\nexpenses = []"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create a <code>for</code> loop that iterates over <code>expenses</code> in your <code>print_expenses</code> function. Remember to use <code>pass</code> within the loop body.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"print_expenses\").find_for_loops()[0].find_for_iter().is_equivalent(\"expenses\")`)) })"
    },
    {
      "text": "<p>You should use <code>expense</code> as the loop variable.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"print_expenses\").find_for_loops()[0].find_for_vars().is_equivalent(\"expense\")`)) })"
    },
    {
      "text": "<p>You should have <code>pass</code> only inside your loop body.</p>",
      "testString": "({ test: () => assert.isFalse(runPython(`_Node(_code).find_function(\"print_expenses\").has_pass()`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Inside the <code>print_expenses</code> function, create a <code>for</code> loop that iterates over each item in the <code>expenses</code> list. Use <code>expense</code> as the loop variable and move <code>pass</code> inside the loop body.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 6,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
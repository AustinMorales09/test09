{
  "id": "65825b758fe85a5cebabc8c5",
  "title": "Step 37",
  "challengeType": 20,
  "dashedName": "step-37",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        30,
        35
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n    \n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        print('3. Show total expenses')\n        print('4. Filter expenses by category')\n        print('5. Exit')\n       \n        choice = input('Enter your choice: ')\n\n        if choice == '1':\n            amount = float(input('Enter amount: '))\n            category = input('Enter category: ')\n            add_expense(expenses, amount, category)\n        elif choice == '2':\n            print('\\nAll Expenses:')\n            print_expenses(expenses)\n        ",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    return sum(map(lambda expense: expense['amount'], expenses))\n    \ndef filter_expenses_by_category(expenses, category):\n    return filter(lambda expense: expense['category'] == category, expenses)\n    \n\ndef main():\n    expenses = []\n    while True:\n        print('\\nExpense Tracker')\n        print('1. Add an expense')\n        print('2. List all expenses')\n        print('3. Show total expenses')\n        print('4. Filter expenses by category')\n        print('5. Exit')\n       \n        choice = input('Enter your choice: ')\n\n        if choice == '1':\n            amount = float(input('Enter amount: '))\n            category = input('Enter category: ')\n            add_expense(expenses, amount, category)\n        elif choice == '2':\n            print('\\nAll Expenses:')\n            print_expenses(expenses)\n        "
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create an <code>elif</code> clause that checks if <code>choice == '3'</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\ncond = _Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_conditions()[2]\ncond.is_equivalent(\"choice == '3'\") or cond.is_equivalent(\"'3' == choice\")\n`)) })"
    },
    {
      "text": "<p>You should print <code>'\\nTotal Expenses: ', total_expenses(expenses)</code> in your new <code>elif</code> clause.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"main\").find_whiles()[0].find_bodies()[0].find_ifs()[0].find_bodies()[2].has_call(\"print('\\\\\\\\nTotal Expenses: ', total_expenses(expenses))\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>To show the total expenses, create an <code>elif</code> statement that checks if <code>choice == '3'</code>.</p>\n<p>If it's true, it means the user wants to see the total expenses. So call <code>print()</code> and pass the string <code>'\\nTotal Expenses: '</code> as the first argument and <code>total_expenses(expenses)</code> as the second argument.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 36,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65823cfc74aa564ffc460489",
  "title": "Step 18",
  "challengeType": 20,
  "dashedName": "step-18",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        10
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    lambda expense: expense['amount']\n\nexpenses = []",
      "error": null,
      "seed": "def add_expense(expenses, amount, category):\n    expenses.append({'amount': amount, 'category': category})\n    \ndef print_expenses(expenses):\n    for expense in expenses:\n        print(f'Amount: {expense[\"amount\"]}, Category: {expense[\"category\"]}')\n    \ndef total_expenses(expenses):\n    lambda expense: expense['amount']\n\nexpenses = []"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should call the <code>map()</code> function inside the <code>total_expenses</code> function.</p>",
      "testString": "({ test: () => assert(runPython(`len(_Node(_code).find_function(\"total_expenses\").find_calls(\"map\")) == 1`)) })"
    },
    {
      "text": "<p>You should pass your <code>lambda</code> function as the first argument to the <code>map()</code> call.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"total_expenses\").find_calls(\"map\")[0].find_call_args()[0].is_equivalent(\"lambda expense: expense['amount']\")`)) })"
    },
    {
      "text": "<p>You should pass the <code>expenses</code> list as the second argument to the <code>map()</code> call.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"total_expenses\").find_calls(\"map\")[0].find_call_args()[1].is_equivalent(\"expenses\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now, call <code>map()</code> passing your <code>lambda</code> function as the first argument and the <code>expenses</code> list as the second argument.</p>\n</section>",
  "translationPending": false,
  "block": "learn-lambda-functions-by-building-an-expense-tracker",
  "hasEditableBoundaries": true,
  "order": 2,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 17,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
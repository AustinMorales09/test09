{
  "id": "6564f0279e23ce924eedd1b2",
  "title": "Step 51",
  "challengeType": 20,
  "dashedName": "step-51",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        31,
        35
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (lowercase, r'[a-z]'),\n            (uppercase, r'[A-Z]'),\n            (special_chars, r'\\W')\n        ]        \n\n    return password\n    \n# new_password = generate_password(8)\n# print(new_password)\npattern = r'\\W'\nquote = '_'\nprint(re.findall(pattern, quote))",
      "error": null,
      "seed": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, r'\\d'),\n            (lowercase, r'[a-z]'),\n            (uppercase, r'[A-Z]'),\n            (special_chars, r'\\W')\n        ]        \n\n    return password\n    \n# new_password = generate_password(8)\n# print(new_password)\npattern = r'\\W'\nquote = '_'\nprint(re.findall(pattern, quote))"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should delete the last three lines in your code.</p>",
      "testString": "({ test: () => {\n  const commentless_code = __helpers.python.removeComments(code);\n  assert.notMatch(commentless_code, /pattern\\s*=\\s*r(\"|')\\\\W\\1/);\n  assert.notMatch(commentless_code, /quote\\s*=\\s*(\"|')_\\1/);\n  assert.notMatch(commentless_code, /print\\(\\s*re\\.findall\\(\\s*pattern\\s*,\\s*quote\\s*\\)\\s*\\)/);\n}})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Since the underscore character is a valid character for variable names, it is included in the <code>\\w</code> character class (equivalent to <code>[a-zA-Z0-9_]</code>), which can be conveniently used to match variable names.</p>\n<p>Therefore, the <code>\\W</code> character class is equivalent to <code>[^a-zA-Z0-9_]</code> with the underscore character that is not matched. For this reason you cannot use it to match all your special characters.</p>\n<p>Delete the last three lines in your code.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 50,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "656ef89b4b486b7a16077864",
  "title": "Step 26",
  "challengeType": 20,
  "dashedName": "step-26",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        18,
        21
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        constraints = []\n        \n    return password\n\n# new_password = generate_password(8)\n# print(new_password)",
      "error": null,
      "seed": "import secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        constraints = []\n        \n    return password\n\n# new_password = generate_password(8)\n# print(new_password)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should add a tuple to the <code>constraints</code> list.</p>",
      "testString": "({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(.*\\)\\s*\\]/) })"
    },
    {
      "text": "<p>You should add <code>(nums, '')</code> to the <code>constraints</code> list.</p>",
      "testString": "({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\(\\s*nums\\s*,\\s*(\"|')\\1\\s*\\)\\s*\\]/) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>A tuple is another built-in data structure in Python. Tuples are very much like lists, but they are defined with parentheses <code>()</code>, instead of square brackets. Also, tuples are immutable, unlike lists.</p>\n<pre><code class=\"language-py\">my_tuple = ('larch', 1, True)\n</code></pre>\n<p>Your <code>constraints</code> list is going to store tuples. The first item of each tuple will be a constraint parameter.</p>\n<p>Modify the <code>constraints</code> list assignment by adding a tuple to your list. Use <code>nums</code> as the first item and an empty string as the second item.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 25,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6565c084627071646f94c4b0",
  "title": "Step 60",
  "challengeType": 20,
  "dashedName": "step-60",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        26,
        32
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n       \n        constraints = [\n            (nums, r'\\d'),\n            (lowercase, r'[a-z]'),\n            (uppercase, r'[A-Z]'),            \n            (special_chars, fr'[{symbols}]')            \n        ]\n        # Check constraints\n        count = 0\n        for constraint, pattern in constraints:\n            if constraint <= len(re.findall(pattern, password)):\n                count += 1\n    return password\n\n# new_password = generate_password(8)\n# print(new_password)",
      "error": null,
      "seed": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n       \n        constraints = [\n            (nums, r'\\d'),\n            (lowercase, r'[a-z]'),\n            (uppercase, r'[A-Z]'),            \n            (special_chars, fr'[{symbols}]')            \n        ]\n        # Check constraints\n        count = 0\n        for constraint, pattern in constraints:\n            if constraint <= len(re.findall(pattern, password)):\n                count += 1\n    return password\n\n# new_password = generate_password(8)\n# print(new_password)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create an <code>if</code> statement that checks if <code>count</code> is equal to <code>4</code> after the <code>for</code> loop.</p>",
      "testString": "({ test: () => assert.match(code, /^(\\s*)for.+:\\s*^\\1(\\s{4})if\\s+constraint\\s*<=\\s*len\\s*\\(\\s*re\\.findall\\s*\\(\\s*pattern\\s*,\\s*password\\s*\\)\\s*\\)\\s*:\\s*^\\1\\2\\2count\\s*\\+=\\s*1\\s*^\\1if\\s+count\\s*==\\s*4\\s*:/m) })"
    },
    {
      "text": "<p>You should use <code>break</code> inside your new <code>if</code> to break out of the <code>while</code> loop.</p>",
      "testString": "({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+count\\s*==\\s*4\\s*/);\n    assert(block_body.match(/^\\s+break\\s*$/m));  \n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Finally, after the <code>for</code> loop, create an <code>if</code> statement to check if <code>count</code> is equal to <code>4</code> and break out of the <code>while</code> loop by using the <code>break</code> statement.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 59,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
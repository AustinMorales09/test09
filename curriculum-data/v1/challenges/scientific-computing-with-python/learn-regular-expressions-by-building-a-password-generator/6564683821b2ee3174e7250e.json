{
  "id": "6564683821b2ee3174e7250e",
  "title": "Step 2",
  "challengeType": 20,
  "dashedName": "step-2",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        4
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import string\n\n",
      "error": null,
      "seed": "import string\n\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a variable named <code>letters</code>.</p>",
      "testString": "({ test: () => assert(__userGlobals.has(\"letters\")) })"
    },
    {
      "text": "<p>You should assign <code>string.ascii_letters</code> to your <code>letters</code> variable.</p>",
      "testString": "({ test: () => assert(runPython(`\n    import string\n    letters == string.ascii_letters\n  `))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>You can access the utilities defined inside the imported module through the dot notation. The dot notation works by appending a dot followed by the utility name to the module name. For example, here's how to access the <code>ascii_lowercase</code> constant:</p>\n<pre><code class=\"language-py\">import string\n\n\nprint(string.ascii_lowercase)\n# Output: abcdefghijklmnopqrstuvwxyz\n</code></pre>\n<p>In this project, you are going to use different constants from the <code>string</code> module.</p>\n<p>Declare a new variable called <code>letters</code> and assign <code>string.ascii_letters</code> to this variable.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "656f10458134d4c4e283a2f1",
  "title": "Step 35",
  "challengeType": 20,
  "dashedName": "step-35",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        19,
        23
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        constraints = [\n            (nums, '')\n        ]        \n    return password\n    \n# new_password = generate_password(8)\n# print(new_password)\n\npattern = 'w[ha]'\nquote = 'Not all those who wander are lost.'\n# print(re.findall(pattern, quote))\n",
      "error": null,
      "seed": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        constraints = [\n            (nums, '')\n        ]        \n    return password\n    \n# new_password = generate_password(8)\n# print(new_password)\n\npattern = 'w[ha]'\nquote = 'Not all those who wander are lost.'\n# print(re.findall(pattern, quote))\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have the <code>(nums, '[0123456789]')</code> tuple in your <code>constraints</code> list.</p>",
      "testString": "({ test: () => assert.match(code, /constraints\\s*=\\s*\\[\\s*\\s*\\(\\s*nums\\s*,\\s*(\"|')\\[\\d{10}\\]\\1\\s*\\)\\s*\\]/) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now, turn the empty string in the constraint tuple into a regex pattern to match a single digit. Use a character class specifying each digit from <code>0</code> to <code>9</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 34,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6564b8c9349bd76dc037967b",
  "title": "Step 29",
  "challengeType": 20,
  "dashedName": "step-29",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        28,
        31
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, '')\n        ]        \n\n    return password\n\n# new_password = generate_password(8)\n# print(new_password)\npattern = re.compile('i')\n",
      "error": null,
      "seed": "import re\nimport secrets\nimport string\n\n\ndef generate_password(length, nums, special_chars, uppercase, lowercase):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    while True:\n        password = ''\n        # Generate password\n        for _ in range(length):\n            password += secrets.choice(all_characters)\n        \n        constraints = [\n            (nums, '')\n        ]        \n\n    return password\n\n# new_password = generate_password(8)\n# print(new_password)\npattern = re.compile('i')\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have a <code>quote</code> variable.</p>",
      "testString": "({ test: () => assert(__userGlobals.has(\"quote\")) })"
    },
    {
      "text": "<p>You should assign the provided string to your new <code>quote</code> variable.</p>",
      "testString": "({ test: () => assert.equal(__userGlobals.get(\"quote\"), \"Not all those who wander are lost.\") })"
    },
    {
      "text": "<p>You should print <code>pattern.search(quote)</code>.</p>",
      "testString": "({ test: () => assert.match(code, /^print\\s*\\(\\s*pattern\\.search\\s*\\(\\s*quote\\s*\\)\\s*\\)/m) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <code>search()</code> function from the <code>re</code> module analyzes the string passed as the argument looking for the first place where the regex pattern matches the string.</p>\n<p>Declare a variable called <code>quote</code> and assign the string <code>'Not all those who wander are lost.'</code> to this variable. Then, print the result of <code>pattern.search(quote)</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 28,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "656ef5bc5c0cd464be1df675",
  "title": "Step 23",
  "challengeType": 20,
  "dashedName": "step-23",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        3,
        5
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "import secrets\nimport string\n\ndef generate_password(length):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    password = ''\n    # Generate password\n    for _ in range(length):\n        password += secrets.choice(all_characters)\n        \n    return password\n\n# new_password = generate_password(8)\n# print(new_password)",
      "error": null,
      "seed": "import secrets\nimport string\n\ndef generate_password(length):\n    # Define the possible characters for the password\n    letters = string.ascii_letters\n    digits = string.digits\n    symbols = string.punctuation\n\n    # Combine all characters\n    all_characters = letters + digits + symbols\n\n    password = ''\n    # Generate password\n    for _ in range(length):\n        password += secrets.choice(all_characters)\n        \n    return password\n\n# new_password = generate_password(8)\n# print(new_password)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your function should take <code>length</code>, <code>nums</code>, <code>special_chars</code>, <code>uppercase</code>, and <code>lowercase</code> as the parameters. The order matters.</p>",
      "testString": "({ test: () => assert(runPython(`\n    import inspect\n    sig = str(inspect.signature(generate_password))\n    sig == '(length, nums, special_chars, uppercase, lowercase)'\n  `))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Next, you are going to give your function more parameters that will act as constraints for the generated password.</p>\n<p>Modify your function declaration by adding <code>nums</code>, <code>special_chars</code>, <code>uppercase</code>, and <code>lowercase</code> in this order after the existent <code>length</code> parameter.</p>\n</section>",
  "translationPending": false,
  "block": "learn-regular-expressions-by-building-a-password-generator",
  "hasEditableBoundaries": true,
  "order": 6,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 22,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
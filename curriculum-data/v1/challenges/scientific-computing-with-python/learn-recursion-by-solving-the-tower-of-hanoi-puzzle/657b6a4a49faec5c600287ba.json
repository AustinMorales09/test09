{
  "id": "657b6a4a49faec5c600287ba",
  "title": "Step 55",
  "challengeType": 20,
  "dashedName": "step-55",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        23
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n        # move n - 1 disks from source to auxiliary, so they are out of the way\n        move(n - 1, source, target, auxiliary)\n        \n        # move the nth disk from source to target\n        target.append(source.pop())\n        \n        # display our progress\n        print(A, B, C, '\\n')\n        \n        # move the n - 1 disks that we left on auxiliary onto target\n        move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n        # move n - 1 disks from source to auxiliary, so they are out of the way\n        move(n - 1, source, target, auxiliary)\n        \n        # move the nth disk from source to target\n        target.append(source.pop())\n        \n        # display our progress\n        print(A, B, C, '\\n')\n        \n        # move the n - 1 disks that we left on auxiliary onto target\n        move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "main.py"
        ],
        "name": "main",
        "ext": "py",
        "path": "main.py",
        "fileKey": "mainpy",
        "contents": "NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)",
        "error": null,
        "seed": "NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\n\ndef move(n, source, auxiliary, target):\n    if n <= 0:\n        return\n    # move n - 1 disks from source to auxiliary, so they are out of the way\n    move(n - 1, source, target, auxiliary)\n        \n    # move the nth disk from source to target\n    target.append(source.pop())\n        \n    # display our progress\n    print(A, B, C, '\\n')\n        \n    # move the n - 1 disks that we left on auxiliary onto target\n    move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should reduce the indentation level of all the code after the <code>return</code> statement.</p>",
      "testString": "({ test: () => assert(runPython(`\n    a, b, c = [3, 2, 1], [], []\n    move(3, a, b, c)\n    a == [] and b == [] and c == [3, 2, 1]\n  `))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>As a final step, reduce the indentation level of all the code after the <code>return</code> statement.</p>\n<p>Well done. You have completed the Tower of Hanoi practice project.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 54,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
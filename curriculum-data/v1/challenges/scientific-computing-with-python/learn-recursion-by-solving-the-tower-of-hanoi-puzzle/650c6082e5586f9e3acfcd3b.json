{
  "id": "650c6082e5586f9e3acfcd3b",
  "title": "Step 52",
  "challengeType": 20,
  "dashedName": "step-52",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        24
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 4\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    if n > 0:\n        # move n - 1 disks from source to auxiliary, so they are out of the way\n        move(n - 1, source, target, auxiliary)\n        \n        # move the nth disk from source to target\n        rods[target].append(rods[source].pop())\n        \n        # display our progress\n        print(rods, '\\n')\n        \n        # move the n - 1 disks that we left on auxiliary onto target\n        move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 4\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    if n > 0:\n        # move n - 1 disks from source to auxiliary, so they are out of the way\n        move(n - 1, source, target, auxiliary)\n        \n        # move the nth disk from source to target\n        rods[target].append(rods[source].pop())\n        \n        # display our progress\n        print(rods, '\\n')\n        \n        # move the n - 1 disks that we left on auxiliary onto target\n        move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should turn <code>rods['A']</code> into a variable named <code>A</code> keeping its value.</p>",
      "testString": "assert.match(code, /A\\s*=\\s*list\\s*\\(\\s*range\\s*\\(\\s*NUMBER_OF_DISKS\\s*,\\s*0\\s*,\\s*-\\s*1\\s*\\)\\s*\\)/);"
    },
    {
      "text": "<p>You should turn <code>rods['B']</code> into a variable named <code>B</code> keeping its value.</p>",
      "testString": "assert.match(code, /B\\s*=\\s*\\[\\s*\\]/);"
    },
    {
      "text": "<p>You should turn <code>rods['C']</code> into a variable named <code>C</code> keeping its value.</p>",
      "testString": "assert.match(code, /C\\s*=\\s*\\[\\s*\\]/);"
    },
    {
      "text": "<p>You should modify your <code>print()</code> call to print <code>A</code>, <code>B</code>, <code>C</code>, instead of the <code>rods</code> object. Keep the newline character in the <code>print()</code> call.</p>",
      "testString": "assert.match(code, /print\\s*\\(\\s*A\\s*,\\s*B\\s*,\\s*C\\s*,\\s*('|\")\\\\n\\1\\s*\\)/);"
    },
    {
      "text": "<p>You should have <code>target.append(source.pop())</code> in your code.</p>",
      "testString": "assert.match(code, /target\\.append\\s*\\(\\s*source\\.pop\\s*\\(\\s*\\)\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now, delete the <code>rods</code> dictionary and turn its keys into the variables <code>A</code>, <code>B</code>, and <code>C</code>, respectively, keeping their values. Refactor your code to reflect these changes. If you see the output on the terminal, you correctly did this step.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 51,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
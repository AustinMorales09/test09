{
  "id": "64dc985e6720a23edac63b51",
  "title": "Step 17",
  "challengeType": 20,
  "dashedName": "step-17",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        8,
        14
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        print(i)\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        print(i)\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have an <code>if</code> statement that should be executed when <code>(i + 1) % 3 == 1</code>.</p>",
      "testString": "({test: () => assert.match(code, /if\\s+\\(\\s*i\\s*\\+\\s*1\\s*\\)\\s*%\\s*3\\s*==\\s*1\\s*:/)})"
    },
    {
      "text": "<p>You should print the string <code>f'Move {i + 1} allowed between {source} and {target}'</code> using an f-string.</p>",
      "testString": "({test: () => assert.match(code, /print\\s*\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*source\\s*\\}\\sand\\s\\{\\s*target\\s*\\s*\\}\\1\\s*\\)/)})"
    }
  ],
  "description": "<section id=\"description\">\n<p>The allowed disk movements between the rods exhibit a repetitive pattern occurring every three moves. For example, movements between rod <code>A</code> and rod <code>C</code> are allowed on the first, the fourth and the seventh move, where the remainder of the division between the move number and 3 is equal to 1.</p>\n<p>Inside the previously created <code>for</code> loop, replace the existing <code>print()</code> call with an <code>if</code> statement that is triggered when <code>(i + 1) % 3 == 1</code>. Within this <code>if</code> statement, print <code>f'Move {i + 1} allowed between {source} and {target}'</code> using an f-string. Please, note that <code>i + 1</code> is the move number since <code>i</code> is zero during the first iteration.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 16,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
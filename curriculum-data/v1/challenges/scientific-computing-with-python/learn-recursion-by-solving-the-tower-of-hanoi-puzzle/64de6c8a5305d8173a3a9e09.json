{
  "id": "64de6c8a5305d8173a3a9e09",
  "title": "Step 32",
  "challengeType": 20,
  "dashedName": "step-32",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        23
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\ndef make_allowed_move(rod1, rod2):\n    forward = False\n    if not rods[target]:\n        forward = True\n    elif rods[source] and rods[source][-1] < rods[target][-1]:\n        forward = True              \n    if forward:\n        print(f'Moving disk {rods[source][-1]} from {source} to {target}')\n        rods[target].append(rods[source].pop())\n    else:\n        print(f'Moving disk {rods[target][-1]} from {target} to {source}')\n        rods[source].append(rods[target].pop())\n    \n    # display our progress\n    print(rods)\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')            \n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\ndef make_allowed_move(rod1, rod2):\n    forward = False\n    if not rods[target]:\n        forward = True\n    elif rods[source] and rods[source][-1] < rods[target][-1]:\n        forward = True              \n    if forward:\n        print(f'Moving disk {rods[source][-1]} from {source} to {target}')\n        rods[target].append(rods[source].pop())\n    else:\n        print(f'Moving disk {rods[target][-1]} from {target} to {source}')\n        rods[source].append(rods[target].pop())\n    \n    # display our progress\n    print(rods)\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')            \n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should change each occurrence of <code>source</code> inside the <code>make_allowed_move()</code> function into <code>rod1</code>.</p>",
      "testString": "({ test: () => {\n  assert.match(code, /elif\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s+and\\s+rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*<\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*:/);\n  assert.match(code, /if\\s+forward(\\s*==\\s*True)?\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*rod1\\s*\\}\\sto\\s\\{\\s*target\\s*\\}\\2\\s*\\)\\s+rods\\s*\\[\\s*target\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*rod1\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)/);\n  assert.match(code, /else\\s*:\\s+print\\s*\\(\\s*f('|\")Moving\\sdisk\\s\\{\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\[\\s*-\\s*1\\s*\\]\\s*\\}\\sfrom\\s\\{\\s*target\\s*\\}\\sto\\s\\{\\s*rod1\\s*\\}\\1\\s*\\)/);\n  assert.match(code, /rods\\s*\\[\\s*rod1\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)/);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p><code>make_allowed_move()</code> takes in <code>rod1</code> and <code>rod2</code> as parameters. You need a little refactoring here. Change every occurrence of <code>source</code> into <code>rod1</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 31,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
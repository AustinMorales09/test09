{
  "id": "64ddd02838f36117cd9738eb",
  "title": "Step 28",
  "challengeType": 20,
  "dashedName": "step-28",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        20,
        27
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n            forward = False\n            if not rods[target]:\n                forward = True\n            elif rods[source] and rods[source][-1] < rods[target][-1]:\n                forward = True\n            if forward:\n                print(f'Moving disk {rods[source][-1]} from {source} to {target}')\n                rods[target].append(rods[source].pop())\n            else:\n                print(f'Moving disk {rods[target][-1]} from {target} to {source}')\n                rods[source].append(rods[target].pop())\n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n            forward = False\n            if not rods[target]:\n                forward = True\n            elif rods[source] and rods[source][-1] < rods[target][-1]:\n                forward = True\n            if forward:\n                print(f'Moving disk {rods[source][-1]} from {source} to {target}')\n                rods[target].append(rods[source].pop())\n            else:\n                print(f'Moving disk {rods[target][-1]} from {target} to {source}')\n                rods[source].append(rods[target].pop())\n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should use the provided text to add a comment outside the <code>else</code> block.</p>",
      "testString": "({ test: () => assert.match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)\\s+#\\s*display\\sour\\sprogress/) })"
    },
    {
      "text": "<p>You should print the <code>rods</code> object outside the <code>else</code> block, after the comment.</p>",
      "testString": "({ test: () => assert.match(code, /rods\\s*\\[\\s*source\\s*\\]\\s*\\.append\\s*\\(\\s*rods\\s*\\[\\s*target\\s*\\]\\s*\\.pop\\s*\\(\\s*\\)\\s*\\)\\s+#\\s*display\\sour\\sprogress\\s+print\\s*\\(\\s*rods\\s*\\)/) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Outside the <code>else</code> block, add a comment saying <code>display our progress</code> and print the content of the lists to check that everything is working.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 27,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
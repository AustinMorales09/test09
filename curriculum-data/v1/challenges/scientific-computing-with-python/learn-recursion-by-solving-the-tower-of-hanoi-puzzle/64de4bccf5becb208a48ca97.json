{
  "id": "64de4bccf5becb208a48ca97",
  "title": "Step 13",
  "challengeType": 20,
  "dashedName": "step-13",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        8,
        13
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move():\n    print(rods)\n\nmove()",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move():\n    print(rods)\n\nmove()"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>move()</code> function should have <code>n</code>, <code>source</code>, <code>auxiliary</code>, and <code>target</code> as the parameters. The order matters.</p>",
      "testString": "({ test: () => assert(runPython(`\n      import inspect\n      str(inspect.signature(move)) == '(n, source, auxiliary, target)'    \n  `))\n})"
    },
    {
      "text": "<p>You should pass <code>NUMBER_OF_DISKS</code> and the strings <code>'A'</code>, <code>'B'</code>, and <code>'C'</code> to <code>move()</code>. The order matters.</p>",
      "testString": "({test: () => assert.match(code, /^move\\(\\s*NUMBER_OF_DISKS\\s*,\\s*('|\")A\\1\\s*,\\s*('|\")B\\2\\s*,\\s*('|\")C\\3\\s*\\)/m)\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the Tower of Hanoi puzzle, you can identify the three rods according to their purpose:</p>\n<ul>\n<li>The first rod is the source, where all the disks are stacked on top of each other at the beginning of the game.</li>\n<li>The second rod is an auxiliary rod, and it helps in moving the disks to the target rod.</li>\n<li>The third rod is the target, where all the disks should be placed in order at the end of the game.</li>\n</ul>\n<p>Currently, the <code>move()</code> function does not take any parameters. Change the function declaration to take 4 parameters: <code>n</code>, <code>source</code>, <code>auxiliary</code>, and <code>target</code>. Then, pass <code>NUMBER_OF_DISKS</code> and the strings <code>'A'</code>, <code>'B'</code>, and <code>'C'</code> as arguments to your function call. The order matters.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 12,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
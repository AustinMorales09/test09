{
  "id": "64dce7ee2494e82bf4205a3f",
  "title": "Step 24",
  "challengeType": 20,
  "dashedName": "step-24",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        16,
        19
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n            forward = False\n            if not rods[target]:\n                forward = True\n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n            forward = False\n            if not rods[target]:\n                forward = True\n        elif remainder == 2:\n            print(f'Move {i + 1} allowed between {source} and {auxiliary}')\n        elif remainder == 0:\n            print(f'Move {i + 1} allowed between {auxiliary} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have an <code>elif</code> statement to check if <code>rods[source]</code> is not empty and <code>rods[source][-1] &#x3C; rods[target][-1]</code>.</p>",
      "testString": "const allowedRes = [\n    \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\",\n    \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\",\n    \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\",\n];\nconst re = new RegExp(`elif\\\\s+((${allowedRes.join(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:`);\nassert.match(code, re);"
    },
    {
      "text": "<p>You should set <code>forward</code> to <code>True</code> inside your new <code>elif</code> statement. You should not change the previous assignments of <code>forward</code>.</p>",
      "testString": "const allowedRes = [\n    \"rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\",\n    \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>\\\\s*0\",\n    \"len\\\\(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\)\\\\s*>=\\\\s*1\",\n];\nconst re = new RegExp(`elif\\\\s+((${allowedRes.join(\")|(\")}))\\\\s+and\\\\s+(rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*<\\\\s*rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]|rods\\\\s*\\\\[\\\\s*target\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\]\\\\s*>\\\\s*rods\\\\s*\\\\[\\\\s*source\\\\s*\\\\]\\\\s*\\\\[\\\\s*-\\\\s*1\\\\s*\\\\])\\\\s*:\\\\s+forward\\\\s*=\\\\s*True`);\nassert.match(code, re);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The other case in which you have to move the disk necessarily from <code>source</code> to <code>target</code> is when the source list is <strong>not</strong> empty <strong>and</strong> the last disk in <code>source</code> is lower than the last disk in <code>target</code>.</p>\n<p>Add an <code>elif</code> statement to check this condition. Then, set the <code>forward</code> variable to <code>True</code> if the condition is met.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 23,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "64dc97ab25730b3e9de86ea5",
  "title": "Step 16",
  "challengeType": 20,
  "dashedName": "step-16",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        8,
        12
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should write a <code>for</code> loop to iterate through the number of moves. Use the <code>range()</code> function for that.</p>",
      "testString": "({ test: () => {\n    const rgs = [\n        /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:/,\n        /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:/,\n        /for\\s+\\w+\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:/\n    ]\n    const loop = rgs.some(r => code.match(r));\n    assert.isTrue(loop);\n  }\n})"
    },
    {
      "text": "<p>You should print the current move number at each iteration.</p>",
      "testString": "({ test: () => {\n    const rgs = [\n        /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/,\n        /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/,\n        /for\\s+(\\w+)\\s+in\\s+range\\s*\\(\\s*0\\s*,\\s*number_of_moves\\s*,\\s*1\\s*\\)\\s*:\\s+print\\s*\\(\\s*\\1\\s*\\)/\n    ]\n    const loop = rgs.some(r => code.match(r));\n    assert.isTrue(loop);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>At the end of this project, you will create a recursive solution to the Tower of Hanoi puzzle, but now you are going to explore an iterative approach to this problem.</p>\n<p>Start by adding a <code>for</code> loop to your function that iterates through the <code>number_of_moves</code> and prints the current iteration number.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 15,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
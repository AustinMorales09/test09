{
  "id": "64dc92a9718fb53ca3d1bad7",
  "title": "Step 9",
  "challengeType": 20,
  "dashedName": "step-9",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        3
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\n\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\ndef move():\n    pass",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\n\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\ndef move():\n    pass"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a variable named <code>number_of_moves</code>.</p>",
      "testString": "({ test: () => assert(__userGlobals.has('number_of_moves')) })"
    },
    {
      "text": "<p>The value of <code>number_of_moves</code> should be the expression to calculate the number of moves.</p>",
      "testString": "({ test: () => {\n    assert(runPython(`  \n    number_of_moves == 2**NUMBER_OF_DISKS -1      \n    `))\n} })"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Tower of Hanoi puzzle can be solved in 2<sup>n</sup> - 1 moves, where n is the number of disks. Declare a variable named <code>number_of_moves</code> and assign the total number of moves to this variable.</p>\n<p>The power operator in Python is <code>**</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 8,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
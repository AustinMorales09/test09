{
  "id": "64dcd3d61c448e2676501f43",
  "title": "Step 20",
  "challengeType": 20,
  "dashedName": "step-20",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        15
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 3\nnumber_of_moves = 2**NUMBER_OF_DISKS - 1\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods)\n    for i in range(number_of_moves):\n        remainder = (i + 1) % 3\n        if remainder == 1:\n            print(f'Move {i + 1} allowed between {source} and {target}')\n\n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have an <code>elif</code> statement to execute when <code>remainder == 2</code>.</p>",
      "testString": "({test: () => assert.match(code, /elif\\s+remainder\\s*==\\s*2:/)})"
    },
    {
      "text": "<p>You should print the string <code>f'Move {i + 1} allowed between {source} and {auxiliary}'</code>.</p>",
      "testString": "({test: () => assert.match(code, /print\\s*\\(\\s*f('|\")Move\\s\\{\\s*i\\s*\\+\\s*1\\s*\\}\\sallowed\\sbetween\\s\\{\\s*source\\s*\\}\\sand\\s\\{\\s*auxiliary\\s*\\s*\\}\\1\\s*\\)/)})"
    }
  ],
  "description": "<section id=\"description\">\n<p>When the remainder of the move number divided by 3 is equal to 2, the movement is allowed between <code>'A'</code> and <code>'B'</code> (the source and the auxiliary rods).</p>\n<p>Add an <code>elif</code> statement for that. Then, print the appropriate string if the condition is met.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 19,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "657b667a772ed53e82962c81",
  "title": "Step 54",
  "challengeType": 20,
  "dashedName": "step-54",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        8
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\ndef move(n, source, auxiliary, target):\n    if n > 0:\n\n        # move n - 1 disks from source to auxiliary, so they are out of the way\n        move(n - 1, source, target, auxiliary)\n        \n        # move the nth disk from source to target\n        target.append(source.pop())\n        \n        # display our progress\n        print(A, B, C, '\\n')\n        \n        # move the n - 1 disks that we left on auxiliary onto target\n        move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)\n",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 5\nA = list(range(NUMBER_OF_DISKS, 0, -1))\nB = []\nC = []\ndef move(n, source, auxiliary, target):\n    if n > 0:\n\n        # move n - 1 disks from source to auxiliary, so they are out of the way\n        move(n - 1, source, target, auxiliary)\n        \n        # move the nth disk from source to target\n        target.append(source.pop())\n        \n        # display our progress\n        print(A, B, C, '\\n')\n        \n        # move the n - 1 disks that we left on auxiliary onto target\n        move(n - 1,  auxiliary, source, target)\n              \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, A, B, C)\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should modify your existing <code>if</code> to check if <code>n</code> is less than or equal to <code>0</code>.</p>",
      "testString": "({ test: () =>\n  {\n    const hanoi = __helpers.python.getDef(code, \"move\");\n    const {function_body} = hanoi;    \n    assert(function_body.match(/^\\s{4}if\\s+n\\s*<=\\s*0\\s*:/m));\n  }\n})"
    },
    {
      "text": "<p>You should add a <code>return</code> statement to the first line of your <code>if</code> block.</p>",
      "testString": "({ test: () =>\n  {\n    const hanoi = __helpers.python.getDef(code, \"move\");\n    const {function_body} = hanoi;    \n    assert(function_body.match(/^(\\s{4})if\\s+n\\s*<=\\s*0\\s*:\\s*\\1\\1return/m));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>There's still one thing you can do to improve the readability of your code.</p>\n<p>Modify your <code>if</code> to execute when <code>n</code> is less than or equal to zero and add a <code>return</code> statement to stop the function execution.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 53,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
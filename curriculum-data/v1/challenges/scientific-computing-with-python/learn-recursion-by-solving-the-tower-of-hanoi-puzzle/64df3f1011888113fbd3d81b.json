{
  "id": "64df3f1011888113fbd3d81b",
  "title": "Step 44",
  "challengeType": 20,
  "dashedName": "step-44",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        12
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "NUMBER_OF_DISKS = 4\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods, '\\n')\n    \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')",
      "error": null,
      "seed": "NUMBER_OF_DISKS = 4\nrods = {\n    'A': list(range(NUMBER_OF_DISKS, 0, -1)),\n    'B': [],\n    'C': []\n}\n\ndef move(n, source, auxiliary, target):\n    # display starting configuration\n    print(rods, '\\n')\n    \n# initiate call from source A to target C with auxiliary B\nmove(NUMBER_OF_DISKS, 'A', 'B', 'C')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>move</code> function body should start with an <code>if</code> statement that is triggered when <code>n</code> is greater than zero.</p>",
      "testString": "({ test: () => assert.match(code, /def\\s+move\\(\\s*n\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target\\s*\\)\\s*:\\s+if\\s+n\\s*>\\s*0\\s*:/) })"
    },
    {
      "text": "<p>You should call <code>move(n - 1, source, auxiliary, target)</code> inside the <code>if</code> statement. Remember to indent your <code>print()</code> call.</p>",
      "testString": "const transformedCode = \"\\n\" + code.replace(/\\r/g, '');\nconst move = __helpers.python.getDef(transformedCode, \"move\");\nconst { function_parameters, function_body } = move;\n\nassert.match(function_parameters, /n\\s*,\\s*source\\s*,\\s*auxiliary\\s*,\\s*target/);\nconst functionBodyIndent = function_body.match(/ +/)[0];\nconst re = new RegExp(`${functionBodyIndent}if\\\\s+n\\\\s*>\\\\s*0\\\\s*:\\\\s+^${functionBodyIndent}( +)move\\\\(\\\\s*n\\\\s*-\\\\s*1\\\\s*,\\\\s*source\\\\s*,\\\\s*auxiliary\\\\s*,\\\\s*target\\\\s*\\\\).+?^${functionBodyIndent}\\\\1print\\\\s*\\\\(\\\\s*rods\\\\s*,\\\\s*(\"|')\\\\\\\\n\\\\2\\\\s*\\\\)`, \"ms\");\nassert.match(function_body, re);"
    }
  ],
  "description": "<section id=\"description\">\n<p>To solve the puzzle with recursion, the first thing to do is break the original problem down into smaller sub-problems.</p>\n<p>The final configuration with <code>n</code> disks piled up to the third rod in decreasing order can be obtained by moving:</p>\n<ul>\n<li><code>n - 1</code> disks from the source to the auxiliary rod</li>\n<li>the largest disk from the source to the target</li>\n<li>and then the <code>n - 1</code> disks from the auxiliary rod to the target.</li>\n</ul>\n<p>So, the first thing the <code>move</code> function should do is calling itself with <code>n - 1</code> as the first argument. But if you try to do so without defining a base case, you will get a <code>RecursionError</code>. This happens because the function keeps calling itself indefinitely.</p>\n<p>Before your comment and your <code>print()</code> call, add the recursive function call with <code>n - 1</code> as the first argument and make sure the function body executes only when <code>n</code> is greater than zero. For now, leave the other arguments in the same order.</p>\n</section>",
  "translationPending": false,
  "block": "learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
  "hasEditableBoundaries": true,
  "order": 8,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 43,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
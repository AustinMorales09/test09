{
  "id": "65774ae7c3eee66fe79b9459",
  "title": "Step 58",
  "challengeType": 20,
  "dashedName": "step-58",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        7
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n\n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\nshortest_path(my_graph, 'A')\n",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n\n    targets_to_print = [target] if target else graph\n    for node in targets_to_print:\n        if node == start:\n            continue\n        print(f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}')\n    \n    return distances, paths\nshortest_path(my_graph, 'A')\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should modify <code>my_graph</code> into the provided graph.</p>",
      "testString": "({ test: () => assert(runPython(`\n    g = {\n        'A': [('B', 5), ('C', 3), ('E', 11)],\n        'B': [('A', 5), ('C', 1), ('F', 2)],\n        'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n        'D': [('C',1 ), ('E', 9), ('F', 3)],\n        'E': [('A', 11), ('C', 5), ('D', 9)],\n        'F': [('B', 2), ('D', 3)]\n    }\n    my_graph == g\n    \n  `))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now, you are going to test your function with another graph. Change <code>my_graph</code> into the following graph:</p>\n<pre><code class=\"language-py\">{\n    'A': [('B', 5), ('C', 3), ('E', 11)],\n    'B': [('A', 5), ('C', 1), ('F', 2)],\n    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],\n    'D': [('C', 1), ('E', 9), ('F', 3)],\n    'E': [('A', 11), ('C', 5), ('D', 9)],\n    'F': [('B', 2), ('D', 3)]\n}\n</code></pre>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 57,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65578d0f6c78a0b868a43b9c",
  "title": "Step 40",
  "challengeType": 20,
  "dashedName": "step-40",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        12,
        15
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    while unvisited:\n        pass\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \n#shortest_path(my_graph, 'A')\n",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    while unvisited:\n        pass\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \n#shortest_path(my_graph, 'A')\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create a <code>current</code> variable in your <code>while</code> loop.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"shortest_path\").find_whiles()[0].has_variable(\"current\")`)) })"
    },
    {
      "text": "<p>You should assign <code>min(unvisited)</code> to your <code>current</code> variable. Remember to delete <code>pass</code>.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_function(\"shortest_path\").find_whiles()[0].find_bodies()[0].is_equivalent(\"current = min(unvisited)\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Inside the <code>while</code> loop, the first thing to do is define the current node to visit. For that you can use the <code>min()</code> function. It returns the smallest item from the iterable passed as the argument.</p>\n<p>Remove <code>pass</code>, then create a variable called <code>current</code> and assign it <code>min(unvisited)</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 39,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
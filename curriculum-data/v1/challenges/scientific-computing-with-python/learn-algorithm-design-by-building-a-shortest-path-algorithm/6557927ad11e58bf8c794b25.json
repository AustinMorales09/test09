{
  "id": "6557927ad11e58bf8c794b25",
  "title": "Step 55",
  "challengeType": 20,
  "dashedName": "step-55",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        25,
        30
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "\nmy_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    targets_to_print = [target] if target else graph\n\n\nshortest_path(my_graph, 'A')",
      "error": null,
      "seed": "\nmy_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    targets_to_print = [target] if target else graph\n\n\nshortest_path(my_graph, 'A')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create a <code>for</code> loop to iterate over <code>targets_to_print</code>. Use <code>node</code> as the loop variable.</p>",
      "testString": "({ test: () =>  {\n    const shortest = __helpers.python.getDef(code, \"shortest_path\");\n    const {function_body} = shortest;    \n    assert(function_body.match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s*:/m));\n  }\n})"
    },
    {
      "text": "<p>You should print the provided string inside your new <code>for</code> loop.</p>",
      "testString": "({ test: () =>  {\n    const shortest = __helpers.python.getDef(code, \"shortest_path\");\n    const {function_body} = shortest;    \n    assert(function_body.match(/^(\\s{4})for\\s+node\\s+in\\s+targets_to_print\\s*:\\s*^\\1\\1print\\s*\\(\\s*f(\"|')\\\\n\\{\\s*start\\s*\\}-\\{\\s*node\\s*\\}\\sdistance:\\s\\{\\s*distances\\s*\\[\\s*node\\s*\\]\\s*\\}\\\\nPath:\\s\\{\\s*(?=[^\\1])(\"|')\\s->\\s\\3\\.join\\s*\\(\\s*paths\\s*\\[\\s*node\\s*\\]\\s*\\)\\s*\\}\\2\\s*\\)/ms));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Create a <code>for</code> loop to iterate over <code>targets_to_print</code> and print the following f-string: <code>f'\\n{start}-{node} distance: {distances[node]}\\nPath: {\" -> \".join(paths[node])}'</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 54,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
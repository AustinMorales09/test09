{
  "id": "65661b72d6745ebec6a96923",
  "title": "Step 22",
  "challengeType": 20,
  "dashedName": "step-22",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        7
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': ['B', 'D'],\n    'D': ['A', 'C']\n}",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': ['B', 'D'],\n    'D': ['A', 'C']\n}"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>my_graph['C']</code> should be a list containing the tuples <code>('B', 4)</code> and <code>('D', 7)</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    tuples = [(\"B\", 4), (\"D\", 7)]\n    len(my_graph[\"C\"]) == 2 and all(t in my_graph[\"C\"] for t in tuples) \n  `))\n})"
    },
    {
      "text": "<p><code>my_graph['D']</code> should be a list containing the tuples <code>('A', 1)</code> and <code>('C', 7)</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    tuples = [(\"A\", 1), (\"C\", 7)]\n    len(my_graph[\"D\"]) == 2 and all(t in my_graph[\"D\"] for t in tuples)\n  `))\n})"
    },
    {
      "text": "<p><code>my_graph</code> should have 4 keys named <code>'A'</code>, <code>'B'</code>, <code>'C'</code>, and <code>'D'</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    key_list = [\"A\", \"B\", \"C\", \"D\"]\n    len(my_graph) == 4 and all(key in my_graph for key in key_list)\n  `))\n})"
    },
    {
      "text": "<p><code>my_graph['A']</code> should be a list containing the tuples <code>('B', 3)</code> and <code>('D', 1)</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    tuples = [(\"B\", 3), (\"D\", 1)]\n    len(my_graph[\"A\"]) == 2 and all(t in my_graph[\"A\"] for t in tuples)\n  `))\n})"
    },
    {
      "text": "<p><code>my_graph['B']</code> should be a list containing the tuples <code>('A', 3)</code> and <code>('C', 4)</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    tuples = [(\"A\", 3), (\"C\", 4)]\n    len(my_graph[\"B\"]) == 2 and all(t in my_graph[\"B\"] for t in tuples)\n  `))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the same way, modify the remaining two lists considering that the <code>C-D</code> distance is <code>7</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 21,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
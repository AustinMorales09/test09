{
  "id": "65577791ad8c26a7705e2919",
  "title": "Step 34",
  "challengeType": 20,
  "dashedName": "step-34",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        15
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {}\n    \n    print(f'Unvisited: {unvisited}\\nDistances: {distances}')\n    \nshortest_path(my_graph, 'A')",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {}\n    \n    print(f'Unvisited: {unvisited}\\nDistances: {distances}')\n    \nshortest_path(my_graph, 'A')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have a variable named <code>paths</code>.</p>",
      "testString": "({ test: () =>  {\n    const shortest = __helpers.python.getDef(code, \"shortest_path\");\n    const {function_body} = shortest;    \n    assert(function_body.match(/^\\s{4}paths\\s*\\=/m));\n  }\n})"
    },
    {
      "text": "<p>Your <code>paths</code> variable should use the dictionary comprehension syntax to assign an empty list to each node in graph.</p>",
      "testString": "({ test: () =>  {\n    const {function_body} = __helpers.python.getDef(code, \"shortest_path\");       \n    assert(function_body.match(/^\\s{4}paths\\s*\\=\\s*\\{\\s*(\\w+)\\s*:\\s*\\[\\s*\\]\\s+for\\s+\\1\\s+in\\s+graph\\s*\\}/m));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>With a dictionary comprehension, you can create a dictionary starting from an existing dictionary:</p>\n<pre><code class=\"language-py\">{key: val for key in dict}\n</code></pre>\n<p>In the example above, <code>val</code> is the value that <code>key</code> will have in the new dictionary, and <code>dict</code> is the existing dictionary.</p>\n<p>You want to keep track of the paths between the starting node and each other node.</p>\n<p>After the <code>distances</code> variable, create a <code>paths</code> variable and assign it a dictionary with all the keys from <code>graph</code>. Assign an empty list to each key and use a dictionary comprehension to build your dictionary.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 33,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
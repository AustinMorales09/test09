{
  "id": "65578cee7f2cb8b80127cce2",
  "title": "Step 39",
  "challengeType": 20,
  "dashedName": "step-39",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        17
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \n#shortest_path(my_graph, 'A')",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \n#shortest_path(my_graph, 'A')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have a <code>while</code> loop that executes while <code>unvisited</code> is not empty. Don't forget the <code>pass</code> keyword.</p>",
      "testString": "({ test: () =>  {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {function_body} = __helpers.python.getDef(commentless_code, \"shortest_path\");     \n    assert(function_body.match(/^\\s+while\\s+(unvisited|unvisited\\s*!=\\s*\\[\\s*\\]|len\\s*\\(\\s*unvisited\\s*\\)\\s*(>|!=)\\s*0)\\s*:/m));\n    const {block_body} = __helpers.python.getBlock(commentless_code, /while\\s+(unvisited|unvisited\\s*!=\\s*\\[\\s*\\]|len\\s*\\(\\s*unvisited\\s*\\)\\s*(>|!=)\\s*0)\\s*/);\n    assert(block_body.match(/\\s+pass/))\n    \n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Before the <code>print</code> call, create a <code>while</code> loop that runs while <code>unvisited</code> is not empty. Use the <code>pass</code> keyword to fill the loop body.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 38,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6579717f0920131304286804",
  "title": "Step 6",
  "challengeType": 20,
  "dashedName": "step-6",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        6
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "copper = {\n    'species': 'guinea pig',\n    'age': 2\n}\nprint(copper['age'])",
      "error": null,
      "seed": "copper = {\n    'species': 'guinea pig',\n    'age': 2\n}\nprint(copper['age'])"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should not have <code>print(copper['age'])</code> in your code.</p>",
      "testString": "({ test: () => assert.notMatch(code, /^print\\(\\s*copper\\s*\\[\\s*(\"|')age\\1\\s*\\]\\s*\\)/m) })"
    },
    {
      "text": "<p>You should add the key <code>'food'</code> to <code>copper</code> after declaring the dictionary.</p>",
      "testString": "({ test: () => assert.match(code, /copper\\s*\\[\\s*(\"|')food\\1\\s*\\]/) })"
    },
    {
      "text": "<p>You should set <code>copper['food']</code> to <code>'hay'</code> after declaring the dictionary.</p>",
      "testString": "({ test: () => assert.match(code, /^copper\\s*\\[\\s*(\"|')food\\1\\s*\\]\\s*=\\s*(\"|')hay\\2/m) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>To add a new key-value pair after declaring a dictionary, you can indicate the key in the same way you would access an existing key, and set the value of the new key by using the assignment operator:</p>\n<pre><code class=\"language-py\">my_dict = {\n    'name': 'Michael',\n    'occupation': 'Lumberjack'\n}\n\nmy_dict['country'] = 'Canada'\n</code></pre>\n<p>Delete your <code>print()</code> call. Then, after the <code>copper</code> declaration, add the key <code>'food'</code> to your dictionary and set its value to <code>'hay'</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 5,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
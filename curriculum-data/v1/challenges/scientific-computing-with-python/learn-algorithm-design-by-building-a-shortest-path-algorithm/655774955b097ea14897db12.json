{
  "id": "655774955b097ea14897db12",
  "title": "Step 28",
  "challengeType": 20,
  "dashedName": "step-28",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        13
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = []\n    distances = {}\n    for node in graph:\n        unvisited.append(node)",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = []\n    distances = {}\n    for node in graph:\n        unvisited.append(node)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create an <code>if</code> statement that executes when <code>node</code> is equal to <code>start</code>.</p>",
      "testString": "({ test: () =>  {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+node\\s+in\\s+graph\\s*/);        \n    assert(block_body.match(/unvisited\\.append\\s*\\(\\s*node\\s*\\)\\s*^\\s+if\\s+(node\\s*==\\s*start|start\\s*==\\s*node)\\s*:/m));\n  }\n})"
    },
    {
      "text": "<p>Inside your new <code>if</code> statement you should assign <code>0</code> to the node in the <code>distances</code> dictionary.</p>",
      "testString": "({ test: () =>  {\n   const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /if\\s+(node\\s*==\\s*start|start\\s*==\\s*node)\\s*/m);  \n    assert(block_body.match(/^\\s+distances\\s*\\[\\s*node\\s*\\]\\s*=\\s*0/m));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>The distance from the starting node is zero, because the algorithm begins its assessment right from there.</p>\n<p>After appending <code>node</code> to <code>unvisited</code> in your loop, create an <code>if</code> statement that triggers if the node is equal to the starting node. Then assign <code>0</code> to that node inside the <code>distances</code> dictionary.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 27,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
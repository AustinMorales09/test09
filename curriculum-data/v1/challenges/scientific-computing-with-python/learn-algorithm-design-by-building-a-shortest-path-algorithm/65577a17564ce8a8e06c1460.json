{
  "id": "65577a17564ce8a8e06c1460",
  "title": "Step 35",
  "challengeType": 20,
  "dashedName": "step-35",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        7,
        15
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {}\n    paths = {node: [] for node in graph}\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}')\n    \nshortest_path(my_graph, 'A')",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start):\n    unvisited = list(graph)\n    distances = {}\n    paths = {node: [] for node in graph}\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}')\n    \nshortest_path(my_graph, 'A')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should use the dictionary comprehension syntax to give a value to your <code>distances</code> variable.</p>",
      "testString": "({ test: () =>  {\n    const shortest = __helpers.python.getDef(code, \"shortest_path\");\n    const {function_body} = shortest;\n    assert(function_body.match(/^\\s{4}distances\\s*=\\s*\\{\\s*(\\w+)\\s*:\\s*0\\s+if\\s+(?:\\1\\s*==\\s*start|start\\s*==\\s*\\1)\\s+else\\s+float\\s*\\(\\s*(\"|')inf\\2\\s*\\)\\s+for\\s+\\1\\s+in\\s+graph\\s*\\}/m));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Dictionary comprehensions support conditional <code>if</code>/<code>else</code> syntax too:</p>\n<pre><code class=\"language-py\">{key: val_1 if condition else val_2 for key in dict}\n</code></pre>\n<p>In the example above, <code>dict</code> is the existing dictionary. When <code>condition</code> evaluates to <code>True</code>, <code>key</code> will have the value <code>val_1</code> , otherwise <code>val_2</code>.</p>\n<p>Use a dictionary comprehension to create a dictionary based on <code>graph</code> and assign it to the <code>distances</code> variable. Give the key a value of zero if the node is equal to the starting node, and infinite otherwise. Use <code>float('inf')</code> to achieve the latter.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 34,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
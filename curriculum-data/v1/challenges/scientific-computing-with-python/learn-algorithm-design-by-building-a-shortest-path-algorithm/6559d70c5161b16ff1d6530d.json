{
  "id": "6559d70c5161b16ff1d6530d",
  "title": "Step 54",
  "challengeType": 20,
  "dashedName": "step-54",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        24,
        28
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \nshortest_path(my_graph, 'A')",
      "error": null,
      "seed": "my_graph = {\n    'A': [('B', 3), ('D', 1)],\n    'B': [('A', 3), ('C', 4)],\n    'C': [('B', 4), ('D', 7)],\n    'D': [('A', 1), ('C', 7)]\n}\n\ndef shortest_path(graph, start, target = ''):\n    unvisited = list(graph)\n    distances = {node: 0 if node == start else float('inf') for node in graph}\n    paths = {node: [] for node in graph}\n    paths[start].append(start)\n    \n    while unvisited:\n        current = min(unvisited, key=distances.get)\n        for node, distance in graph[current]:\n            if distance + distances[current] < distances[node]:\n                distances[node] = distance + distances[current]\n                if paths[node] and paths[node][-1] == node:\n                    paths[node] = paths[current][:]\n                else:\n                    paths[node].extend(paths[current])\n                paths[node].append(node)\n        unvisited.remove(current)\n    print(f'Unvisited: {unvisited}\\nDistances: {distances}\\nPaths: {paths}')\n    \nshortest_path(my_graph, 'A')"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should delete your <code>print</code> call.</p>",
      "testString": "({ test: () => assert.isFalse( /print\\s*\\(\\s*f(\"|')Unvisited:\\s*\\{\\s*unvisited\\s*\\}\\\\nDistances:\\s\\{\\s*distances\\s*\\}\\\\nPaths:\\s\\{\\s*paths\\s*\\}\\1\\s*\\)/.test(code)) })"
    },
    {
      "text": "<p>You should create a variable called <code>targets_to_print</code> after your <code>while</code> loop.</p>",
      "testString": "({ test: () =>  {\n    const shortest = __helpers.python.getDef(code, \"shortest_path\");\n    const {function_body} = shortest;    \n    assert(function_body.match(/unvisited\\.remove\\(\\s*current\\s*\\).*^\\s{4}targets_to_print\\s*=/ms));\n  }\n})"
    },
    {
      "text": "<p>You should use the ternary syntax to assign <code>[target]</code> when <code>target</code> is truthy, and <code>graph</code> otherwise to your <code>targets_to_print</code> variable.</p>",
      "testString": "({ test: () =>  {\n    const shortest = __helpers.python.getDef(code, \"shortest_path\");\n    const {function_body} = shortest;    \n    assert(function_body.match(/unvisited\\.remove\\(\\s*current\\s*\\).*^\\s{4}targets_to_print\\s*=\\s*\\[\\s*target\\s*\\]\\s+if\\s+target\\s+else\\s+graph/ms));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Python provides a concise way to write <code>if</code>/<code>else</code> conditionals by using the ternary syntax:</p>\n<pre><code class=\"language-py\">val_1 if condition else val_2\n</code></pre>\n<p>The expression above evaluates to <code>val_1</code> if <code>condition</code> is true, otherwise to <code>val_2</code>.</p>\n<p>Delete your <code>print</code> call and create a variable called <code>targets_to_print</code> after your <code>while</code> loop. Use the ternary syntax to assign it <code>[target]</code> when <code>target</code> is truthy, and <code>graph</code> otherwise.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 53,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
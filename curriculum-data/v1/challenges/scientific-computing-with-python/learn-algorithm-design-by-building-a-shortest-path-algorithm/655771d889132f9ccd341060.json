{
  "id": "655771d889132f9ccd341060",
  "title": "Step 20",
  "challengeType": 20,
  "dashedName": "step-20",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        3
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "my_graph = {\n    'A': ['B', 'D'],\n    'B': ['A', 'C'],\n    'C': ['B', 'D'],\n    'D': ['A', 'C']\n}\n",
      "error": null,
      "seed": "my_graph = {\n    'A': ['B', 'D'],\n    'B': ['A', 'C'],\n    'C': ['B', 'D'],\n    'D': ['A', 'C']\n}\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>my_graph[\"A\"]</code> should be a list containing the tuples <code>('B', 3)</code> and <code>('D', 1)</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    tuples = [(\"B\", 3), (\"D\", 1)]\n    len(my_graph[\"A\"]) == 2 and all(t in my_graph[\"A\"] for t in tuples)\n  `))\n})"
    },
    {
      "text": "<p><code>my_graph</code> should have 4 keys named <code>'A'</code>, <code>'B'</code>, <code>'C'</code>, and <code>'D'</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\n    key_list = [\"A\", \"B\", \"C\", \"D\"]\n    len(my_graph) == 4 and all(key in my_graph for key in key_list)\n  `))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>A graph is called a <em>weighted</em> graph when its edges are associated with weights, representing a distance, time or other quantitative value.</p>\n<p>In your case, these weights will be the distances between each node, or point in space. To represent a weighted graph you can modify your dictionary, using a list of tuples for each value.</p>\n<p>The first element in the tuple will be the connected node, and the second element will be an integer number indicating the distance.</p>\n<p>Modify <code>my_graph['A']</code> into a list of tuples, considering that the <code>A-B</code> distance is <code>3</code> and the <code>A-D</code> distance is <code>1</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-algorithm-design-by-building-a-shortest-path-algorithm",
  "hasEditableBoundaries": true,
  "order": 7,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 19,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
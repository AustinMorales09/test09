{
  "id": "657f04ed0035f47ed04d0f1f",
  "title": "Step 13",
  "challengeType": 20,
  "dashedName": "step-13",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        17
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def convert_to_snake_case(pascal_or_camel_cased_string):\n    snake_cased_char_list = []\n    for char in pascal_or_camel_cased_string:\n        if char.isupper():\n            converted_character = '_' + char.lower()\n            snake_cased_char_list.append(converted_character)\n        else:\n            snake_cased_char_list.append(char)\n    snake_cased_string = ''.join(snake_cased_char_list)\n    clean_snake_cased_string = snake_cased_string.strip('_')\n\n    return clean_snake_cased_string\n\ndef main():\n    print(convert_to_snake_case('aLongAndComplexString'))\n",
      "error": null,
      "seed": "def convert_to_snake_case(pascal_or_camel_cased_string):\n    snake_cased_char_list = []\n    for char in pascal_or_camel_cased_string:\n        if char.isupper():\n            converted_character = '_' + char.lower()\n            snake_cased_char_list.append(converted_character)\n        else:\n            snake_cased_char_list.append(char)\n    snake_cased_string = ''.join(snake_cased_char_list)\n    clean_snake_cased_string = snake_cased_string.strip('_')\n\n    return clean_snake_cased_string\n\ndef main():\n    print(convert_to_snake_case('aLongAndComplexString'))\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should write a <code>if</code> clause to check whether <code>__name__ == '__main__'</code> evaluates to <code>True</code> or not. Don't forget the colon at the end and use <code>pass</code> to fill the <code>if</code> body.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\");\n        assert.match(transformedCode, /\\nif\\s+__name__\\s*==\\s*(\"|')__main__\\1\\s*:/);\n    }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Before running the <code>main()</code> function, you need to make sure that the file is running as a script. Add an <code>if</code> statement on the same level as the two existing functions and check whether <code>__name__ == '__main__'</code>.</p>\n<p>Remember to use <code>pass</code> to fill the <code>if</code> statement body.</p>\n</section>",
  "translationPending": false,
  "block": "learn-list-comprehension-by-building-a-case-converter-program",
  "hasEditableBoundaries": true,
  "order": 3,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 12,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
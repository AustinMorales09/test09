{
  "id": "657f425dbab54e11993c80f0",
  "title": "Step 15",
  "challengeType": 20,
  "dashedName": "step-15",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        13
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def convert_to_snake_case(pascal_or_camel_cased_string):\n    snake_cased_char_list = []\n    for char in pascal_or_camel_cased_string:\n        if char.isupper():\n            converted_character = '_' + char.lower()\n            snake_cased_char_list.append(converted_character)\n        else:\n            snake_cased_char_list.append(char)\n    snake_cased_string = ''.join(snake_cased_char_list)\n    clean_snake_cased_string = snake_cased_string.strip('_')\n\n    return clean_snake_cased_string\ndef main():\n    print(convert_to_snake_case('aLongAndComplexString'))\n\nif __name__ == '__main__':\n    main()\n",
      "error": null,
      "seed": "def convert_to_snake_case(pascal_or_camel_cased_string):\n    snake_cased_char_list = []\n    for char in pascal_or_camel_cased_string:\n        if char.isupper():\n            converted_character = '_' + char.lower()\n            snake_cased_char_list.append(converted_character)\n        else:\n            snake_cased_char_list.append(char)\n    snake_cased_string = ''.join(snake_cased_char_list)\n    clean_snake_cased_string = snake_cased_string.strip('_')\n\n    return clean_snake_cased_string\ndef main():\n    print(convert_to_snake_case('aLongAndComplexString'))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should comment out all the 10 lines of code inside the <code>convert_to_snake_case()</code> function and nothing else. Add <code>pass</code> to fill temporarily the function body and avoid an error.</p>",
      "testString": "({\n    test: () => {\n        const transformedCode = code.replace(/\\r/g, \"\").replace(/\\n#/g, \"\\n #\");\n        const convert_to_snake_case = __helpers.python.getDef(\"\\n\" + transformedCode, \"convert_to_snake_case\");\n        const { function_body } = convert_to_snake_case;\n\n        assert.equal(function_body.split(\"#\").length - 1, 10);\n    }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>So far, in this project you have not seen any usage of list comprehensions whatsoever. Like you learned in the first step, list comprehensions are a more concise way of constructing lists in Python.</p>\n<p>Begin the transition to comprehensions by commenting out all the lines of code inside the <code>convert_to_snake_case()</code> function. Don't delete them as they'll be helpful when you implement the logic using a list comprehension.</p>\n<p>Remember to add the <code>pass</code> keyword to the function body to prevent the code from failing during the tests.</p>\n</section>",
  "translationPending": false,
  "block": "learn-list-comprehension-by-building-a-case-converter-program",
  "hasEditableBoundaries": true,
  "order": 3,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 14,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
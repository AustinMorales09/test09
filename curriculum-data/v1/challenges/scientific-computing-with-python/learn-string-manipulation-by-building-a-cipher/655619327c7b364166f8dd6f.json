{
  "id": "655619327c7b364166f8dd6f",
  "title": "Step 46",
  "challengeType": 20,
  "dashedName": "step-46",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        14
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    if char == ' ':\n        encrypted_text += char\n    else:\n        index = alphabet.find(char)\n        new_index = (index + shift) % 26\n        encrypted_text += alphabet[new_index]\n    print('char:', char, 'encrypted text:', encrypted_text)",
      "error": null,
      "seed": "text = 'Hello Zaira'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    if char == ' ':\n        encrypted_text += char\n    else:\n        index = alphabet.find(char)\n        new_index = (index + shift) % 26\n        encrypted_text += alphabet[new_index]\n    print('char:', char, 'encrypted text:', encrypted_text)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should modify the <code>new_index</code> value replacing <code>26</code> with <code>len(alphabet)</code>.</p>",
      "testString": "({ test: () => {\n  const commentless_code = __helpers.python.removeComments(code);\n  const {block_body} = __helpers.python.getBlock(commentless_code, /else/);\n  assert(block_body.match(/new_index\\s*=\\s*\\(\\s*index\\s*\\+\\s*shift\\s*\\)\\s*%\\s*len\\s*\\(\\s*alphabet\\s*\\)/));\n} })"
    }
  ],
  "description": "<section id=\"description\">\n<p>If you wish to incorporate additional characters into the <code>alphabet</code> string, such as digits or special characters, you'll find it's necessary to manually modify the right operand of the modulo operation.</p>\n<p>Replace <code>26</code> with <code>len(alphabet)</code> to avoid this issue.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 45,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
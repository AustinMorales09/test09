{
  "id": "6555d8b0b3d20b128bdadd37",
  "title": "Step 76",
  "challengeType": 20,
  "dashedName": "step-76",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        25,
        30
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)",
      "error": null,
      "seed": "text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            final_message += char\n        else:        \n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should remove the third argument from <code>vigenere(text, custom_key, 1)</code>.</p>",
      "testString": "({ test: () => assert.match(code, /vigenere\\s*\\(\\s*text\\s*,\\s*custom_key\\s*\\)/) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now you can remove the third argument from your first function call.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 75,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "655251308f31958d06cdf267",
  "title": "Step 36",
  "challengeType": 20,
  "dashedName": "step-36",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        10
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\nfor char in text.lower():\n    index = alphabet.find(char)\n    new_index = index + shift\n    new_char = alphabet[new_index]\n    print('char:', char, 'new char:', new_char)",
      "error": null,
      "seed": "text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\nfor char in text.lower():\n    index = alphabet.find(char)\n    new_index = index + shift\n    new_char = alphabet[new_index]\n    print('char:', char, 'new char:', new_char)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a variable called <code>encrypted_text</code> before your <code>for</code> loop.</p>",
      "testString": "({ test: () => assert(__userGlobals.has(\"encrypted_text\")) })"
    },
    {
      "text": "<p>You should assign an empty string to your <code>encrypted_text</code> variable.</p>",
      "testString": "({ test: () => assert.equal(__userGlobals.get(\"encrypted_text\"), \"\") })"
    }
  ],
  "description": "<section id=\"description\">\n<p>At the moment, the encrypted character is updated in every iteration. It would be better to store the encrypted string in a new variable. Before your <code>for</code> loop, declare a variable called <code>encrypted_text</code> and assign an empty string (<code>''</code>) to this variable.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 35,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
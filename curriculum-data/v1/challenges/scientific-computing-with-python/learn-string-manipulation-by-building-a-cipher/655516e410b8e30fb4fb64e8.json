{
  "id": "655516e410b8e30fb4fb64e8",
  "title": "Step 74",
  "challengeType": 20,
  "dashedName": "step-74",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        31
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key, direction):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            final_message += char\n        else:        \n            # Find the right key character to encode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n    \nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)",
      "error": null,
      "seed": "text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key, direction):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    final_message = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            final_message += char\n        else:        \n            # Find the right key character to encode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset*direction) % len(alphabet)\n            final_message += alphabet[new_index]\n    \n    return final_message\n    \nencryption = vigenere(text, custom_key, 1)\nprint(encryption)\ndecryption = vigenere(encryption, custom_key, -1)\nprint(decryption)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your second comment should be <code>Find the right key character to encode/decode</code>.</p>",
      "testString": "({ test: () => assert.match(code, /#\\s*Find\\sthe\\sright\\skey\\scharacter\\sto\\sencode\\/decode/) })"
    },
    {
      "text": "<p>Your third comment should be <code>Define the offset and the encrypted/decrypted letter</code>.</p>",
      "testString": "({ test: () => assert.match(code, /#\\s*Define\\sthe\\soffset\\sand\\sthe\\sencrypted\\/decrypted\\sletter/) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Update your comments too. Your second comment should say <code>encode/decode</code> in place of <code>encode</code>. Your third comment should say <code>encrypted/decrypted</code> in place of <code>encrypted</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 73,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6554ad2463b8892748f8efdd",
  "title": "Step 65",
  "challengeType": 20,
  "dashedName": "step-65",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        17,
        25
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            encrypted_text += char\n        else:        \n            # Find the right key character to encode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n            # Define the offset and the encrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)",
      "error": null,
      "seed": "text = 'Hello Zaira'\ncustom_key = 'python'\n\ndef vigenere(message, key):\n    key_index = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n    \n        # Append space to the message\n        if char == ' ':\n            encrypted_text += char\n        else:        \n            # Find the right key character to encode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n            # Define the offset and the encrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should remove the two <code>print()</code> calls from your function.</p>",
      "testString": "({ \n  test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    assert.isFalse(/print\\s*\\(\\s*(\"|')plain\\stext:\\1\\s*,\\s*message\\s*\\)/.test(commentless_code))\n    assert.isFalse(/print\\s*\\(\\s*(\"|')encrypted\\stext:\\1\\s*,\\s*encrypted_text\\s*\\)/.test(commentless_code))\n  }\n})"
    },
    {
      "text": "<p>Your function should return <code>encrypted_text</code>.</p>",
      "testString": "({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {function_body} = __helpers.python.getDef(commentless_code, \"vigenere\");\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+message\\.lower\\s*\\(\\s*\\)\\s*/);\n    const regex = /return\\s+encrypted_text/\n    assert(function_body.match(regex));\n    assert.notMatch(block_body, regex);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>At the moment, your function prints some strings, but these values cannot be used by other parts of code to perform any actions.</p>\n<p>For that purpose, you need to use a <code>return</code> statement:</p>\n<pre><code class=\"language-python\">def foo():\n    return 'spam'\n</code></pre>\n<p>You need to write <code>return</code> followed by a space and the value that the function should return. Once the <code>return</code> statement is found, that value is returned and the execution of the function stops, proceeding to the next line of code after the function call. In the example above, the <code>foo</code> function returns the string <code>'spam'</code>.</p>\n<p>Remove the two <code>print()</code> calls from your function and return <code>encrypted_text</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 64,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
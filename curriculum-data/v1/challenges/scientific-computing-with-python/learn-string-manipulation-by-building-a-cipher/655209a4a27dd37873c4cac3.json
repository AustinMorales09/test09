{
  "id": "655209a4a27dd37873c4cac3",
  "title": "Step 17",
  "challengeType": 20,
  "dashedName": "step-17",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        6
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0])\nprint(index)",
      "error": null,
      "seed": "text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nindex = alphabet.find(text[0])\nprint(index)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should still have <code>print(index)</code> in your code. Pay attention to have the function call at the beginning of the line.</p>",
      "testString": "assert.match(code, /^print\\s*\\(\\s*index\\s*\\)/m)"
    },
    {
      "text": "<p>You should print <code>text.lower()</code>. Pay attention to place the function call at the beginning of the line.</p>",
      "testString": "assert.match(code, /^print\\s*\\(\\s*text\\.lower\\s*\\(\\s*\\)\\s*\\)/m)"
    },
    {
      "text": "<p>Your code contains invalid syntax and/or invalid indentation.</p>",
      "testString": "({test: () => assert(true) })"
    }
  ],
  "description": "<section id=\"description\">\n<p><code>.find()</code> returns the index of the matching character inside the string. If the character is not found, it returns <code>-1</code>. As you can see, the first character in <code>text</code>, uppercase <code>'H'</code>, is not found, since <code>alphabet</code> contains only lowercase letters.</p>\n<p>You can transform a string into its lowercase equivalent with the <code>.lower()</code> method. Add another <code>print()</code> call to print <code>text.lower()</code> and see the output.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 16,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6553f4f66099802c6ae94613",
  "title": "Step 53",
  "challengeType": 20,
  "dashedName": "step-53",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        16,
        18
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello Zaira'\nshift = 3\n\ndef caesar(message, offset):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n        if char == ' ':\n            encrypted_text += char\n        else:\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)\ncaesar()",
      "error": null,
      "seed": "text = 'Hello Zaira'\nshift = 3\n\ndef caesar(message, offset):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n        if char == ' ':\n            encrypted_text += char\n        else:\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)\ncaesar()"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should pass <code>text</code> and <code>shift</code> as the arguments to your function call by including them inside the parentheses. Don't forget to separate the arguments with a comma.</p>",
      "testString": "({\n    test: () => assert(runPython(\n        `_Node(_code).find_calls('caesar')[0].is_equivalent('caesar(text, shift)')`\n    ))\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Currently, your code raises a <code>TypeError</code>, because the <code>caesar</code> function is defined with two parameters (<code>message</code> and <code>offset</code>), therefore it expects to be called with two <em>arguments</em>.</p>\n<p>Calling <code>caesar()</code> without the required arguments stops the execution of the code.</p>\n<p>Give <code>message</code> and <code>offset</code> values, by passing <code>text</code> and <code>shift</code> as arguments to the <code>caesar</code> function call.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 52,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
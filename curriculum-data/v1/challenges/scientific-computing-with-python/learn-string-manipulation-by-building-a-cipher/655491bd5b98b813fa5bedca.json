{
  "id": "655491bd5b98b813fa5bedca",
  "title": "Step 56",
  "challengeType": 20,
  "dashedName": "step-56",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        17
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello Zaira'\nshift = 3\n\ndef caesar(message, offset):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n        if char == ' ':\n            encrypted_text += char\n        else:\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)",
      "error": null,
      "seed": "text = 'Hello Zaira'\nshift = 3\n\ndef caesar(message, offset):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_text = ''\n\n    for char in message.lower():\n        if char == ' ':\n            encrypted_text += char\n        else:\n            index = alphabet.find(char)\n            new_index = (index + offset) % len(alphabet)\n            encrypted_text += alphabet[new_index]\n    print('plain text:', message)\n    print('encrypted text:', encrypted_text)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should modify your function name into <code>vigenere</code>.</p>",
      "testString": "assert.match(code, /^def\\s+vigenere\\s*\\(.*\\)\\s*:/m)"
    },
    {
      "text": "<p>Your <code>vigenere</code> function should take <code>message</code> and <code>key</code> as the parameters.</p>",
      "testString": "assert.match(code, /^def\\s+vigenere\\s*\\(\\s*message\\s*,\\s*key\\s*\\)\\s*:/m)"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now modify your function declaration: change the function name into <code>vigenere</code> and the second parameter into <code>key</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 55,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "655a2a7210094920069b117c",
  "title": "Step 40",
  "challengeType": 20,
  "dashedName": "step-40",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        11
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    index = alphabet.find(char)\n    new_index = index + shift\n    encrypted_text += alphabet[new_index]\n    print('char:', char, 'encrypted text:', encrypted_text)",
      "error": null,
      "seed": "text = 'Hello World'\nshift = 3\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nencrypted_text = ''\n\nfor char in text.lower():\n    index = alphabet.find(char)\n    new_index = index + shift\n    encrypted_text += alphabet[new_index]\n    print('char:', char, 'encrypted text:', encrypted_text)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should compare <code>char</code> with a space using the equality operator inside your <code>for</code> loop.</p>",
      "testString": "({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\n    assert(block_body.match(/char\\s*==\\s*(\"|')\\s\\1/));\n  }\n})"
    },
    {
      "text": "<p>You should print the result of comparing <code>char</code> with a space inside your <code>for</code> loop.</p>",
      "testString": "({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\n    assert(block_body.match(/print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/));\n  }\n})"
    },
    {
      "text": "<p>You should print the result of comparing <code>char</code> with a space at the beginning of your loop.</p>",
      "testString": "({ test: () => {\n    const commentless_code = __helpers.python.removeComments(code);\n    const {block_body} = __helpers.python.getBlock(commentless_code, /for\\s+char\\s+in\\s+text\\.lower\\s*\\(\\s*\\)\\s*/);\n    assert(block_body.match(/^\\s+print\\s*\\(\\s*char\\s*==\\s*(\"|')\\s\\1\\s*\\)/));\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Comparison operators allow you to compare two objects based on their values. You can use a comparison operator by placing it between the objects you want to compare.\nThey return a <em>Boolean</em> value — namely <code>True</code> or <code>False</code> — depending on the truthfulness of the expression.</p>\n<p>Python has the following comparison operators:</p>\n<table>\n  <thead>\n    <tr>\n      <th>Operator</th>\n      <th>Meaning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>==</td>\n      <td>Equal</td>\n    </tr>\n    <tr>\n      <td>!=</td>\n      <td>Not equal</td>\n    </tr>\n    <tr>\n      <td>&gt;</td>\n      <td>Greater than</td>\n    </tr>\n    <tr>\n      <td>&lt;</td>\n      <td>Less than</td>\n    </tr>\n    <tr>\n      <td>&gt;=</td>\n      <td>Greater than or equal to</td>\n    </tr>\n    <tr>\n      <td>&lt;=</td>\n      <td>Less than or equal to</td>\n    </tr>\n  </tbody>\n</table>\n<p>At the beginning of your loop body, print the result of comparing <code>char</code> with a space (<code>' '</code>). Use the equality operator <code>==</code> for that.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 39,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6551fe3b1df7c9740f13f270",
  "title": "Step 12",
  "challengeType": 20,
  "dashedName": "step-12",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        5
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "text = 'Hello World'\nprint(type(text))\nshift = 3\nprint(type(shift))",
      "error": null,
      "seed": "text = 'Hello World'\nprint(type(text))\nshift = 3\nprint(type(shift))"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should not have <code>print(type(text))</code> in your code.</p>",
      "testString": "const commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*text\\s*\\)\\s*\\)/)"
    },
    {
      "text": "<p>You should not have <code>print(type(shift))</code> in your code.</p>",
      "testString": "const commentless_code = __helpers.python.removeComments(code);\nassert.notMatch(commentless_code, /print\\s*\\(\\s*type\\s*\\(\\s*shift\\s*\\)\\s*\\)/)"
    },
    {
      "text": "<p>You should declare a variable called <code>alphabet</code>. Pay attention to place the variable name at the beginning of the line.</p>",
      "testString": "assert.match(code, /^alphabet\\s*=/m)"
    },
    {
      "text": "<p>You should assign the string <code>'abcdefghijklmnopqrstuvwxyz'</code> to your <code>alphabet</code> variable. Remember to use either single or double quotes to enclose the string.</p>",
      "testString": "assert.match(code, /^alphabet\\s*=\\s*(\"|')abcdefghijklmnopqrstuvwxyz\\1\\s*(#.*)?$/m)"
    },
    {
      "text": "<p>Your code contains invalid syntax and/or invalid indentation.</p>",
      "testString": "({test: () => assert(true) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Key aspects of variable naming in Python are:</p>\n<ul>\n<li>Some words are reserved keywords (e.g. <code>for</code>, <code>while</code>, <code>True</code>). They have a special meaning in Python, so you cannot use them for variable names.</li>\n<li>Variable names cannot start with a number, and they can only contain alpha-numeric characters or underscores.</li>\n<li>Variable names are case sensitive, i.e. <code>my_var</code> is different from <code>my_Var</code> and <code>MY_VAR</code>.</li>\n<li>Finally, it is a common convention to write variable names using <code>snake_case</code>, where each space is replaced by an underscore character and the words are written in lowercase letters.</li>\n</ul>\n<p>Remove both calls to <code>print()</code> and declare another variable called <code>alphabet</code>. Assign the string <code>'abcdefghijklmnopqrstuvwxyz'</code> to this variable.</p>\n</section>",
  "translationPending": false,
  "block": "learn-string-manipulation-by-building-a-cipher",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 11,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
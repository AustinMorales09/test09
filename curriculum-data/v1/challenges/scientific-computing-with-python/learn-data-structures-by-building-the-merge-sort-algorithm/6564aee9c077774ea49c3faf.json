{
  "id": "6564aee9c077774ea49c3faf",
  "title": "Step 3",
  "challengeType": 20,
  "dashedName": "step-3",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        3
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def merge_sort(array):\n    pass",
      "error": null,
      "seed": "def merge_sort(array):\n    pass"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should not have <code>pass</code> in the body of the function.</p>",
      "testString": "({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.notMatch(function_body, /^\\s{4}pass/m);\n  }\n})"
    },
    {
      "text": "<p>You should declare a <code>middle_point</code> variable and assign <code>len(array) // 2</code> to it.</p>",
      "testString": "({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /^\\s{4}middle_point\\s*=\\s*len\\(\\s*array\\s*\\)\\s*\\/\\/\\s*2/m);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>The merge sort algorithm mainly performs three actions:</p>\n<ul>\n<li>Divide an unsorted sequence of items into sub-parts</li>\n<li>Sort the items in the sub-parts</li>\n<li>Merge the sorted sub-parts</li>\n</ul>\n<p>The above happens recursively until the sub-parts are merged into the complete sorted sequence. Let's start by dividing the sequence.</p>\n<p>First, replace the <code>pass</code> keyword with a variable <code>middle_point</code>. Use the integer division operator (<code>//</code>) to divide the length of the <code>array</code> list by 2 and assign the result to your new <code>middle_point</code> variable. Remember to indent your code.</p>\n</section>",
  "translationPending": false,
  "block": "learn-data-structures-by-building-the-merge-sort-algorithm",
  "hasEditableBoundaries": true,
  "order": 9,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "656702f8b4cbd8cbf0a433c6",
  "title": "Step 11",
  "challengeType": 20,
  "dashedName": "step-11",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        15
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n",
      "error": null,
      "seed": "def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>while</code> loop should have these conditions: <code>left_array_index &#x3C; len(left_part) and right_array_index &#x3C; len(right_part)</code>. Don't forget to use the <code>pass</code> keyword in the body of the loop.</p>",
      "testString": "({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):/);\n  }\n})"
    },
    {
      "text": "<p>Use the <code>pass</code> keyword in the body of the loop</p>",
      "testString": "({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /while\\s+left_array_index\\s*<\\s*len\\(\\s*left_part\\s*\\)\\s+and\\s+right_array_index\\s*<\\s*len\\(\\s*right_part\\s*\\):\\s*pass/);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Inside your function, create a <code>while</code> loop that compares an element in <code>left_part</code> to an element in <code>right_part</code>, and merges the smaller element to the main <code>array</code> list.</p>\n<p>Create two conditions for the loop: one that checks whether the <code>left_array_index</code> is less than the length of <code>left_part</code> and another condition that checks whether <code>right_array_index</code> is less than the length of <code>right_part</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-data-structures-by-building-the-merge-sort-algorithm",
  "hasEditableBoundaries": true,
  "order": 9,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 10,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
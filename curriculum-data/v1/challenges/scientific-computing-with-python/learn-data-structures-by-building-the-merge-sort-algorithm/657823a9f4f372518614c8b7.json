{
  "id": "657823a9f4f372518614c8b7",
  "title": "Step 16",
  "challengeType": 20,
  "dashedName": "step-16",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        18,
        22
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        \n        else:\n            array[sorted_index] = right_part[right_array_index]\n",
      "error": null,
      "seed": "def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        \n        else:\n            array[sorted_index] = right_part[right_array_index]\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should add <code>1</code> to the current value of <code>right_array_index</code>.</p>",
      "testString": "({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    const allowedMatches = [\n      /else:\\s*[^}]*right_array_index\\s*\\+=\\s*1/,\n      /else:\\s*[^}]*right_array_index\\s*=\\s*right_array_index\\s*\\+\\s*1/\n    ]\n    \n    const anyMatch = allowedMatches.some((match) => match.test(function_body))\n    assert.isTrue(anyMatch);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Still within the <code>else</code> block, increment <code>right_array_index</code> by <code>1</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-data-structures-by-building-the-merge-sort-algorithm",
  "hasEditableBoundaries": true,
  "order": 9,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 15,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "65670d1ef177e7e2b76d9528",
  "title": "Step 17",
  "challengeType": 20,
  "dashedName": "step-17",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        21
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        else:\n            array[sorted_index] = right_part[right_array_index]\n            right_array_index += 1",
      "error": null,
      "seed": "def merge_sort(array):\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        else:\n            array[sorted_index] = right_part[right_array_index]\n            right_array_index += 1"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should increment the current value of <code>sorted_index</code> by 1.</p>",
      "testString": "({\n  test: () => {\n    const transformedCode = code.replace(/\\r/g, \"\");\n    const merge_sort = __helpers.python.getDef(\"\\n\" + transformedCode, \"merge_sort\");\n    const { function_body } = merge_sort;\n\n    assert.match(function_body, /^\\s{8}sorted_index\\s*(\\+=\\s*1|=\\s*sorted_index\\s*\\+\\s*1)/m);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <code>if</code> and <code>else</code> statements you created in the previous steps will assign elements to the sorted array.</p>\n<p>Each element assigned to the sorted array takes up an index in the list. So you have to move to the next index without an element.</p>\n<p>Below the <code>if</code>/<code>else</code> block, but still within the <code>while</code> loop increment <code>sorted_index</code> by 1. This should not be in the body of the <code>if</code> or <code>else</code> statement</p>\n</section>",
  "translationPending": false,
  "block": "learn-data-structures-by-building-the-merge-sort-algorithm",
  "hasEditableBoundaries": true,
  "order": 9,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 16,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6569beee367427c90c74899e",
  "title": "Step 29",
  "challengeType": 20,
  "dashedName": "step-29",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        34,
        37
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "def merge_sort(array):\n    if len(array) <= 1:\n        return\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        else:\n            array[sorted_index] = right_part[right_array_index]\n            right_array_index += 1\n        sorted_index += 1\n\n    while left_array_index < len(left_part):\n        array[sorted_index] = left_part[left_array_index]\n        left_array_index += 1\n        sorted_index += 1\n    \n    while right_array_index < len(right_part):\n        array[sorted_index] = right_part[right_array_index]\n        right_array_index += 1\n        sorted_index += 1\n\nif __name__ == '__main__':\n    pass",
      "error": null,
      "seed": "def merge_sort(array):\n    if len(array) <= 1:\n        return\n    \n    middle_point = len(array) // 2\n    left_part = array[:middle_point]\n    right_part = array[middle_point:]\n\n    merge_sort(left_part)\n    merge_sort(right_part)\n\n    left_array_index = 0\n    right_array_index = 0\n    sorted_index = 0\n\n    while left_array_index < len(left_part) and right_array_index < len(right_part):\n        if left_part[left_array_index] < right_part[right_array_index]:\n            array[sorted_index] = left_part[left_array_index]\n            left_array_index += 1\n        else:\n            array[sorted_index] = right_part[right_array_index]\n            right_array_index += 1\n        sorted_index += 1\n\n    while left_array_index < len(left_part):\n        array[sorted_index] = left_part[left_array_index]\n        left_array_index += 1\n        sorted_index += 1\n    \n    while right_array_index < len(right_part):\n        array[sorted_index] = right_part[right_array_index]\n        right_array_index += 1\n        sorted_index += 1\n\nif __name__ == '__main__':\n    pass"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should replace <code>pass</code> with a <code>numbers</code> list with these values: <code>[4, 10, 6, 14, 2, 1, 8, 5]</code></p>",
      "testString": "({ test: () =>  assert.equal(__userGlobals.get(\"numbers\"), \"[4, 10, 6, 14, 2, 1, 8, 5]\") })"
    },
    {
      "text": "<p>You should not have the <code>pass</code> keyword in the body of your <code>if</code> statement</p>",
      "testString": "({ test: () =>  assert(runPython(`\n    _Node(_code).find_ifs()[0].find_body().is_equivalent(\"numbers = [4, 10, 6, 14, 2, 1, 8, 5]\")\n`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>It's time to test the <code>merge_sort</code> function!</p>\n<p>Replace <code>pass</code> with a list called <code>numbers</code>, and assign this list to it: <code>[4, 10, 6, 14, 2, 1, 8, 5]</code></p>\n</section>",
  "translationPending": false,
  "block": "learn-data-structures-by-building-the-merge-sort-algorithm",
  "hasEditableBoundaries": true,
  "order": 9,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 28,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6606de006a82e05c9a65cebe",
  "title": "Step 51",
  "challengeType": 20,
  "dashedName": "step-51",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        27,
        33
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "class Board:\n    def __init__(self, board):\n        self.board = board\n\n    def find_empty_cell(self):\n        for row, contents in enumerate(self.board):\n            try:\n                col = contents.index(0)\n                return row, col\n            except ValueError:\n                pass\n        return None\n\n    def valid_in_row(self, row, num):\n        return num not in self.board[row]\n\n    def valid_in_col(self, col, num):\n        return all(self.board[row][col] != num for row in range(9))\n\n    def valid_in_square(self, row, col, num):\n        row_start = (row // 3) * 3\n        col_start = (col // 3) * 3\n        for row_no in range(row_start, row_start + 3):\n            for col_no in range(col_start, col_start + 3):\n                if self.board[row_no][col_no] == num:\n                    return False\n        return True\n    def is_valid(self, empty, num):\n        row, col = empty\n        valid_in_row = self.valid_in_row(row, num)\n        valid_in_col = self.valid_in_col(col, num)\n        valid_in_square = self.valid_in_square(row, col, num)\npuzzle = [\n  [0, 0, 2, 0, 0, 8, 0, 0, 0],\n  [0, 0, 0, 0, 0, 3, 7, 6, 2],\n  [4, 3, 0, 0, 0, 0, 8, 0, 0],\n  [0, 5, 0, 0, 3, 0, 0, 9, 0],\n  [0, 4, 0, 0, 0, 0, 0, 2, 6],\n  [0, 0, 0, 4, 6, 7, 0, 0, 0],\n  [0, 8, 6, 7, 0, 4, 0, 0, 0],\n  [0, 0, 0, 5, 1, 9, 0, 0, 8],\n  [1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n\ngameboard = Board(puzzle)",
      "error": null,
      "seed": "class Board:\n    def __init__(self, board):\n        self.board = board\n\n    def find_empty_cell(self):\n        for row, contents in enumerate(self.board):\n            try:\n                col = contents.index(0)\n                return row, col\n            except ValueError:\n                pass\n        return None\n\n    def valid_in_row(self, row, num):\n        return num not in self.board[row]\n\n    def valid_in_col(self, col, num):\n        return all(self.board[row][col] != num for row in range(9))\n\n    def valid_in_square(self, row, col, num):\n        row_start = (row // 3) * 3\n        col_start = (col // 3) * 3\n        for row_no in range(row_start, row_start + 3):\n            for col_no in range(col_start, col_start + 3):\n                if self.board[row_no][col_no] == num:\n                    return False\n        return True\n    def is_valid(self, empty, num):\n        row, col = empty\n        valid_in_row = self.valid_in_row(row, num)\n        valid_in_col = self.valid_in_col(col, num)\n        valid_in_square = self.valid_in_square(row, col, num)\npuzzle = [\n  [0, 0, 2, 0, 0, 8, 0, 0, 0],\n  [0, 0, 0, 0, 0, 3, 7, 6, 2],\n  [4, 3, 0, 0, 0, 0, 8, 0, 0],\n  [0, 5, 0, 0, 3, 0, 0, 9, 0],\n  [0, 4, 0, 0, 0, 0, 0, 2, 6],\n  [0, 0, 0, 4, 6, 7, 0, 0, 0],\n  [0, 8, 6, 7, 0, 4, 0, 0, 0],\n  [0, 0, 0, 5, 1, 9, 0, 0, 8],\n  [1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n\ngameboard = Board(puzzle)"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should return a call to the <code>all()</code> function passing it a list containing <code>valid_in_row</code>, <code>valid_in_col</code>, and <code>valid_in_square</code>.</p>",
      "testString": "({ test: () => assert(runPython(`\nimport itertools\np = list(itertools.permutations([\"valid_in_row\", \"valid_in_col\", \"valid_in_square\"]))\nl = [\", \".join(i) for i in p]\nnode = _Node(_code).find_class(\"Board\").find_function(\"is_valid\")\nany([node.has_return(f\"all([{i}])\") for i in l])\n`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>To verify that the number is valid after all those checks, call the <code>all()</code> function and pass it a list containing <code>valid_in_row</code>, <code>valid_in_col</code>, and <code>valid_in_square</code>. Also, return the result of the <code>all()</code> call.</p>\n</section>",
  "translationPending": false,
  "block": "learn-classes-and-objects-by-building-a-sudoku-solver",
  "hasEditableBoundaries": true,
  "order": 11,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 50,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
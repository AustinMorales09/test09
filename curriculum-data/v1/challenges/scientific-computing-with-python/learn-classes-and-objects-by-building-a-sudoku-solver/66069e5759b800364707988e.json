{
  "id": "66069e5759b800364707988e",
  "title": "Step 10",
  "challengeType": 20,
  "dashedName": "step-10",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        18
      ],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "class Board:\n    def __init__(self):\n        pass\n\npuzzle = [\n  [0, 0, 2, 0, 0, 8, 0, 0, 0],\n  [0, 0, 0, 0, 0, 3, 7, 6, 2],\n  [4, 3, 0, 0, 0, 0, 8, 0, 0],\n  [0, 5, 0, 0, 3, 0, 0, 9, 0],\n  [0, 4, 0, 0, 0, 0, 0, 2, 6],\n  [0, 0, 0, 4, 6, 7, 0, 0, 0],\n  [0, 8, 6, 7, 0, 4, 0, 0, 0],\n  [0, 0, 0, 5, 1, 9, 0, 0, 8],\n  [1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n\ngameboard = Board()",
      "error": null,
      "seed": "class Board:\n    def __init__(self):\n        pass\n\npuzzle = [\n  [0, 0, 2, 0, 0, 8, 0, 0, 0],\n  [0, 0, 0, 0, 0, 3, 7, 6, 2],\n  [4, 3, 0, 0, 0, 0, 8, 0, 0],\n  [0, 5, 0, 0, 3, 0, 0, 9, 0],\n  [0, 4, 0, 0, 0, 0, 0, 2, 6],\n  [0, 0, 0, 4, 6, 7, 0, 0, 0],\n  [0, 8, 6, 7, 0, 4, 0, 0, 0],\n  [0, 0, 0, 5, 1, 9, 0, 0, 8],\n  [1, 7, 0, 0, 0, 6, 0, 0, 5]\n]\n\ngameboard = Board()"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>__init__</code> method should have two parameters in the order: <code>self</code>, and <code>board</code>.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_class(\"Board\").find_function(\"__init__\").has_args(\"self, board\")`)) })"
    },
    {
      "text": "<p>Your <code>gameboard</code> variable should have the value of <code>Board(puzzle)</code>.</p>",
      "testString": "({ test: () => assert(runPython(`_Node(_code).find_variable(\"gameboard\").is_equivalent(\"gameboard = Board(puzzle)\")`)) })"
    }
  ],
  "description": "<section id=\"description\">\n<p>Going back to the <code>__init__</code> method, it requires an additional parameter representing the puzzle to solve.</p>\n<p>Add a second parameter named <code>board</code> to the <code>__init__</code> method and fix the instantiation of <code>gameboard</code> by passing it the <code>puzzle</code> list as you would pass an argument to a function call.</p>\n</section>",
  "translationPending": false,
  "block": "learn-classes-and-objects-by-building-a-sudoku-solver",
  "hasEditableBoundaries": true,
  "order": 11,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
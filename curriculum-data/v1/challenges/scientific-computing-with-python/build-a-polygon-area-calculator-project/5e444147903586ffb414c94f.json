{
  "id": "5e444147903586ffb414c94f",
  "title": "Build a Polygon Area Calculator Project",
  "challengeType": 23,
  "forumTopicId": 462363,
  "dashedName": "build-a-polygon-area-calculator-project",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "main.py"
      ],
      "name": "main",
      "ext": "py",
      "path": "main.py",
      "fileKey": "mainpy",
      "contents": "class Rectangle:\n    pass\n\nclass Square:\n    pass",
      "error": null,
      "seed": "class Rectangle:\n    pass\n\nclass Square:\n    pass"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "main.py"
        ],
        "name": "main",
        "ext": "py",
        "path": "main.py",
        "fileKey": "mainpy",
        "contents": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def __str__(self):\n        return f'Rectangle(width={self.width}, height={self.height})'\n\n    def set_width(self, width):\n        self.width = width\n    \n    def set_height(self, height):\n        self.height = height\n\n    def get_area(self):\n        area = self.width * self.height\n        return area\n\n    def get_perimeter(self):\n        perimeter = self.width * 2 + self.height * 2\n        return perimeter\n    \n    def get_diagonal(self):\n        diagonal = (self.width ** 2 + self.height ** 2) ** 0.5        \n        return diagonal\n    \n    def get_picture(self):\n        if self.width < 50 and self.height < 50:\n            picture = f'{\"*\"*self.width}\\n'*self.height            \n            return picture\n        else:            \n            return 'Too big for picture.'\n    \n    def get_amount_inside(self, polygon):\n        h_number = self.height // polygon.height\n        w_number = self.width // polygon.width\n        repetition = h_number * w_number        \n        return repetition\n        \n\nclass Square(Rectangle):\n    def __init__(self, side):\n        self.width = side\n        self.height = side\n\n    def __str__(self):\n        return f'Square(side={self.width})'\n    \n    def set_width(self, side):\n        self.width = side\n        self.height = side\n    \n    def set_height(self, side):\n        self.height = side\n        self.width = side\n    \n    def set_side(self,side):\n        self.width = side\n        self.height = side\n",
        "error": null,
        "seed": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def __str__(self):\n        return f'Rectangle(width={self.width}, height={self.height})'\n\n    def set_width(self, width):\n        self.width = width\n    \n    def set_height(self, height):\n        self.height = height\n\n    def get_area(self):\n        area = self.width * self.height\n        return area\n\n    def get_perimeter(self):\n        perimeter = self.width * 2 + self.height * 2\n        return perimeter\n    \n    def get_diagonal(self):\n        diagonal = (self.width ** 2 + self.height ** 2) ** 0.5        \n        return diagonal\n    \n    def get_picture(self):\n        if self.width < 50 and self.height < 50:\n            picture = f'{\"*\"*self.width}\\n'*self.height            \n            return picture\n        else:            \n            return 'Too big for picture.'\n    \n    def get_amount_inside(self, polygon):\n        h_number = self.height // polygon.height\n        w_number = self.width // polygon.width\n        repetition = h_number * w_number        \n        return repetition\n        \n\nclass Square(Rectangle):\n    def __init__(self, side):\n        self.width = side\n        self.height = side\n\n    def __str__(self):\n        return f'Square(side={self.width})'\n    \n    def set_width(self, side):\n        self.width = side\n        self.height = side\n    \n    def set_height(self, side):\n        self.height = side\n        self.width = side\n    \n    def set_side(self,side):\n        self.width = side\n        self.height = side\n"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>Square</code> class should be a subclass of the <code>Rectangle</code> class.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    \n    def test_subclass(self):\n        actual = issubclass(shape_calculator.Square, shape_calculator.Rectangle)\n        expected = True\n        self.assertEqual(actual, expected, 'Expected Square class to be a subclass of the Rectangle class.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>The <code>Square</code> class should be a distinct class from the <code>Rectangle</code> class.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None    \n    \n    def test_distinct_classes(self):\n        actual = shape_calculator.Square is not shape_calculator.Rectangle\n        expected = True\n        self.assertEqual(actual, expected, 'Expected Square class to be a distinct class from the Rectangle class.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>A square object should be an instance of the <code>Square</code> class and the <code>Rectangle</code> class.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_square_is_square_and_rectangle(self):\n        actual = isinstance(self.sq, shape_calculator.Square) and isinstance(self.sq, shape_calculator.Rectangle)\n        expected = True\n        self.assertEqual(actual, expected, 'Expected square object to be an instance of the Square class and the Rectangle class.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>The string representation of <code>Rectangle(3, 6)</code> should be <code>Rectangle(width=3, height=6)</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_rectangle_string(self):\n        actual = str(self.rect)\n        expected = \"Rectangle(width=3, height=6)\"\n        self.assertEqual(actual, expected, 'Expected string representation of rectangle to be \"Rectangle(width=3, height=6)\"')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>The string representation of <code>Square(5)</code> should be <code>Square(side=5)</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_square_string(self):\n        actual = str(self.sq)\n        expected = \"Square(side=5)\"\n        self.assertEqual(actual, expected, 'Expected string representation of square to be \"Square(side=5)\"')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Rectangle(3, 6).get_area()</code> should return <code>18</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_area(self):\n        actual = self.rect.get_area()\n        expected = 18\n        self.assertEqual(actual, expected, 'Expected area of rectangle to be 18')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Square(5).get_area()</code> should return <code>25</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_area(self):        \n        actual = self.sq.get_area()\n        expected = 25\n        self.assertEqual(actual, expected, 'Expected area of square to be 25')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Rectangle(3, 6).get_perimeter()</code> should return <code>18</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_perimeter(self):\n        actual = self.rect.get_perimeter()\n        expected = 18\n        self.assertEqual(actual, expected, 'Expected perimeter of rectangle to be 18')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Square(5).get_perimeter()</code> should return <code>20</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_perimeter(self):\n        actual = self.sq.get_perimeter()\n        expected = 20\n        self.assertEqual(actual, expected, 'Expected perimeter of square to be 20')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Rectangle(3, 6).get_diagonal()</code> should return <code>6.708203932499369</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_diagonal(self):\n        actual = self.rect.get_diagonal()\n        expected = 6.708203932499369\n        self.assertEqual(actual, expected, 'Expected diagonal of rectangle to be 6.708203932499369')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Square(5).get_diagonal()</code> should return <code>7.0710678118654755</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_diagonal(self):\n        actual = self.sq.get_diagonal()\n        expected = 7.0710678118654755\n        self.assertEqual(actual, expected, 'Expected diagonal of square to be 7.0710678118654755')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>An instance of the <code>Rectangle</code> class should have a different string representation after setting new values.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)        \n    \n    def test_set_attributes(self):\n        self.rect.set_width(7)\n        self.rect.set_height(8)        \n        actual = str(self.rect)\n        expected = \"Rectangle(width=7, height=8)\"\n        self.assertEqual(actual, expected, 'Expected string representation of rectangle after setting new values to be \"Rectangle(width=7, height=8)\"')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>An instance of the <code>Square</code> class should have a different string representation after setting new values by using <code>.set_side()</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_set_attributes(self):        \n        self.sq.set_side(2)        \n        actual = str(self.sq)\n        expected = \"Square(side=2)\"\n        self.assertEqual(actual, expected, 'Expected string representation of square after setting new values to be \"Square(side=2)\"')   \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>An instance of the <code>Square</code> class should have a different string representation after setting new values by using <code>.set_width()</code> or <code>set_height()</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_set_attributes(self):        \n        self.sq.set_height(2)        \n        actual = str(self.sq)\n        expected = \"Square(side=2)\"\n        self.assertEqual(actual, expected, 'Expected string representation of square after setting new values to be \"Square(side=2)\"')\n        self.sq.set_width(4)\n        actual = str(self.sq)\n        expected = \"Square(side=4)\"\n        self.assertEqual(actual, expected, 'Expected string representation of square after setting width to be \"Square(side=4)\"')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>The <code>.get_picture()</code> method should return a different string representation of a <code>Rectangle</code> instance.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_rectangle_picture(self):\n        self.rect.set_width(7)\n        self.rect.set_height(3)\n        actual = self.rect.get_picture()\n        expected = \"*******\\\\n*******\\\\n*******\\\\n\"\n        self.assertEqual(actual, expected, 'Expected rectangle picture to be different.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>The <code>.get_picture()</code> method should return a different string representation of a <code>Square</code> instance.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.sq = shape_calculator.Square(5)\n    \n    def test_square_picture(self):\n        self.sq.set_side(2)\n        actual = self.sq.get_picture()\n        expected = \"**\\\\n**\\\\n\"\n        self.assertEqual(actual, expected, 'Expected square picture to be different.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p>The <code>.get_picture()</code> method should return the string <code>Too big for picture.</code> if the <code>width</code> or <code>height</code> attributes are larger than <code>50</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_big_picture(self):\n        self.rect.set_width(51)\n        self.rect.set_height(3)\n        actual = self.rect.get_picture()\n        expected = \"Too big for picture.\"\n        self.assertEqual(actual, expected, 'Expected message: \"Too big for picture.\"')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Rectangle(15,10).get_amount_inside(Square(5))</code> should return <code>6</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n        self.sq = shape_calculator.Square(5)\n    \n    def test_get_amount_inside(self):\n        self.rect.set_height(10)\n        self.rect.set_width(15)\n        actual = self.rect.get_amount_inside(self.sq)\n        expected = 6\n        self.assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 6.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Rectangle(4,8).get_amount_inside(Rectangle(3, 6))</code> should return <code>1</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_get_amount_inside_two_rectangles(self):\n        rect2 = shape_calculator.Rectangle(4, 8)\n        actual = rect2.get_amount_inside(self.rect)\n        expected = 1\n        self.assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 1.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    },
    {
      "text": "<p><code>Rectangle(2,3).get_amount_inside(Rectangle(3, 6))</code> should return <code>0</code>.</p>",
      "testString": "({\n  test: () => {\n    pyodide.FS.writeFile('/home/pyodide/shape_calculator.py', code);\n    pyodide.FS.writeFile('/home/pyodide/test_module.py',`\nimport unittest\nimport shape_calculator\nfrom importlib import reload\nreload(shape_calculator)\nclass UnitTests(unittest.TestCase):\n    maxDiff = None\n    def setUp(self):\n        self.rect = shape_calculator.Rectangle(3, 6)\n    \n    def test_get_amount_inside_none(self):\n        rect2 = shape_calculator.Rectangle(2, 3)\n        actual = rect2.get_amount_inside(self.rect)\n        expected = 0\n        self.assertEqual(actual, expected, 'Expected \"get_amount_inside\" to return 0.')    \n`);\n    const testCode = `\nfrom unittest import main\nfrom importlib import reload\nimport test_module\nreload(test_module)\nt = main(module='test_module', exit=False)\nt.result.wasSuccessful()\n`;\n    const out = runPython(testCode);\n    assert(out);\n  }\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>In this project you will use object oriented programming to create a <code>Rectangle</code> class and a <code>Square</code> class. The <code>Square</code> class should be a subclass of <code>Rectangle</code>, and inherit its methods and attributes.</p>\n<h2>Rectangle class</h2>\n<p>When a Rectangle object is created, it should be initialized with <code>width</code> and <code>height</code> attributes. The class should also contain the following methods:</p>\n<ul>\n<li><code>set_width</code></li>\n<li><code>set_height</code></li>\n<li><code>get_area</code>: Returns area (<code>width * height</code>)</li>\n<li><code>get_perimeter</code>: Returns perimeter (<code>2 * width + 2 * height</code>)</li>\n<li><code>get_diagonal</code>: Returns diagonal (<code>(width ** 2 + height ** 2) ** .5</code>)</li>\n<li><code>get_picture</code>: Returns a string that represents the shape using lines of \"*\". The number of lines should be equal to the height and the number of \"*\" in each line should be equal to the width. There should be a new line (<code>\\n</code>) at the end of each line. If the width or height is larger than 50, this should return the string: \"Too big for picture.\".</li>\n<li><code>get_amount_inside</code>: Takes another shape (square or rectangle) as an argument. Returns the number of times the passed in shape could fit inside the shape (with no rotations). For instance, a rectangle with a width of 4 and a height of 8 could fit in two squares with sides of 4.</li>\n</ul>\n<p>Additionally, if an instance of a <code>Rectangle</code> is represented as a string, it should look like: <code>Rectangle(width=5, height=10)</code></p>\n<h2>Square class</h2>\n<p>The <code>Square</code> class should be a subclass of <code>Rectangle</code>. When a <code>Square</code> object is created, a single side length is passed in. The <code>__init__</code> method should store the side length in both the <code>width</code> and <code>height</code> attributes from the <code>Rectangle</code> class.</p>\n<p>The <code>Square</code> class should be able to access the <code>Rectangle</code> class methods but should also contain a <code>set_side</code> method. If an instance of a <code>Square</code> is represented as a string, it should look like: <code>Square(side=9)</code></p>\n<p>Additionally, the <code>set_width</code> and <code>set_height</code> methods on the <code>Square</code> class should set both the width and height.</p>\n<h2>Usage example</h2>\n<pre><code class=\"language-py\">rect = Rectangle(10, 5)\nprint(rect.get_area())\nrect.set_height(3)\nprint(rect.get_perimeter())\nprint(rect)\nprint(rect.get_picture())\n\nsq = Square(9)\nprint(sq.get_area())\nsq.set_side(4)\nprint(sq.get_diagonal())\nprint(sq)\nprint(sq.get_picture())\n\nrect.set_height(8)\nrect.set_width(16)\nprint(rect.get_amount_inside(sq))\n</code></pre>\n<p>That code should return:</p>\n<pre><code class=\"language-bash\">50\n26\nRectangle(width=10, height=3)\n**********\n**********\n**********\n\n81\n5.656854249492381\nSquare(side=4)\n****\n****\n****\n****\n\n8\n</code></pre>\n<p>Note: open the browser console with F12 to see a more verbose output of the tests.</p>\n</section>",
  "translationPending": false,
  "block": "build-a-polygon-area-calculator-project",
  "hasEditableBoundaries": false,
  "order": 14,
  "superOrder": 7,
  "certification": "scientific-computing-with-python",
  "superBlock": "scientific-computing-with-python",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "Python",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
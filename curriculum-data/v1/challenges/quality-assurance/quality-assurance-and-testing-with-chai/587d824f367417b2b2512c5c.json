{
  "id": "587d824f367417b2b2512c5c",
  "title": "Simulate Actions Using a Headless Browser",
  "challengeType": 2,
  "dashedName": "simulate-actions-using-a-headless-browser",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>All tests should pass.</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=4').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>As a reminder, this project is being built upon the following starter project on <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Gitpod</a>, or cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.</p>\n<p>In the next challenges, you'll simulate human interaction with a page by using a headless browser.</p>\n<p>Headless browsers are web browsers without a GUI. They are able to render and interpret HTML, CSS, and JavaScript the same way a regular browser would, making them particularly useful for testing web pages.</p>\n<p>For the following challenges you'll use Zombie.js, which is a lightweight headless browser that doesn't rely on additional binaries to be installed. But there are many other, more powerful headless browser options.</p>\n<p>Mocha allows you to run some code before any of the actual tests run. This can be useful to do things like add entries to a database which will be used in the rest of the tests.</p>\n<p>With a headless browser, before running tests, you need to <strong>visit</strong> the page you'll test.</p>\n<p>The <code>suiteSetup</code> hook is executed only once at the beginning of a test suite.</p>\n<p>There are several other hook types that can execute code before each test, after each test, or at the end of a test suite. See the Mocha docs for more information.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Within <code>tests/2_functional-tests.js</code>, immediately after the <code>Browser</code> declaration, add your project URL to the <code>site</code> property of the variable:</p>\n<pre><code class=\"language-js\">Browser.site = 'http://localhost:3000'; // Your URL here\n</code></pre>\n<p>Then at the root level of the <code>'Functional Tests with Zombie.js'</code> suite, instantiate a new instance of the <code>Browser</code> object with the following code:</p>\n<pre><code class=\"language-js\">const browser = new Browser();\n</code></pre>\n<p>And use the <code>suiteSetup</code> hook to direct the <code>browser</code> to the <code>/</code> route with the following code:</p>\n<pre><code class=\"language-js\">suiteSetup(function(done) {\n  return browser.visit('/', done);\n});\n</code></pre>\n</section>",
  "translationPending": false,
  "block": "quality-assurance-and-testing-with-chai",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 6,
  "certification": "quality-assurance",
  "superBlock": "quality-assurance",
  "challengeOrder": 22,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d8250367417b2b2512c5d",
  "title": "Run Functional Tests Using a Headless Browser",
  "challengeType": 2,
  "forumTopicId": 301595,
  "dashedName": "run-functional-tests-using-a-headless-browser",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>All tests should pass.</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>You should assert that the headless browser request succeeded.</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'browser.success');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>You should assert that the text inside the element <code>span#name</code> is <code>'Cristoforo'</code>.</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'browser.text');\n      assert.match(data.assertions[1].args[0], /('|\")span#name\\1/);\n      assert.match(data.assertions[1].args[1], /('|\")Cristoforo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>You should assert that the text inside the element <code>span#surname</code> is <code>'Colombo'</code>.</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[2].method, 'browser.text');\n      assert.match(data.assertions[2].args[0], /('|\")span#surname\\1/);\n      assert.match(data.assertions[2].args[1], /('|\")Colombo\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>You should assert that the element <code>span#dates</code> exist and its count is 1.</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=5').then(\n    (data) => {\n      assert.equal(data.assertions[3].method, 'browser.elements');\n      assert.match(data.assertions[3].args[0], /('|\")span#dates\\1/);\n      assert.equal(data.assertions[3].args[1], 1);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>As a reminder, this project is being built upon the following starter project on <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Gitpod</a>, or cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.</p>\n<p>On the page there's an input form. It sends data to the <code>PUT /travellers</code> endpoint as an AJAX request.</p>\n<p>When the request successfully completes, the client code appends a <code>&#x3C;div></code> containing the information in the response to the DOM.</p>\n<p>Here's an example of how to use Zombie.js to interact with the form:</p>\n<pre><code class=\"language-js\">test('Submit the surname \"Polo\" in the HTML form', function (done) {\n  browser.fill('surname', 'Polo').then(() => {\n    browser.pressButton('submit', () => {\n      browser.assert.success();\n      browser.assert.text('span#name', 'Marco');\n      browser.assert.text('span#surname', 'Polo');\n      browser.assert.elements('span#dates', 1);\n      done();\n    });\n  });\n});\n</code></pre>\n<p>First, the <code>fill</code> method of the <code>browser</code> object fills the <code>surname</code> field of the form with the value <code>'Polo'</code>. <code>fill</code> returns a promise, so <code>then</code> is chained off of it.</p>\n<p>Within the <code>then</code> callback, the <code>pressButton</code> method of the <code>browser</code> object is used to invoke the form's <code>submit</code> event listener. The <code>pressButton</code> method is asynchronous.</p>\n<p>Then, once a response is received from the AJAX request, a few assertions are made confirming:</p>\n<ol>\n<li>The status of the response is <code>200</code></li>\n<li>The text within the <code>&#x3C;span id='name'>&#x3C;/span></code> element matches <code>'Marco'</code></li>\n<li>The text within the <code>&#x3C;span id='surname'>&#x3C;/span></code> element matches <code>'Polo'</code></li>\n<li>There is <code>1</code> <code>&#x3C;span id='dates'>&#x3C;/span></code> element.</li>\n</ol>\n<p>Finally, the <code>done</code> callback is invoked, which is needed due to the asynchronous test.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Within <code>tests/2_functional-tests.js</code>, in the <code>'Submit the surname \"Colombo\" in the HTML form'</code> test (<code>// #5</code>), automate the following:</p>\n<ol>\n<li>Fill in the form with the surname <code>Colombo</code></li>\n<li>Press the submit button</li>\n</ol>\n<p>And within the <code>pressButton</code> callback:</p>\n<ol>\n<li>Assert that status is OK <code>200</code></li>\n<li>Assert that the text inside the element <code>span#name</code> is <code>'Cristoforo'</code></li>\n<li>Assert that the text inside the element <code>span#surname</code> is <code>'Colombo'</code></li>\n<li>Assert that the element(s) <code>span#dates</code> exist and their count is <code>1</code></li>\n</ol>\n<p>Do not forget to remove the <code>assert.fail()</code> call.</p>\n</section>",
  "translationPending": false,
  "block": "quality-assurance-and-testing-with-chai",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 6,
  "certification": "quality-assurance",
  "superBlock": "quality-assurance",
  "challengeOrder": 23,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
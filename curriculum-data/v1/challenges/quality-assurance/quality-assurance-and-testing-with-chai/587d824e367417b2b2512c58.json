{
  "id": "587d824e367417b2b2512c58",
  "title": "Run Functional Tests on API Endpoints using Chai-HTTP",
  "challengeType": 2,
  "forumTopicId": 301593,
  "dashedName": "run-functional-tests-on-api-endpoints-using-chai-http",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>All tests should pass</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=0').then(\n    (data) => {\n      assert.equal(data.state, 'passed');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>You should test for <code>res.status</code> == 200</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=0').then(\n    (data) => {\n      assert.equal(data.assertions[0].method, 'equal');\n      assert.equal(data.assertions[0].args[0], 'res.status');\n      assert.equal(data.assertions[0].args[1], '200');\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>You should test for <code>res.text</code> == <code>'hello Guest'</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/_api/get-tests?type=functional&n=0').then(\n    (data) => {\n      assert.equal(data.assertions[1].method, 'equal');\n      assert.equal(data.assertions[1].args[0], 'res.text');\n      assert.match(data.assertions[1].args[1], /('|\")hello Guest\\1/);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>As a reminder, this project is being built upon the following starter project on <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Gitpod</a>, or cloned from <a href=\"https://github.com/freeCodeCamp/boilerplate-mochachai/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">GitHub</a>.</p>\n<p>Mocha allows you to test asynchronous operations like calls to API endpoints with a plugin called <code>chai-http</code>.</p>\n<p>The following is an example of a test using <code>chai-http</code> for a suite called <code>'GET /hello?name=[name] => \"hello [name]\"'</code>:</p>\n<pre><code class=\"language-js\">suite('GET /hello?name=[name] => \"hello [name]\"', function () {\n  test('?name=John', function (done) {\n    chai\n      .request(server)\n      .keepOpen()\n      .get('/hello?name=John')\n      .end(function (err, res) {\n        assert.equal(res.status, 200, 'Response status should be 200');\n        assert.equal(res.text, 'hello John', 'Response should be \"hello John\"');\n        done();\n      });\n  });\n});\n</code></pre>\n<p>The test sends a <code>GET</code> request to the server with a name as a URL query string (<code>?name=John</code>). In the <code>end</code> method's callback function, the response object (<code>res</code>) is received and contains the <code>status</code> property.</p>\n<p>The first <code>assert.equal</code> checks if the status is equal to <code>200</code>. The second <code>assert.equal</code> checks that the response string (<code>res.text</code>) is equal to <code>\"hello John\"</code>.</p>\n<p>Also, notice the <code>done</code> parameter in the test's callback function. Calling it without an argument at the end of a test is necessary to signal that the asynchronous operation is complete.</p>\n<p>Finally, note the <code>keepOpen</code> method just after the <code>request</code> method. Normally you would run your tests from the command line, or as part of an automated integration process, and you could let <code>chai-http</code> start and stop your server automatically.</p>\n<p>However, the tests that run when you submit the link to your project require your server to be up, so you need to use the <code>keepOpen</code> method to prevent <code>chai-http</code> from stopping your server.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Within <code>tests/2_functional-tests.js</code>, alter the <code>'Test GET /hello with no name'</code> test (<code>// #1</code>) to assert the <code>status</code> and the <code>text</code> of the response to make the test pass. Do not alter the arguments passed to the asserts.</p>\n<p>There should be no URL query. Without a name URL query, the endpoint responds with <code>hello Guest</code>.</p>\n</section>",
  "translationPending": false,
  "block": "quality-assurance-and-testing-with-chai",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 6,
  "certification": "quality-assurance",
  "superBlock": "quality-assurance",
  "challengeOrder": 18,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
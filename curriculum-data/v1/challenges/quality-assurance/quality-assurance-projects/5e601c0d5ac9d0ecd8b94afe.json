{
  "id": "5e601c0d5ac9d0ecd8b94afe",
  "title": "American British Translator",
  "challengeType": 4,
  "forumTopicId": 462358,
  "dashedName": "american-british-translator",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should provide your own project, not the example URL.</p>",
      "testString": "(getUserInput) => {\n  assert(\n    !/.*\\/american-british-translator\\.freecodecamp\\.rocks/.test(\n      getUserInput('url')\n    )\n  );\n};"
    },
    {
      "text": "<p>You can <code>POST</code> to <code>/api/translate</code> with a body containing <code>text</code> with the text to translate and <code>locale</code> with either <code>american-to-british</code> or <code>british-to-american</code>. The returned object should contain the submitted <code>text</code> and <code>translation</code> with the translated text.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const text = 'Mangoes are my favorite fruit.';\n    const locale = 'american-to-british';\n    const output = {\n      text: 'Mangoes are my favorite fruit.',\n      translation:\n        'Mangoes are my <span class=\"highlight\">favourite</span> fruit.'\n    };\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>The <code>/api/translate</code> route should handle the way time is written in American and British English. For example, ten thirty is written as \"10.30\" in British English and \"10:30\" in American English. The <code>span</code> element should wrap the entire time string, i.e. <code>&#x3C;span class=\"highlight\">10:30&#x3C;/span></code>.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const text = 'Lunch is at 12:15 today.';\n    const locale = 'american-to-british';\n    const output = {\n      text: text,\n      translation: 'Lunch is at <span class=\"highlight\">12.15</span> today.'\n    };\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>The <code>/api/translate</code> route should also handle the way titles/honorifics are abbreviated in American and British English. For example, Doctor Wright is abbreviated as \"Dr Wright\" in British English and \"Dr. Wright\" in American English. See <code>/components/american-to-british-titles.js</code> for the different titles your application should handle.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const text = 'Dr. Grosh will see you now.';\n    const locale = 'american-to-british';\n    const output = {\n      text: text,\n      translation: '<span class=\"highlight\">Dr</span> Grosh will see you now.'\n    };\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>Wrap any translated spelling or terms with <code>&#x3C;span class=\"highlight\">...&#x3C;/span></code> tags so they appear in green.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const text = 'Mangoes are my favorite fruit.';\n    const locale = 'american-to-british';\n    const output = {\n      text: 'Mangoes are my favorite fruit.',\n      translation:\n        'Mangoes are my <span class=\"highlight\">favourite</span> fruit.'\n    };\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>If one or more of the required fields is missing, return <code>{ error: 'Required field(s) missing' }</code>.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const locale = 'american-to-british';\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, 'Required field(s) missing');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>If <code>text</code> is empty, return <code>{ error: 'No text to translate' }</code></p>",
      "testString": "async (getUserInput) => {\n  try {\n    const locale = 'american-to-british';\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text: '', locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, 'No text to translate');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>If <code>locale</code> does not match one of the two specified locales, return <code>{ error: 'Invalid value for locale field' }</code>.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const text = \"Ceci n'est pas une pipe\";\n    const locale = 'french-to-american';\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.property(parsed, 'error');\n    assert.equal(parsed.error, 'Invalid value for locale field');\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>If <code>text</code> requires no translation, return <code>\"Everything looks good to me!\"</code> for the <code>translation</code> value.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const locale = 'british-to-american';\n    const output = {\n      text: 'SaintPeter and nhcarrigan give their regards!',\n      translation: 'Everything looks good to me!'\n    };\n    let data = await fetch(getUserInput('url') + '/api/translate', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text: output.text, locale })\n    });\n    let parsed = await data.json();\n    assert.isObject(parsed);\n    assert.isObject(parsed);\n    assert.property(parsed, 'text');\n    assert.property(parsed, 'translation');\n    assert.deepEqual(parsed, output);\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>All 24 unit tests are complete and passing.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const getTests = await $.get(getUserInput('url') + '/_api/get-tests');\n    assert.isArray(getTests);\n    const unitTests = getTests.filter((test) => {\n      return !!test.context.match(/Unit Tests/gi);\n    });\n    assert.isAtLeast(unitTests.length, 24, 'At least 24 tests passed');\n    unitTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Tests in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    },
    {
      "text": "<p>All 6 functional tests are complete and passing.</p>",
      "testString": "async (getUserInput) => {\n  try {\n    const getTests = await $.get(getUserInput('url') + '/_api/get-tests');\n    assert.isArray(getTests);\n    const functTests = getTests.filter((test) => {\n      return !!test.context.match(/Functional Tests/gi);\n    });\n    assert.isAtLeast(functTests.length, 6, 'At least 6 tests passed');\n    functTests.forEach((test) => {\n      assert.equal(test.state, 'passed', 'Tests in Passed State');\n      assert.isAtLeast(\n        test.assertions.length,\n        1,\n        'At least one assertion per test'\n      );\n    });\n  } catch (err) {\n    throw new Error(err.responseText || err.message);\n  }\n};"
    }
  ],
  "description": "<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://american-british-translator.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://american-british-translator.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-american-british-english-translator/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-american-british-english-translator/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<ul>\n<li>All logic can go into <code>/components/translator.js</code></li>\n<li>Complete the <code>/api/translate</code> route in <code>/routes/api.js</code></li>\n<li>Create all of the unit/functional tests in <code>tests/1_unit-tests.js</code> and <code>tests/2_functional-tests.js</code></li>\n<li>See the JavaScript files in <code>/components</code> for the different spelling and terms your application should translate</li>\n<li>To run the tests automatically, set <code>NODE_ENV</code> to <code>test</code> without quotes in the <code>.env</code> file</li>\n<li>To run the tests in the console, use the command <code>npm run test</code>.</li>\n</ul>\n<p>Write the following tests in <code>tests/1_unit-tests.js</code>:</p>\n<ul>\n<li>Translate <code>Mangoes are my favorite fruit.</code> to British English</li>\n<li>Translate <code>I ate yogurt for breakfast.</code> to British English</li>\n<li>Translate <code>We had a party at my friend's condo.</code> to British English</li>\n<li>Translate <code>Can you toss this in the trashcan for me?</code> to British English</li>\n<li>Translate <code>The parking lot was full.</code> to British English</li>\n<li>Translate <code>Like a high tech Rube Goldberg machine.</code> to British English</li>\n<li>Translate <code>To play hooky means to skip class or work.</code> to British English</li>\n<li>Translate <code>No Mr. Bond, I expect you to die.</code> to British English</li>\n<li>Translate <code>Dr. Grosh will see you now.</code> to British English</li>\n<li>Translate <code>Lunch is at 12:15 today.</code> to British English</li>\n<li>Translate <code>We watched the footie match for a while.</code> to American English</li>\n<li>Translate <code>Paracetamol takes up to an hour to work.</code> to American English</li>\n<li>Translate <code>First, caramelise the onions.</code> to American English</li>\n<li>Translate <code>I spent the bank holiday at the funfair.</code> to American English</li>\n<li>Translate <code>I had a bicky then went to the chippy.</code> to American English</li>\n<li>Translate <code>I've just got bits and bobs in my bum bag.</code> to American English</li>\n<li>Translate <code>The car boot sale at Boxted Airfield was called off.</code> to American English</li>\n<li>Translate <code>Have you met Mrs Kalyani?</code> to American English</li>\n<li>Translate <code>Prof Joyner of King's College, London.</code> to American English</li>\n<li>Translate <code>Tea time is usually around 4 or 4.30.</code> to American English</li>\n<li>Highlight translation in <code>Mangoes are my favorite fruit.</code></li>\n<li>Highlight translation in <code>I ate yogurt for breakfast.</code></li>\n<li>Highlight translation in <code>We watched the footie match for a while.</code></li>\n<li>Highlight translation in <code>Paracetamol takes up to an hour to work.</code></li>\n</ul>\n<p>Write the following tests in <code>tests/2_functional-tests.js</code>:</p>\n<ul>\n<li>Translation with text and locale fields: POST request to <code>/api/translate</code></li>\n<li>Translation with text and invalid locale field: POST request to <code>/api/translate</code></li>\n<li>Translation with missing text field: POST request to <code>/api/translate</code></li>\n<li>Translation with missing locale field: POST request to <code>/api/translate</code></li>\n<li>Translation with empty text: POST request to <code>/api/translate</code></li>\n<li>Translation with text that needs no translation: POST request to <code>/api/translate</code></li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "quality-assurance-projects",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 6,
  "certification": "quality-assurance",
  "superBlock": "quality-assurance",
  "challengeOrder": 4,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
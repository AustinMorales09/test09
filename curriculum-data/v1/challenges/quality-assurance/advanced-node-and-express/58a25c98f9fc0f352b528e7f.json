{
  "id": "58a25c98f9fc0f352b528e7f",
  "title": "Hashing Your Passwords",
  "challengeType": 2,
  "forumTopicId": 301553,
  "dashedName": "hashing-your-passwords",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>BCrypt should be a dependency.</p>",
      "testString": "async (getUserInput) => {\n  const url = new URL(\"/_api/package.json\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const packJson = await res.json()\n  assert.property(\n    packJson.dependencies,\n    'bcrypt',\n    'Your project should list \"bcrypt\" as a dependency'\n  );\n}"
    },
    {
      "text": "<p>BCrypt should be correctly required and implemented.</p>",
      "testString": "async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /require.*(\"|')bcrypt\\1/gi,\n    'You should have required bcrypt'\n  );\n  assert.match(\n    data,\n    /bcrypt.hashSync/gi,\n    'You should use hash the password in the registration'\n  );\n  assert.match(\n    data,\n    /bcrypt.compareSync/gi,\n    'You should compare the password to the hash in your strategy'\n  );\n}"
    }
  ],
  "description": "<section id=\"description\">\n<p>Going back to the information security section, you may remember that storing plaintext passwords is <em>never</em> okay. Now it is time to implement BCrypt to solve this issue.</p>\n<p><code>bcrypt@~5.0.0</code> has already been added as a dependency, so require it in your server. You will need to handle hashing in 2 key areas: where you handle registering/saving a new account, and when you check to see that a password is correct on login.</p>\n<p>Currently on your registration route, you insert a user's plaintext password into the database like so: <code>password: req.body.password</code>. Hash the passwords instead by adding the following before your database logic: <code>const hash = bcrypt.hashSync(req.body.password, 12);</code>, and replacing the <code>req.body.password</code> in the database saving with just <code>password: hash</code>.</p>\n<p>On your authentication strategy, you check for the following in your code before completing the process: <code>if (password !== user.password) return done(null, false);</code>. After making the previous changes, now <code>user.password</code> is a hash. Before making a change to the existing code, notice how the statement is checking if the password is <strong>not</strong> equal then return non-authenticated. With this in mind, change that code to look as follows to properly check the password entered against the hash:</p>\n<pre><code class=\"language-js\">if (!bcrypt.compareSync(password, user.password)) { \n  return done(null, false);\n}\n</code></pre>\n<p>That is all it takes to implement one of the most important security features when you have to store passwords.</p>\n<p>Submit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#hashing-your-passwords-1\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.</p>\n</section>",
  "translationPending": false,
  "block": "advanced-node-and-express",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 6,
  "certification": "quality-assurance",
  "superBlock": "quality-assurance",
  "challengeOrder": 11,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
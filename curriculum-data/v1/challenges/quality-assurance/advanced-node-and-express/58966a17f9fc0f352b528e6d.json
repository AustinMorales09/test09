{
  "id": "58966a17f9fc0f352b528e6d",
  "title": "Registration of New Users",
  "challengeType": 2,
  "forumTopicId": 301561,
  "dashedName": "registration-of-new-users",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have a <code>/register</code> route and display a registration form on the home page.</p>",
      "testString": "async (getUserInput) => {\n  const url = new URL(\"/_api/server.js\", getUserInput(\"url\"));\n  const res = await fetch(url);\n  const data = await res.text();\n  assert.match(\n    data,\n    /showRegistration:( |)true/gi,\n    'You should be passing the variable showRegistration as true to your render function for the homepage'\n  );\n  assert.match(\n    data,\n    /register[^]*post[^]*findOne[^]*username:( |)req.body.username/gi,\n    'You should have a route that accepts a POST request on /register that queries the db with findOne and the query being username: req.body.username'\n  );\n}"
    },
    {
      "text": "<p>Registering should work.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n  const user = `freeCodeCampTester${Date.now()}`;\n  const xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      test(this);\n    } else {\n      throw new Error(`${this.status} ${this.statusText}`);\n    }\n  };\n  xhttp.open('POST', url + '/register', true);\n  xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n  xhttp.send(`username=${user}&password=${user}`);\n  function test(xhttpRes) {\n    const data = xhttpRes.responseText;\n    assert.match(\n      data,\n      /Profile/gi,\n      'Register should work, and redirect successfully to the profile.'\n    );\n  }\n};"
    },
    {
      "text": "<p>Login should work.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n  const user = `freeCodeCampTester${Date.now()}`;\n  const xhttpReg = new XMLHttpRequest();\n  xhttpReg.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) {\n      login();\n    } else {\n      throw new Error(`${this.status} ${this.statusText}`);\n    }\n  };\n  xhttpReg.open('POST', url + '/register', true);\n  xhttpReg.setRequestHeader(\n    'Content-type',\n    'application/x-www-form-urlencoded'\n  );\n  xhttpReg.send(`username=${user}&password=${user}`);\n  function login() {\n    const xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function () {\n      if (this.readyState == 4 && this.status == 200) {\n        test(this);\n      } else {\n        throw new Error(`${this.status} ${this.statusText}`);\n      }\n    };\n    xhttp.open('POST', url + '/login', true);\n    xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    xhttp.send(`username=${user}&password=${user}`);\n  }\n  function test(xhttpRes) {\n    const data = xhttpRes.responseText;\n    assert.match(\n      data,\n      /Profile/gi,\n      'Login should work if previous test was done successfully and redirect successfully to the profile.'\n    );\n    assert.match(\n      data,\n      new RegExp(user, 'g'),\n      'The profile should properly display the welcome to the user logged in'\n    );\n  }\n};"
    },
    {
      "text": "<p>Logout should work.</p>",
      "testString": "(getUserInput) =>\n  $.ajax({\n    url: getUserInput('url') + '/logout',\n    type: 'GET',\n    xhrFields: { withCredentials: true }\n  }).then(\n    (data) => {\n      assert.match(data, /Home/gi, 'Logout should redirect to home');\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
    },
    {
      "text": "<p>Profile should no longer work after logout.</p>",
      "testString": "(getUserInput) =>\n  $.ajax({\n    url: getUserInput('url') + '/profile',\n    type: 'GET',\n    crossDomain: true,\n    xhrFields: { withCredentials: true }\n  }).then(\n    (data) => {\n      assert.match(\n        data,\n        /Home/gi,\n        'Profile should redirect to home when we are logged out now again'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.statusText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now you need to allow a new user on your site to register an account. In the <code>res.render</code> for the home page add a new variable to the object passed along - <code>showRegistration: true</code>. When you refresh your page, you should then see the registration form that was already created in your <code>index.pug</code> file. This form is set up to <strong>POST</strong> on <code>/register</code>, so create that route and have it add the user object to the database by following the logic below.</p>\n<p>The logic of the registration route should be as follows:</p>\n<ol>\n<li>Register the new user</li>\n<li>Authenticate the new user</li>\n<li>Redirect to <code>/profile</code></li>\n</ol>\n<p>The logic of step 1 should be as follows:</p>\n<ol>\n<li>Query database with <code>findOne</code></li>\n<li>If there is an error, call <code>next</code> with the error</li>\n<li>If a user is returned, redirect back to home</li>\n<li>If a user is not found and no errors occur, then <code>insertOne</code> into the database with the username and password. As long as no errors occur there, call <code>next</code> to go to step 2, authenticating the new user, which you already wrote the logic for in your <code>POST /login</code> route.</li>\n</ol>\n<pre><code class=\"language-js\">app.route('/register')\n  .post((req, res, next) => {\n    myDataBase.findOne({ username: req.body.username }, (err, user) => {\n      if (err) {\n        next(err);\n      } else if (user) {\n        res.redirect('/');\n      } else {\n        myDataBase.insertOne({\n          username: req.body.username,\n          password: req.body.password\n        },\n          (err, doc) => {\n            if (err) {\n              res.redirect('/');\n            } else {\n              // The inserted document is held within\n              // the ops property of the doc\n              next(null, doc.ops[0]);\n            }\n          }\n        )\n      }\n    })\n  },\n    passport.authenticate('local', { failureRedirect: '/' }),\n    (req, res, next) => {\n      res.redirect('/profile');\n    }\n  );\n</code></pre>\n<p>Submit your page when you think you've got it right. If you're running into errors, you can <a href=\"https://forum.freecodecamp.org/t/advanced-node-and-express/567135#registration-of-new-users-11\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">check out the project completed up to this point</a>.</p>\n<p><strong>NOTE:</strong> From this point onwards, issues can arise relating to the use of the <em>picture-in-picture</em> browser. If you are using an online IDE which offers a preview of the app within the editor, it is recommended to open this preview in a new tab.</p>\n</section>",
  "translationPending": false,
  "block": "advanced-node-and-express",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 6,
  "certification": "quality-assurance",
  "superBlock": "quality-assurance",
  "challengeOrder": 10,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
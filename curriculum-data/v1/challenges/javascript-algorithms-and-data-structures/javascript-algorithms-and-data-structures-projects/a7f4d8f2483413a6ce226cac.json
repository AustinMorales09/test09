{
  "id": "a7f4d8f2483413a6ce226cac",
  "title": "Roman Numeral Converter",
  "challengeType": 5,
  "forumTopicId": 16044,
  "dashedName": "roman-numeral-converter",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);",
      "error": null,
      "seed": "function convertToRoman(num) {\n return num;\n}\n\nconvertToRoman(36);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function convertToRoman(num) {\n  var ref = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];\n  var res = [];\n  ref.forEach(function(p) {\n    while (num >= p[1]) {\n      res.push(p[0]);\n      num -= p[1];\n    }\n  });\n  return res.join('');\n}",
        "error": null,
        "seed": "function convertToRoman(num) {\n  var ref = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];\n  var res = [];\n  ref.forEach(function(p) {\n    while (num >= p[1]) {\n      res.push(p[0]);\n      num -= p[1];\n    }\n  });\n  return res.join('');\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>convertToRoman(2)</code> should return the string <code>II</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(2), 'II');"
    },
    {
      "text": "<p><code>convertToRoman(3)</code> should return the string <code>III</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(3), 'III');"
    },
    {
      "text": "<p><code>convertToRoman(4)</code> should return the string <code>IV</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(4), 'IV');"
    },
    {
      "text": "<p><code>convertToRoman(5)</code> should return the string <code>V</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(5), 'V');"
    },
    {
      "text": "<p><code>convertToRoman(9)</code> should return the string <code>IX</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(9), 'IX');"
    },
    {
      "text": "<p><code>convertToRoman(12)</code> should return the string <code>XII</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(12), 'XII');"
    },
    {
      "text": "<p><code>convertToRoman(16)</code> should return the string <code>XVI</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(16), 'XVI');"
    },
    {
      "text": "<p><code>convertToRoman(29)</code> should return the string <code>XXIX</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(29), 'XXIX');"
    },
    {
      "text": "<p><code>convertToRoman(44)</code> should return the string <code>XLIV</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(44), 'XLIV');"
    },
    {
      "text": "<p><code>convertToRoman(45)</code> should return the string <code>XLV</code>.</p>",
      "testString": "assert.deepEqual(convertToRoman(45), 'XLV');"
    },
    {
      "text": "<p><code>convertToRoman(68)</code> should return the string <code>LXVIII</code></p>",
      "testString": "assert.deepEqual(convertToRoman(68), 'LXVIII');"
    },
    {
      "text": "<p><code>convertToRoman(83)</code> should return the string <code>LXXXIII</code></p>",
      "testString": "assert.deepEqual(convertToRoman(83), 'LXXXIII');"
    },
    {
      "text": "<p><code>convertToRoman(97)</code> should return the string <code>XCVII</code></p>",
      "testString": "assert.deepEqual(convertToRoman(97), 'XCVII');"
    },
    {
      "text": "<p><code>convertToRoman(99)</code> should return the string <code>XCIX</code></p>",
      "testString": "assert.deepEqual(convertToRoman(99), 'XCIX');"
    },
    {
      "text": "<p><code>convertToRoman(400)</code> should return the string <code>CD</code></p>",
      "testString": "assert.deepEqual(convertToRoman(400), 'CD');"
    },
    {
      "text": "<p><code>convertToRoman(500)</code> should return the string <code>D</code></p>",
      "testString": "assert.deepEqual(convertToRoman(500), 'D');"
    },
    {
      "text": "<p><code>convertToRoman(501)</code> should return the string <code>DI</code></p>",
      "testString": "assert.deepEqual(convertToRoman(501), 'DI');"
    },
    {
      "text": "<p><code>convertToRoman(649)</code> should return the string <code>DCXLIX</code></p>",
      "testString": "assert.deepEqual(convertToRoman(649), 'DCXLIX');"
    },
    {
      "text": "<p><code>convertToRoman(798)</code> should return the string <code>DCCXCVIII</code></p>",
      "testString": "assert.deepEqual(convertToRoman(798), 'DCCXCVIII');"
    },
    {
      "text": "<p><code>convertToRoman(891)</code> should return the string <code>DCCCXCI</code></p>",
      "testString": "assert.deepEqual(convertToRoman(891), 'DCCCXCI');"
    },
    {
      "text": "<p><code>convertToRoman(1000)</code> should return the string <code>M</code></p>",
      "testString": "assert.deepEqual(convertToRoman(1000), 'M');"
    },
    {
      "text": "<p><code>convertToRoman(1004)</code> should return the string <code>MIV</code></p>",
      "testString": "assert.deepEqual(convertToRoman(1004), 'MIV');"
    },
    {
      "text": "<p><code>convertToRoman(1006)</code> should return the string <code>MVI</code></p>",
      "testString": "assert.deepEqual(convertToRoman(1006), 'MVI');"
    },
    {
      "text": "<p><code>convertToRoman(1023)</code> should return the string <code>MXXIII</code></p>",
      "testString": "assert.deepEqual(convertToRoman(1023), 'MXXIII');"
    },
    {
      "text": "<p><code>convertToRoman(2014)</code> should return the string <code>MMXIV</code></p>",
      "testString": "assert.deepEqual(convertToRoman(2014), 'MMXIV');"
    },
    {
      "text": "<p><code>convertToRoman(3999)</code> should return the string <code>MMMCMXCIX</code></p>",
      "testString": "assert.deepEqual(convertToRoman(3999), 'MMMCMXCIX');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Convert the given number into a roman numeral.</p>\n<table>\n<thead>\n<tr>\n<th>Roman numerals</th>\n<th>Arabic numerals</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>CM</td>\n<td>900</td>\n</tr>\n<tr>\n<td>D</td>\n<td>500</td>\n</tr>\n<tr>\n<td>CD</td>\n<td>400</td>\n</tr>\n<tr>\n<td>C</td>\n<td>100</td>\n</tr>\n<tr>\n<td>XC</td>\n<td>90</td>\n</tr>\n<tr>\n<td>L</td>\n<td>50</td>\n</tr>\n<tr>\n<td>XL</td>\n<td>40</td>\n</tr>\n<tr>\n<td>X</td>\n<td>10</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>9</td>\n</tr>\n<tr>\n<td>V</td>\n<td>5</td>\n</tr>\n<tr>\n<td>IV</td>\n<td>4</td>\n</tr>\n<tr>\n<td>I</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>All roman numerals answers should be provided in upper-case.</p>\n</section>",
  "translationPending": false,
  "block": "javascript-algorithms-and-data-structures-projects",
  "hasEditableBoundaries": false,
  "order": 9,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
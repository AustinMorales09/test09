{
  "id": "587d7b85367417b2b2512b38",
  "title": "Catch Use of Assignment Operator Instead of Equality Operator",
  "challengeType": 1,
  "forumTopicId": 301191,
  "dashedName": "catch-use-of-assignment-operator-instead-of-equality-operator",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x = y) {\n  result = \"Equal!\";\n} else {\n  result = \"Not equal!\";\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x === y) {\n result = \"Equal!\";\n} else {\n result = \"Not equal!\";\n}\n\nconsole.log(result);",
        "error": null,
        "seed": "let x = 7;\nlet y = 9;\nlet result = \"to come\";\n\nif(x === y) {\n result = \"Equal!\";\n} else {\n result = \"Not equal!\";\n}\n\nconsole.log(result);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should fix the condition so it checks for equality, instead of using assignment.</p>",
      "testString": "assert(result == 'Not equal!');"
    },
    {
      "text": "<p>The condition should use either <code>==</code> or <code>===</code> to test for equality.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/x\\s*?===?\\s*?y/g));"
    }
  ],
  "description": "<section id=\"description\">\n<p>Branching programs, i.e. ones that do different things if certain conditions are met, rely on <code>if</code>, <code>else if</code>, and <code>else</code> statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.</p>\n<p>This logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the <code>=</code>, or assignment operator. This leads to unexpected control flow in your program.</p>\n<p>As covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).</p>\n<p>The code below assigns <code>x</code> to be 2, which evaluates as <code>true</code>. Almost every value on its own in JavaScript evaluates to <code>true</code>, except what are known as the \"falsy\" values: <code>false</code>, <code>0</code>, <code>\"\"</code> (an empty string), <code>NaN</code>, <code>undefined</code>, and <code>null</code>.</p>\n<pre><code class=\"language-js\">let x = 1;\nlet y = 2;\nif (x = y) {\n\n} else {\n\n}\n</code></pre>\n<p>In this example, the code block within the <code>if</code> statement will run for any value of <code>y</code>, unless <code>y</code> is falsy. The <code>else</code> block, which we expect to run here, will not actually run.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Fix the condition so the program runs the right branch, and the appropriate value is assigned to <code>result</code>.</p>\n</section>",
  "translationPending": false,
  "block": "debugging",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 6,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
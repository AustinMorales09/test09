{
  "id": "587d7b85367417b2b2512b39",
  "title": "Catch Missing Open and Closing Parenthesis After a Function Call",
  "challengeType": 1,
  "forumTopicId": 301185,
  "dashedName": "catch-missing-open-and-closing-parenthesis-after-a-function-call",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);",
      "error": null,
      "seed": "function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\n\nlet result = getNine;\nconsole.log(result);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function getNine() {\n let x = 6;\n let y = 3;\n return x + y;\n}\n\nlet result = getNine();\nconsole.log(result);",
        "error": null,
        "seed": "function getNine() {\n let x = 6;\n let y = 3;\n return x + y;\n}\n\nlet result = getNine();\nconsole.log(result);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.</p>",
      "testString": "assert(result == 9);"
    },
    {
      "text": "<p>Your code should call the <code>getNine</code> function.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/getNine\\(\\)/g).length == 2);"
    }
  ],
  "description": "<section id=\"description\">\n<p>When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.</p>\n<p>The variables in the following example are different:</p>\n<pre><code class=\"language-js\">function myFunction() {\n  return \"You rock!\";\n}\nlet varOne = myFunction;\nlet varTwo = myFunction();\n</code></pre>\n<p>Here <code>varOne</code> is the function <code>myFunction</code>, and <code>varTwo</code> is the string <code>You rock!</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Fix the code so the variable <code>result</code> is set to the value returned from calling the function <code>getNine</code>.</p>\n</section>",
  "translationPending": false,
  "block": "debugging",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 7,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
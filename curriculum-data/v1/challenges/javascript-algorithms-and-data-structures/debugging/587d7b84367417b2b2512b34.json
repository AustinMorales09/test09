{
  "id": "587d7b84367417b2b2512b34",
  "title": "Use typeof to Check the Type of a Variable",
  "challengeType": 1,
  "forumTopicId": 18374,
  "dashedName": "use-typeof-to-check-the-type-of-a-variable",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let seven = 7;\nlet three = \"3\";\nconsole.log(seven + three);\n// Only change code below this line",
      "error": null,
      "seed": "let seven = 7;\nlet three = \"3\";\nconsole.log(seven + three);\n// Only change code below this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let seven = 7;let three = \"3\";console.log(typeof seven);\nconsole.log(typeof three);",
        "error": null,
        "seed": "let seven = 7;let three = \"3\";console.log(typeof seven);\nconsole.log(typeof three);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should use <code>typeof</code> in two <code>console.log()</code> statements to check the type of the variables.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/console\\.log\\s*\\(typeof[\\( ].*\\)?\\)/g).length == 2);"
    },
    {
      "text": "<p>Your code should use <code>typeof</code> to check the type of the variable <code>seven</code>.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/typeof[\\( ]seven\\)?/g));"
    },
    {
      "text": "<p>Your code should use <code>typeof</code> to check the type of the variable <code>three</code>.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/typeof[\\( ]three\\)?/g));"
    }
  ],
  "description": "<section id=\"description\">\n<p>You can use <code>typeof</code> to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.</p>\n<p>Here are some examples using <code>typeof</code>:</p>\n<pre><code class=\"language-js\">console.log(typeof \"\");\nconsole.log(typeof 0);\nconsole.log(typeof []);\nconsole.log(typeof {});\n</code></pre>\n<p>In order, the console will display the strings <code>string</code>, <code>number</code>, <code>object</code>, and <code>object</code>.</p>\n<p>JavaScript recognizes seven primitive (immutable) data types: <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>String</code>, <code>Symbol</code> (new with ES6), and <code>BigInt</code> (new with ES2020), and one type for mutable items: <code>Object</code>. Note that in JavaScript, arrays are technically a type of object.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add two <code>console.log()</code> statements to check the <code>typeof</code> each of the two variables <code>seven</code> and <code>three</code> in the code.</p>\n</section>",
  "translationPending": false,
  "block": "debugging",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7b7b367417b2b2512b14",
  "title": "Check For The Presence of an Element With indexOf()",
  "challengeType": 1,
  "forumTopicId": 301154,
  "dashedName": "check-for-the-presence-of-an-element-with-indexof",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function quickCheck(arr, elem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));",
      "error": null,
      "seed": "function quickCheck(arr, elem) {\n  // Only change code below this line\n\n  // Only change code above this line\n}\n\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function quickCheck(arr, elem) {\n  return arr.indexOf(elem) >= 0; \n}",
        "error": null,
        "seed": "function quickCheck(arr, elem) {\n  return arr.indexOf(elem) >= 0; \n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>quickCheck</code> function should return a boolean (<code>true</code> or <code>false</code>), not a string (<code>\"true\"</code> or <code>\"false\"</code>)</p>",
      "testString": "assert.isBoolean(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));"
    },
    {
      "text": "<p><code>quickCheck([\"squash\", \"onions\", \"shallots\"], \"mushrooms\")</code> should return <code>false</code></p>",
      "testString": "assert.strictEqual(\n  quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'),\n  false\n);"
    },
    {
      "text": "<p><code>quickCheck([\"onions\", \"squash\", \"shallots\"], \"onions\")</code> should return <code>true</code></p>",
      "testString": "assert.strictEqual(\n  quickCheck(['onions', 'squash', 'shallots'], 'onions'),\n  true\n);"
    },
    {
      "text": "<p><code>quickCheck([3, 5, 9, 125, 45, 2], 125)</code> should return <code>true</code></p>",
      "testString": "assert.strictEqual(quickCheck([3, 5, 9, 125, 45, 2], 125), true);"
    },
    {
      "text": "<p><code>quickCheck([true, false, false], undefined)</code> should return <code>false</code></p>",
      "testString": "assert.strictEqual(quickCheck([true, false, false], undefined), false);"
    },
    {
      "text": "<p>The <code>quickCheck</code> function should utilize the <code>indexOf()</code> method</p>",
      "testString": "assert.notStrictEqual(quickCheck.toString().search(/\\.indexOf\\(/), -1);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Since arrays can be changed, or <em>mutated</em>, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];\n\nfruits.indexOf('dates');\nfruits.indexOf('oranges');\nfruits.indexOf('pears');\n</code></pre>\n<p><code>indexOf('dates')</code> returns <code>-1</code>, <code>indexOf('oranges')</code> returns <code>2</code>, and <code>indexOf('pears')</code> returns <code>1</code> (the first index at which each element exists).</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p><code>indexOf()</code> can be incredibly useful for quickly checking for the presence of an element on an array. We have defined a function, <code>quickCheck</code>, that takes an array and an element as arguments. Modify the function using <code>indexOf()</code> so that it returns <code>true</code> if the passed element exists on the array, and <code>false</code> if it does not.</p>\n</section>",
  "translationPending": false,
  "block": "basic-data-structures",
  "hasEditableBoundaries": false,
  "order": 4,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
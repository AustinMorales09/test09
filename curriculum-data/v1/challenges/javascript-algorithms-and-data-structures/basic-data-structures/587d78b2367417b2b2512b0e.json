{
  "id": "587d78b2367417b2b2512b0e",
  "title": "Add Items to an Array with push() and unshift()",
  "challengeType": 1,
  "forumTopicId": 301151,
  "dashedName": "add-items-to-an-array-with-push-and-unshift",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function mixedNumbers(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(mixedNumbers(['IV', 5, 'six']));",
      "error": null,
      "seed": "function mixedNumbers(arr) {\n  // Only change code below this line\n\n  // Only change code above this line\n  return arr;\n}\n\nconsole.log(mixedNumbers(['IV', 5, 'six']));"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function mixedNumbers(arr) {\n  arr.push(7,'VIII',9);\n  arr.unshift('I',2,'three');\n  return arr;\n}",
        "error": null,
        "seed": "function mixedNumbers(arr) {\n  arr.push(7,'VIII',9);\n  arr.unshift('I',2,'three');\n  return arr;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>mixedNumbers([\"IV\", 5, \"six\"])</code> should now return <code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</code></p>",
      "testString": "assert.deepEqual(mixedNumbers(['IV', 5, 'six']), [\n  'I',\n  2,\n  'three',\n  'IV',\n  5,\n  'six',\n  7,\n  'VIII',\n  9\n]);"
    },
    {
      "text": "<p>The <code>mixedNumbers</code> function should utilize the <code>push()</code> method</p>",
      "testString": "assert(mixedNumbers.toString().match(/\\.push/));"
    },
    {
      "text": "<p>The <code>mixedNumbers</code> function should utilize the <code>unshift()</code> method</p>",
      "testString": "assert(mixedNumbers.toString().match(/\\.unshift/));"
    }
  ],
  "description": "<section id=\"description\">\n<p>An array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>.</p>\n<p>Both methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:</p>\n<pre><code class=\"language-js\">let twentyThree = 'XXIII';\nlet romanNumerals = ['XXI', 'XXII'];\n\nromanNumerals.unshift('XIX', 'XX');\n</code></pre>\n<p><code>romanNumerals</code> would have the value <code>['XIX', 'XX', 'XXI', 'XXII']</code>.</p>\n<pre><code class=\"language-js\">romanNumerals.push(twentyThree);\n</code></pre>\n<p><code>romanNumerals</code> would have the value <code>['XIX', 'XX', 'XXI', 'XXII', 'XXIII']</code>. Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>We have defined a function, <code>mixedNumbers</code>, which we are passing an array as an argument. Modify the function by using <code>push()</code> and <code>unshift()</code> to add <code>'I', 2, 'three'</code> to the beginning of the array and <code>7, 'VIII', 9</code> to the end so that the returned array contains representations of the numbers 1-9 in order.</p>\n</section>",
  "translationPending": false,
  "block": "basic-data-structures",
  "hasEditableBoundaries": false,
  "order": 4,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7dae367417b2b2512b7c",
  "title": "Use Prototype Properties to Reduce Duplicate Code",
  "challengeType": 1,
  "forumTopicId": 301336,
  "dashedName": "use-prototype-properties-to-reduce-duplicate-code",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Dog(name) {\n  this.name = name;\n}\n\n\n\n// Only change code above this line\nlet beagle = new Dog(\"Snoopy\");",
      "error": null,
      "seed": "function Dog(name) {\n  this.name = name;\n}\n\n\n\n// Only change code above this line\nlet beagle = new Dog(\"Snoopy\");"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Dog (name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\nlet beagle = new Dog(\"Snoopy\");",
        "error": null,
        "seed": "function Dog (name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\nlet beagle = new Dog(\"Snoopy\");"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>beagle</code> should have a <code>numLegs</code> property.</p>",
      "testString": "assert(beagle.numLegs !== undefined);"
    },
    {
      "text": "<p><code>beagle.numLegs</code> should be a number.</p>",
      "testString": "assert(typeof beagle.numLegs === 'number');"
    },
    {
      "text": "<p><code>numLegs</code> should be a <code>prototype</code> property not an own property.</p>",
      "testString": "assert(beagle.hasOwnProperty('numLegs') === false);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Since <code>numLegs</code> will probably have the same value for all instances of <code>Bird</code>, you essentially have a duplicated variable <code>numLegs</code> inside each <code>Bird</code> instance.</p>\n<p>This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.</p>\n<p>A better way is to use the <code>prototype</code> of <code>Bird</code>. Properties in the <code>prototype</code> are shared among ALL instances of <code>Bird</code>. Here's how to add <code>numLegs</code> to the <code>Bird prototype</code>:</p>\n<pre><code class=\"language-js\">Bird.prototype.numLegs = 2;\n</code></pre>\n<p>Now all instances of <code>Bird</code> have the <code>numLegs</code> property.</p>\n<pre><code class=\"language-js\">console.log(duck.numLegs);\nconsole.log(canary.numLegs);\n</code></pre>\n<p>Since all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects. Note that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add a <code>numLegs</code> property to the <code>prototype</code> of <code>Dog</code></p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
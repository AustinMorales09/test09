{
  "id": "587d7db2367417b2b2512b89",
  "title": "Use a Mixin to Add Common Behavior Between Unrelated Objects",
  "challengeType": 1,
  "forumTopicId": 301331,
  "dashedName": "use-a-mixin-to-add-common-behavior-between-unrelated-objects",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Only change code below this line",
      "error": null,
      "seed": "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\n\n// Only change code below this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\nfunction glideMixin (obj) {\n  obj.glide = () => 'Gliding!';\n}\n\nglideMixin(bird);\nglideMixin(boat);",
        "error": null,
        "seed": "let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet boat = {\n  name: \"Warrior\",\n  type: \"race-boat\"\n};\nfunction glideMixin (obj) {\n  obj.glide = () => 'Gliding!';\n}\n\nglideMixin(bird);\nglideMixin(boat);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should declare a <code>glideMixin</code> variable that is a function.</p>",
      "testString": "assert(typeof glideMixin === 'function');"
    },
    {
      "text": "<p>Your code should use the <code>glideMixin</code> on the <code>bird</code> object to give it the <code>glide</code> method.</p>",
      "testString": "assert(typeof bird.glide === 'function');"
    },
    {
      "text": "<p>Your code should use the <code>glideMixin</code> on the <code>boat</code> object to give it the <code>glide</code> method.</p>",
      "testString": "assert(typeof boat.glide === 'function');"
    }
  ],
  "description": "<section id=\"description\">\n<p>As you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.</p>\n<p>For unrelated objects, it's better to use <dfn>mixins</dfn>. A mixin allows other objects to use a collection of functions.</p>\n<pre><code class=\"language-js\">let flyMixin = function(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  }\n};\n</code></pre>\n<p>The <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.</p>\n<pre><code class=\"language-js\">let bird = {\n  name: \"Donald\",\n  numLegs: 2\n};\n\nlet plane = {\n  model: \"777\",\n  numPassengers: 524\n};\n\nflyMixin(bird);\nflyMixin(plane);\n</code></pre>\n<p>Here <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:</p>\n<pre><code class=\"language-js\">bird.fly();\nplane.fly();\n</code></pre>\n<p>The console would display the string <code>Flying, wooosh!</code> twice, once for each <code>.fly()</code> call.</p>\n<p>Note how the mixin allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a mixin named <code>glideMixin</code> that defines a method named <code>glide</code>. Then use the <code>glideMixin</code> to give both <code>bird</code> and <code>boat</code> the ability to glide.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 22,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7db1367417b2b2512b88",
  "title": "Override Inherited Methods",
  "challengeType": 1,
  "forumTopicId": 301322,
  "dashedName": "override-inherited-methods",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// Only change code below this line\n\n\n\n// Only change code above this line\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());",
      "error": null,
      "seed": "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n\n// Only change code below this line\n\n\n\n// Only change code above this line\n\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = () => 'Alas, this is a flightless bird.';\nlet penguin = new Penguin();\nconsole.log(penguin.fly());",
        "error": null,
        "seed": "function Bird() { }\n\nBird.prototype.fly = function() { return \"I am flying!\"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = () => 'Alas, this is a flightless bird.';\nlet penguin = new Penguin();\nconsole.log(penguin.fly());"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>penguin.fly()</code> should return the string <code>Alas, this is a flightless bird.</code></p>",
      "testString": "assert(penguin.fly() === 'Alas, this is a flightless bird.');"
    },
    {
      "text": "<p>The <code>bird.fly()</code> method should return the string <code>I am flying!</code></p>",
      "testString": "assert(new Bird().fly() === 'I am flying!');"
    }
  ],
  "description": "<section id=\"description\">\n<p>In previous lessons, you learned that an object can inherit its behavior (methods) from another object by referencing its <code>prototype</code> object:</p>\n<pre><code class=\"language-js\">ChildObject.prototype = Object.create(ParentObject.prototype);\n</code></pre>\n<p>Then the <code>ChildObject</code> received its own methods by chaining them onto its <code>prototype</code>:</p>\n<pre><code class=\"language-js\">ChildObject.prototype.methodName = function() {...};\n</code></pre>\n<p>It's possible to override an inherited method. It's done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override. Here's an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  return \"nom nom nom\";\n};\nfunction Bird() { }\n\nBird.prototype = Object.create(Animal.prototype);\n\nBird.prototype.eat = function() {\n  return \"peck peck peck\";\n};\n</code></pre>\n<p>If you have an instance <code>let duck = new Bird();</code> and you call <code>duck.eat()</code>, this is how JavaScript looks for the method on the <code>prototype</code> chain of <code>duck</code>:</p>\n<ol>\n<li><code>duck</code> => Is <code>eat()</code> defined here? No.</li>\n<li><code>Bird</code> => Is <code>eat()</code> defined here? => Yes. Execute it and stop searching.</li>\n<li><code>Animal</code> => <code>eat()</code> is also defined, but JavaScript stopped searching before reaching this level.</li>\n<li>Object => JavaScript stopped searching before reaching this level.</li>\n</ol>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Override the <code>fly()</code> method for <code>Penguin</code> so that it returns the string <code>Alas, this is a flightless bird.</code></p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 21,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
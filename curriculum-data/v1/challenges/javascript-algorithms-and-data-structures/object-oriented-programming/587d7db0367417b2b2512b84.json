{
  "id": "587d7db0367417b2b2512b84",
  "title": "Inherit Behaviors from a Supertype",
  "challengeType": 1,
  "forumTopicId": 301319,
  "dashedName": "inherit-behaviors-from-a-supertype",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Only change code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line",
      "error": null,
      "seed": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\n\n// Only change code below this line\n\nlet duck; // Change this line\nlet beagle; // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n\nduck.eat();\nbeagle.eat();",
        "error": null,
        "seed": "function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  }\n};\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n\nduck.eat();\nbeagle.eat();"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>duck</code> variable should be defined.</p>",
      "testString": "assert(typeof duck !== 'undefined');"
    },
    {
      "text": "<p>The <code>beagle</code> variable should be defined.</p>",
      "testString": "assert(typeof beagle !== 'undefined');"
    },
    {
      "text": "<p>The <code>duck</code> variable should be initialised with <code>Object.create</code>.</p>",
      "testString": "assert(\n  /(let|const|var)\\s{1,}duck\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    __helpers.removeJSComments(code)\n  )\n);"
    },
    {
      "text": "<p>The <code>beagle</code> variable should be initialised with <code>Object.create</code>.</p>",
      "testString": "assert(\n  /(let|const|var)\\s{1,}beagle\\s*=\\s*Object\\.create\\s*\\(\\s*Animal\\.prototype\\s*\\)\\s*/.test(\n    __helpers.removeJSComments(code)\n  )\n);"
    },
    {
      "text": "<p><code>duck</code> should have a <code>prototype</code> of <code>Animal</code>.</p>",
      "testString": "assert(duck instanceof Animal);"
    },
    {
      "text": "<p><code>beagle</code> should have a <code>prototype</code> of <code>Animal</code>.</p>",
      "testString": "assert(beagle instanceof Animal);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:</p>\n<pre><code class=\"language-js\">function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\n</code></pre>\n<p>This and the next challenge will cover how to reuse the methods of <code>Animal</code> inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the <code>supertype</code> (or parent). You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:</p>\n<pre><code class=\"language-js\">let animal = new Animal();\n</code></pre>\n<p>There are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:</p>\n<pre><code class=\"language-js\">let animal = Object.create(Animal.prototype);\n</code></pre>\n<p><code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be the <code>prototype</code> of <code>Animal</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.</p>\n<pre><code class=\"language-js\">animal.eat();\nanimal instanceof Animal;\n</code></pre>\n<p>The <code>instanceof</code> method here would return <code>true</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Use <code>Object.create</code> to make two instances of <code>Animal</code> named <code>duck</code> and <code>beagle</code>.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 17,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7dae367417b2b2512b7b",
  "title": "Understand Own Properties",
  "challengeType": 1,
  "forumTopicId": 301326,
  "dashedName": "understand-own-properties",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Only change code below this line",
      "error": null,
      "seed": "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Only change code below this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nfunction getOwnProps (obj) {\n  const props = [];\n\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      props.push(prop);\n    }\n  }\n\n  return props;\n}\n\nconst ownProps = getOwnProps(canary);",
        "error": null,
        "seed": "function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nfunction getOwnProps (obj) {\n  const props = [];\n\n  for (let prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      props.push(prop);\n    }\n  }\n\n  return props;\n}\n\nconst ownProps = getOwnProps(canary);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>ownProps</code> should include the values <code>numLegs</code> and <code>name</code>.</p>",
      "testString": "assert(ownProps.indexOf('name') !== -1 && ownProps.indexOf('numLegs') !== -1);"
    },
    {
      "text": "<p>You should solve this challenge without using the built in method <code>Object.keys()</code>.</p>",
      "testString": "assert(!/Object(\\.keys|\\[(['\"`])keys\\2\\])/.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p>You should solve this challenge without hardcoding the <code>ownProps</code> array.</p>",
      "testString": "assert(\n  !/\\[\\s*(?:'|\")(?:name|numLegs)|(?:push|concat)\\(\\s*(?:'|\")(?:name|numLegs)/.test(\n    __helpers.removeJSComments(code)\n  )\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the following example, the <code>Bird</code> constructor defines two properties: <code>name</code> and <code>numLegs</code>:</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet duck = new Bird(\"Donald\");\nlet canary = new Bird(\"Tweety\");\n</code></pre>\n<p><code>name</code> and <code>numLegs</code> are called <dfn>own properties</dfn>, because they are defined directly on the instance object. That means that <code>duck</code> and <code>canary</code> each has its own separate copy of these properties. In fact every instance of <code>Bird</code> will have its own copy of these properties. The following code adds all of the own properties of <code>duck</code> to the array <code>ownProps</code>:</p>\n<pre><code class=\"language-js\">let ownProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\n</code></pre>\n<p>The console would display the value <code>[\"name\", \"numLegs\"]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add the own properties of <code>canary</code> to the array <code>ownProps</code>.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 8,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
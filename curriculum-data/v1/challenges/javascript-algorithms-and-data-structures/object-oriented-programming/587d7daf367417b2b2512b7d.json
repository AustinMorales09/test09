{
  "id": "587d7daf367417b2b2512b7d",
  "title": "Iterate Over All Properties",
  "challengeType": 1,
  "forumTopicId": 301320,
  "dashedName": "iterate-over-all-properties",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Only change code below this line",
      "error": null,
      "seed": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Only change code below this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\nfor (let prop in beagle) {\n  if (beagle.hasOwnProperty(prop)) {\n    ownProps.push(prop);\n  } else {\n    prototypeProps.push(prop);\n  }\n}",
        "error": null,
        "seed": "function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\nfor (let prop in beagle) {\n  if (beagle.hasOwnProperty(prop)) {\n    ownProps.push(prop);\n  } else {\n    prototypeProps.push(prop);\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>ownProps</code> array should only contain <code>name</code>.</p>",
      "testString": "assert.deepEqual(ownProps, ['name']);"
    },
    {
      "text": "<p>The <code>prototypeProps</code> array should only contain <code>numLegs</code>.</p>",
      "testString": "assert.deepEqual(prototypeProps, ['numLegs']);"
    },
    {
      "text": "<p>You should solve this challenge without using the built in method <code>Object.keys()</code>.</p>",
      "testString": "assert(!/\\Object.keys/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>You have now seen two kinds of properties: <dfn>own properties</dfn> and <code>prototype</code> properties. Own properties are defined directly on the object instance itself. And prototype properties are defined on the <code>prototype</code>.</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;  //own property\n}\n\nBird.prototype.numLegs = 2; // prototype property\n\nlet duck = new Bird(\"Donald\");\n</code></pre>\n<p>Here is how you add <code>duck</code>'s own properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:</p>\n<pre><code class=\"language-js\">let ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\n\nconsole.log(ownProps);\nconsole.log(prototypeProps);\n</code></pre>\n<p><code>console.log(ownProps)</code> would display <code>[\"name\"]</code> in the console, and <code>console.log(prototypeProps)</code> would display <code>[\"numLegs\"]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add all of the own properties of <code>beagle</code> to the array <code>ownProps</code>. Add all of the <code>prototype</code> properties of <code>Dog</code> to the array <code>prototypeProps</code>.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 10,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
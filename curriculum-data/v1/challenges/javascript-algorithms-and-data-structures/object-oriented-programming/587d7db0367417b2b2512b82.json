{
  "id": "587d7db0367417b2b2512b82",
  "title": "Understand the Prototype Chain",
  "challengeType": 1,
  "forumTopicId": 301329,
  "dashedName": "understand-the-prototype-chain",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // yields true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);",
      "error": null,
      "seed": "function Dog(name) {\n  this.name = name;\n}\n\nlet beagle = new Dog(\"Snoopy\");\n\nDog.prototype.isPrototypeOf(beagle);  // yields true\n\n// Fix the code below so that it evaluates to true\n???.isPrototypeOf(Dog.prototype);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);\nObject.prototype.isPrototypeOf(Dog.prototype);",
        "error": null,
        "seed": "function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog(\"Snoopy\");\nDog.prototype.isPrototypeOf(beagle);\nObject.prototype.isPrototypeOf(Dog.prototype);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should show that <code>Object.prototype</code> is the prototype of <code>Dog.prototype</code></p>",
      "testString": "assert(/Object\\.prototype\\.isPrototypeOf/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>All objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an objectâ€™s <code>prototype</code> itself is an object.</p>\n<pre><code class=\"language-js\">function Bird(name) {\n  this.name = name;\n}\n\ntypeof Bird.prototype;\n</code></pre>\n<p>Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:</p>\n<pre><code class=\"language-js\">Object.prototype.isPrototypeOf(Bird.prototype);\n</code></pre>\n<p>How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:</p>\n<pre><code class=\"language-js\">let duck = new Bird(\"Donald\");\nduck.hasOwnProperty(\"name\");\n</code></pre>\n<p>The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain. In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>. <code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Modify the code to show the correct prototype chain.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 15,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
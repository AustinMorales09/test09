{
  "id": "587d7dad367417b2b2512b76",
  "title": "Make Code More Reusable with the this Keyword",
  "challengeType": 1,
  "forumTopicId": 301321,
  "dashedName": "make-code-more-reusable-with-the-this-keyword",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();",
      "error": null,
      "seed": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs: function() {return \"This dog has \" + dog.numLegs + \" legs.\";}\n};\n\ndog.sayLegs();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();",
        "error": null,
        "seed": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>dog.sayLegs()</code> should return the given string.</p>",
      "testString": "assert(dog.sayLegs() === 'This dog has 4 legs.');"
    },
    {
      "text": "<p>Your code should use the <code>this</code> keyword to access the <code>numLegs</code> property of <code>dog</code>.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/this\\.numLegs/g));"
    }
  ],
  "description": "<section id=\"description\">\n<p>The last challenge introduced a method to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:</p>\n<pre><code class=\"language-js\">sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n</code></pre>\n<p>While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.</p>\n<p>A way to avoid these issues is with the <code>this</code> keyword:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + this.name + \".\";}\n};\n</code></pre>\n<p><code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>. If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Modify the <code>dog.sayLegs</code> method to remove any references to <code>dog</code>. Use the <code>duck</code> example for guidance.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 3,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
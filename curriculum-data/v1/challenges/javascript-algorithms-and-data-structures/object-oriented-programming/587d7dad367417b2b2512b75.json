{
  "id": "587d7dad367417b2b2512b75",
  "title": "Create a Method on an Object",
  "challengeType": 1,
  "forumTopicId": 301318,
  "dashedName": "create-a-method-on-an-object",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n\n};\n\ndog.sayLegs();",
      "error": null,
      "seed": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n\n};\n\ndog.sayLegs();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();",
        "error": null,
        "seed": "let dog = {\n  name: \"Spot\",\n  numLegs: 4,\n  sayLegs () {\n    return 'This dog has ' + this.numLegs + ' legs.';\n  }\n};\n\ndog.sayLegs();"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>dog.sayLegs()</code> should be a function.</p>",
      "testString": "assert(typeof dog.sayLegs === 'function');"
    },
    {
      "text": "<p><code>dog.sayLegs()</code> should return the given string - note that punctuation and spacing matter.</p>",
      "testString": "assert(dog.sayLegs() === 'This dog has 4 legs.');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Objects can have a special type of property, called a <dfn>method</dfn>.</p>\n<p>Methods are properties that are functions. This adds different behavior to an object. Here is the <code>duck</code> example with a method:</p>\n<pre><code class=\"language-js\">let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n};\nduck.sayName();\n</code></pre>\n<p>The example adds the <code>sayName</code> method, which is a function that returns a sentence giving the name of the <code>duck</code>. Notice that the method accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Using the <code>dog</code> object, give it a method called <code>sayLegs</code>. The method should return the sentence <code>This dog has 4 legs.</code></p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
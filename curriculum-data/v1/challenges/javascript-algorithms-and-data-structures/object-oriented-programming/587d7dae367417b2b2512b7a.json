{
  "id": "587d7dae367417b2b2512b7a",
  "title": "Verify an Object's Constructor with instanceof",
  "challengeType": 1,
  "forumTopicId": 301337,
  "dashedName": "verify-an-objects-constructor-with-instanceof",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\n// Only change code below this line",
      "error": null,
      "seed": "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n\n// Only change code below this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\nconst myHouse = new House(4);\nconsole.log(myHouse instanceof House);",
        "error": null,
        "seed": "function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\nconst myHouse = new House(4);\nconsole.log(myHouse instanceof House);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myHouse</code> should have a <code>numBedrooms</code> attribute set to a number.</p>",
      "testString": "assert(typeof myHouse.numBedrooms === 'number');"
    },
    {
      "text": "<p>You should verify that <code>myHouse</code> is an instance of <code>House</code> using the <code>instanceof</code> operator.</p>",
      "testString": "assert(/myHouse\\s*instanceof\\s*House/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>Anytime a constructor function creates a new object, that object is said to be an <dfn>instance</dfn> of its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code> operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code> or <code>false</code> based on whether or not that object was created with the constructor. Here's an example:</p>\n<pre><code class=\"language-js\">let Bird = function(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n\nlet crow = new Bird(\"Alexis\", \"black\");\n\ncrow instanceof Bird;\n</code></pre>\n<p>This <code>instanceof</code> method would return <code>true</code>.</p>\n<p>If an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:</p>\n<pre><code class=\"language-js\">let canary = {\n  name: \"Mildred\",\n  color: \"Yellow\",\n  numLegs: 2\n};\n\ncanary instanceof Bird;\n</code></pre>\n<p>This <code>instanceof</code> method would return <code>false</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a new instance of the <code>House</code> constructor, calling it <code>myHouse</code> and passing a number of bedrooms. Then, use <code>instanceof</code> to verify that it is an instance of <code>House</code>.</p>\n</section>",
  "translationPending": false,
  "block": "object-oriented-programming",
  "hasEditableBoundaries": false,
  "order": 6,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 7,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "a9bd25c716030ec90084d8a1",
  "title": "Chunky Monkey",
  "challengeType": 1,
  "forumTopicId": 16005,
  "dashedName": "chunky-monkey",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function chunkArrayInGroups(arr, size) {\n  return arr;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);",
      "error": null,
      "seed": "function chunkArrayInGroups(arr, size) {\n  return arr;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);",
        "error": null,
        "seed": "function chunkArrayInGroups(arr, size) {\n  let out = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    out.push(arr.slice(i, i + size));\n  }\n\n  return out;\n}\n\nchunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>chunkArrayInGroups([\"a\", \"b\", \"c\", \"d\"], 2)</code> should return <code>[[\"a\", \"b\"], [\"c\", \"d\"]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups(['a', 'b', 'c', 'd'], 2), [\n  ['a', 'b'],\n  ['c', 'd']\n]);"
    },
    {
      "text": "<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3), [\n  [0, 1, 2],\n  [3, 4, 5]\n]);"
    },
    {
      "text": "<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2), [\n  [0, 1],\n  [2, 3],\n  [4, 5]\n]);"
    },
    {
      "text": "<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4), [\n  [0, 1, 2, 3],\n  [4, 5]\n]);"
    },
    {
      "text": "<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3)</code> should return <code>[[0, 1, 2], [3, 4, 5], [6]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3), [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6]\n]);"
    },
    {
      "text": "<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4)</code> should return <code>[[0, 1, 2, 3], [4, 5, 6, 7], [8]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4), [\n  [0, 1, 2, 3],\n  [4, 5, 6, 7],\n  [8]\n]);"
    },
    {
      "text": "<p><code>chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)</code> should return <code>[[0, 1], [2, 3], [4, 5], [6, 7], [8]]</code>.</p>",
      "testString": "assert.deepEqual(chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2), [\n  [0, 1],\n  [2, 3],\n  [4, 5],\n  [6, 7],\n  [8]\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function that splits an array (first argument) into groups the length of <code>size</code> (second argument) and returns them as a two-dimensional array.</p>\n</section>",
  "translationPending": false,
  "block": "basic-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 5,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 15,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
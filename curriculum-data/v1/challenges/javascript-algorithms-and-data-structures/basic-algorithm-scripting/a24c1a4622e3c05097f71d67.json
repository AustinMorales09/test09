{
  "id": "a24c1a4622e3c05097f71d67",
  "title": "Where do I Belong",
  "challengeType": 1,
  "forumTopicId": 16094,
  "dashedName": "where-do-i-belong",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);",
      "error": null,
      "seed": "function getIndexToIns(arr, num) {\n  return num;\n}\n\ngetIndexToIns([40, 60], 50);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function getIndexToIns(arr, num) {\n  arr = arr.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      return i;\n    }\n  }\n\n  return arr.length;\n}\n\ngetIndexToIns([40, 60], 50);",
        "error": null,
        "seed": "function getIndexToIns(arr, num) {\n  arr = arr.sort((a, b) => a - b);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= num) {\n      return i;\n    }\n  }\n\n  return arr.length;\n}\n\ngetIndexToIns([40, 60], 50);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return <code>3</code>.</p>",
      "testString": "assert(getIndexToIns([10, 20, 30, 40, 50], 35) === 3);"
    },
    {
      "text": "<p><code>getIndexToIns([10, 20, 30, 40, 50], 35)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([10, 20, 30, 40, 50], 35) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return <code>2</code>.</p>",
      "testString": "assert(getIndexToIns([10, 20, 30, 40, 50], 30) === 2);"
    },
    {
      "text": "<p><code>getIndexToIns([10, 20, 30, 40, 50], 30)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([10, 20, 30, 40, 50], 30) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([40, 60], 50)</code> should return <code>1</code>.</p>",
      "testString": "assert(getIndexToIns([40, 60], 50) === 1);"
    },
    {
      "text": "<p><code>getIndexToIns([40, 60], 50)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([40, 60], 50) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([3, 10, 5], 3)</code> should return <code>0</code>.</p>",
      "testString": "assert(getIndexToIns([3, 10, 5], 3) === 0);"
    },
    {
      "text": "<p><code>getIndexToIns([3, 10, 5], 3)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([3, 10, 5], 3) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return <code>2</code>.</p>",
      "testString": "assert(getIndexToIns([5, 3, 20, 3], 5) === 2);"
    },
    {
      "text": "<p><code>getIndexToIns([5, 3, 20, 3], 5)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([5, 3, 20, 3], 5) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([2, 20, 10], 19)</code> should return <code>2</code>.</p>",
      "testString": "assert(getIndexToIns([2, 20, 10], 19) === 2);"
    },
    {
      "text": "<p><code>getIndexToIns([2, 20, 10], 19)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([2, 20, 10], 19) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([2, 5, 10], 15)</code> should return <code>3</code>.</p>",
      "testString": "assert(getIndexToIns([2, 5, 10], 15) === 3);"
    },
    {
      "text": "<p><code>getIndexToIns([2, 5, 10], 15)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([2, 5, 10], 15) === 'number');"
    },
    {
      "text": "<p><code>getIndexToIns([], 1)</code> should return <code>0</code>.</p>",
      "testString": "assert(getIndexToIns([], 1) === 0);"
    },
    {
      "text": "<p><code>getIndexToIns([], 1)</code> should return a number.</p>",
      "testString": "assert(typeof getIndexToIns([], 1) === 'number');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.</p>\n<p>For example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).</p>\n<p>Likewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).</p>\n</section>",
  "translationPending": false,
  "block": "basic-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 5,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 13,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
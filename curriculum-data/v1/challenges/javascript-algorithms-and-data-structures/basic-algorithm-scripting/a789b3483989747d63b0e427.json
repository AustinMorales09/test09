{
  "id": "a789b3483989747d63b0e427",
  "title": "Return Largest Numbers in Arrays",
  "challengeType": 1,
  "forumTopicId": 16042,
  "dashedName": "return-largest-numbers-in-arrays",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function largestOfFour(arr) {\n  return arr;\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);",
      "error": null,
      "seed": "function largestOfFour(arr) {\n  return arr;\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function largestOfFour(arr) {\n  return arr.map(subArr => Math.max.apply(null, subArr));\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);",
        "error": null,
        "seed": "function largestOfFour(arr) {\n  return arr.map(subArr => Math.max.apply(null, subArr));\n}\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return an array.</p>",
      "testString": "assert(\n  largestOfFour([\n    [4, 5, 1, 3],\n    [13, 27, 18, 26],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]).constructor === Array\n);"
    },
    {
      "text": "<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> should return <code>[27, 5, 39, 1001]</code>.</p>",
      "testString": "assert.deepEqual(\n  largestOfFour([\n    [13, 27, 18, 26],\n    [4, 5, 1, 3],\n    [32, 35, 37, 39],\n    [1000, 1001, 857, 1]\n  ]),\n  [27, 5, 39, 1001]\n);"
    },
    {
      "text": "<p><code>largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]])</code> should return <code>[9, 35, 97, 1000000]</code>.</p>",
      "testString": "assert.deepEqual(\n  largestOfFour([\n    [4, 9, 1, 3],\n    [13, 35, 18, 26],\n    [32, 35, 97, 39],\n    [1000000, 1001, 857, 1]\n  ]),\n  [9, 35, 97, 1000000]\n);"
    },
    {
      "text": "<p><code>largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]])</code> should return <code>[25, 48, 21, -3]</code>.</p>",
      "testString": "assert.deepEqual(\n  largestOfFour([\n    [17, 23, 25, 12],\n    [25, 7, 34, 48],\n    [4, -10, 18, 21],\n    [-72, -3, -17, -10]\n  ]),\n  [25, 48, 21, -3]\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.</p>\n<p>Remember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 5,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 4,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
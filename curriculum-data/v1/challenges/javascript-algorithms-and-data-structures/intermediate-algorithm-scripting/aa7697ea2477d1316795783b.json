{
  "id": "aa7697ea2477d1316795783b",
  "title": "Pig Latin",
  "challengeType": 1,
  "forumTopicId": 16039,
  "dashedName": "pig-latin",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function translatePigLatin(str) {\n  return str;\n}\n\ntranslatePigLatin(\"consonant\");",
      "error": null,
      "seed": "function translatePigLatin(str) {\n  return str;\n}\n\ntranslatePigLatin(\"consonant\");"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function translatePigLatin(str) {\n  if (isVowel(str.charAt(0))) return str + \"way\";\n  var front = [];\n  str = str.split('');\n  while (str.length && !isVowel(str[0])) {\n    front.push(str.shift());\n  }\n  return [].concat(str, front).join('') + 'ay';\n}\n\nfunction isVowel(c) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1;\n}",
        "error": null,
        "seed": "function translatePigLatin(str) {\n  if (isVowel(str.charAt(0))) return str + \"way\";\n  var front = [];\n  str = str.split('');\n  while (str.length && !isVowel(str[0])) {\n    front.push(str.shift());\n  }\n  return [].concat(str, front).join('') + 'ay';\n}\n\nfunction isVowel(c) {\n  return ['a', 'e', 'i', 'o', 'u'].indexOf(c.toLowerCase()) !== -1;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>translatePigLatin(\"california\")</code> should return the string <code>aliforniacay</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('california'), 'aliforniacay');"
    },
    {
      "text": "<p><code>translatePigLatin(\"paragraphs\")</code> should return the string <code>aragraphspay</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('paragraphs'), 'aragraphspay');"
    },
    {
      "text": "<p><code>translatePigLatin(\"glove\")</code> should return the string <code>oveglay</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('glove'), 'oveglay');"
    },
    {
      "text": "<p><code>translatePigLatin(\"algorithm\")</code> should return the string <code>algorithmway</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('algorithm'), 'algorithmway');"
    },
    {
      "text": "<p><code>translatePigLatin(\"eight\")</code> should return the string <code>eightway</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('eight'), 'eightway');"
    },
    {
      "text": "<p>Should handle words where the first vowel comes in the middle of the word.  <code>translatePigLatin(\"schwartz\")</code> should return the string <code>artzschway</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('schwartz'), 'artzschway');"
    },
    {
      "text": "<p>Should handle words without vowels. <code>translatePigLatin(\"rhythm\")</code> should return the string <code>rhythmay</code>.</p>",
      "testString": "assert.deepEqual(translatePigLatin('rhythm'), 'rhythmay');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Pig Latin is a way of altering English Words. The rules are as follows:</p>\n<p>- If a word begins with a consonant, take the first consonant or consonant cluster, move it to the end of the word, and add <code>ay</code> to it.</p>\n<p>- If a word begins with a vowel, just add <code>way</code> at the end.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Translate the provided string to Pig Latin. Input strings are guaranteed to be English words in all lowercase.</p>\n</section>",
  "translationPending": false,
  "block": "intermediate-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 8,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 5,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
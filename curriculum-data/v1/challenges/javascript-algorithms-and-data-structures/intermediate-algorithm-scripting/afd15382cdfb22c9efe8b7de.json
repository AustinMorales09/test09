{
  "id": "afd15382cdfb22c9efe8b7de",
  "title": "DNA Pairing",
  "challengeType": 1,
  "forumTopicId": 16009,
  "dashedName": "dna-pairing",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function pairElement(str) {\n  return str;\n}\n\npairElement(\"GCG\");",
      "error": null,
      "seed": "function pairElement(str) {\n  return str;\n}\n\npairElement(\"GCG\");"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "var lookup = Object.create(null);\nlookup.A = 'T';\nlookup.T = 'A';\nlookup.C = 'G';\nlookup.G = 'C';\n\nfunction pairElement(str) {\n return str.split('').map(function(p) {return [p, lookup[p]];});\n}",
        "error": null,
        "seed": "var lookup = Object.create(null);\nlookup.A = 'T';\nlookup.T = 'A';\nlookup.C = 'G';\nlookup.G = 'C';\n\nfunction pairElement(str) {\n return str.split('').map(function(p) {return [p, lookup[p]];});\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>pairElement(\"ATCGA\")</code> should return <code>[[\"A\",\"T\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"G\",\"C\"],[\"A\",\"T\"]]</code>.</p>",
      "testString": "assert.deepEqual(pairElement('ATCGA'), [\n  ['A', 'T'],\n  ['T', 'A'],\n  ['C', 'G'],\n  ['G', 'C'],\n  ['A', 'T']\n]);"
    },
    {
      "text": "<p><code>pairElement(\"TTGAG\")</code> should return <code>[[\"T\",\"A\"],[\"T\",\"A\"],[\"G\",\"C\"],[\"A\",\"T\"],[\"G\",\"C\"]]</code>.</p>",
      "testString": "assert.deepEqual(pairElement('TTGAG'), [\n  ['T', 'A'],\n  ['T', 'A'],\n  ['G', 'C'],\n  ['A', 'T'],\n  ['G', 'C']\n]);"
    },
    {
      "text": "<p><code>pairElement(\"CTCTA\")</code> should return <code>[[\"C\",\"G\"],[\"T\",\"A\"],[\"C\",\"G\"],[\"T\",\"A\"],[\"A\",\"T\"]]</code>.</p>",
      "testString": "assert.deepEqual(pairElement('CTCTA'), [\n  ['C', 'G'],\n  ['T', 'A'],\n  ['C', 'G'],\n  ['T', 'A'],\n  ['A', 'T']\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Pairs of DNA strands consist of nucleobase pairs. Base pairs are represented by the characters <em>AT</em> and <em>CG</em>, which form building blocks of the DNA double helix.</p>\n<p>The DNA strand is missing the pairing element. Write a function to match the missing base pairs for the provided DNA strand. For each character in the provided string, find the base pair character. Return the results as a 2d array.</p>\n<p>For example, for the input <code>GCG</code>, return <code>[[\"G\", \"C\"], [\"C\",\"G\"], [\"G\", \"C\"]]</code></p>\n<p>The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.</p>\n</section>",
  "translationPending": false,
  "block": "intermediate-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 8,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 7,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
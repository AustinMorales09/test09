{
  "id": "ae9defd7acaf69703ab432ea",
  "title": "Smallest Common Multiple",
  "challengeType": 1,
  "forumTopicId": 16075,
  "dashedName": "smallest-common-multiple",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function smallestCommons(arr) {\n  return arr;\n}\n\nsmallestCommons([1,5]);",
      "error": null,
      "seed": "function smallestCommons(arr) {\n  return arr;\n}\n\nsmallestCommons([1,5]);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function gcd(a, b) {\n    while (b !== 0) {\n        a = [b, b = a % b][0];\n    }\n    return a;\n}\n\nfunction lcm(a, b) {\n    return (a * b) / gcd(a, b);\n}\n\nfunction smallestCommons(arr) {\n  arr.sort(function(a,b) {return a-b;});\n  var rng = [];\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    rng.push(i);\n  }\n  return rng.reduce(lcm);\n}",
        "error": null,
        "seed": "function gcd(a, b) {\n    while (b !== 0) {\n        a = [b, b = a % b][0];\n    }\n    return a;\n}\n\nfunction lcm(a, b) {\n    return (a * b) / gcd(a, b);\n}\n\nfunction smallestCommons(arr) {\n  arr.sort(function(a,b) {return a-b;});\n  var rng = [];\n  for (var i = arr[0]; i <= arr[1]; i++) {\n    rng.push(i);\n  }\n  return rng.reduce(lcm);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>smallestCommons([1, 5])</code> should return a number.</p>",
      "testString": "assert.deepEqual(typeof smallestCommons([1, 5]), 'number');"
    },
    {
      "text": "<p><code>smallestCommons([1, 5])</code> should return 60.</p>",
      "testString": "assert.deepEqual(smallestCommons([1, 5]), 60);"
    },
    {
      "text": "<p><code>smallestCommons([5, 1])</code> should return 60.</p>",
      "testString": "assert.deepEqual(smallestCommons([5, 1]), 60);"
    },
    {
      "text": "<p><code>smallestCommons([2, 10])</code> should return 2520.</p>",
      "testString": "assert.deepEqual(smallestCommons([2, 10]), 2520);"
    },
    {
      "text": "<p><code>smallestCommons([1, 13])</code> should return 360360.</p>",
      "testString": "assert.deepEqual(smallestCommons([1, 13]), 360360);"
    },
    {
      "text": "<p><code>smallestCommons([23, 18])</code> should return 6056820.</p>",
      "testString": "assert.deepEqual(smallestCommons([23, 18]), 6056820);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.</p>\n<p>The range will be an array of two numbers that will not necessarily be in numerical order.</p>\n<p>For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers <em>between</em> 1 and 3. The answer here would be 6.</p>\n</section>",
  "translationPending": false,
  "block": "intermediate-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 8,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 13,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
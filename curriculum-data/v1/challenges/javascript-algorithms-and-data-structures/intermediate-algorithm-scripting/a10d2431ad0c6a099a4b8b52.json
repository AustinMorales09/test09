{
  "id": "a10d2431ad0c6a099a4b8b52",
  "title": "Everything Be True",
  "challengeType": 1,
  "forumTopicId": 16011,
  "dashedName": "everything-be-true",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function truthCheck(collection, pre) {\n  return pre;\n}\n\ntruthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\");",
      "error": null,
      "seed": "function truthCheck(collection, pre) {\n  return pre;\n}\n\ntruthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\");"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function truthCheck(collection, pre) {\n  return collection.every(function(e) { return e[pre]; });\n}",
        "error": null,
        "seed": "function truthCheck(collection, pre) {\n  return collection.every(function(e) { return e[pre]; });\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"isBot\")</code> should return <code>false</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"isBot\"), false);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"name\")</code> should return <code>true</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"name\"), true);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"Quincy\", role: \"Founder\", isBot: false}, {name: \"Naomi\", role: \"\", isBot: false}, {name: \"Camperbot\", role: \"Bot\", isBot: true}], \"role\")</code> should return <code>false</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", role: \"Founder\", isBot: false },\n    { name: \"Naomi\", role: \"\", isBot: false },\n    { name: \"Camperbot\", role: \"Bot\", isBot: true }\n  ],\n  \"role\"), false);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}], \"number\")</code> should return <code>true</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n  ],\n  \"number\"), true);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"caught\")</code> should return <code>false</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"caught\"), false);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"Pikachu\", number: 25, caught: 3}, {name: \"Togepi\", number: 175, caught: 1}, {name: \"MissingNo\", number: NaN, caught: 0}], \"number\")</code> should return <code>false</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Pikachu\", number: 25, caught: 3 },\n    { name: \"Togepi\", number: 175, caught: 1 },\n    { name: \"MissingNo\", number: NaN, caught: 0 },\n  ],\n  \"number\"), false);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"Quincy\", username: \"QuincyLarson\"}, {name: \"Naomi\", username: \"nhcarrigan\"}, {name: \"Camperbot\"}], \"username\")</code> should return <code>false</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"Quincy\", username: \"QuincyLarson\" },\n    { name: \"Naomi\", username: \"nhcarrigan\" },\n    { name: \"Camperbot\" }\n  ],\n  \"username\"), false);"
    },
    {
      "text": "<p><code>truthCheck([{name: \"freeCodeCamp\", users: [{name: \"Quincy\"}, {name: \"Naomi\"}]}, {name: \"Code Radio\", users: [{name: \"Camperbot\"}]}, {name: \"\", users: []}], \"users\")</code> should return <code>true</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { name: \"freeCodeCamp\", users: [{ name: \"Quincy\" }, { name: \"Naomi\" }] },\n    { name: \"Code Radio\", users: [{ name: \"Camperbot\" }] },\n    { name: \"\", users: [] },\n  ],\n  \"users\"), true);"
    },
    {
      "text": "<p><code>truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"data\")</code> should return <code>true</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"data\"), true);"
    },
    {
      "text": "<p><code>truthCheck([{id: 1, data: {url: \"https://freecodecamp.org\", name: \"freeCodeCamp\"}}, {id: 2, data: {url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\"}}, {id: null, data: {}}], \"id\")</code> should return <code>false</code>.</p>",
      "testString": "assert.strictEqual(truthCheck(\n  [\n    { id: 1, data: { url: \"https://www.freecodecamp.org\", name: \"freeCodeCamp\" } },\n    { id: 2, data: { url: \"https://coderadio.freecodecamp.org/\", name: \"CodeRadio\" } },\n    { id: null, data: {} },\n  ],\n  \"id\"), false);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Check if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).</p>\n<p>In other words, you are given an array collection of objects. The predicate <code>pre</code> will be an object property and you need to return <code>true</code> if its value is <code>truthy</code>. Otherwise, return <code>false</code>.</p>\n<p>In JavaScript, <code>truthy</code> values are values that translate to <code>true</code> when evaluated in a Boolean context.</p>\n<p>Remember, you can access object properties through either dot notation or <code>[]</code> notation.</p>\n</section>",
  "translationPending": false,
  "block": "intermediate-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 8,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 17,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
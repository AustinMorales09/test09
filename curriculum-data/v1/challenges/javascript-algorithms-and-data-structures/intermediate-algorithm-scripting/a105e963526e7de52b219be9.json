{
  "id": "a105e963526e7de52b219be9",
  "title": "Sorted Union",
  "challengeType": 1,
  "forumTopicId": 16077,
  "dashedName": "sorted-union",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function uniteUnique(arr) {\n  return arr;\n}\n\nuniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);",
      "error": null,
      "seed": "function uniteUnique(arr) {\n  return arr;\n}\n\nuniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function uniteUnique(arr) {\n  return [].slice.call(arguments).reduce(function(a, b) {\n    return [].concat(\n      a, \n      b.filter(function(e, currentIndex) {\n        return b.indexOf(e) === currentIndex && a.indexOf(e) === -1;\n      }));\n  }, []);\n}",
        "error": null,
        "seed": "function uniteUnique(arr) {\n  return [].slice.call(arguments).reduce(function(a, b) {\n    return [].concat(\n      a, \n      b.filter(function(e, currentIndex) {\n        return b.indexOf(e) === currentIndex && a.indexOf(e) === -1;\n      }));\n  }, []);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.</p>",
      "testString": "assert.deepEqual(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4]);"
    },
    {
      "text": "<p><code>uniteUnique([1, 2, 3], [5, 2, 1])</code> should return <code>[1, 2, 3, 5]</code>.</p>",
      "testString": "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1]), [1, 2, 3, 5]);"
    },
    {
      "text": "<p><code>uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8])</code> should return <code>[1, 2, 3, 5, 4, 6, 7, 8]</code>.</p>",
      "testString": "assert.deepEqual(uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]), [\n  1,\n  2,\n  3,\n  5,\n  4,\n  6,\n  7,\n  8\n]);"
    },
    {
      "text": "<p><code>uniteUnique([1, 3, 2], [5, 4], [5, 6])</code> should return <code>[1, 3, 2, 5, 4, 6]</code>.</p>",
      "testString": "assert.deepEqual(uniteUnique([1, 3, 2], [5, 4], [5, 6]), [1, 3, 2, 5, 4, 6]);"
    },
    {
      "text": "<p><code>uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1])</code> should return <code>[1, 3, 2, 5, 4]</code>.</p>",
      "testString": "assert.deepEqual(uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1]), [1, 3, 2, 5, 4]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.</p>\n<p>In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.</p>\n<p>The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.</p>\n<p>Check the assertion tests for examples.</p>\n</section>",
  "translationPending": false,
  "block": "intermediate-algorithm-scripting",
  "hasEditableBoundaries": false,
  "order": 8,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
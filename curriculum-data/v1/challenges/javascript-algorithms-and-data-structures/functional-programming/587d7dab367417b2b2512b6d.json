{
  "id": "587d7dab367417b2b2512b6d",
  "title": "Apply Functional Programming to Convert Strings to URL Slugs",
  "challengeType": 1,
  "forumTopicId": 301227,
  "dashedName": "apply-functional-programming-to-convert-strings-to-url-slugs",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Only change code below this line\nfunction urlSlug(title) {\n\n\n}\n// Only change code above this line\nurlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\");",
      "error": null,
      "seed": "// Only change code below this line\nfunction urlSlug(title) {\n\n\n}\n// Only change code above this line\nurlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\");"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function urlSlug(title) {\n  return title.trim().split(/\\s+/).join(\"-\").toLowerCase();\n}",
        "error": null,
        "seed": "function urlSlug(title) {\n  return title.trim().split(/\\s+/).join(\"-\").toLowerCase();\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should not use the <code>replace</code> method for this challenge.</p>",
      "testString": "assert(!__helpers.removeJSComments(code).match(/\\.?[\\s\\S]*?replace/g));"
    },
    {
      "text": "<p><code>urlSlug(\"Winter Is Coming\")</code> should return the string <code>winter-is-coming</code>.</p>",
      "testString": "assert(urlSlug('Winter Is Coming') === 'winter-is-coming');"
    },
    {
      "text": "<p><code>urlSlug(\" Winter Is  Coming\")</code> should return the string <code>winter-is-coming</code>.</p>",
      "testString": "assert(urlSlug(' Winter Is  Coming') === 'winter-is-coming');"
    },
    {
      "text": "<p><code>urlSlug(\"A Mind Needs Books Like A Sword Needs A Whetstone\")</code> should return the string <code>a-mind-needs-books-like-a-sword-needs-a-whetstone</code>.</p>",
      "testString": "assert(\n  urlSlug('A Mind Needs Books Like A Sword Needs A Whetstone') ===\n    'a-mind-needs-books-like-a-sword-needs-a-whetstone'\n);"
    },
    {
      "text": "<p><code>urlSlug(\"Hold The Door\")</code> should return the string <code>hold-the-door</code>.</p>",
      "testString": "assert(urlSlug('Hold The Door') === 'hold-the-door');"
    }
  ],
  "description": "<section id=\"description\">\n<p>The last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about <code>reduce</code>, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that <code>map</code> and <code>filter</code> are special cases of <code>reduce</code>.</p>\n<p>Let's combine what we've learned to solve a practical problem.</p>\n<p>Many content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled <code>Stop Using Reduce</code>, it's likely the URL would have some form of the title string in it (<code>.../stop-using-reduce</code>). You may have already noticed this on the freeCodeCamp site.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Fill in the <code>urlSlug</code> function so it converts a string <code>title</code> and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use <code>replace</code>. Here are the requirements:</p>\n<p>The input is a string with spaces and title-cased words</p>\n<p>The output is a string with the spaces between words replaced by a hyphen (<code>-</code>)</p>\n<p>The output should be all lower-cased letters</p>\n<p>The output should not have any spaces</p>\n</section>",
  "translationPending": false,
  "block": "functional-programming",
  "hasEditableBoundaries": false,
  "order": 7,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 20,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
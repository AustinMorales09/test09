{
  "id": "587d7b88367417b2b2512b45",
  "title": "Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem",
  "challengeType": 1,
  "forumTopicId": 301311,
  "dashedName": "use-higher-order-functions-map-filter-or-reduce-to-solve-a-complex-problem",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const squareList = arr => {\n  // Only change code below this line\n  return arr;\n  // Only change code above this line\n};\n\nconst squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);\nconsole.log(squaredIntegers);",
      "error": null,
      "seed": "const squareList = arr => {\n  // Only change code below this line\n  return arr;\n  // Only change code above this line\n};\n\nconst squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);\nconsole.log(squaredIntegers);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const squareList = arr => {\n  const positiveIntegers = arr.filter(num => {\n    return num >= 0 && Number.isInteger(num);\n  });\n  const squaredIntegers = positiveIntegers.map(num => {\n    return num ** 2;\n  });\n  return squaredIntegers;\n};",
        "error": null,
        "seed": "const squareList = arr => {\n  const positiveIntegers = arr.filter(num => {\n    return num >= 0 && Number.isInteger(num);\n  });\n  const squaredIntegers = positiveIntegers.map(num => {\n    return num ** 2;\n  });\n  return squaredIntegers;\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>squareList</code> should be a <code>function</code>.</p>",
      "testString": "assert.typeOf(squareList, 'function'),\n  '<code>squareList</code> should be a <code>function</code>';"
    },
    {
      "text": "<p><code>for</code>, <code>while</code>, and <code>forEach</code> should not be used.</p>",
      "testString": "assert(!__helpers.removeJSComments(code).match(/for|while|forEach/g));"
    },
    {
      "text": "<p><code>map</code>, <code>filter</code>, or <code>reduce</code> should be used.</p>",
      "testString": "assert(\n  __helpers\n    .removeWhiteSpace(__helpers.removeJSComments(code))\n    .match(/\\.(map|filter|reduce)\\(/g)\n);"
    },
    {
      "text": "<p>The function should return an <code>array</code>.</p>",
      "testString": "assert(Array.isArray(squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2])));"
    },
    {
      "text": "<p><code>squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2])</code> should return <code>[16, 1764, 36]</code>.</p>",
      "testString": "assert.deepStrictEqual(squareList([4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2]), [\n  16,\n  1764,\n  36\n]);"
    },
    {
      "text": "<p><code>squareList([-3.7, -5, 3, 10, 12.5, 7, -4.5, -17, 0.3])</code> should return <code>[9, 100, 49]</code>.</p>",
      "testString": "assert.deepStrictEqual(squareList([-3.7, -5, 3, 10, 12.5, 7, -4.5, -17, 0.3]), [\n  9,\n  100,\n  49\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now that you have worked through a few challenges using higher-order functions like <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>, you now get to apply them to solve a more complex challenge.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Complete the code for the <code>squareList</code> function using any combination of <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>. The function should return a new array containing the squares of <em>only</em> the positive integers (decimal numbers are not integers) when an array of real numbers is passed to it. An example of an array of real numbers is <code>[-3, 4.8, 5, 3, -3.2]</code>.</p>\n<p><strong>Note:</strong> Your function should not use any kind of <code>for</code> or <code>while</code> loops or the <code>forEach()</code> function.</p>\n</section>",
  "translationPending": false,
  "block": "functional-programming",
  "hasEditableBoundaries": false,
  "order": 7,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 15,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
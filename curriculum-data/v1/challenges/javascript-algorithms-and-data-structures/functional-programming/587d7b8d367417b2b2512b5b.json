{
  "id": "587d7b8d367417b2b2512b5b",
  "title": "Learn About Functional Programming",
  "challengeType": 1,
  "forumTopicId": 301233,
  "dashedName": "learn-about-functional-programming",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Function that returns a string representing a cup of green tea\nconst prepareTea = () => 'greenTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4TeamFCC = null;\n// Only change code above this line",
      "error": null,
      "seed": "// Function that returns a string representing a cup of green tea\nconst prepareTea = () => 'greenTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4TeamFCC = null;\n// Only change code above this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const prepareTea = () => 'greenTea';\n\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\nconst tea4TeamFCC = getTea(40); ",
        "error": null,
        "seed": "const prepareTea = () => 'greenTea';\n\nconst getTea = (numOfCups) => {\n  const teaCups = [];\n  \n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n\n  return teaCups;\n};\n\nconst tea4TeamFCC = getTea(40); "
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>tea4TeamFCC</code> variable should hold 40 cups of tea for the team.</p>",
      "testString": "assert(tea4TeamFCC.length === 40);"
    },
    {
      "text": "<p>The <code>tea4TeamFCC</code> variable should hold cups of green tea.</p>",
      "testString": "assert(tea4TeamFCC[0] === 'greenTea');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope: <code>INPUT -> PROCESS -> OUTPUT</code></p>\n<p>Functional programming is about:</p>\n<ol>\n<li>\n<p>Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change</p>\n</li>\n<li>\n<p>Pure functions - the same input always gives the same output</p>\n</li>\n<li>\n<p>Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled</p>\n</li>\n</ol>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>The members of freeCodeCamp happen to love tea.</p>\n<p>In the code editor, the <code>prepareTea</code> and <code>getTea</code> functions are already defined for you. Call the <code>getTea</code> function to get 40 cups of tea for the team, and store them in the <code>tea4TeamFCC</code> variable.</p>\n</section>",
  "translationPending": false,
  "block": "functional-programming",
  "hasEditableBoundaries": false,
  "order": 7,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
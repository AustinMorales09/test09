{
  "id": "587d7b8e367417b2b2512b5c",
  "title": "Understand Functional Programming Terminology",
  "challengeType": 1,
  "forumTopicId": 301240,
  "dashedName": "understand-functional-programming-terminology",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Function that returns a string representing a cup of green tea\nconst prepareGreenTea = () => 'greenTea';\n\n// Function that returns a string representing a cup of black tea\nconst prepareBlackTea = () => 'blackTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4GreenTeamFCC = null;\nconst tea4BlackTeamFCC = null;\n// Only change code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);",
      "error": null,
      "seed": "// Function that returns a string representing a cup of green tea\nconst prepareGreenTea = () => 'greenTea';\n\n// Function that returns a string representing a cup of black tea\nconst prepareBlackTea = () => 'blackTea';\n\n/*\nGiven a function (representing the tea type) and number of cups needed, the\nfollowing function returns an array of strings (each representing a cup of\na specific type of tea).\n*/\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\n// Only change code below this line\nconst tea4GreenTeamFCC = null;\nconst tea4BlackTeamFCC = null;\n// Only change code above this line\n\nconsole.log(\n  tea4GreenTeamFCC,\n  tea4BlackTeamFCC\n);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const prepareGreenTea = () => 'greenTea';\nconst prepareBlackTea = () => 'blackTea';\n\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\nconst tea4BlackTeamFCC = getTea(prepareBlackTea, 13);\nconst tea4GreenTeamFCC = getTea(prepareGreenTea, 27);",
        "error": null,
        "seed": "const prepareGreenTea = () => 'greenTea';\nconst prepareBlackTea = () => 'blackTea';\n\nconst getTea = (prepareTea, numOfCups) => {\n  const teaCups = [];\n\n  for(let cups = 1; cups <= numOfCups; cups += 1) {\n    const teaCup = prepareTea();\n    teaCups.push(teaCup);\n  }\n  return teaCups;\n};\n\nconst tea4BlackTeamFCC = getTea(prepareBlackTea, 13);\nconst tea4GreenTeamFCC = getTea(prepareGreenTea, 27);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>tea4GreenTeamFCC</code> variable should hold 27 cups of green tea for the team.</p>",
      "testString": "assert(tea4GreenTeamFCC.length === 27);"
    },
    {
      "text": "<p>The <code>tea4GreenTeamFCC</code> variable should hold cups of green tea.</p>",
      "testString": "assert(tea4GreenTeamFCC[0] === 'greenTea');"
    },
    {
      "text": "<p>The <code>tea4BlackTeamFCC</code> variable should hold 13 cups of black tea.</p>",
      "testString": "assert(tea4BlackTeamFCC.length === 13);"
    },
    {
      "text": "<p>The <code>tea4BlackTeamFCC</code> variable should hold cups of black tea.</p>",
      "testString": "assert(tea4BlackTeamFCC[0] === 'blackTea');"
    }
  ],
  "description": "<section id=\"description\">\n<p>The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.</p>\n<p>With that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.</p>\n<p>But first, let's cover some functional terminology:</p>\n<p><dfn>Callbacks</dfn> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.</p>\n<p>Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <dfn>first class</dfn> functions. In JavaScript, all functions are first class functions.</p>\n<p>The functions that take a function as an argument, or return a function as a return value, are called <dfn>higher order</dfn> functions.</p>\n<p>When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a <dfn>lambda</dfn>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Prepare 27 cups of green tea and 13 cups of black tea and store them in <code>tea4GreenTeamFCC</code> and <code>tea4BlackTeamFCC</code> variables, respectively. Note that the <code>getTea</code> function has been modified so it now takes a function as the first argument.</p>\n<p>Note: The data (the number of cups of tea) is supplied as the last argument. We'll discuss this more in later lessons.</p>\n</section>",
  "translationPending": false,
  "block": "functional-programming",
  "hasEditableBoundaries": false,
  "order": 7,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
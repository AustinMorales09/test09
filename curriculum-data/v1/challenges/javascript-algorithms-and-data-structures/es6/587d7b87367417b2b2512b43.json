{
  "id": "587d7b87367417b2b2512b43",
  "title": "Use Arrow Functions to Write Concise Anonymous Functions",
  "challengeType": 1,
  "forumTopicId": 301211,
  "dashedName": "use-arrow-functions-to-write-concise-anonymous-functions",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "var magic = function() {\n  return new Date();\n};",
      "error": null,
      "seed": "var magic = function() {\n  return new Date();\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const magic = () => {\n  return new Date();\n};",
        "error": null,
        "seed": "const magic = () => {\n  return new Date();\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should replace the <code>var</code> keyword.</p>",
      "testString": "assert.notMatch(code, /var/g)"
    },
    {
      "text": "<p><code>magic</code> should be a constant variable (by using <code>const</code>).</p>",
      "testString": "assert.match(code, /const\\s+magic/g)"
    },
    {
      "text": "<p><code>magic</code> should be a <code>function</code>.</p>",
      "testString": "assert(typeof magic === 'function');"
    },
    {
      "text": "<p><code>magic()</code> should return the correct date.</p>",
      "testString": "assert(magic().setHours(0, 0, 0, 0) === new Date().setHours(0, 0, 0, 0));"
    },
    {
      "text": "<p>The <code>function</code> keyword should not be used.</p>",
      "testString": "assert.notMatch(code, /function/g)"
    }
  ],
  "description": "<section id=\"description\">\n<p>In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.</p>\n<p>To achieve this, we often use the following syntax:</p>\n<pre><code class=\"language-js\">const myFunc = function() {\n  const myVar = \"value\";\n  return myVar;\n}\n</code></pre>\n<p>ES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use <strong>arrow function syntax</strong>:</p>\n<pre><code class=\"language-js\">const myFunc = () => {\n  const myVar = \"value\";\n  return myVar;\n}\n</code></pre>\n<p>When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword <code>return</code> as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:</p>\n<pre><code class=\"language-js\">const myFunc = () => \"value\";\n</code></pre>\n<p>This code will still return the string <code>value</code> by default.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Rewrite the function assigned to the variable <code>magic</code> which returns a <code>new Date()</code> to use arrow function syntax. Also, make sure nothing is defined using the keyword <code>var</code>.</p>\n</section>",
  "translationPending": false,
  "block": "es6",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 3,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7b8a367417b2b2512b4e",
  "title": "Create Strings using Template Literals",
  "challengeType": 1,
  "forumTopicId": 301200,
  "dashedName": "create-strings-using-template-literals",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  // Only change code below this line\n  const failureItems = [];\n  // Only change code above this line\n\n  return failureItems;\n}\n\nconst failuresList = makeList(result.failure);",
      "error": null,
      "seed": "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  // Only change code below this line\n  const failureItems = [];\n  // Only change code above this line\n\n  return failureItems;\n}\n\nconst failuresList = makeList(result.failure);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  return arr.map(val => `<li class=\"text-warning\">${val}</li>`);\n}\n\nconst failuresList = makeList(result.failure);",
        "error": null,
        "seed": "const result = {\n  success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n  failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n  skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\nfunction makeList(arr) {\n  return arr.map(val => `<li class=\"text-warning\">${val}</li>`);\n}\n\nconst failuresList = makeList(result.failure);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>failuresList</code> should be an array containing <code>result failure</code> messages.</p>",
      "testString": "assert(\n  typeof makeList(result.failure) === 'object' && failuresList.length === 3\n);"
    },
    {
      "text": "<p><code>failuresList</code> should be equal to the specified output.</p>",
      "testString": "assert(\n  makeList(result.failure).every(\n    (v, i) =>\n      v === `<li class=\"text-warning\">${result.failure[i]}</li>` ||\n      v === `<li class='text-warning'>${result.failure[i]}</li>`\n  )\n);"
    },
    {
      "text": "<p>Template strings and expression interpolation should be used.</p>",
      "testString": "assert.match(code, /(`.*\\${.*}.*`)/);"
    },
    {
      "text": "<p>An iterator should be used.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/for|map|reduce|forEach|while/));"
    }
  ],
  "description": "<section id=\"description\">\n<p>A new feature of ES6 is the <dfn>template literal</dfn>. This is a special type of string that makes creating complex strings easier.</p>\n<p>Template literals allow you to create multi-line strings and to use string interpolation features to create strings.</p>\n<p>Consider the code below:</p>\n<pre><code class=\"language-js\">const person = {\n  name: \"Zodiac Hasbro\",\n  age: 56\n};\n\nconst greeting = `Hello, my name is ${person.name}!\nI am ${person.age} years old.`;\n\nconsole.log(greeting);\n</code></pre>\n<p>The console will display the strings <code>Hello, my name is Zodiac Hasbro!</code> and <code>I am 56 years old.</code>.</p>\n<p>A lot of things happened there. Firstly, the example uses backticks (<code>`</code>), not quotes (<code>'</code> or <code>\"</code>), to wrap the string. Secondly, notice that the string is multi-line, both in the code and the output. This saves inserting <code>\\n</code> within strings. The <code>${variable}</code> syntax used above is a placeholder. Basically, you won't have to use concatenation with the <code>+</code> operator anymore. To add variables to strings, you just drop the variable in a template string and wrap it with <code>${</code> and <code>}</code>. Similarly, you can include other expressions in your string literal, for example <code>${a + b}</code>. This new way of creating strings gives you more flexibility to create robust strings.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Use template literal syntax with backticks to create an array of list element (<code>li</code>) strings. Each list element's text should be one of the array elements from the <code>failure</code> property on the <code>result</code> object and have a <code>class</code> attribute with the value <code>text-warning</code>. The <code>makeList</code> function should return the array of list item strings.</p>\n<p>Use an iterator method (any kind of loop) to get the desired output (shown below).</p>\n<pre><code class=\"language-js\">[\n  '&#x3C;li class=\"text-warning\">no-var&#x3C;/li>',\n  '&#x3C;li class=\"text-warning\">var-on-top&#x3C;/li>',\n  '&#x3C;li class=\"text-warning\">linebreak&#x3C;/li>'\n]\n</code></pre>\n</section>",
  "translationPending": false,
  "block": "es6",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 14,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7b87367417b2b2512b42",
  "title": "Mutate an Array Declared with const",
  "challengeType": 1,
  "forumTopicId": 301206,
  "dashedName": "mutate-an-array-declared-with-const",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const s = [5, 7, 2];\nfunction editInPlace() {\n  // Only change code below this line\n\n  // Using s = [2, 5, 7] would be invalid\n\n  // Only change code above this line\n}\neditInPlace();",
      "error": null,
      "seed": "const s = [5, 7, 2];\nfunction editInPlace() {\n  // Only change code below this line\n\n  // Using s = [2, 5, 7] would be invalid\n\n  // Only change code above this line\n}\neditInPlace();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const s = [5, 7, 2];\nfunction editInPlace() {\n  s[0] = 2;\n  s[1] = 5;\n  s[2] = 7;\n}\neditInPlace();",
        "error": null,
        "seed": "const s = [5, 7, 2];\nfunction editInPlace() {\n  s[0] = 2;\n  s[1] = 5;\n  s[2] = 7;\n}\neditInPlace();"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should not replace <code>const</code> keyword.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/const/g));"
    },
    {
      "text": "<p><code>s</code> should be a constant variable (by using <code>const</code>).</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/const\\s+s/g));"
    },
    {
      "text": "<p>You should not change the original array declaration.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(\n/const\\s+s\\s*=\\s*\\[\\s*5\\s*,\\s*7\\s*,\\s*2\\s*\\]\\s*;?/g\n));"
    },
    {
      "text": "<p><code>s</code> should be equal to <code>[2, 5, 7]</code>.</p>",
      "testString": "assert.deepEqual(s, [2, 5, 7]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>If you are unfamiliar with <code>const</code>, check out <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/declare-a-read-only-variable-with-the-const-keyword\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this challenge about the <code>const</code> keyword</a>.</p>\n<p>The <code>const</code> declaration has many use cases in modern JavaScript.</p>\n<p>Some developers prefer to assign all their variables using <code>const</code> by default, unless they know they will need to reassign the value. Only in that case, they use <code>let</code>.</p>\n<p>However, it is important to understand that objects (including arrays and functions) assigned to a variable using <code>const</code> are still mutable. Using the <code>const</code> declaration only prevents reassignment of the variable identifier.</p>\n<pre><code class=\"language-js\">const s = [5, 6, 7];\ns = [1, 2, 3];\ns[2] = 45;\nconsole.log(s);\n</code></pre>\n<p><code>s = [1, 2, 3]</code> will result in an error. After commenting out that line, the <code>console.log</code> will display the value <code>[5, 6, 45]</code>.</p>\n<p>As you can see, you can mutate the object <code>[5, 6, 7]</code> itself and the variable <code>s</code> will still point to the altered array <code>[5, 6, 45]</code>. Like all arrays, the array elements in <code>s</code> are mutable, but because <code>const</code> was used, you cannot use the variable identifier <code>s</code> to point to a different array using the assignment operator.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>An array is declared as <code>const s = [5, 7, 2]</code>. Change the array to <code>[2, 5, 7]</code> using various element assignments.</p>\n</section>",
  "translationPending": false,
  "block": "es6",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
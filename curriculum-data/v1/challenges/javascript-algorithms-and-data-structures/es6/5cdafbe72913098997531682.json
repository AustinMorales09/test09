{
  "id": "5cdafbe72913098997531682",
  "title": "Handle a Rejected Promise with catch",
  "challengeType": 1,
  "forumTopicId": 301204,
  "dashedName": "handle-a-rejected-promise-with-catch",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const errorIsParameter = /\\.catch\\((function\\(error\\){|error|\\(error\\)=>)/.test(__helpers.removeWhiteSpace(__helpers.removeJSComments(code)));",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});",
      "error": null,
      "seed": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});",
        "error": null,
        "seed": "const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer is set to false to represent an unsuccessful response from a server\n  let responseFromServer = false;\n    \n  if(responseFromServer) {\n    resolve(\"We got the data\");\n  } else {  \n    reject(\"Data not received\");\n  }\n});\n\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n\nmakeServerRequest.catch(error => {\n  console.log(error);\n});"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should call the <code>catch</code> method on the promise.</p>",
      "testString": "assert(\n  __helpers.removeWhiteSpace(__helpers.removeJSComments(code)).match(/(makeServerRequest|\\))\\.catch\\(/g)\n);"
    },
    {
      "text": "<p>Your <code>catch</code> method should have a callback function with <code>error</code> as its parameter.</p>",
      "testString": "assert(errorIsParameter);"
    },
    {
      "text": "<p>You should log <code>error</code> to the console.</p>",
      "testString": "assert(\n  errorIsParameter &&\n    __helpers\n      .removeWhiteSpace(__helpers.removeJSComments(code))\n      .match(/\\.catch\\(.*?error.*?console.log\\(error\\).*?\\)/)\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p><code>catch</code> is the method used when your promise has been rejected. It is executed immediately after a promise's <code>reject</code> method is called. Hereâ€™s the syntax:</p>\n<pre><code class=\"language-js\">myPromise.catch(error => {\n  \n});\n</code></pre>\n<p><code>error</code> is the argument passed in to the <code>reject</code> method.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add the <code>catch</code> method to your promise. Use <code>error</code> as the parameter of its callback function and log <code>error</code> to the console.</p>\n</section>",
  "translationPending": false,
  "block": "es6",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 28,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7b87367417b2b2512b40",
  "title": "Compare Scopes of the var and let Keywords",
  "challengeType": 1,
  "forumTopicId": 301195,
  "dashedName": "compare-scopes-of-the-var-and-let-keywords",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function checkScope() {\n  var i = 'function scope';\n  if (true) {\n    i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n  console.log('Function scope i is: ', i);\n  return i;\n}",
      "error": null,
      "seed": "function checkScope() {\n  var i = 'function scope';\n  if (true) {\n    i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n  console.log('Function scope i is: ', i);\n  return i;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function checkScope() {\n  let i = 'function scope';\n  if (true) {\n    let i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n \n  console.log('Function scope i is: ', i);\n  return i;\n}",
        "error": null,
        "seed": "function checkScope() {\n  let i = 'function scope';\n  if (true) {\n    let i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n \n  console.log('Function scope i is: ', i);\n  return i;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>var</code> should not exist in code.</p>",
      "testString": "assert(!__helpers.removeJSComments(code).match(/var/g));"
    },
    {
      "text": "<p>The variable <code>i</code> declared in the <code>if</code> statement should equal the string <code>block scope</code>.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/(i\\s*=\\s*).*\\s*.*\\s*.*\\1('|\")block\\s*scope\\2/g));"
    },
    {
      "text": "<p><code>checkScope()</code> should return the string <code>function scope</code></p>",
      "testString": "assert(checkScope() === 'function scope');"
    }
  ],
  "description": "<section id=\"description\">\n<p>If you are unfamiliar with <code>let</code>, check out <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/explore-differences-between-the-var-and-let-keywords\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this challenge about the difference between <code>let</code> and <code>var</code></a>.</p>\n<p>When you declare a variable with the <code>var</code> keyword, it is declared globally, or locally if declared inside a function.</p>\n<p>The <code>let</code> keyword behaves similarly, but with some extra features. When you declare a variable with the <code>let</code> keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">var numArray = [];\nfor (var i = 0; i &#x3C; 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n</code></pre>\n<p>Here the console will display the values <code>[0, 1, 2]</code> and <code>3</code>.</p>\n<p>With the <code>var</code> keyword, <code>i</code> is declared globally. So when <code>i++</code> is executed, it updates the global variable. This code is similar to the following:</p>\n<pre><code class=\"language-js\">var numArray = [];\nvar i;\nfor (i = 0; i &#x3C; 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n</code></pre>\n<p>Here the console will display the values <code>[0, 1, 2]</code> and <code>3</code>.</p>\n<p>This behavior will cause problems if you were to create a function and store it for later use inside a <code>for</code> loop that uses the <code>i</code> variable. This is because the stored function will always refer to the value of the updated global <code>i</code> variable.</p>\n<pre><code class=\"language-js\">var printNumTwo;\nfor (var i = 0; i &#x3C; 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\n</code></pre>\n<p>Here the console will display the value <code>3</code>.</p>\n<p>As you can see, <code>printNumTwo()</code> prints 3 and not 2. This is because the value assigned to <code>i</code> was updated and the <code>printNumTwo()</code> returns the global <code>i</code> and not the value <code>i</code> had when the function was created in the for loop. The <code>let</code> keyword does not follow this behavior:</p>\n<pre><code class=\"language-js\">let printNumTwo;\nfor (let i = 0; i &#x3C; 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\nconsole.log(i);\n</code></pre>\n<p>Here the console will display the value <code>2</code>, and an error that <code>i is not defined</code>.</p>\n<p><code>i</code> is not defined because it was not declared in the global scope. It is only declared within the <code>for</code> loop statement. <code>printNumTwo()</code> returned the correct value because three different <code>i</code> variables with unique values (0, 1, and 2) were created by the <code>let</code> keyword within the loop statement.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Fix the code so that <code>i</code> declared in the <code>if</code> statement is a separate variable than <code>i</code> declared in the first line of the function. Be certain not to use the <code>var</code> keyword anywhere in your code.</p>\n<p>This exercise is designed to illustrate the difference between how <code>var</code> and <code>let</code> keywords assign scope to the declared variable. When programming a function similar to the one used in this exercise, it is often better to use different variable names to avoid confusion.</p>\n</section>",
  "translationPending": false,
  "block": "es6",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
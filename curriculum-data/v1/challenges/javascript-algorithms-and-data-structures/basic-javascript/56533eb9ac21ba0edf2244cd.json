{
  "id": "56533eb9ac21ba0edf2244cd",
  "title": "Accessing Nested Arrays",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cLeGDtZ",
  "forumTopicId": 16160,
  "dashedName": "accessing-nested-arrays",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(x) {\n  if(typeof x != 'undefined') {\n    return \"secondTree = \" + x;\n  }\n  return \"secondTree is undefined\";\n})(secondTree);",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = \"\";",
      "error": null,
      "seed": "const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = \"\";"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = myPlants[1].list[1];",
        "error": null,
        "seed": "const myPlants = [\n  {\n    type: \"flowers\",\n    list: [\n      \"rose\",\n      \"tulip\",\n      \"dandelion\"\n    ]\n  },\n  {\n    type: \"trees\",\n    list: [\n      \"fir\",\n      \"pine\",\n      \"birch\"\n    ]\n  }\n];\n\nconst secondTree = myPlants[1].list[1];"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>secondTree</code> should equal the string <code>pine</code>.</p>",
      "testString": "assert(secondTree === 'pine');"
    },
    {
      "text": "<p>Your code should use dot and bracket notation to access <code>myPlants</code>.</p>",
      "testString": "assert(/=\\s*myPlants\\[1\\].list\\[1\\]/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>As we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, array bracket notation can be chained to access nested arrays.</p>\n<p>Here is an example of how to access a nested array:</p>\n<pre><code class=\"language-js\">const ourPets = [\n  {\n    animalType: \"cat\",\n    names: [\n      \"Meowzer\",\n      \"Fluffy\",\n      \"Kit-Cat\"\n    ]\n  },\n  {\n    animalType: \"dog\",\n    names: [\n      \"Spot\",\n      \"Bowser\",\n      \"Frankie\"\n    ]\n  }\n];\n\nourPets[0].names[1];\nourPets[1].names[0];\n</code></pre>\n<p><code>ourPets[0].names[1]</code> would be the string <code>Fluffy</code>, and <code>ourPets[1].names[0]</code> would be the string <code>Spot</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Using dot and bracket notation, set the variable <code>secondTree</code> to the second element in the <code>list</code> array from the second object in the <code>myPlants</code> array.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 93,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "598e8944f009e646fc236146",
  "title": "Understanding Undefined Value returned from a Function",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/ce2p7cL",
  "forumTopicId": 301177,
  "dashedName": "understanding-undefined-value-returned-from-a-function",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nlet sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\n// Only change code below this line\n\n\n// Only change code above this line\n\naddThree();\naddFive();",
      "error": null,
      "seed": "// Setup\nlet sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\n// Only change code below this line\n\n\n// Only change code above this line\n\naddThree();\naddFive();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\nfunction addFive() {\n  sum = sum + 5;\n}\n\naddThree();\naddFive();",
        "error": null,
        "seed": "let sum = 0;\n\nfunction addThree() {\n  sum = sum + 3;\n}\n\nfunction addFive() {\n  sum = sum + 5;\n}\n\naddThree();\naddFive();"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>addFive</code> should be a function.</p>",
      "testString": "assert(typeof addFive === 'function');"
    },
    {
      "text": "<p>Once both functions have run, the <code>sum</code> should be equal to <code>8</code>.</p>",
      "testString": "assert(sum === 8);"
    },
    {
      "text": "<p>Returned value from <code>addFive</code> should be <code>undefined</code>.</p>",
      "testString": "assert(addFive() === undefined);"
    },
    {
      "text": "<p>Inside the <code>addFive</code> function, you should add <code>5</code> to the <code>sum</code> variable.</p>",
      "testString": "assert(\n  __helpers.removeWhiteSpace(addFive.toString()).match(/sum=sum\\+5|sum\\+=5/)\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A function can include the <code>return</code> statement but it does not have to. In the case that the function doesn't have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">let sum = 0;\n\nfunction addSum(num) {\n  sum = sum + num;\n}\n\naddSum(3);\n</code></pre>\n<p><code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a function <code>addFive</code> without any arguments. This function adds 5 to the <code>sum</code> variable, but its returned value is <code>undefined</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 54,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
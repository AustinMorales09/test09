{
  "id": "587d7b7e367417b2b2512b21",
  "title": "Use Multiple Conditional (Ternary) Operators",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cyWJBT4",
  "forumTopicId": 301179,
  "dashedName": "use-multiple-conditional-ternary-operators",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function checkSign(num) {\n\n}\n\ncheckSign(10);",
      "error": null,
      "seed": "function checkSign(num) {\n\n}\n\ncheckSign(10);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function checkSign(num) {\n  return (num > 0) ? 'positive' : (num < 0) ? 'negative' : 'zero';\n}",
        "error": null,
        "seed": "function checkSign(num) {\n  return (num > 0) ? 'positive' : (num < 0) ? 'negative' : 'zero';\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>checkSign</code> should use multiple conditional operators</p>",
      "testString": "assert(/.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?\\s*?\\?\\s*?.+?\\s*?:\\s*?.+?/gi.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p><code>checkSign(10)</code> should return the string <code>positive</code>. Note that capitalization matters</p>",
      "testString": "assert(checkSign(10) === 'positive');"
    },
    {
      "text": "<p><code>checkSign(-12)</code> should return the string <code>negative</code>. Note that capitalization matters</p>",
      "testString": "assert(checkSign(-12) === 'negative');"
    },
    {
      "text": "<p><code>checkSign(0)</code> should return the string <code>zero</code>. Note that capitalization matters</p>",
      "testString": "assert(checkSign(0) === 'zero');"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the previous challenge, you used a single conditional operator. You can also chain them together to check for multiple conditions.</p>\n<p>The following function uses <code>if</code>, <code>else if</code>, and <code>else</code> statements to check multiple conditions:</p>\n<pre><code class=\"language-js\">function findGreaterOrEqual(a, b) {\n  if (a === b) {\n    return \"a and b are equal\";\n  }\n  else if (a > b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater\";\n  }\n}\n</code></pre>\n<p>The above function can be re-written using multiple conditional operators:</p>\n<pre><code class=\"language-js\">function findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" \n    : (a > b) ? \"a is greater\" \n    : \"b is greater\";\n}\n</code></pre>\n<p>It is considered best practice to format multiple conditional operators such that each condition is on a separate line, as shown above. Using multiple conditional operators without proper indentation may make your code hard to read. For example:</p>\n<pre><code class=\"language-js\">function findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";\n}\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>In the <code>checkSign</code> function, use multiple conditional operators - following the recommended format used in <code>findGreaterOrEqual</code> - to check if a number is positive, negative or zero. The function should return <code>positive</code>, <code>negative</code> or <code>zero</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 110,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
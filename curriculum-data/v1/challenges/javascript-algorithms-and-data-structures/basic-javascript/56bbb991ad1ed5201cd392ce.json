{
  "id": "56bbb991ad1ed5201cd392ce",
  "title": "Manipulate Arrays With unshift Method",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/ckNDESv",
  "forumTopicId": 18239,
  "dashedName": "manipulate-arrays-with-unshift",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(y, z){return 'myArray = ' + JSON.stringify(y);})(myArray);",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\n\n// Only change code below this line\n",
      "error": null,
      "seed": "// Setup\nconst myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\n\n// Only change code below this line\n"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);",
        "error": null,
        "seed": "const myArray = [[\"John\", 23], [\"dog\", 3]];\nmyArray.shift();\nmyArray.unshift([\"Paul\", 35]);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myArray</code> should now have <code>[[\"Paul\", 35], [\"dog\", 3]]</code>.</p>",
      "testString": "assert(\n  (function (d) {\n    if (\n      typeof d[0] === 'object' &&\n      d[0][0] == 'Paul' &&\n      d[0][1] === 35 &&\n      d[1][0] != undefined &&\n      d[1][0] == 'dog' &&\n      d[1][1] != undefined &&\n      d[1][1] == 3\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Not only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.</p>\n<p><code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourArray = [\"Stimpson\", \"J\", \"cat\"];\nourArray.shift();\nourArray.unshift(\"Happy\");\n</code></pre>\n<p>After the <code>shift</code>, <code>ourArray</code> would have the value <code>[\"J\", \"cat\"]</code>. After the <code>unshift</code>, <code>ourArray</code> would have the value <code>[\"Happy\", \"J\", \"cat\"]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add <code>[\"Paul\", 35]</code> to the beginning of the <code>myArray</code> variable using <code>unshift()</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 46,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
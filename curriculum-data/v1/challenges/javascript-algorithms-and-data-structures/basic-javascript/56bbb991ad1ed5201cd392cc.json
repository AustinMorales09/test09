{
  "id": "56bbb991ad1ed5201cd392cc",
  "title": "Manipulate Arrays With pop Method",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cRbVZAB",
  "forumTopicId": 18236,
  "dashedName": "manipulate-arrays-with-pop",
  "challengeFiles": [
    {
      "head": "",
      "tail": "if (typeof removedFromMyArray !== 'undefined') (function(y, z){return 'myArray = ' + JSON.stringify(y) + ' & removedFromMyArray = ' + JSON.stringify(z);})(myArray, removedFromMyArray);",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n",
      "error": null,
      "seed": "// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myArray = [[\"John\", 23], [\"cat\", 2]];\nconst removedFromMyArray = myArray.pop();",
        "error": null,
        "seed": "const myArray = [[\"John\", 23], [\"cat\", 2]];\nconst removedFromMyArray = myArray.pop();"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myArray</code> should only contain <code>[[\"John\", 23]]</code>.</p>",
      "testString": "assert(\n  (function (d) {\n    if (d[0][0] == 'John' && d[0][1] === 23 && d[1] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
    },
    {
      "text": "<p>You should use <code>pop()</code> on <code>myArray</code>.</p>",
      "testString": "assert(/removedFromMyArray\\s*=\\s*myArray\\s*.\\s*pop\\s*(\\s*)/.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p><code>removedFromMyArray</code> should only contain <code>[\"cat\", 2]</code>.</p>",
      "testString": "assert(\n  (function (d) {\n    if (d[0] == 'cat' && d[1] === 2 && d[2] == undefined) {\n      return true;\n    } else {\n      return false;\n    }\n  })(removedFromMyArray)\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Another way to change the data in an array is with the <code>.pop()</code> function.</p>\n<p><code>.pop()</code> is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.</p>\n<p>Any type of entry can be popped off of an array - numbers, strings, even nested arrays.</p>\n<pre><code class=\"language-js\">const threeArr = [1, 4, 6];\nconst oneDown = threeArr.pop();\nconsole.log(oneDown);\nconsole.log(threeArr);\n</code></pre>\n<p>The first <code>console.log</code> will display the value <code>6</code>, and the second will display the value <code>[1, 4]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Use the <code>.pop()</code> function to remove the last item from <code>myArray</code> and assign the popped off value to a new variable, <code>removedFromMyArray</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 44,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
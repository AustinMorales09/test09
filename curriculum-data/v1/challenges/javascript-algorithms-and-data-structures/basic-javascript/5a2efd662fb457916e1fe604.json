{
  "id": "5a2efd662fb457916e1fe604",
  "title": "Iterate with JavaScript Do...While Loops",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cDqWGcp",
  "forumTopicId": 301172,
  "dashedName": "iterate-with-javascript-do---while-loops",
  "challengeFiles": [
    {
      "head": "",
      "tail": "if(typeof myArray !== \"undefined\"){(function(){return myArray;})();}",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst myArray = [];\nlet i = 10;\n\n// Only change code below this line\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}",
      "error": null,
      "seed": "// Setup\nconst myArray = [];\nlet i = 10;\n\n// Only change code below this line\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myArray = [];\nlet i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)",
        "error": null,
        "seed": "const myArray = [];\nlet i = 10;\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5)"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should be using a <code>do...while</code> loop for this exercise.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/do/g));"
    },
    {
      "text": "<p><code>myArray</code> should equal <code>[10]</code>.</p>",
      "testString": "assert.deepEqual(myArray, [10]);"
    },
    {
      "text": "<p><code>i</code> should equal <code>11</code></p>",
      "testString": "assert.equal(i, 11);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The next type of loop you will learn is called a <code>do...while</code> loop. It is called a <code>do...while</code> loop because it will first <code>do</code> one pass of the code inside the loop no matter what, and then continue to run the loop <code>while</code> the specified condition evaluates to <code>true</code>.</p>\n<pre><code class=\"language-js\">const ourArray = [];\nlet i = 0;\n\ndo {\n  ourArray.push(i);\n  i++;\n} while (i &#x3C; 5);\n</code></pre>\n<p>The example above behaves similar to other types of loops, and the resulting array will look like <code>[0, 1, 2, 3, 4]</code>. However, what makes the <code>do...while</code> different from other loops is how it behaves when the condition fails on the first check. Let's see this in action. Here is a regular <code>while</code> loop that will run the code in the loop as long as <code>i &#x3C; 5</code>:</p>\n<pre><code class=\"language-js\">const ourArray = []; \nlet i = 5;\n\nwhile (i &#x3C; 5) {\n  ourArray.push(i);\n  i++;\n}\n</code></pre>\n<p>In this example, we initialize the value of <code>ourArray</code> to an empty array and the value of <code>i</code> to 5. When we execute the <code>while</code> loop, the condition evaluates to <code>false</code> because <code>i</code> is not less than 5, so we do not execute the code inside the loop. The result is that <code>ourArray</code> will end up with no values added to it, and it will still look like <code>[]</code> when all of the code in the example above has completed running. Now, take a look at a <code>do...while</code> loop:</p>\n<pre><code class=\"language-js\">const ourArray = []; \nlet i = 5;\n\ndo {\n  ourArray.push(i);\n  i++;\n} while (i &#x3C; 5);\n</code></pre>\n<p>In this case, we initialize the value of <code>i</code> to 5, just like we did with the <code>while</code> loop. When we get to the next line, there is no condition to evaluate, so we go to the code inside the curly braces and execute it. We will add a single element to the array and then increment <code>i</code> before we get to the condition check. When we finally evaluate the condition <code>i &#x3C; 5</code> on the last line, we see that <code>i</code> is now 6, which fails the conditional check, so we exit the loop and are done. At the end of the above example, the value of <code>ourArray</code> is <code>[5]</code>. Essentially, a <code>do...while</code> loop ensures that the code inside the loop will run at least once. Let's try getting a <code>do...while</code> loop to work by pushing values to an array.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Change the <code>while</code> loop in the code to a <code>do...while</code> loop so the loop will push only the number <code>10</code> to <code>myArray</code>, and <code>i</code> will be equal to <code>11</code> when your code has finished running.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 101,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
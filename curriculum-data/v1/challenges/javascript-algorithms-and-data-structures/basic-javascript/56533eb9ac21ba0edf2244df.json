{
  "id": "56533eb9ac21ba0edf2244df",
  "title": "Multiple Identical Options in Switch Statements",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cdBKWCV",
  "forumTopicId": 18242,
  "dashedName": "multiple-identical-options-in-switch-statements",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sequentialSizes(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nsequentialSizes(1);",
      "error": null,
      "seed": "function sequentialSizes(val) {\n  let answer = \"\";\n  // Only change code below this line\n\n\n\n  // Only change code above this line\n  return answer;\n}\n\nsequentialSizes(1);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function sequentialSizes(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n\n  return answer;\n}",
        "error": null,
        "seed": "function sequentialSizes(val) {\n  let answer = \"\";\n\n  switch (val) {\n    case 1:\n    case 2:\n    case 3:\n      answer = \"Low\";\n      break;\n    case 4:\n    case 5:\n    case 6:\n      answer = \"Mid\";\n      break;\n    case 7:\n    case 8:\n    case 9:\n      answer = \"High\";\n  }\n\n  return answer;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sequentialSizes(1)</code> should return the string <code>Low</code></p>",
      "testString": "assert(sequentialSizes(1) === 'Low');"
    },
    {
      "text": "<p><code>sequentialSizes(2)</code> should return the string <code>Low</code></p>",
      "testString": "assert(sequentialSizes(2) === 'Low');"
    },
    {
      "text": "<p><code>sequentialSizes(3)</code> should return the string <code>Low</code></p>",
      "testString": "assert(sequentialSizes(3) === 'Low');"
    },
    {
      "text": "<p><code>sequentialSizes(4)</code> should return the string <code>Mid</code></p>",
      "testString": "assert(sequentialSizes(4) === 'Mid');"
    },
    {
      "text": "<p><code>sequentialSizes(5)</code> should return the string <code>Mid</code></p>",
      "testString": "assert(sequentialSizes(5) === 'Mid');"
    },
    {
      "text": "<p><code>sequentialSizes(6)</code> should return the string <code>Mid</code></p>",
      "testString": "assert(sequentialSizes(6) === 'Mid');"
    },
    {
      "text": "<p><code>sequentialSizes(7)</code> should return the string <code>High</code></p>",
      "testString": "assert(sequentialSizes(7) === 'High');"
    },
    {
      "text": "<p><code>sequentialSizes(8)</code> should return the string <code>High</code></p>",
      "testString": "assert(sequentialSizes(8) === 'High');"
    },
    {
      "text": "<p><code>sequentialSizes(9)</code> should return the string <code>High</code></p>",
      "testString": "assert(sequentialSizes(9) === 'High');"
    },
    {
      "text": "<p>You should not use any <code>if</code> or <code>else</code> statements</p>",
      "testString": "assert(!/else/g.test(__helpers.removeJSComments(code)) || !/if/g.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p>You should have nine <code>case</code> statements</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/case/g).length === 9);"
    }
  ],
  "description": "<section id=\"description\">\n<p>If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:</p>\n<pre><code class=\"language-js\">let result = \"\";\nswitch (val) {\n  case 1:\n  case 2:\n  case 3:\n    result = \"1, 2, or 3\";\n    break;\n  case 4:\n    result = \"4 alone\";\n}\n</code></pre>\n<p>Cases for 1, 2, and 3 will all produce the same result.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a switch statement to set <code>answer</code> for the following ranges:<br>\n<code>1-3</code> - <code>Low</code><br>\n<code>4-6</code> - <code>Mid</code><br>\n<code>7-9</code> - <code>High</code></p>\n<p><strong>Note:</strong> You will need to have a <code>case</code> statement for each number in the range.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 77,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
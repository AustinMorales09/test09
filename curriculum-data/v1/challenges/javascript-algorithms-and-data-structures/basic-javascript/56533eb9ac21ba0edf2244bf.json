{
  "id": "56533eb9ac21ba0edf2244bf",
  "title": "Local Scope and Functions",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cd62NhM",
  "forumTopicId": 18227,
  "dashedName": "local-scope-and-functions",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function myLocalScope() {\n  // Only change code below this line\n\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);",
      "error": null,
      "seed": "function myLocalScope() {\n  // Only change code below this line\n\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function myLocalScope() {\n  // Only change code below this line\n  let myVar;\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);",
        "error": null,
        "seed": "function myLocalScope() {\n  // Only change code below this line\n  let myVar;\n  console.log('inside myLocalScope', myVar);\n}\nmyLocalScope();\n\n// Run and check the console\n// myVar is not defined outside of myLocalScope\nconsole.log('outside myLocalScope', myVar);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The code should not contain a global <code>myVar</code> variable.</p>",
      "testString": "function declared() {\n  myVar;\n}\n\nassert.throws(declared, ReferenceError);"
    },
    {
      "text": "<p>You should add a local <code>myVar</code> variable.</p>",
      "testString": "assert(\n  /functionmyLocalScope\\(\\)\\{.*(var|let|const)myVar[\\s\\S]*}/.test(\n    __helpers.removeWhiteSpace(__helpers.removeJSComments(code))\n  )\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Variables which are declared within a function, as well as the function parameters, have <dfn>local</dfn> scope. That means they are only visible within that function.</p>\n<p>Here is a function <code>myTest</code> with a local variable called <code>loc</code>.</p>\n<pre><code class=\"language-js\">function myTest() {\n  const loc = \"foo\";\n  console.log(loc);\n}\n\nmyTest();\nconsole.log(loc);\n</code></pre>\n<p>The <code>myTest()</code> function call will display the string <code>foo</code> in the console. The <code>console.log(loc)</code> line (outside of the <code>myTest</code> function) will throw an error, as <code>loc</code> is not defined outside of the function.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>The editor has two <code>console.log</code>s to help you see what is happening. Check the console as you code to see how it changes. Declare a local variable <code>myVar</code> inside <code>myLocalScope</code> and run the tests.</p>\n<p><strong>Note:</strong> The console will still display <code>ReferenceError: myVar is not defined</code>, but this will not cause the tests to fail.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 52,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
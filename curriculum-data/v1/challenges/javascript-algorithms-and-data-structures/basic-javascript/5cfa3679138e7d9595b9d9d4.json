{
  "id": "5cfa3679138e7d9595b9d9d4",
  "title": "Replace Loops using Recursion",
  "challengeType": 1,
  "videoUrl": "https://www.freecodecamp.org/news/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9/",
  "forumTopicId": 301175,
  "dashedName": "replace-loops-using-recursion",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sum(arr, n) {\n  // Only change code below this line\n\n  // Only change code above this line\n}",
      "error": null,
      "seed": "function sum(arr, n) {\n  // Only change code below this line\n\n  // Only change code above this line\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function sum(arr, n) {\n  // Only change code below this line\n  if(n <= 0) {\n    return 0;\n  } else {\n    return sum(arr, n - 1) + arr[n - 1];\n  }\n  // Only change code above this line\n}",
        "error": null,
        "seed": "function sum(arr, n) {\n  // Only change code below this line\n  if(n <= 0) {\n    return 0;\n  } else {\n    return sum(arr, n - 1) + arr[n - 1];\n  }\n  // Only change code above this line\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sum([1], 0)</code> should equal 0.</p>",
      "testString": "assert.equal(sum([1], 0), 0);"
    },
    {
      "text": "<p><code>sum([2, 3, 4], 1)</code> should equal 2.</p>",
      "testString": "assert.equal(sum([2, 3, 4], 1), 2);"
    },
    {
      "text": "<p><code>sum([2, 3, 4, 5], 3)</code> should equal 9.</p>",
      "testString": "assert.equal(sum([2, 3, 4, 5], 3), 9);"
    },
    {
      "text": "<p>Your code should not rely on any kind of loops (<code>for</code> or <code>while</code> or higher order functions such as <code>forEach</code>, <code>map</code>, <code>filter</code>, or <code>reduce</code>.).</p>",
      "testString": "assert(\n  !__helpers.removeJSComments(code).match(/for|while|forEach|map|filter|reduce/g)\n);"
    },
    {
      "text": "<p>You should use recursion to solve this problem.</p>",
      "testString": "assert(\n  sum.toString().match(/sum\\(.*\\)/g).length > 1\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first <code>n</code> elements of an array to create the product of those elements. Using a <code>for</code> loop, you could do this:</p>\n<pre><code class=\"language-js\">  function multiply(arr, n) {\n    let product = 1;\n    for (let i = 0; i &#x3C; n; i++) {\n      product *= arr[i];\n    }\n    return product;\n  }\n</code></pre>\n<p>However, notice that <code>multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]</code>. That means you can rewrite <code>multiply</code> in terms of itself and never need to use a loop.</p>\n<pre><code class=\"language-js\">  function multiply(arr, n) {\n    if (n &#x3C;= 0) {\n      return 1;\n    } else {\n      return multiply(arr, n - 1) * arr[n - 1];\n    }\n  }\n</code></pre>\n<p>The recursive version of <code>multiply</code> breaks down like this. In the <dfn>base case</dfn>, where <code>n &#x3C;= 0</code>, it returns 1. For larger values of <code>n</code>, it calls itself, but with <code>n - 1</code>. That function call is evaluated in the same way, calling <code>multiply</code> again until <code>n &#x3C;= 0</code>. At this point, all the functions can return and the original <code>multiply</code> returns the answer.</p>\n<p><strong>Note:</strong> Recursive functions must have a base case when they return without calling the function again (in this example, when <code>n &#x3C;= 0</code>), otherwise they can never finish executing.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a recursive function, <code>sum(arr, n)</code>, that returns the sum of the first <code>n</code> elements of an array <code>arr</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 102,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "5cd9a70215d3c4e65518328f",
  "title": "Use Recursion to Create a Countdown",
  "challengeType": 1,
  "forumTopicId": 305925,
  "dashedName": "use-recursion-to-create-a-countdown",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Only change code below this line\nfunction countdown(n){\n  return;\n}\n// Only change code above this line",
      "error": null,
      "seed": "// Only change code below this line\nfunction countdown(n){\n  return;\n}\n// Only change code above this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function countdown(n){\n   return n < 1 ? [] : [n].concat(countdown(n - 1));\n}",
        "error": null,
        "seed": "function countdown(n){\n   return n < 1 ? [] : [n].concat(countdown(n - 1));\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countdown(-1)</code> should return an empty array.</p>",
      "testString": "assert.isEmpty(countdown(-1));"
    },
    {
      "text": "<p><code>countdown(10)</code> should return <code>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code></p>",
      "testString": "assert.deepStrictEqual(countdown(10), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);"
    },
    {
      "text": "<p><code>countdown(5)</code> should return <code>[5, 4, 3, 2, 1]</code></p>",
      "testString": "assert.deepStrictEqual(countdown(5), [5, 4, 3, 2, 1]);"
    },
    {
      "text": "<p>Your code should not rely on any kind of loops (<code>for</code>, <code>while</code> or higher order functions such as <code>forEach</code>, <code>map</code>, <code>filter</code>, and <code>reduce</code>).</p>",
      "testString": "assert(\n  !__helpers.removeJSComments(code).match(/for|while|forEach|map|filter|reduce/g)\n);"
    },
    {
      "text": "<p>You should use recursion to solve this problem.</p>",
      "testString": "assert(\n  countdown.toString().match(/countdown\\s*\\(.+\\)/)\n);"
    },
    {
      "text": "<p>Global variables should not be used to cache the array.</p>",
      "testString": "countdown(1)\nassert.deepStrictEqual(countdown(5), [5, 4, 3, 2, 1]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In a <a href=\"/learn/javascript-algorithms-and-data-structures/basic-javascript/replace-loops-using-recursion\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">previous challenge</a>, you learned how to use recursion to replace a <code>for</code> loop. Now, let's look at a more complex function that returns an array of consecutive integers starting with <code>1</code> through the number passed to the function.</p>\n<p>As mentioned in the previous challenge, there will be a <dfn>base case</dfn>. The base case tells the recursive function when it no longer needs to call itself. It is a simple case where the return value is already known. There will also be a <dfn>recursive call</dfn> which executes the original function with different arguments. If the function is written correctly, eventually the base case will be reached.</p>\n<p>For example, say you want to write a recursive function that returns an array containing the numbers <code>1</code> through <code>n</code>. This function will need to accept an argument, <code>n</code>, representing the final number. Then it will need to call itself with progressively smaller values of <code>n</code> until it reaches <code>1</code>. You could write the function as follows:</p>\n<pre><code class=\"language-javascript\">function countup(n) {\n  if (n &#x3C; 1) {\n    return [];\n  } else {\n    const countArray = countup(n - 1);\n    countArray.push(n);\n    return countArray;\n  }\n}\nconsole.log(countup(5));\n</code></pre>\n<p>The value <code>[1, 2, 3, 4, 5]</code> will be displayed in the console.</p>\n<p>At first, this seems counterintuitive since the value of <code>n</code> <em>decreases</em>, but the values in the final array are <em>increasing</em>. This happens because the push happens last, after the recursive call has returned. At the point where <code>n</code> is pushed into the array, <code>countup(n - 1)</code> has already been evaluated and returned <code>[1, 2, ..., n - 1]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>We have defined a function called <code>countdown</code> with one parameter (<code>n</code>). The function should use recursion to return an array containing the integers <code>n</code> through <code>1</code> based on the <code>n</code> parameter. If the function is called with a number less than 1, the function should return an empty array. For example, calling this function with <code>n = 5</code> should return the array <code>[5, 4, 3, 2, 1]</code>. Your function must use recursion by calling itself and must not use loops of any kind.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 111,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "56533eb9ac21ba0edf2244ca",
  "title": "Using Objects for Lookups",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cdBk8sM",
  "forumTopicId": 18373,
  "dashedName": "using-objects-for-lookups",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nfunction phoneticLookup(val) {\n  let result = \"\";\n\n  // Only change code below this line\n  switch(val) {\n    case \"alpha\":\n      result = \"Adams\";\n      break;\n    case \"bravo\":\n      result = \"Boston\";\n      break;\n    case \"charlie\":\n      result = \"Chicago\";\n      break;\n    case \"delta\":\n      result = \"Denver\";\n      break;\n    case \"echo\":\n      result = \"Easy\";\n      break;\n    case \"foxtrot\":\n      result = \"Frank\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\nphoneticLookup(\"charlie\");",
      "error": null,
      "seed": "// Setup\nfunction phoneticLookup(val) {\n  let result = \"\";\n\n  // Only change code below this line\n  switch(val) {\n    case \"alpha\":\n      result = \"Adams\";\n      break;\n    case \"bravo\":\n      result = \"Boston\";\n      break;\n    case \"charlie\":\n      result = \"Chicago\";\n      break;\n    case \"delta\":\n      result = \"Denver\";\n      break;\n    case \"echo\":\n      result = \"Easy\";\n      break;\n    case \"foxtrot\":\n      result = \"Frank\";\n  }\n\n  // Only change code above this line\n  return result;\n}\n\nphoneticLookup(\"charlie\");"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function phoneticLookup(val) {\n  let result = \"\";\n\n  const lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}",
        "error": null,
        "seed": "function phoneticLookup(val) {\n  let result = \"\";\n\n  const lookup = {\n    alpha: \"Adams\",\n    bravo: \"Boston\",\n    charlie: \"Chicago\",\n    delta: \"Denver\",\n    echo: \"Easy\",\n    foxtrot: \"Frank\"\n  };\n\n  result = lookup[val];\n\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>phoneticLookup(\"alpha\")</code> should equal the string <code>Adams</code></p>",
      "testString": "assert(phoneticLookup('alpha') === 'Adams');"
    },
    {
      "text": "<p><code>phoneticLookup(\"bravo\")</code> should equal the string <code>Boston</code></p>",
      "testString": "assert(phoneticLookup('bravo') === 'Boston');"
    },
    {
      "text": "<p><code>phoneticLookup(\"charlie\")</code> should equal the string <code>Chicago</code></p>",
      "testString": "assert(phoneticLookup('charlie') === 'Chicago');"
    },
    {
      "text": "<p><code>phoneticLookup(\"delta\")</code> should equal the string <code>Denver</code></p>",
      "testString": "assert(phoneticLookup('delta') === 'Denver');"
    },
    {
      "text": "<p><code>phoneticLookup(\"echo\")</code> should equal the string <code>Easy</code></p>",
      "testString": "assert(phoneticLookup('echo') === 'Easy');"
    },
    {
      "text": "<p><code>phoneticLookup(\"foxtrot\")</code> should equal the string <code>Frank</code></p>",
      "testString": "assert(phoneticLookup('foxtrot') === 'Frank');"
    },
    {
      "text": "<p><code>phoneticLookup(\"\")</code> should equal <code>undefined</code></p>",
      "testString": "assert(typeof phoneticLookup('') === 'undefined');"
    },
    {
      "text": "<p>You should not modify the <code>return</code> statement</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/return\\sresult;/));"
    },
    {
      "text": "<p>You should not use <code>case</code>, <code>switch</code>, or <code>if</code> statements</p>",
      "testString": "assert(\n  !/case|switch|if/g.test(__helpers.removeJSComments(code).replace(/([/]{2}.*)|([/][*][^/*]*[*][/])/g, ''))\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Objects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to lookup values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.</p>\n<p>Here is an example of an article object:</p>\n<pre><code class=\"language-js\">const article = {\n  \"title\": \"How to create objects in JavaScript\",\n  \"link\": \"https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/\",\n  \"author\": \"Kaashan Hussain\",\n  \"language\": \"JavaScript\",\n  \"tags\": \"TECHNOLOGY\",\n  \"createdAt\": \"NOVEMBER 28, 2018\"\n};\n\nconst articleAuthor = article[\"author\"];\nconst articleLink = article[\"link\"];\n\nconst value = \"title\";\nconst valueLookup = article[value];\n</code></pre>\n<p><code>articleAuthor</code> is the string <code>Kaashan Hussain</code>, <code>articleLink</code> is the string <code>https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/</code>, and <code>valueLookup</code> is the string <code>How to create objects in JavaScript</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Convert the switch statement into an object called <code>lookup</code>. Use it to look up <code>val</code> and assign the associated string to the <code>result</code> variable.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 89,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
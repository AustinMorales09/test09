{
  "id": "56533eb9ac21ba0edf2244be",
  "title": "Global Scope and Functions",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cQM7mCN",
  "forumTopicId": 18193,
  "dashedName": "global-scope-and-functions",
  "challengeFiles": [
    {
      "head": "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        logOutput = message;\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\nvar oopsGlobal;\ncapture();",
      "tail": "fun1();\nfun2();\nuncapture();\n(function() { return logOutput || \"console.log never called\"; })();",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Declare the myGlobal variable below this line\n\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal here\n\n}\n\n// Only change code above this line\n\nfunction fun2() {\n  let output = \"\";\n  if (typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if (typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}",
      "error": null,
      "seed": "// Declare the myGlobal variable below this line\n\n\nfunction fun1() {\n  // Assign 5 to oopsGlobal here\n\n}\n\n// Only change code above this line\n\nfunction fun2() {\n  let output = \"\";\n  if (typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if (typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myGlobal = 10;\n\nfunction fun1() {\n  oopsGlobal = 5;\n}\n\nfunction fun2() {\n  let output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}",
        "error": null,
        "seed": "const myGlobal = 10;\n\nfunction fun1() {\n  oopsGlobal = 5;\n}\n\nfunction fun2() {\n  let output = \"\";\n  if(typeof myGlobal != \"undefined\") {\n    output += \"myGlobal: \" + myGlobal;\n  }\n  if(typeof oopsGlobal != \"undefined\") {\n    output += \" oopsGlobal: \" + oopsGlobal;\n  }\n  console.log(output);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myGlobal</code> should be defined</p>",
      "testString": "assert(typeof myGlobal != 'undefined');"
    },
    {
      "text": "<p><code>myGlobal</code> should have a value of <code>10</code></p>",
      "testString": "assert(myGlobal === 10);"
    },
    {
      "text": "<p><code>myGlobal</code> should be declared using the <code>let</code> or <code>const</code> keywords</p>",
      "testString": "assert(/(let|const)\\s+myGlobal/.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p><code>oopsGlobal</code> should be a global variable and have a value of <code>5</code></p>",
      "testString": "assert(typeof oopsGlobal != 'undefined' && oopsGlobal === 5);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.</p>\n<p>Variables which are declared without the <code>let</code> or <code>const</code> keywords are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>let</code> or <code>const</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Using <code>let</code> or <code>const</code>, declare a global variable named <code>myGlobal</code> outside of any function. Initialize it with a value of <code>10</code>.</p>\n<p>Inside function <code>fun1</code>, assign <code>5</code> to <code>oopsGlobal</code> <em><strong>without</strong></em> using the <code>var</code>, <code>let</code> or <code>const</code> keywords.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 51,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "56533eb9ac21ba0edf2244cb",
  "title": "Manipulating Complex Objects",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/c9yNMfR",
  "forumTopicId": 18208,
  "dashedName": "manipulating-complex-objects",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(x){ if (Array.isArray(x)) { return JSON.stringify(x); } return \"myMusic is not an array\"})(myMusic);",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];",
      "error": null,
      "seed": "const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CD\",\n      \"8T\",\n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\" ],\n    \"gold\": true\n  },\n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\",\n    \"CD\",\n  ]\n  }\n];",
        "error": null,
        "seed": "const myMusic = [\n  {\n    \"artist\": \"Billy Joel\",\n    \"title\": \"Piano Man\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\" ],\n    \"gold\": true\n  },\n  {\n    \"artist\": \"ABBA\",\n    \"title\": \"Ring Ring\",\n    \"release_year\": 1973,\n    \"formats\": [\n      \"CS\",\n      \"8T\",\n      \"LP\",\n    \"CD\",\n  ]\n  }\n];"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myMusic</code> should be an array</p>",
      "testString": "assert(Array.isArray(myMusic));"
    },
    {
      "text": "<p><code>myMusic</code> should have at least two elements</p>",
      "testString": "assert(myMusic.length > 1);"
    },
    {
      "text": "<p>The elements in the <code>myMusic</code> array should be objects</p>",
      "testString": "myMusic.forEach(object => {assert.typeOf(object, 'object')})"
    },
    {
      "text": "<p>Your object in <code>myMusic</code> should have at least 4 properties</p>",
      "testString": "myMusic.forEach(object => {assert(Object.keys(object).length > 3); });"
    },
    {
      "text": "<p>Your object in <code>myMusic</code> should contain the property <code>artist</code> which is a string</p>",
      "testString": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['artist']);\n  assert.typeOf(object.artist, 'string')\n})"
    },
    {
      "text": "<p>Your object in <code>myMusic</code> should contain the property <code>title</code> which is a string</p>",
      "testString": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['title']);\n  assert.typeOf(object.title, 'string')\n})"
    },
    {
      "text": "<p>Your object in <code>myMusic</code> should contain the property <code>release_year</code> which is a number</p>",
      "testString": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['release_year']);\n  assert.typeOf(object.release_year, 'number')\n})"
    },
    {
      "text": "<p>Your object in <code>myMusic</code> should contain a <code>formats</code> property which is an array</p>",
      "testString": "myMusic.forEach(object => {\n  assert.containsAllKeys(object, ['formats']);\n  assert.typeOf(object.formats, 'array')\n})"
    },
    {
      "text": "<p><code>formats</code> should be an array of strings with at least two elements</p>",
      "testString": "myMusic.forEach(object => {\n  object.formats.forEach(format => {\n    assert.typeOf(format, 'string')\n  });\n  assert.isAtLeast(object.formats.length, 2)\n})"
    }
  ],
  "description": "<section id=\"description\">\n<p>Sometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.</p>\n<p>Here's an example of a complex data structure:</p>\n<pre><code class=\"language-js\">const ourMusic = [\n  {\n    \"artist\": \"Daft Punk\",\n    \"title\": \"Homework\",\n    \"release_year\": 1997,\n    \"formats\": [ \n      \"CD\", \n      \"Cassette\", \n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];\n</code></pre>\n<p>This is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>formats</code> array. If you want to add more album records, you can do this by adding records to the top level array. Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>artist</code> and a value of <code>Daft Punk</code>.</p>\n<p><strong>Note:</strong> You will need to place a comma after every object in the array, unless it is the last object in the array.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add a new album to the <code>myMusic</code> array. Add <code>artist</code> and <code>title</code> strings, <code>release_year</code> number, and a <code>formats</code> array of strings.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 91,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
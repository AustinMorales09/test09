{
  "id": "56533eb9ac21ba0edf2244bd",
  "title": "Passing Values to Functions with Arguments",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cy8rahW",
  "forumTopicId": 18254,
  "dashedName": "passing-values-to-functions-with-arguments",
  "challengeFiles": [
    {
      "head": "var logOutput = \"\";\nvar originalConsole = console\nfunction capture() {\n    var nativeLog = console.log;\n    console.log = function (message) {\n        if(message) logOutput = JSON.stringify(message).trim();\n        if(nativeLog.apply) {\n          nativeLog.apply(originalConsole, arguments);\n        } else {\n          var nativeMsg = Array.prototype.slice.apply(arguments).join(' ');\n          nativeLog(nativeMsg);\n        }\n    };\n}\n\nfunction uncapture() {\n  console.log = originalConsole.log;\n}\n\ncapture();",
      "tail": "uncapture();\n\nif (typeof functionWithArgs !== \"function\") { \n  (function() { return \"functionWithArgs is not defined\"; })();\n} else {\n  (function() { return logOutput || \"console.log never called\"; })();\n}",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "",
      "error": null,
      "seed": ""
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);",
        "error": null,
        "seed": "function functionWithArgs(a, b) {\n  console.log(a + b);\n}\nfunctionWithArgs(10, 5);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>functionWithArgs</code> should be a function.</p>",
      "testString": "assert(typeof functionWithArgs === 'function');"
    },
    {
      "text": "<p><code>functionWithArgs(1,2)</code> should output <code>3</code>.</p>",
      "testString": "if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(1, 2);\n  uncapture();\n}\nassert(logOutput == 3);"
    },
    {
      "text": "<p><code>functionWithArgs(7,9)</code> should output <code>16</code>.</p>",
      "testString": "if (typeof functionWithArgs === 'function') {\n  capture();\n  functionWithArgs(7, 9);\n  uncapture();\n}\nassert(logOutput == 16);"
    },
    {
      "text": "<p>You should call <code>functionWithArgs</code> with two numbers after you define it.</p>",
      "testString": "assert(\n  /functionWithArgs\\([-+]?\\d*\\.?\\d*,[-+]?\\d*\\.?\\d*\\)/.test(\n    __helpers.removeJSComments(code).replace(/\\s/g, '')\n  )\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p><dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.</p>\n<p>Here is a function with two parameters, <code>param1</code> and <code>param2</code>:</p>\n<pre><code class=\"language-js\">function testFun(param1, param2) {\n  console.log(param1, param2);\n}\n</code></pre>\n<p>Then we can call <code>testFun</code> like this: <code>testFun(\"Hello\", \"World\");</code>. We have passed two string arguments, <code>Hello</code> and <code>World</code>. Inside the function, <code>param1</code> will equal the string <code>Hello</code> and <code>param2</code> will equal the string <code>World</code>. Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<ol><li>Create a function called <code>functionWithArgs</code> that accepts two arguments and outputs their sum to the dev console.</li><li>Call the function with two numbers as arguments.</li></ol>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 49,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
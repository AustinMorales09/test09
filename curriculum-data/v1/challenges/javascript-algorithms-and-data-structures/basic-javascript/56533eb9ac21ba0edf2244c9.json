{
  "id": "56533eb9ac21ba0edf2244c9",
  "title": "Accessing Object Properties with Variables",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cnQyKur",
  "forumTopicId": 16165,
  "dashedName": "accessing-object-properties-with-variables",
  "challengeFiles": [
    {
      "head": "",
      "tail": "if(typeof player !== \"undefined\"){(function(v){return v;})(player);}",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\n\n// Only change code below this line\nconst playerNumber = 42;  // Change this line\nconst player = testObj;   // Change this line",
      "error": null,
      "seed": "// Setup\nconst testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\n\n// Only change code below this line\nconst playerNumber = 42;  // Change this line\nconst player = testObj;   // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nconst playerNumber = 16;\nconst player = testObj[playerNumber];",
        "error": null,
        "seed": "const testObj = {\n  12: \"Namath\",\n  16: \"Montana\",\n  19: \"Unitas\"\n};\nconst playerNumber = 16;\nconst player = testObj[playerNumber];"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>playerNumber</code> should be a number</p>",
      "testString": "assert(typeof playerNumber === 'number');"
    },
    {
      "text": "<p>The variable <code>player</code> should be a string</p>",
      "testString": "assert(typeof player === 'string');"
    },
    {
      "text": "<p>The value of <code>player</code> should be the string <code>Montana</code></p>",
      "testString": "assert(player === 'Montana');"
    },
    {
      "text": "<p>You should use bracket notation to access <code>testObj</code></p>",
      "testString": "assert(/testObj\\s*?\\[.*?\\]/.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p>You should not assign the value <code>Montana</code> to the variable <code>player</code> directly.</p>",
      "testString": "assert(!__helpers.removeJSComments(code).match(/player\\s*=\\s*\"|\\'\\s*Montana\\s*\"|\\'\\s*;/gi));"
    },
    {
      "text": "<p>You should be using the variable <code>playerNumber</code> in your bracket notation</p>",
      "testString": "assert(/testObj\\s*?\\[\\s*playerNumber\\s*\\]/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.</p>\n<p>Here is an example of using a variable to access a property:</p>\n<pre><code class=\"language-js\">const dogs = {\n  Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"\n};\n\nconst myDog = \"Hunter\";\nconst myBreed = dogs[myDog];\nconsole.log(myBreed);\n</code></pre>\n<p>The string <code>Doberman</code> would be displayed in the console.</p>\n<p>Note that we do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Set the <code>playerNumber</code> variable to <code>16</code>. Then, use the variable to look up the player's name and assign it to <code>player</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 85,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
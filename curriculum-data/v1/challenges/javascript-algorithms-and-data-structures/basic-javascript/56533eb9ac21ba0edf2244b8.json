{
  "id": "56533eb9ac21ba0edf2244b8",
  "title": "Concatenating Strings with the Plus Equals Operator",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cbQmmC4",
  "forumTopicId": 16803,
  "dashedName": "concatenating-strings-with-the-plus-equals-operator",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let myStr;",
      "error": null,
      "seed": "let myStr;"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";",
        "error": null,
        "seed": "let myStr = \"This is the first sentence. \";\nmyStr += \"This is the second sentence.\";"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myStr</code> should have a single space character between the two strings.</p>",
      "testString": "assert(/sentence\\. This/.test(myStr));"
    },
    {
      "text": "<p><code>myStr</code> should have a value of the string <code>This is the first sentence. This is the second sentence.</code></p>",
      "testString": "assert(myStr === 'This is the first sentence. This is the second sentence.');"
    },
    {
      "text": "<p>You should use the <code>+=</code> operator to build <code>myStr</code>.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/myStr\\s*\\+=\\s*([\"']).*\\1/g));"
    }
  ],
  "description": "<section id=\"description\">\n<p>We can also use the <code>+=</code> operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.</p>\n<p><strong>Note:</strong> Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">let ourStr = \"I come first. \";\nourStr += \"I come second.\";\n</code></pre>\n<p><code>ourStr</code> now has a value of the string <code>I come first. I come second.</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Build <code>myStr</code> over several lines by concatenating these two strings: <code>This is the first sentence.</code> and <code>This is the second sentence.</code> using the <code>+=</code> operator. Use the <code>+=</code> operator similar to how it is shown in the example and be sure to include a space between the two strings. Start by assigning the first string to <code>myStr</code>, then add on the second string.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 28,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
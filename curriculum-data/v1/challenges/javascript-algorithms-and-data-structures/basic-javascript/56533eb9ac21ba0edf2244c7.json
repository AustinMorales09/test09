{
  "id": "56533eb9ac21ba0edf2244c7",
  "title": "Accessing Object Properties with Dot Notation",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cGryJs8",
  "forumTopicId": 16164,
  "dashedName": "accessing-object-properties-with-dot-notation",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(a,b) { return \"hatValue = '\" + a + \"', shirtValue = '\" + b + \"'\"; })(hatValue,shirtValue);",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst testObj = {\n  hat: \"ballcap\",\n  shirt: \"jersey\",\n  shoes: \"cleats\"\n};\n\n// Only change code below this line\nconst hatValue = testObj;      // Change this line\nconst shirtValue = testObj;    // Change this line",
      "error": null,
      "seed": "// Setup\nconst testObj = {\n  hat: \"ballcap\",\n  shirt: \"jersey\",\n  shoes: \"cleats\"\n};\n\n// Only change code below this line\nconst hatValue = testObj;      // Change this line\nconst shirtValue = testObj;    // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const testObj = {\n  hat: \"ballcap\",\n  shirt: \"jersey\",\n  shoes: \"cleats\"\n};\n\nconst hatValue = testObj.hat;\nconst shirtValue = testObj.shirt;",
        "error": null,
        "seed": "const testObj = {\n  hat: \"ballcap\",\n  shirt: \"jersey\",\n  shoes: \"cleats\"\n};\n\nconst hatValue = testObj.hat;\nconst shirtValue = testObj.shirt;"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>hatValue</code> should be a string</p>",
      "testString": "assert(typeof hatValue === 'string');"
    },
    {
      "text": "<p>The value of <code>hatValue</code> should be the string <code>ballcap</code></p>",
      "testString": "assert(hatValue === 'ballcap');"
    },
    {
      "text": "<p><code>shirtValue</code> should be a string</p>",
      "testString": "assert(typeof shirtValue === 'string');"
    },
    {
      "text": "<p>The value of <code>shirtValue</code> should be the string <code>jersey</code></p>",
      "testString": "assert(shirtValue === 'jersey');"
    },
    {
      "text": "<p>You should use dot notation twice</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/testObj\\.\\w+/g).length > 1);"
    }
  ],
  "description": "<section id=\"description\">\n<p>There are two ways to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.</p>\n<p>Dot notation is what you use when you know the name of the property you're trying to access ahead of time.</p>\n<p>Here is a sample of using dot notation (<code>.</code>) to read an object's property:</p>\n<pre><code class=\"language-js\">const myObj = {\n  prop1: \"val1\",\n  prop2: \"val2\"\n};\n\nconst prop1val = myObj.prop1;\nconst prop2val = myObj.prop2;\n</code></pre>\n<p><code>prop1val</code> would have a value of the string <code>val1</code>, and <code>prop2val</code> would have a value of the string <code>val2</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Read in the property values of <code>testObj</code> using dot notation. Set the variable <code>hatValue</code> equal to the object's property <code>hat</code> and set the variable <code>shirtValue</code> equal to the object's property <code>shirt</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 83,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
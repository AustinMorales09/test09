{
  "id": "56bbb991ad1ed5201cd392cb",
  "title": "Manipulate Arrays With push Method",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cnqmVtJ",
  "forumTopicId": 18237,
  "dashedName": "manipulate-arrays-with-push",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(z){return 'myArray = ' + JSON.stringify(z);})(myArray);",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n",
      "error": null,
      "seed": "// Setup\nconst myArray = [[\"John\", 23], [\"cat\", 2]];\n\n// Only change code below this line\n"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);",
        "error": null,
        "seed": "const myArray = [[\"John\", 23], [\"cat\", 2]];\nmyArray.push([\"dog\",3]);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myArray</code> should now equal <code>[[\"John\", 23], [\"cat\", 2], [\"dog\", 3]]</code>.</p>",
      "testString": "assert(\n  (function (d) {\n    if (\n      d[2] != undefined &&\n      d[0][0] == 'John' &&\n      d[0][1] === 23 &&\n      d[2][0] == 'dog' &&\n      d[2][1] === 3 &&\n      d[2].length == 2\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  })(myArray)\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>An easy way to append data to the end of an array is via the <code>push()</code> method.</p>\n<p>The <code>push()</code> method takes one or more <dfn>arguments</dfn> and appends them to the end of the array, in the order in which they appear. It returns the new length of the array.</p>\n<p>Examples:</p>\n<pre><code class=\"language-js\">const arr1 = [1, 2, 3];\narr1.push(4, 5);\n\nconst arr2 = [\"Stimpson\", \"J\", \"cat\"];\narr2.push([\"happy\", \"joy\"]);\n</code></pre>\n<p><code>arr1</code> now has the value <code>[1, 2, 3, 4, 5]</code> and <code>arr2</code> has the value <code>[\"Stimpson\", \"J\", \"cat\", [\"happy\", \"joy\"]]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Push <code>[\"dog\", 3]</code> onto the end of the <code>myArray</code> variable.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 43,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
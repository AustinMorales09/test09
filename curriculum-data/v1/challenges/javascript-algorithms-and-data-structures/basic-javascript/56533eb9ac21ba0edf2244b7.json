{
  "id": "56533eb9ac21ba0edf2244b7",
  "title": "Concatenating Strings with Plus Operator",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/cNpM8AN",
  "forumTopicId": 16802,
  "dashedName": "concatenating-strings-with-plus-operator",
  "challengeFiles": [
    {
      "head": "",
      "tail": "(function(){\n  if(typeof myStr === 'string') {\n    return 'myStr = \"' + myStr + '\"';\n  } else {\n    return 'myStr is not a string';\n  }\n})();",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const myStr = \"\"; // Change this line",
      "error": null,
      "seed": "const myStr = \"\"; // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const myStr = \"This is the start. \" + \"This is the end.\";",
        "error": null,
        "seed": "const myStr = \"This is the start. \" + \"This is the end.\";"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>myStr</code> should have a single space character between the two strings.</p>",
      "testString": "assert(/start\\. This/.test(myStr));"
    },
    {
      "text": "<p><code>myStr</code> should have a value of the string <code>This is the start. This is the end.</code></p>",
      "testString": "assert(myStr === 'This is the start. This is the end.');"
    },
    {
      "text": "<p>You should use the <code>+</code> operator to build <code>myStr</code>.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/([\"']).*\\1\\s*\\+\\s*([\"']).*\\2/g));"
    },
    {
      "text": "<p><code>myStr</code> should be created using the <code>const</code> keyword.</p>",
      "testString": "assert(/const\\s+myStr/.test(__helpers.removeJSComments(code)));"
    },
    {
      "text": "<p>You should assign the result to the <code>myStr</code> variable.</p>",
      "testString": "assert(/myStr\\s*=/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>In JavaScript, when the <code>+</code> operator is used with a <code>String</code> value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.</p>\n<p><strong>Example</strong></p>\n<pre><code class=\"language-js\">'My name is Alan,' + ' I concatenate.'\n</code></pre>\n<p><strong>Note:</strong> Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const ourStr = \"I come first. \" + \"I come second.\";\n</code></pre>\n<p>The string <code>I come first. I come second.</code> would be displayed in the console.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Build <code>myStr</code> from the strings <code>This is the start.</code> and <code>This is the end.</code> using the <code>+</code> operator. Be sure to include a space between the two strings.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 27,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
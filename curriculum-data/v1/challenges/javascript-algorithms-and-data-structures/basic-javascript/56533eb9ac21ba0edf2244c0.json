{
  "id": "56533eb9ac21ba0edf2244c0",
  "title": "Global vs. Local Scope in Functions",
  "challengeType": 1,
  "videoUrl": "https://scrimba.com/c/c2QwKH2",
  "forumTopicId": 18194,
  "dashedName": "global-vs--local-scope-in-functions",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "// Setup\nconst outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n\n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();",
      "error": null,
      "seed": "// Setup\nconst outerWear = \"T-Shirt\";\n\nfunction myOutfit() {\n  // Only change code below this line\n\n  // Only change code above this line\n  return outerWear;\n}\n\nmyOutfit();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  const outerWear = \"sweater\";\n  return outerWear;\n}",
        "error": null,
        "seed": "const outerWear = \"T-Shirt\";\nfunction myOutfit() {\n  const outerWear = \"sweater\";\n  return outerWear;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should not change the value of the global <code>outerWear</code>.</p>",
      "testString": "assert(outerWear === 'T-Shirt');"
    },
    {
      "text": "<p><code>myOutfit</code> should return the string <code>sweater</code>.</p>",
      "testString": "assert(myOutfit() === 'sweater');"
    },
    {
      "text": "<p>You should not change the return statement.</p>",
      "testString": "assert(/return outerWear/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>It is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the local variable takes precedence over the global variable.</p>\n<p>In this example:</p>\n<pre><code class=\"language-js\">const someVar = \"Hat\";\n\nfunction myFun() {\n  const someVar = \"Head\";\n  return someVar;\n}\n</code></pre>\n<p>The function <code>myFun</code> will return the string <code>Head</code> because the local version of the variable is present.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Add a local variable to <code>myOutfit</code> function to override the value of <code>outerWear</code> with the string <code>sweater</code>.</p>\n</section>",
  "translationPending": false,
  "block": "basic-javascript",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 53,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
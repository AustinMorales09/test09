{
  "id": "587d7db4367417b2b2512b92",
  "title": "Extract Matches",
  "challengeType": 1,
  "forumTopicId": 301340,
  "dashedName": "extract-matches",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /change/; // Change this line\nlet result = extractStr; // Change this line",
      "error": null,
      "seed": "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /change/; // Change this line\nlet result = extractStr; // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /coding/; // Change this line\nlet result = extractStr.match(codingRegex); // Change this line",
        "error": null,
        "seed": "let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /coding/; // Change this line\nlet result = extractStr.match(codingRegex); // Change this line"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>result</code> should have the string <code>coding</code></p>",
      "testString": "assert(result.join() === 'coding');"
    },
    {
      "text": "<p>Your regex <code>codingRegex</code> should search for the string <code>coding</code></p>",
      "testString": "assert(codingRegex.source === 'coding');"
    },
    {
      "text": "<p>You should use the <code>.match()</code> method.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/\\.match\\(.*\\)/));"
    }
  ],
  "description": "<section id=\"description\">\n<p>So far, you have only been checking if a pattern exists or not within a string. You can also extract the actual matches you found with the <code>.match()</code> method.</p>\n<p>To use the <code>.match()</code> method, apply the method on a string and pass in the regex inside the parentheses.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-js\">\"Hello, World!\".match(/Hello/);\nlet ourStr = \"Regular expressions\";\nlet ourRegex = /expressions/;\nourStr.match(ourRegex);\n</code></pre>\n<p>Here the first <code>match</code> would return <code>[\"Hello\"]</code> and the second would return <code>[\"expressions\"]</code>.</p>\n<p>Note that the <code>.match</code> syntax is the \"opposite\" of the <code>.test</code> method you have been using thus far:</p>\n<pre><code class=\"language-js\">'string'.match(/regex/);\n/regex/.test('string');\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Apply the <code>.match()</code> method to extract the string <code>coding</code>.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 4,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7dbb367417b2b2512baa",
  "title": "Reuse Patterns Using Capture Groups",
  "challengeType": 1,
  "forumTopicId": 301364,
  "dashedName": "reuse-patterns-using-capture-groups",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let repeatNum = \"42 42 42\";\nlet reRegex = /change/; // Change this line\nlet result = reRegex.test(repeatNum);",
      "error": null,
      "seed": "let repeatNum = \"42 42 42\";\nlet reRegex = /change/; // Change this line\nlet result = reRegex.test(repeatNum);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let repeatNum = \"42 42 42\";\nlet reRegex = /^(\\d+) \\1 \\1$/;\nlet result = reRegex.test(repeatNum);",
        "error": null,
        "seed": "let repeatNum = \"42 42 42\";\nlet reRegex = /^(\\d+) \\1 \\1$/;\nlet result = reRegex.test(repeatNum);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex should use the shorthand character class for digits.</p>",
      "testString": "assert(reRegex.source.match(/\\\\d/));"
    },
    {
      "text": "<p>Your regex should reuse a capture group twice.</p>",
      "testString": "assert(reRegex.source.match(/\\\\1|\\\\2/g).length >= 2);"
    },
    {
      "text": "<p>Your regex should match the string <code>42 42 42</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(reRegex.test('42 42 42'));"
    },
    {
      "text": "<p>Your regex should match the string <code>100 100 100</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(reRegex.test('100 100 100'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>42 42 42 42</code>.</p>",
      "testString": "assert.equal('42 42 42 42'.match(reRegex.source), null);"
    },
    {
      "text": "<p>Your regex should not match the string <code>42 42</code>.</p>",
      "testString": "assert.equal('42 42'.match(reRegex.source), null);"
    },
    {
      "text": "<p>Your regex should not match the string <code>101 102 103</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(!reRegex.test('101 102 103'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>1 2 3</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(!reRegex.test('1 2 3'));"
    },
    {
      "text": "<p>Your regex should match the string <code>10 10 10</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(reRegex.test('10 10 10'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>42\\t42\\t42</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(!reRegex.test('42\\t42\\t42'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>42  42  42</code>.</p>",
      "testString": "reRegex.lastIndex = 0;\nassert(!reRegex.test('42  42  42'));"
    }
  ],
  "description": "<section id=\"description\">\n<p>Say you want to match a word that occurs multiple times like below.</p>\n<pre><code class=\"language-js\">let repeatStr = \"row row row your boat\";\n</code></pre>\n<p>You could use <code>/row row row/</code>, but what if you don't know the specific word repeated? <dfn>Capture groups</dfn> can be used to find repeated substrings.</p>\n<p>Capture groups are constructed by enclosing the regex pattern to be captured in parentheses. In this case, the goal is to capture a word consisting of alphanumeric characters so the capture group will be <code>\\w+</code> enclosed by parentheses: <code>/(\\w+)/</code>.</p>\n<p>The substring matched by the group is saved to a temporary \"variable\", which can be accessed within the same regex using a backslash and the number of the capture group (e.g. <code>\\1</code>). Capture groups are automatically numbered by the position of their opening parentheses (left to right), starting at 1.</p>\n<p>The example below matches a word that occurs thrice separated by spaces:</p>\n<pre><code class=\"language-js\">let repeatRegex = /(\\w+) \\1 \\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns [\"row row row\", \"row\"]\n</code></pre>\n<p>Using the <code>.match()</code> method on a string will return an array with the matched substring, along with its captured groups.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Use capture groups in <code>reRegex</code> to match a string that consists of only the same number repeated exactly three times separated by single spaces.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 30,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
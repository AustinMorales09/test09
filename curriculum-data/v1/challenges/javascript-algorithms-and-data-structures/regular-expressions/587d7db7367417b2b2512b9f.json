{
  "id": "587d7db7367417b2b2512b9f",
  "title": "Match All Letters and Numbers",
  "challengeType": 1,
  "forumTopicId": 301346,
  "dashedName": "match-all-letters-and-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /change/; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;",
      "error": null,
      "seed": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /change/; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /\\w/g; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;",
        "error": null,
        "seed": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /\\w/g; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex should use the global flag.</p>",
      "testString": "assert(alphabetRegexV2.global);"
    },
    {
      "text": "<p>Your regex should use the shorthand character <code>\\w</code> to match all characters which are alphanumeric.</p>",
      "testString": "assert(/\\\\w/.test(alphabetRegexV2.source));"
    },
    {
      "text": "<p>Your regex should find 31 alphanumeric characters in the string <code>The five boxing wizards jump quickly.</code></p>",
      "testString": "assert(\n  'The five boxing wizards jump quickly.'.match(alphabetRegexV2).length === 31\n);"
    },
    {
      "text": "<p>Your regex should find 32 alphanumeric characters in the string <code>Pack my box with five dozen liquor jugs.</code></p>",
      "testString": "assert(\n  'Pack my box with five dozen liquor jugs.'.match(alphabetRegexV2).length ===\n    32\n);"
    },
    {
      "text": "<p>Your regex should find 30 alphanumeric characters in the string <code>How vexingly quick daft zebras jump!</code></p>",
      "testString": "assert(\n  'How vexingly quick daft zebras jump!'.match(alphabetRegexV2).length === 30\n);"
    },
    {
      "text": "<p>Your regex should find 36 alphanumeric characters in the string <code>123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.</code></p>",
      "testString": "assert(\n  '123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.'.match(alphabetRegexV2)\n    .length === 36\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Using character classes, you were able to search for all letters of the alphabet with <code>[a-z]</code>. This kind of character class is common enough that there is a shortcut for it, although it includes a few extra characters as well.</p>\n<p>The closest character class in JavaScript to match the alphabet is <code>\\w</code>. This shortcut is equal to <code>[A-Za-z0-9_]</code>. This character class matches upper and lowercase letters plus numbers. Note, this character class also includes the underscore character (<code>_</code>).</p>\n<pre><code class=\"language-js\">let longHand = /[A-Za-z0-9_]+/;\nlet shortHand = /\\w+/;\nlet numbers = \"42\";\nlet varNames = \"important_var\";\nlongHand.test(numbers);\nshortHand.test(numbers);\nlongHand.test(varNames);\nshortHand.test(varNames);\n</code></pre>\n<p>All four of these <code>test</code> calls would return <code>true</code>.</p>\n<p>These shortcut character classes are also known as <dfn>shorthand character classes</dfn>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Use the shorthand character class <code>\\w</code> to count the number of alphanumeric characters in various quotes and strings.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 17,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
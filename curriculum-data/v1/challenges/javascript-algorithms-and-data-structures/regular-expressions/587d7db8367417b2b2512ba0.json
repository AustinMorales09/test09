{
  "id": "587d7db8367417b2b2512ba0",
  "title": "Match Everything But Letters and Numbers",
  "challengeType": 1,
  "forumTopicId": 301353,
  "dashedName": "match-everything-but-letters-and-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet nonAlphabetRegex = /change/; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;",
      "error": null,
      "seed": "let quoteSample = \"The five boxing wizards jump quickly.\";\nlet nonAlphabetRegex = /change/; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let quoteSample = \"The five boxing wizards_jump quickly.\";\nlet nonAlphabetRegex = /\\W/g; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;",
        "error": null,
        "seed": "let quoteSample = \"The five boxing wizards_jump quickly.\";\nlet nonAlphabetRegex = /\\W/g; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex should use the global flag.</p>",
      "testString": "assert(nonAlphabetRegex.global);"
    },
    {
      "text": "<p>Your regex should find 6 non-alphanumeric characters in the string <code>The five boxing wizards jump quickly.</code>.</p>",
      "testString": "assert(\n  'The five boxing wizards jump quickly.'.match(nonAlphabetRegex).length == 6\n);"
    },
    {
      "text": "<p>Your regex should use the shorthand character to match characters which are non-alphanumeric.</p>",
      "testString": "assert(/\\\\W/.test(nonAlphabetRegex.source));"
    },
    {
      "text": "<p>Your regex should find 8 non-alphanumeric characters in the string <code>Pack my box with five dozen liquor jugs.</code></p>",
      "testString": "assert(\n  'Pack my box with five dozen liquor jugs.'.match(nonAlphabetRegex).length == 8\n);"
    },
    {
      "text": "<p>Your regex should find 6 non-alphanumeric characters in the string <code>How vexingly quick daft zebras jump!</code></p>",
      "testString": "assert(\n  'How vexingly quick daft zebras jump!'.match(nonAlphabetRegex).length == 6\n);"
    },
    {
      "text": "<p>Your regex should find 12 non-alphanumeric characters in the string <code>123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.</code></p>",
      "testString": "assert(\n  '123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.'.match(nonAlphabetRegex)\n    .length == 12\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>You've learned that you can use a shortcut to match alphanumerics <code>[A-Za-z0-9_]</code> using <code>\\w</code>. A natural pattern you might want to search for is the opposite of alphanumerics.</p>\n<p>You can search for the opposite of the <code>\\w</code> with <code>\\W</code>. Note, the opposite pattern uses a capital letter. This shortcut is the same as <code>[^A-Za-z0-9_]</code>.</p>\n<pre><code class=\"language-js\">let shortHand = /\\W/;\nlet numbers = \"42%\";\nlet sentence = \"Coding!\";\nnumbers.match(shortHand);\nsentence.match(shortHand);\n</code></pre>\n<p>The first <code>match</code> call would return the value <code>[\"%\"]</code> and the second would return <code>[\"!\"]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Use the shorthand character class <code>\\W</code> to count the number of non-alphanumeric characters in various quotes and strings.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 18,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7db3367417b2b2512b8f",
  "title": "Match Literal Strings",
  "challengeType": 1,
  "forumTopicId": 301355,
  "dashedName": "match-literal-strings",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /search/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);",
      "error": null,
      "seed": "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /search/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /Waldo/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);",
        "error": null,
        "seed": "let waldoIsHiding = \"Somewhere Waldo is hiding in this text.\";\nlet waldoRegex = /Waldo/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex <code>waldoRegex</code> should find the string <code>Waldo</code></p>",
      "testString": "waldoRegex.lastIndex = 0;\nassert(waldoRegex.test(waldoIsHiding));"
    },
    {
      "text": "<p>Your regex <code>waldoRegex</code> should not search for anything else.</p>",
      "testString": "waldoRegex.lastIndex = 0;\nassert(!waldoRegex.test('Somewhere is hiding in this text.'));"
    },
    {
      "text": "<p>You should perform a literal string match with your regex.</p>",
      "testString": "assert(!/\\/.*\\/i/.test(__helpers.removeJSComments(code)));"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the last challenge, you searched for the word <code>Hello</code> using the regular expression <code>/Hello/</code>. That regex searched for a literal match of the string <code>Hello</code>. Here's another example searching for a literal match of the string <code>Kevin</code>:</p>\n<pre><code class=\"language-js\">let testStr = \"Hello, my name is Kevin.\";\nlet testRegex = /Kevin/;\ntestRegex.test(testStr);\n</code></pre>\n<p>This <code>test</code> call will return <code>true</code>.</p>\n<p>Any other forms of <code>Kevin</code> will not match. For example, the regex <code>/Kevin/</code> will not match <code>kevin</code> or <code>KEVIN</code>.</p>\n<pre><code class=\"language-js\">let wrongRegex = /kevin/;\nwrongRegex.test(testStr);\n</code></pre>\n<p>This <code>test</code> call will return <code>false</code>.</p>\n<p>A future challenge will show how to match those other forms as well.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Complete the regex <code>waldoRegex</code> to find <code>\"Waldo\"</code> in the string <code>waldoIsHiding</code> with a literal match.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
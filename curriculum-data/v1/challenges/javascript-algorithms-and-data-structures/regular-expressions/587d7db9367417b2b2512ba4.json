{
  "id": "587d7db9367417b2b2512ba4",
  "title": "Match Non-Whitespace Characters",
  "challengeType": 1,
  "forumTopicId": 18210,
  "dashedName": "match-non-whitespace-characters",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /change/; // Change this line\nlet result = sample.match(countNonWhiteSpace);",
      "error": null,
      "seed": "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /change/; // Change this line\nlet result = sample.match(countNonWhiteSpace);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /\\S/g; // Change this line\nlet result = sample.match(countNonWhiteSpace);",
        "error": null,
        "seed": "let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /\\S/g; // Change this line\nlet result = sample.match(countNonWhiteSpace);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex should use the global flag.</p>",
      "testString": "assert(countNonWhiteSpace.global);"
    },
    {
      "text": "<p>Your regex should use the shorthand character <code>\\S</code> to match all non-whitespace characters.</p>",
      "testString": "assert(/\\\\S/.test(countNonWhiteSpace.source));"
    },
    {
      "text": "<p>Your regex should find 35 non-spaces in the string <code>Men are from Mars and women are from Venus.</code></p>",
      "testString": "assert(\n  'Men are from Mars and women are from Venus.'.match(countNonWhiteSpace)\n    .length == 35\n);"
    },
    {
      "text": "<p>Your regex should find 23 non-spaces in the string <code>Space: the final frontier.</code></p>",
      "testString": "assert('Space: the final frontier.'.match(countNonWhiteSpace).length == 23);"
    },
    {
      "text": "<p>Your regex should find 21 non-spaces in the string <code>MindYourPersonalSpace</code></p>",
      "testString": "assert('MindYourPersonalSpace'.match(countNonWhiteSpace).length == 21);"
    }
  ],
  "description": "<section id=\"description\">\n<p>You learned about searching for whitespace using <code>\\s</code>, with a lowercase <code>s</code>. You can also search for everything except whitespace.</p>\n<p>Search for non-whitespace using <code>\\S</code>, which is an uppercase <code>s</code>. This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. You can think of it being similar to the character class <code>[^ \\r\\t\\f\\n\\v]</code>.</p>\n<pre><code class=\"language-js\">let whiteSpace = \"Whitespace. Whitespace everywhere!\"\nlet nonSpaceRegex = /\\S/g;\nwhiteSpace.match(nonSpaceRegex).length;\n</code></pre>\n<p>The value returned by the <code>.length</code> method would be <code>32</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Change the regex <code>countNonWhiteSpace</code> to look for multiple non-whitespace characters in a string.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 23,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
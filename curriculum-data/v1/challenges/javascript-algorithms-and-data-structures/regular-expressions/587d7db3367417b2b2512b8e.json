{
  "id": "587d7db3367417b2b2512b8e",
  "title": "Using the Test Method",
  "challengeType": 1,
  "forumTopicId": 301369,
  "dashedName": "using-the-test-method",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex; // Change this line",
      "error": null,
      "seed": "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex; // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex.test(myString); // Change this line",
        "error": null,
        "seed": "let myString = \"Hello, World!\";\nlet myRegex = /Hello/;\nlet result = myRegex.test(myString); // Change this line"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should use <code>.test()</code> to test the regex.</p>",
      "testString": "assert(__helpers.removeJSComments(code).match(/myRegex.test\\(\\s*myString\\s*\\)/));"
    },
    {
      "text": "<p>Your result should return <code>true</code>.</p>",
      "testString": "assert(result === true);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Regular expressions are used in programming languages to match parts of strings. You create patterns to help you do that matching.</p>\n<p>If you want to find the word <code>the</code> in the string <code>The dog chased the cat</code>, you could use the following regular expression: <code>/the/</code>. Notice that quote marks are not required within the regular expression.</p>\n<p>JavaScript has multiple ways to use regexes. One way to test a regex is using the <code>.test()</code> method. The <code>.test()</code> method takes the regex, applies it to a string (which is placed inside the parentheses), and returns <code>true</code> or <code>false</code> if your pattern finds something or not.</p>\n<pre><code class=\"language-js\">let testStr = \"freeCodeCamp\";\nlet testRegex = /Code/;\ntestRegex.test(testStr);\n</code></pre>\n<p>The <code>test</code> method here returns <code>true</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Apply the regex <code>myRegex</code> on the string <code>myString</code> using the <code>.test()</code> method.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7db9367417b2b2512ba7",
  "title": "Specify Exact Number of Matches",
  "challengeType": 1,
  "forumTopicId": 301365,
  "dashedName": "specify-exact-number-of-matches",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let timStr = \"Timmmmber\";\nlet timRegex = /change/; // Change this line\nlet result = timRegex.test(timStr);",
      "error": null,
      "seed": "let timStr = \"Timmmmber\";\nlet timRegex = /change/; // Change this line\nlet result = timRegex.test(timStr);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let timStr = \"Timmmmber\";\nlet timRegex = /Tim{4}ber/; // Change this line\nlet result = timRegex.test(timStr);",
        "error": null,
        "seed": "let timStr = \"Timmmmber\";\nlet timRegex = /Tim{4}ber/; // Change this line\nlet result = timRegex.test(timStr);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex should use curly brackets.</p>",
      "testString": "assert(timRegex.source.match(/{.*?}/).length > 0);"
    },
    {
      "text": "<p>Your regex should not match the string <code>Timber</code></p>",
      "testString": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Timber'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>Timmber</code></p>",
      "testString": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Timmber'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>Timmmber</code></p>",
      "testString": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Timmmber'));"
    },
    {
      "text": "<p>Your regex should match the string <code>Timmmmber</code></p>",
      "testString": "timRegex.lastIndex = 0;\nassert(timRegex.test('Timmmmber'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>Timber</code> with 30 <code>m</code>'s in it.</p>",
      "testString": "timRegex.lastIndex = 0;\nassert(!timRegex.test('Ti' + 'm'.repeat(30) + 'ber'));"
    }
  ],
  "description": "<section id=\"description\">\n<p>You can specify the lower and upper number of patterns with quantity specifiers using curly brackets. Sometimes you only want a specific number of matches.</p>\n<p>To specify a certain number of patterns, just have that one number between the curly brackets.</p>\n<p>For example, to match only the word <code>hah</code> with the letter <code>a</code> <code>3</code> times, your regex would be <code>/ha{3}h/</code>.</p>\n<pre><code class=\"language-js\">let A4 = \"haaaah\";\nlet A3 = \"haaah\";\nlet A100 = \"h\" + \"a\".repeat(100) + \"h\";\nlet multipleHA = /ha{3}h/;\nmultipleHA.test(A4);\nmultipleHA.test(A3);\nmultipleHA.test(A100);\n</code></pre>\n<p>In order, the three <code>test</code> calls would return <code>false</code>, <code>true</code>, and <code>false</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Change the regex <code>timRegex</code> to match the word <code>Timber</code> only when it has four letter <code>m</code>'s.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 26,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
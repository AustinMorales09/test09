{
  "id": "587d7db6367417b2b2512b98",
  "title": "Match Single Characters Not Specified",
  "challengeType": 1,
  "forumTopicId": 301358,
  "dashedName": "match-single-characters-not-specified",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let quoteSample = \"3 blind mice.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line",
      "error": null,
      "seed": "let quoteSample = \"3 blind mice.\";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let quoteSample = \"3 blind mice.\";\nlet myRegex = /[^0-9aeiou]/gi; // Change this line\nlet result = quoteSample.match(myRegex); // Change this line",
        "error": null,
        "seed": "let quoteSample = \"3 blind mice.\";\nlet myRegex = /[^0-9aeiou]/gi; // Change this line\nlet result = quoteSample.match(myRegex); // Change this line"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex <code>myRegex</code> should match 9 items.</p>",
      "testString": "assert(result.length == 9);"
    },
    {
      "text": "<p>Your regex <code>myRegex</code> should use the global flag.</p>",
      "testString": "assert(myRegex.flags.match(/g/).length == 1);"
    },
    {
      "text": "<p>Your regex <code>myRegex</code> should use the case insensitive flag.</p>",
      "testString": "assert(myRegex.flags.match(/i/).length == 1);"
    }
  ],
  "description": "<section id=\"description\">\n<p>So far, you have created a set of characters that you want to match, but you could also create a set of characters that you do not want to match. These types of character sets are called <dfn>negated character sets</dfn>.</p>\n<p>To create a negated character set, you place a caret character (<code>^</code>) after the opening bracket and before the characters you do not want to match.</p>\n<p>For example, <code>/[^aeiou]/gi</code> matches all characters that are not a vowel. Note that characters like <code>.</code>, <code>!</code>, <code>[</code>, <code>@</code>, <code>/</code> and white space are matched - the negated vowel character set only excludes the vowel characters.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a single regex that matches all characters that are not a number or a vowel. Remember to include the appropriate flags in the regex.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 10,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
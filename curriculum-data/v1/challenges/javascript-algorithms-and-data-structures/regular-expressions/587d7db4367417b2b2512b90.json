{
  "id": "587d7db4367417b2b2512b90",
  "title": "Match a Literal String with Different Possibilities",
  "challengeType": 1,
  "forumTopicId": 301345,
  "dashedName": "match-a-literal-string-with-different-possibilities",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let petString = \"James has a pet cat.\";\nlet petRegex = /change/; // Change this line\nlet result = petRegex.test(petString);",
      "error": null,
      "seed": "let petString = \"James has a pet cat.\";\nlet petRegex = /change/; // Change this line\nlet result = petRegex.test(petString);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let petString = \"James has a pet cat.\";\nlet petRegex = /dog|cat|bird|fish/; // Change this line\nlet result = petRegex.test(petString);",
        "error": null,
        "seed": "let petString = \"James has a pet cat.\";\nlet petRegex = /dog|cat|bird|fish/; // Change this line\nlet result = petRegex.test(petString);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>John has a pet dog.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(petRegex.test('John has a pet dog.'));"
    },
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>false</code> for the string <code>Emma has a pet rock.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(!petRegex.test('Emma has a pet rock.'));"
    },
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>Emma has a pet bird.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(petRegex.test('Emma has a pet bird.'));"
    },
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>Liz has a pet cat.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(petRegex.test('Liz has a pet cat.'));"
    },
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>false</code> for the string <code>Kara has a pet dolphin.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(!petRegex.test('Kara has a pet dolphin.'));"
    },
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>true</code> for the string <code>Alice has a pet fish.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(petRegex.test('Alice has a pet fish.'));"
    },
    {
      "text": "<p>Your regex <code>petRegex</code> should return <code>false</code> for the string <code>Jimmy has a pet computer.</code></p>",
      "testString": "petRegex.lastIndex = 0;\nassert(!petRegex.test('Jimmy has a pet computer.'));"
    }
  ],
  "description": "<section id=\"description\">\n<p>Using regexes like <code>/coding/</code>, you can look for the pattern <code>coding</code> in another string.</p>\n<p>This is powerful to search single strings, but it's limited to only one pattern. You can search for multiple patterns using the <code>alternation</code> or <code>OR</code> operator: <code>|</code>.</p>\n<p>This operator matches patterns either before or after it. For example, if you wanted to match the strings <code>yes</code> or <code>no</code>, the regex you want is <code>/yes|no/</code>.</p>\n<p>You can also search for more than just two patterns. You can do this by adding more patterns with more <code>OR</code> operators separating them, like <code>/yes|no|maybe/</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Complete the regex <code>petRegex</code> to match the pets <code>dog</code>, <code>cat</code>, <code>bird</code>, or <code>fish</code>.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
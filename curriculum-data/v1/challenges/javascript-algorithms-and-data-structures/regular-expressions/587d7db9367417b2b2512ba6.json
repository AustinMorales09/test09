{
  "id": "587d7db9367417b2b2512ba6",
  "title": "Specify Only the Lower Number of Matches",
  "challengeType": 1,
  "forumTopicId": 301366,
  "dashedName": "specify-only-the-lower-number-of-matches",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let haStr = \"Hazzzzah\";\nlet haRegex = /change/; // Change this line\nlet result = haRegex.test(haStr);",
      "error": null,
      "seed": "let haStr = \"Hazzzzah\";\nlet haRegex = /change/; // Change this line\nlet result = haRegex.test(haStr);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let haStr = \"Hazzzzah\";\nlet haRegex = /Haz{4,}ah/; // Change this line\nlet result = haRegex.test(haStr);",
        "error": null,
        "seed": "let haStr = \"Hazzzzah\";\nlet haRegex = /Haz{4,}ah/; // Change this line\nlet result = haRegex.test(haStr);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your regex should use curly brackets.</p>",
      "testString": "assert(haRegex.source.match(/{.*?}/).length > 0);"
    },
    {
      "text": "<p>Your regex should not match the string <code>Hazzah</code></p>",
      "testString": "haRegex.lastIndex = 0;\nassert(!haRegex.test('Hazzah'));"
    },
    {
      "text": "<p>Your regex should not match the string <code>Hazzzah</code></p>",
      "testString": "haRegex.lastIndex = 0;\nassert(!haRegex.test('Hazzzah'));"
    },
    {
      "text": "<p>Your regex should match the string <code>Hazzzzah</code></p>",
      "testString": "assert('Hazzzzah'.match(haRegex)[0].length === 8);"
    },
    {
      "text": "<p>Your regex should match the string <code>Hazzzzzah</code></p>",
      "testString": "assert('Hazzzzzah'.match(haRegex)[0].length === 9);"
    },
    {
      "text": "<p>Your regex should match the string <code>Hazzzzzzah</code></p>",
      "testString": "assert('Hazzzzzzah'.match(haRegex)[0].length === 10);"
    },
    {
      "text": "<p>Your regex should match the string <code>Hazzah</code> with 30 <code>z</code>'s in it.</p>",
      "testString": "assert('Hazzzzzzzzzzzzzzzzzzzzzzzzzzzzzzah'.match(haRegex)[0].length === 34);"
    }
  ],
  "description": "<section id=\"description\">\n<p>You can specify the lower and upper number of patterns with quantity specifiers using curly brackets. Sometimes you only want to specify the lower number of patterns with no upper limit.</p>\n<p>To only specify the lower number of patterns, keep the first number followed by a comma.</p>\n<p>For example, to match only the string <code>hah</code> with the letter <code>a</code> appearing at least <code>3</code> times, your regex would be <code>/ha{3,}h/</code>.</p>\n<pre><code class=\"language-js\">let A4 = \"haaaah\";\nlet A2 = \"haah\";\nlet A100 = \"h\" + \"a\".repeat(100) + \"h\";\nlet multipleA = /ha{3,}h/;\nmultipleA.test(A4);\nmultipleA.test(A2);\nmultipleA.test(A100);\n</code></pre>\n<p>In order, the three <code>test</code> calls would return <code>true</code>, <code>false</code>, and <code>true</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Change the regex <code>haRegex</code> to match the word <code>Hazzah</code> only when it has four or more letter <code>z</code>'s.</p>\n</section>",
  "translationPending": false,
  "block": "regular-expressions",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 19,
  "certification": "javascript-algorithms-and-data-structures",
  "superBlock": "javascript-algorithms-and-data-structures",
  "challengeOrder": 25,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
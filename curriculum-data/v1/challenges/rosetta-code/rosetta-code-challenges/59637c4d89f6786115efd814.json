{
  "id": "59637c4d89f6786115efd814",
  "title": "Hofstadter Q sequence",
  "challengeType": 1,
  "forumTopicId": 302287,
  "dashedName": "hofstadter-q-sequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testCase = [1000, 1500, 2000, 2500];\nconst res = [502, 755, 1005, 1261];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function hofstadterQ(n) {\n\n  return n;\n}",
      "error": null,
      "seed": "function hofstadterQ(n) {\n\n  return n;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function hofstadterQ (n) {\n  const memo = [1, 1, 1];\n  const Q = function (i) {\n    let result = memo[i];\n    if (typeof result !== 'number') {\n      result = Q(i - Q(i - 1)) + Q(i - Q(i - 2));\n      memo[i] = result;\n    }\n    return result;\n  };\n  return Q(n);\n}",
        "error": null,
        "seed": "function hofstadterQ (n) {\n  const memo = [1, 1, 1];\n  const Q = function (i) {\n    let result = memo[i];\n    if (typeof result !== 'number') {\n      result = Q(i - Q(i - 1)) + Q(i - Q(i - 2));\n      memo[i] = result;\n    }\n    return result;\n  };\n  return Q(n);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>hofstadterQ</code> should be a function.</p>",
      "testString": "assert(typeof hofstadterQ === 'function');"
    },
    {
      "text": "<p><code>hofstadterQ()</code> should return <code>integer</code></p>",
      "testString": "assert(Number.isInteger(hofstadterQ(1000)));"
    },
    {
      "text": "<p><code>hofstadterQ(1000)</code> should return <code>502</code></p>",
      "testString": "assert.equal(hofstadterQ(testCase[0]), res[0]);"
    },
    {
      "text": "<p><code>hofstadterQ(1500)</code> should return <code>755</code></p>",
      "testString": "assert.equal(hofstadterQ(testCase[1]), res[1]);"
    },
    {
      "text": "<p><code>hofstadterQ(2000)</code> should return <code>1005</code></p>",
      "testString": "assert.equal(hofstadterQ(testCase[2]), res[2]);"
    },
    {
      "text": "<p><code>hofstadterQ(2500)</code> should return <code>1261</code></p>",
      "testString": "assert.equal(hofstadterQ(testCase[3]), res[3]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Hofstadter Q sequence is defined as:</p>\n<p>$Q(1)=Q(2)=1, \\\\ Q(n)=Q\\big(n-Q(n-1)\\big)+Q\\big(n-Q(n-2)), \\quad n>2.$</p>\n<p>It is defined like the Fibonacci sequence, but whereas the next term in the Fibonacci sequence is the sum of the previous two terms, in the Q sequence the previous two terms tell you how far to go back in the Q sequence to find the two numbers to sum to make the next term of the sequence.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Implement the Hofstadter Q Sequence equation as a function. The function should accept number, <code>n</code>, and return an integer.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 69,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
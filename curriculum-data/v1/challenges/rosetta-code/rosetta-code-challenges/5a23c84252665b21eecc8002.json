{
  "id": "5a23c84252665b21eecc8002",
  "title": "Sorting algorithms/Bogosort",
  "challengeType": 1,
  "forumTopicId": 302311,
  "dashedName": "sorting-algorithmsbogosort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function bogosort(v) {\n\n}",
      "error": null,
      "seed": "function bogosort(v) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function bogosort(v) {\n  function shuffle(v) {\n    for (\n      var j, x, i = v.length;\n      i;\n      j = Math.floor(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x\n    );\n    return v;\n  }\n\n  function isSorted(v) {\n    for (var i = 1; i < v.length; i++) {\n      if (v[i - 1] > v[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var sorted = false;\n  while (sorted == false) {\n    v = shuffle(v);\n    sorted = isSorted(v);\n  }\n  return v;\n}",
        "error": null,
        "seed": "function bogosort(v) {\n  function shuffle(v) {\n    for (\n      var j, x, i = v.length;\n      i;\n      j = Math.floor(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x\n    );\n    return v;\n  }\n\n  function isSorted(v) {\n    for (var i = 1; i < v.length; i++) {\n      if (v[i - 1] > v[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var sorted = false;\n  while (sorted == false) {\n    v = shuffle(v);\n    sorted = isSorted(v);\n  }\n  return v;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>bogosort</code> should be a function.</p>",
      "testString": "assert(typeof bogosort == 'function');"
    },
    {
      "text": "<p><code>bogosort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(bogosort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>bogosort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(bogosort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>bogosort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(bogosort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>bogosort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(bogosort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>bogosort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(bogosort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>bogosort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(bogosort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Bogosort a list of numbers.</p>\n<p>Bogosort simply shuffles a collection randomly until it is sorted.</p>\n<p>\"Bogosort\" is a perversely inefficient algorithm only used as an in-joke.</p>\n<p>Its average run-time is O(n!) because the chance that any given shuffle of a set will end up in sorted order is about one in <em>n</em> factorial, and the worst case is infinite since there's no guarantee that a random shuffling will ever produce a sorted sequence.</p>\n<p>Its best case is O(n) since a single pass through the elements may suffice to order them.</p>\n<p>Pseudocode:</p>\n<pre><b>while not</b> InOrder(list) <b>do</b>\n  Shuffle(list)\n<b>done</b>\n</pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 121,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
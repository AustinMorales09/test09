{
  "id": "594810f028c0303b75339ad1",
  "title": "Happy numbers",
  "challengeType": 1,
  "forumTopicId": 302280,
  "dashedName": "happy-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function happy(number) {\n\n}",
      "error": null,
      "seed": "function happy(number) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function happy (number) {\n  let m;\n  let digit;\n  const cycle = [];\n\n  while (number !== 1 && cycle[number] !== true) {\n    cycle[number] = true;\n    m = 0;\n    while (number > 0) {\n      digit = number % 10;\n      m += Math.pow(digit, 2);\n      number = (number - digit) / 10;\n    }\n    number = m;\n  }\n  return (number === 1);\n}",
        "error": null,
        "seed": "function happy (number) {\n  let m;\n  let digit;\n  const cycle = [];\n\n  while (number !== 1 && cycle[number] !== true) {\n    cycle[number] = true;\n    m = 0;\n    while (number > 0) {\n      digit = number % 10;\n      m += Math.pow(digit, 2);\n      number = (number - digit) / 10;\n    }\n    number = m;\n  }\n  return (number === 1);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>happy</code> should be a function.</p>",
      "testString": "assert(typeof happy === 'function');"
    },
    {
      "text": "<p><code>happy(1)</code> should return a boolean.</p>",
      "testString": "assert(typeof happy(1) === 'boolean');"
    },
    {
      "text": "<p><code>happy(1)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(1));"
    },
    {
      "text": "<p><code>happy(2)</code> should return <code>false</code>.</p>",
      "testString": "assert(!happy(2));"
    },
    {
      "text": "<p><code>happy(7)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(7));"
    },
    {
      "text": "<p><code>happy(10)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(10));"
    },
    {
      "text": "<p><code>happy(13)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(13));"
    },
    {
      "text": "<p><code>happy(19)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(19));"
    },
    {
      "text": "<p><code>happy(23)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(23));"
    },
    {
      "text": "<p><code>happy(28)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(28));"
    },
    {
      "text": "<p><code>happy(31)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(31));"
    },
    {
      "text": "<p><code>happy(32)</code> should return <code>true</code>.</p>",
      "testString": "assert(happy(32));"
    },
    {
      "text": "<p><code>happy(33)</code> should return <code>false</code>.</p>",
      "testString": "assert(!happy(33));"
    }
  ],
  "description": "<section id=\"description\">\n<p>A happy number is defined by the following process:</p>\n<p>Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals <code>1</code> (where it will stay), or it loops endlessly in a cycle which does not include <code>1</code>. Those numbers for which this process ends in <code>1</code> are happy numbers, while those that do not end in <code>1</code> are unhappy numbers.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Implement a function that returns true if the number is happy, or false if not.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 63,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "596fda99c69f779975a1b67d",
  "title": "Count occurrences of a substring",
  "challengeType": 1,
  "forumTopicId": 302237,
  "dashedName": "count-occurrences-of-a-substring",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testCases = ['the three truths', 'ababababab', 'abaabba*bbaba*bbab'];\nconst searchString = ['th', 'abab', 'a*b'];\nconst results = [3, 2, 2];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function countSubstring(str, subStr) {\n\n  return true;\n}",
      "error": null,
      "seed": "function countSubstring(str, subStr) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function countSubstring(str, subStr) {\n  const escapedSubStr = subStr.replace(/[.+*?^$[\\]{}()|/]/g, '\\\\$&');\n  const matches = str.match(new RegExp(escapedSubStr, 'g'));\n  return matches ? matches.length : 0;\n}",
        "error": null,
        "seed": "function countSubstring(str, subStr) {\n  const escapedSubStr = subStr.replace(/[.+*?^$[\\]{}()|/]/g, '\\\\$&');\n  const matches = str.match(new RegExp(escapedSubStr, 'g'));\n  return matches ? matches.length : 0;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countSubstring</code> should be a function.</p>",
      "testString": "assert(typeof countSubstring === 'function');"
    },
    {
      "text": "<p><code>countSubstring(\"the three truths\", \"th\")</code> should return <code>3</code>.</p>",
      "testString": "assert.equal(countSubstring(testCases[0], searchString[0]), results[0]);"
    },
    {
      "text": "<p><code>countSubstring(\"ababababab\", \"abab\")</code> should return <code>2</code>.</p>",
      "testString": "assert.equal(countSubstring(testCases[1], searchString[1]), results[1]);"
    },
    {
      "text": "<p><code>countSubstring(\"abaabba*bbaba*bbab\", \"a*b\")</code> should return <code>2</code>.</p>",
      "testString": "assert.equal(countSubstring(testCases[2], searchString[2]), results[2]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Create a function, or show a built-in function, to count the number of non-overlapping occurrences of a substring inside a string.</p>\n<p>The function should take two arguments:</p>\n<ul>\n  <li>the first argument being the string to search, and</li>\n  <li>the second a substring to be searched for.</li>\n</ul>\n<p>It should return an integer count.</p>\n<p>The matching should yield the highest number of non-overlapping matches.</p>\n<p>In general, this essentially means matching from left-to-right or right-to-left.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 20,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "599c333915e0ea32d04d4bec",
  "title": "Element-wise operations",
  "challengeType": 1,
  "forumTopicId": 302252,
  "dashedName": "element-wise-operations",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function operation(op, arr1, arr2) {\n\n}",
      "error": null,
      "seed": "function operation(op, arr1, arr2) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function operation(op, arr1, arr2) {\n  const ops = {\n    add: ((a, b) => a + b),\n    sub: ((a, b) => a - b),\n    mult: ((a, b) => a * b),\n    div: ((a, b) => a / b),\n    exp: ((a, b) => Math.pow(a, b))\n  };\n  const ifm = op.startsWith('m');\n  const doOp = ops[op.substring(2)];\n  for (let i = 0; i < arr1.length; i++) {\n    for (let j = 0; j < arr1[0].length; j++) {\n      arr1[i][j] = doOp(arr1[i][j], (ifm) ? (arr2[i][j]) : (arr2));\n    }\n  }\n  return arr1;\n}",
        "error": null,
        "seed": "function operation(op, arr1, arr2) {\n  const ops = {\n    add: ((a, b) => a + b),\n    sub: ((a, b) => a - b),\n    mult: ((a, b) => a * b),\n    div: ((a, b) => a / b),\n    exp: ((a, b) => Math.pow(a, b))\n  };\n  const ifm = op.startsWith('m');\n  const doOp = ops[op.substring(2)];\n  for (let i = 0; i < arr1.length; i++) {\n    for (let j = 0; j < arr1[0].length; j++) {\n      arr1[i][j] = doOp(arr1[i][j], (ifm) ? (arr2[i][j]) : (arr2));\n    }\n  }\n  return arr1;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>operation</code> should be a function.</p>",
      "testString": "assert(typeof operation === 'function');"
    },
    {
      "text": "<p><code>operation(\"m_add\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[2,4],[6,8]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    'm_add',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [2, 4],\n    [6, 8]\n  ]\n);"
    },
    {
      "text": "<p><code>operation(\"s_add\",[[1,2],[3,4]],2)</code> should return <code>[[3,4],[5,6]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    's_add',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    2\n  ),\n  [\n    [3, 4],\n    [5, 6]\n  ]\n);"
    },
    {
      "text": "<p><code>operation(\"m_sub\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[0,0],[0,0]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    'm_sub',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [0, 0],\n    [0, 0]\n  ]\n);"
    },
    {
      "text": "<p><code>operation(\"m_mult\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[9,16]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    'm_mult',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [1, 4],\n    [9, 16]\n  ]\n);"
    },
    {
      "text": "<p><code>operation(\"m_div\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,1],[1,1]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    'm_div',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [1, 1],\n    [1, 1]\n  ]\n);"
    },
    {
      "text": "<p><code>operation(\"m_exp\",[[1,2],[3,4]],[[1,2],[3,4]])</code> should return <code>[[1,4],[27,256]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    'm_exp',\n    [\n      [1, 2],\n      [3, 4]\n    ],\n    [\n      [1, 2],\n      [3, 4]\n    ]\n  ),\n  [\n    [1, 4],\n    [27, 256]\n  ]\n);"
    },
    {
      "text": "<p><code>operation(\"m_add\",[[1,2,3,4],[5,6,7,8]],[[9,10,11,12],[13,14,15,16]])</code> should return <code>[[10,12,14,16],[18,20,22,24]]</code>.</p>",
      "testString": "assert.deepEqual(\n  operation(\n    'm_add',\n    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8]\n    ],\n    [\n      [9, 10, 11, 12],\n      [13, 14, 15, 16]\n    ]\n  ),\n  [\n    [10, 12, 14, 16],\n    [18, 20, 22, 24]\n  ]\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Implement basic element-wise matrix-matrix and scalar-matrix operations.</p>\n<p><strong>Implement:</strong></p>\n<ul>\n  <li>addition</li>\n  <li>subtraction</li>\n  <li>multiplication</li>\n  <li>division</li>\n  <li>exponentiation</li>\n</ul>\n<p>The first parameter will be the operation to be performed, for example, \"m_add\" for matrix addition and \"s_add\" for scalar addition. The second and third parameters will be the matrices on which the operations are to be performed.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 35,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
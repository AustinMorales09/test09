{
  "id": "5a23c84252665b21eecc802a",
  "title": "Stream Merge",
  "challengeType": 1,
  "forumTopicId": 302326,
  "dashedName": "stream-merge",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function mergeLists(lists) {\n\n}",
      "error": null,
      "seed": "function mergeLists(lists) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function mergeLists(lists) {\n  function merge(l1, l2) {\n    var result = [],\n      i = 0,\n      j = 0;\n    while (l1.length && l2.length) {\n      if (l1[i] <= l2[j]) {\n        result.push(l1.shift());\n      } else {\n        result.push(l2.shift());\n      }\n    }\n\n    result.push.apply(result, l1);\n    result.push.apply(result, l2);\n    return result;\n  }\n\n  var result = lists[0];\n  for (var i = 1; i < lists.length; i++) {\n    result = merge(result, lists[i]);\n  }\n\n  return result;\n}",
        "error": null,
        "seed": "function mergeLists(lists) {\n  function merge(l1, l2) {\n    var result = [],\n      i = 0,\n      j = 0;\n    while (l1.length && l2.length) {\n      if (l1[i] <= l2[j]) {\n        result.push(l1.shift());\n      } else {\n        result.push(l2.shift());\n      }\n    }\n\n    result.push.apply(result, l1);\n    result.push.apply(result, l2);\n    return result;\n  }\n\n  var result = lists[0];\n  for (var i = 1; i < lists.length; i++) {\n    result = merge(result, lists[i]);\n  }\n\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>mergeLists</code> should be a function.</p>",
      "testString": "assert(typeof mergeLists == 'function');"
    },
    {
      "text": "<p><code>mergeLists([[1, 3, 5, 9, 10], [2, 4, 6, 7, 8]])</code> should return an array.</p>",
      "testString": "assert(\n  Array.isArray(\n    mergeLists([\n      [1, 3, 5, 9, 10],\n      [2, 4, 6, 7, 8]\n    ])\n  )\n);"
    },
    {
      "text": "<p><code>mergeLists([[1, 3, 5, 9, 10], [2, 4, 6, 7, 8]])</code> should return <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>.</p>",
      "testString": "assert.deepEqual(\n  mergeLists([\n    [1, 3, 5, 9, 10],\n    [2, 4, 6, 7, 8]\n  ]),\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n);"
    },
    {
      "text": "<p><code>mergeLists([[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]])</code> should return <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</code>.</p>",
      "testString": "assert.deepEqual(\n  mergeLists([\n    [1, 4, 7, 10],\n    [2, 5, 8, 11],\n    [3, 6, 9, 12]\n  ]),\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n);"
    },
    {
      "text": "<p><code>mergeLists([[1, 3, 9, 14, 15, 17, 28], [7, 8, 14, 14, 23, 26, 28, 29, 30], [9, 23, 25, 29]])</code> should return <code>[1, 3, 7, 8, 9, 9, 14, 14, 14, 15, 17, 23, 23, 25, 26, 28, 28, 29, 29, 30]</code>.</p>",
      "testString": "assert.deepEqual(\n  mergeLists([\n    [1, 3, 9, 14, 15, 17, 28],\n    [7, 8, 14, 14, 23, 26, 28, 29, 30],\n    [9, 23, 25, 29]\n  ]),\n  [1, 3, 7, 8, 9, 9, 14, 14, 14, 15, 17, 23, 23, 25, 26, 28, 28, 29, 29, 30]\n);"
    },
    {
      "text": "<p><code>mergeLists([[3, 14, 15], [2, 17, 18], [], [2, 3, 5, 7]])</code> should return <code>[2, 2, 3, 3, 5, 7, 14, 15, 17, 18]</code>.</p>",
      "testString": "assert.deepEqual(mergeLists([[3, 14, 15], [2, 17, 18], [], [2, 3, 5, 7]]), [\n  2,\n  2,\n  3,\n  3,\n  5,\n  7,\n  14,\n  15,\n  17,\n  18\n]);"
    },
    {
      "text": "<p><code>mergeLists([[1, 19, 1999], [17, 33, 2999, 3000], [8, 500, 3999]])</code> should return <code>[1, 8, 17, 19, 33, 500, 1999, 2999, 3000, 3999]</code>.</p>",
      "testString": "assert.deepEqual(\n  mergeLists([\n    [1, 19, 1999],\n    [17, 33, 2999, 3000],\n    [8, 500, 3999]\n  ]),\n  [1, 8, 17, 19, 33, 500, 1999, 2999, 3000, 3999]\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function that takes multiple sorted arrays of items, and returns one array of sorted items.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 136,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
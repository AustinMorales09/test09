{
  "id": "597f1e7fbc206f0e9ba95dc4",
  "title": "Factors of an integer",
  "challengeType": 1,
  "forumTopicId": 302265,
  "dashedName": "factors-of-an-integer",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const ans=[[1,3,5,9,15,45],[1,53],[1,2,4,8,16,32,64]];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function factors(num) {\n\n}",
      "error": null,
      "seed": "function factors(num) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function factors(num)\n{\n let n_factors = [], i, sqr=Math.floor(Math.sqrt(num));\n\n for (i = 1; i <=sqr ; i += 1)\n  if (num % i === 0)\n  {\n   n_factors.push(i);\n   if (num / i !== i)\n    n_factors.push(num / i);\n  }\n n_factors.sort(function(a, b){return a - b;});\n return n_factors;\n}",
        "error": null,
        "seed": "function factors(num)\n{\n let n_factors = [], i, sqr=Math.floor(Math.sqrt(num));\n\n for (i = 1; i <=sqr ; i += 1)\n  if (num % i === 0)\n  {\n   n_factors.push(i);\n   if (num / i !== i)\n    n_factors.push(num / i);\n  }\n n_factors.sort(function(a, b){return a - b;});\n return n_factors;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>factors</code> should be a function.</p>",
      "testString": "assert(typeof factors === 'function');"
    },
    {
      "text": "<p><code>factors(45)</code> should return <code>[1,3,5,9,15,45]</code>.</p>",
      "testString": "assert.deepEqual(factors(45), ans[0]);"
    },
    {
      "text": "<p><code>factors(53)</code> should return <code>[1,53]</code>.</p>",
      "testString": "assert.deepEqual(factors(53), ans[1]);"
    },
    {
      "text": "<p><code>factors(64)</code> should return <code>[1,2,4,8,16,32,64]</code>.</p>",
      "testString": "assert.deepEqual(factors(64), ans[2]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function that returns the factors of a positive integer as an array.</p>\n<p>These factors are the positive integers by which the number being factored can be divided to yield a positive integer result.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 47,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
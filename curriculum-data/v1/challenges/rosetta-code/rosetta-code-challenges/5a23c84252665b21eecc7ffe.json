{
  "id": "5a23c84252665b21eecc7ffe",
  "title": "Sort an array of composite structures",
  "challengeType": 1,
  "forumTopicId": 302306,
  "dashedName": "sort-an-array-of-composite-structures",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sortByKey(arr) {\n\n}",
      "error": null,
      "seed": "function sortByKey(arr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function sortByKey (arr) {\n  return arr.sort(function(a, b) {\n    return a.key - b.key\n  });\n}",
        "error": null,
        "seed": "function sortByKey (arr) {\n  return arr.sort(function(a, b) {\n    return a.key - b.key\n  });\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sortByKey</code> should be a function.</p>",
      "testString": "assert(typeof sortByKey == 'function');"
    },
    {
      "text": "<p><code>sortByKey([{key: 3, value: \"foo\"}, {key: 2, value: \"bar\"}, {key: 4, value: \"baz\"}, {key: 1, value: 42}, {key: 5, value: \"another string\"}])</code> should return an array.</p>",
      "testString": "assert(\n  Array.isArray(\n    sortByKey([\n      { key: 3, value: 'foo' },\n      { key: 2, value: 'bar' },\n      { key: 4, value: 'baz' },\n      { key: 1, value: 42 },\n      { key: 5, value: 'another string' }\n    ])\n  )\n);"
    },
    {
      "text": "<p><code>sortByKey([{key: 3, value: \"foo\"}, {key: 2, value: \"bar\"}, {key: 4, value: \"baz\"}, {key: 1, value: 42}, {key: 5, value: \"another string\"}])</code> should return <code>[{key: 1, value: 42}, {key: 2, value: \"bar\"}, {key: 3, value: \"foo\"}, {key: 4, value: \"baz\"}, {key: 5, value: \"another string\"}]</code>.</p>",
      "testString": "assert.deepEqual(\n  sortByKey([\n    { key: 3, value: 'foo' },\n    { key: 2, value: 'bar' },\n    { key: 4, value: 'baz' },\n    { key: 1, value: 42 },\n    { key: 5, value: 'another string' }\n  ]),\n  [\n    { key: 1, value: 42 },\n    { key: 2, value: 'bar' },\n    { key: 3, value: 'foo' },\n    { key: 4, value: 'baz' },\n    { key: 5, value: 'another string' }\n  ]\n);"
    },
    {
      "text": "<p><code>sortByKey([{key: 3, name: \"Joe\"}, {key: 4, name: \"Bill\"}, {key: 20, name: \"Alice\"}, {key: 5, name: \"Harry\"}])</code> should return <code>[{key: 3, name: \"Joe\"}, {key: 4, name: \"Bill\"}, {key: 5, name: \"Harry\"}, {key: 20, name: \"Alice\"}]</code>.</p>",
      "testString": "assert.deepEqual(\n  sortByKey([\n    { key: 3, name: 'Joe' },\n    { key: 4, name: 'Bill' },\n    { key: 20, name: 'Alice' },\n    { key: 5, name: 'Harry' }\n  ]),\n  [\n    { key: 3, name: 'Joe' },\n    { key: 4, name: 'Bill' },\n    { key: 5, name: 'Harry' },\n    { key: 20, name: 'Alice' }\n  ]\n);"
    },
    {
      "text": "<p><code>sortByKey([{key: 2341, name: \"Adam\"}, {key: 122, name: \"Bernie\"}, {key: 19, name: \"David\"}, {key: 5531, name: \"Joe\"}, {key: 1234, name: \"Walter\"}])</code> should return <code>[{key: 19, name: \"David\"}, {key: 122, name: \"Bernie\"}, {key: 1234, name: \"Walter\"}, {key: 2341, name: \"Adam\"}, {key: 5531, name: \"Joe\"}]</code>.</p>",
      "testString": "assert.deepEqual(\n  sortByKey([\n    { key: 2341, name: 'Adam' },\n    { key: 122, name: 'Bernie' },\n    { key: 19, name: 'David' },\n    { key: 5531, name: 'Joe' },\n    { key: 1234, name: 'Walter' }\n  ]),\n  [\n    { key: 19, name: 'David' },\n    { key: 122, name: 'Bernie' },\n    { key: 1234, name: 'Walter' },\n    { key: 2341, name: 'Adam' },\n    { key: 5531, name: 'Joe' }\n  ]\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function that takes an array of objects as a parameter. The function should sort the array according to the 'key' attribute of the objects and return the sorted array.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 116,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc8005",
  "title": "Sorting algorithms/Comb sort",
  "challengeType": 1,
  "forumTopicId": 302313,
  "dashedName": "sorting-algorithmscomb-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function combSort(arr) {\n\n}",
      "error": null,
      "seed": "function combSort(arr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function combSort(arr) {\n  function is_array_sorted(arr) {\n    var sorted = true;\n    for (var i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        sorted = false;\n        break;\n      }\n    }\n    return sorted;\n  }\n  var iteration_count = 0;\n  var gap = arr.length - 2;\n  var decrease_factor = 1.25;\n\n  // Until array is not sorted, repeat iterations\n  while (!is_array_sorted(arr)) {\n    // If not first gap\n    if (iteration_count > 0)\n      // Calculate gap\n      gap = gap == 1 ? gap : Math.floor(gap / decrease_factor);\n\n    // Set front and back elements and increment to a gap\n    var front = 0;\n    var back = gap;\n    while (back <= arr.length - 1) {\n      // If elements are not ordered swap them\n      if (arr[front] > arr[back]) {\n        var temp = arr[front];\n        arr[front] = arr[back];\n        arr[back] = temp;\n      }\n\n      // Increment and re-run swapping\n      front += 1;\n      back += 1;\n    }\n    iteration_count += 1;\n  }\n\n  return arr;\n}",
        "error": null,
        "seed": "function combSort(arr) {\n  function is_array_sorted(arr) {\n    var sorted = true;\n    for (var i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        sorted = false;\n        break;\n      }\n    }\n    return sorted;\n  }\n  var iteration_count = 0;\n  var gap = arr.length - 2;\n  var decrease_factor = 1.25;\n\n  // Until array is not sorted, repeat iterations\n  while (!is_array_sorted(arr)) {\n    // If not first gap\n    if (iteration_count > 0)\n      // Calculate gap\n      gap = gap == 1 ? gap : Math.floor(gap / decrease_factor);\n\n    // Set front and back elements and increment to a gap\n    var front = 0;\n    var back = gap;\n    while (back <= arr.length - 1) {\n      // If elements are not ordered swap them\n      if (arr[front] > arr[back]) {\n        var temp = arr[front];\n        arr[front] = arr[back];\n        arr[back] = temp;\n      }\n\n      // Increment and re-run swapping\n      front += 1;\n      back += 1;\n    }\n    iteration_count += 1;\n  }\n\n  return arr;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>combSort</code> should be a function.</p>",
      "testString": "assert(typeof combSort == 'function');"
    },
    {
      "text": "<p><code>combSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(combSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>combSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(combSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>combSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(combSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>combSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(combSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>combSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(combSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>combSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(combSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Implement a <em>comb sort</em>.</p>\n<p>The <strong>Comb Sort</strong> is a variant of the Bubble Sort.</p>\n<p>Like the Shell sort, the Comb Sort increases the gap used in comparisons and exchanges.</p>\n<p>Dividing the gap by $(1-e^{-\\varphi})^{-1} \\approx 1.247330950103979$ works best, but 1.3 may be more practical.</p>\n<p>Some implementations use the insertion sort once the gap is less than a certain amount.</p>\n<p>Variants:</p>\n<ul>\n  <li>Combsort11 makes sure the gap ends in (11, 8, 6, 4, 3, 2, 1), which is significantly faster than the other two possible endings.</li>\n  <li>Combsort with different endings changes to a more efficient sort when the data is almost sorted (when the gap is small). Comb sort with a low gap isn't much better than the Bubble Sort.</li>\n</ul>\n<p>Pseudocode:</p>\n<pre><b>function</b> combsort(<b>array</b> input)\n  gap := input<b>.size</b> <i>//initialize gap size</i>\n  <b>loop until</b> gap = 1 <b>and</b> swaps = 0\n    <i>//update the gap value for a next comb. Below is an example</i>\n    gap := int(gap / 1.25)\n    <b>if</b> gap &#x3C; 1 \n      <i>//minimum gap is 1</i>\n      gap := 1\n    <b>end if</b>\n    i := 0\n    swaps := 0 <i>//see <a href='https://rosettacode.org/wiki/Sorting_algorithms/Bubble_sort' target='_blank'>Bubble Sort</a> for an explanation</i>\n    <i>//a single \"comb\" over the input list</i>\n    <b>loop until</b> i + gap >= input<b>.size</b> <i>//see <a href='https://rosettacode.org/wiki/Sorting_algorithms/Shell_sort' target='_blank'>Shell sort</a> for similar idea</i>\n      <b>if</b> input[i] > input[i+gap]\n        <b>swap</b>(input[i], input[i+gap])\n        swaps := 1 <i>// Flag a swap has occurred, so the</i>\n            <i>// list is not guaranteed sorted</i>\n      <b>end if</b>\n      i := i + 1\n    <b>end loop</b>\n  <b>end loop</b>\n<b>end function</b>\n</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that sorts a given array using Comb sort.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 123,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
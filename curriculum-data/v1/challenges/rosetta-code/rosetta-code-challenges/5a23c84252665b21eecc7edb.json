{
  "id": "5a23c84252665b21eecc7edb",
  "title": "Largest int from concatenated ints",
  "challengeType": 1,
  "forumTopicId": 302298,
  "dashedName": "largest-int-from-concatenated-ints",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function maxCombine(xs) {\n\n}",
      "error": null,
      "seed": "function maxCombine(xs) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function maxCombine(xs) {\n  return parseInt(\n    xs\n      .sort(function(x, y) {\n        var a = x.toString(),\n          b = y.toString(),\n          ab = parseInt(a + b),\n          ba = parseInt(b + a);\n\n        return ab > ba ? -1 : ab < ba ? 1 : 0;\n      })\n      .join(''),\n    10\n  );\n}",
        "error": null,
        "seed": "function maxCombine(xs) {\n  return parseInt(\n    xs\n      .sort(function(x, y) {\n        var a = x.toString(),\n          b = y.toString(),\n          ab = parseInt(a + b),\n          ba = parseInt(b + a);\n\n        return ab > ba ? -1 : ab < ba ? 1 : 0;\n      })\n      .join(''),\n    10\n  );\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>maxCombine</code> should be a function.</p>",
      "testString": "assert(typeof maxCombine == 'function');"
    },
    {
      "text": "<p><code>maxCombine([1, 3, 3, 4, 55])</code> should return a number.</p>",
      "testString": "assert(typeof maxCombine([1, 3, 3, 4, 55]) == 'number');"
    },
    {
      "text": "<p><code>maxCombine([1, 3, 3, 4, 55])</code> should return <code>554331</code>.</p>",
      "testString": "assert.equal(maxCombine([1, 3, 3, 4, 55]), 554331);"
    },
    {
      "text": "<p><code>maxCombine([71, 45, 23, 4, 5])</code> should return <code>71545423</code>.</p>",
      "testString": "assert.equal(maxCombine([71, 45, 23, 4, 5]), 71545423);"
    },
    {
      "text": "<p><code>maxCombine([14, 43, 53, 114, 55])</code> should return <code>55534314114</code>.</p>",
      "testString": "assert.equal(maxCombine([14, 43, 53, 114, 55]), 55534314114);"
    },
    {
      "text": "<p><code>maxCombine([1, 34, 3, 98, 9, 76, 45, 4])</code> should return <code>998764543431</code>.</p>",
      "testString": "assert.equal(maxCombine([1, 34, 3, 98, 9, 76, 45, 4]), 998764543431);"
    },
    {
      "text": "<p><code>maxCombine([54, 546, 548, 60])</code> should return <code>6054854654</code>.</p>",
      "testString": "assert.equal(maxCombine([54, 546, 548, 60]), 6054854654);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given a set of positive integers, write a function to order the integers in such a way that the concatenation of the numbers forms the largest possible integer and return this integer.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 84,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
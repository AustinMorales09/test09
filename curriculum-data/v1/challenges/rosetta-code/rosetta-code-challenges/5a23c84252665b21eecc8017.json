{
  "id": "5a23c84252665b21eecc8017",
  "title": "Soundex",
  "challengeType": 1,
  "forumTopicId": 302320,
  "dashedName": "soundex",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function soundex(s) {\n\n}",
      "error": null,
      "seed": "function soundex(s) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function soundex(s) {\n  var a = s.toLowerCase().split('');\n  var f = a.shift(),\n    r = '',\n    codes = {\n      a: '',\n      e: '',\n      i: '',\n      o: '',\n      u: '',\n      b: 1,\n      f: 1,\n      p: 1,\n      v: 1,\n      c: 2,\n      g: 2,\n      j: 2,\n      k: 2,\n      q: 2,\n      s: 2,\n      x: 2,\n      z: 2,\n      d: 3,\n      t: 3,\n      l: 4,\n      m: 5,\n      n: 5,\n      r: 6\n    };\n  r =\n    f +\n    a\n      .map(function(v, i, a) {\n        return codes[v];\n      })\n      .filter(function(v, i, a) {\n        return i === 0 ? v !== codes[f] : v !== a[i - 1];\n      })\n      .join('');\n\n  return (r + '000').slice(0, 4).toUpperCase();\n}",
        "error": null,
        "seed": "function soundex(s) {\n  var a = s.toLowerCase().split('');\n  var f = a.shift(),\n    r = '',\n    codes = {\n      a: '',\n      e: '',\n      i: '',\n      o: '',\n      u: '',\n      b: 1,\n      f: 1,\n      p: 1,\n      v: 1,\n      c: 2,\n      g: 2,\n      j: 2,\n      k: 2,\n      q: 2,\n      s: 2,\n      x: 2,\n      z: 2,\n      d: 3,\n      t: 3,\n      l: 4,\n      m: 5,\n      n: 5,\n      r: 6\n    };\n  r =\n    f +\n    a\n      .map(function(v, i, a) {\n        return codes[v];\n      })\n      .filter(function(v, i, a) {\n        return i === 0 ? v !== codes[f] : v !== a[i - 1];\n      })\n      .join('');\n\n  return (r + '000').slice(0, 4).toUpperCase();\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>soundex</code> should be a function.</p>",
      "testString": "assert(typeof soundex == 'function');"
    },
    {
      "text": "<p><code>soundex(\"Soundex\")</code> should return a string.</p>",
      "testString": "assert(typeof soundex('Soundex') == 'string');"
    },
    {
      "text": "<p><code>soundex(\"Soundex\")</code> should return <code>\"S532\"</code>.</p>",
      "testString": "assert.equal(soundex('Soundex'), 'S532');"
    },
    {
      "text": "<p><code>soundex(\"Example\")</code> should return <code>\"E251\"</code>.</p>",
      "testString": "assert.equal(soundex('Example'), 'E251');"
    },
    {
      "text": "<p><code>soundex(\"Sownteks\")</code> should return <code>\"S532\"</code>.</p>",
      "testString": "assert.equal(soundex('Sownteks'), 'S532');"
    },
    {
      "text": "<p><code>soundex(\"Ekzampul\")</code> should return <code>\"E251\"</code>.</p>",
      "testString": "assert.equal(soundex('Ekzampul'), 'E251');"
    },
    {
      "text": "<p><code>soundex(\"Euler\")</code> should return <code>\"E460\"</code>.</p>",
      "testString": "assert.equal(soundex('Euler'), 'E460');"
    },
    {
      "text": "<p><code>soundex(\"Gauss\")</code> should return <code>\"G200\"</code>.</p>",
      "testString": "assert.equal(soundex('Gauss'), 'G200');"
    },
    {
      "text": "<p><code>soundex(\"Hilbert\")</code> should return <code>\"H416\"</code>.</p>",
      "testString": "assert.equal(soundex('Hilbert'), 'H416');"
    },
    {
      "text": "<p><code>soundex(\"Knuth\")</code> should return <code>\"K530\"</code>.</p>",
      "testString": "assert.equal(soundex('Knuth'), 'K530');"
    },
    {
      "text": "<p><code>soundex(\"Lloyd\")</code> should return <code>\"L300\"</code>.</p>",
      "testString": "assert.equal(soundex('Lloyd'), 'L300');"
    },
    {
      "text": "<p><code>soundex(\"Lukasiewicz\")</code> should return <code>\"L222\"</code>.</p>",
      "testString": "assert.equal(soundex('Lukasiewicz'), 'L222');"
    }
  ],
  "description": "<section id=\"description\">\n<p><strong>Soundex Algorithm</strong> deals with the <em>intentions</em> of the words. It creates a representation for similar sounding words.</p>\n<p>It is used for searching <em>names</em> and <em>addresses</em>. This means that the person who filled in the <em>name</em>, can focus on how it sounds instead of correcting the spelling of <em>names</em>.</p>\n<p>For example:</p>\n<p>If you are hearing the name <code>Quenci</code> for the first time, and misspelled it, you will get <strong>Soundex</strong> code <code>Q520</code>.</p>\n<p>When you spell the name <code>Quincy</code> correctly next time, you will still get the same code <code>Q520</code>, which means you can link multiple name pronunciations into the same <em>person</em> without the need for adding every spelling.</p>\n<p>Here is the rules:</p>\n<ul>\n  <li>If a vowel (A, E, I, O, U) separates two consonants that have the same soundex code, the consonant to the right of the vowel is coded. Tymczak is coded as T-522 (T, 5 for the M, 2 for the C, Z ignored (see \"Side-by-Side\" rule above), 2 for the K). Since the vowel \"A\" separates the Z and K, the K is coded.</li>\n  <li>If \"H\" or \"W\" separate two consonants that have the same soundex code, the consonant to the right of the vowel is not coded. Example: Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1 for the F). It is not coded A-226.</li>\n</ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a string as a parameter and returns the encoded string.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 130,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
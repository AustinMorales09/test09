{
  "id": "5a23c84252665b21eecc8028",
  "title": "Stern-Brocot sequence",
  "challengeType": 1,
  "forumTopicId": 302324,
  "dashedName": "stern-brocot-sequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sternBrocot(num) {\n\n}",
      "error": null,
      "seed": "function sternBrocot(num) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function sternBrocot(num) {\n  function f(n) {\n    return n < 2\n      ? n\n      : n & 1\n      ? f(Math.floor(n / 2)) + f(Math.floor(n / 2 + 1))\n      : f(Math.floor(n / 2));\n  }\n\n  function gcd(a, b) {\n    return a ? (a < b ? gcd(b % a, a) : gcd(a % b, b)) : b;\n  }\n  var n;\n  for (n = 1; f(n) != num; n++);\n  return n;\n}",
        "error": null,
        "seed": "function sternBrocot(num) {\n  function f(n) {\n    return n < 2\n      ? n\n      : n & 1\n      ? f(Math.floor(n / 2)) + f(Math.floor(n / 2 + 1))\n      : f(Math.floor(n / 2));\n  }\n\n  function gcd(a, b) {\n    return a ? (a < b ? gcd(b % a, a) : gcd(a % b, b)) : b;\n  }\n  var n;\n  for (n = 1; f(n) != num; n++);\n  return n;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sternBrocot</code> should be a function.</p>",
      "testString": "assert(typeof sternBrocot == 'function');"
    },
    {
      "text": "<p><code>sternBrocot(2)</code> should return a number.</p>",
      "testString": "assert(typeof sternBrocot(2) == 'number');"
    },
    {
      "text": "<p><code>sternBrocot(2)</code> should return <code>3</code>.</p>",
      "testString": "assert.equal(sternBrocot(2), 3);"
    },
    {
      "text": "<p><code>sternBrocot(3)</code> should return <code>5</code>.</p>",
      "testString": "assert.equal(sternBrocot(3), 5);"
    },
    {
      "text": "<p><code>sternBrocot(5)</code> should return <code>11</code>.</p>",
      "testString": "assert.equal(sternBrocot(5), 11);"
    },
    {
      "text": "<p><code>sternBrocot(7)</code> should return <code>19</code>.</p>",
      "testString": "assert.equal(sternBrocot(7), 19);"
    },
    {
      "text": "<p><code>sternBrocot(10)</code> should return <code>39</code>.</p>",
      "testString": "assert.equal(sternBrocot(10), 39);"
    }
  ],
  "description": "<section id=\"description\">\n<p>For this task, the Stern-Brocot sequence is to be generated by an algorithm similar to that employed in generating the <a href=\"https://rosettacode.org/wiki/Fibonacci_sequence\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Fibonacci sequence</a>.</p>\n<ol>\n  <li>The first and second members of the sequence are both 1:</li>\n    <ul><li>1, 1</li></ul>\n  <li>Start by considering the second member of the sequence</li>\n  <li>Sum the considered member of the sequence and its precedent, (1 + 1) = 2, and append it to the end of the\n    sequence:</li>\n    <ul><li>1, 1, 2</li></ul>\n  <li>Append the considered member of the sequence to the end of the sequence:</li>\n    <ul><li>1, 1, 2, 1</li></ul>\n  <li>Consider the next member of the series, (the third member i.e. 2)</li>\n  <li>GOTO 3 </li>\n    <ul>\n      <li></li>\n      <li> ─── Expanding another loop we get: ───</li>\n      <li></li>\n    </ul>\n  <li>Sum the considered member of the sequence and its precedent, (2 + 1) = 3, and append it to the end of the\n    sequence:</li>\n    <ul><li>1, 1, 2, 1, 3</li></ul>\n  <li>Append the considered member of the sequence to the end of the sequence:</li>\n    <ul><li>1, 1, 2, 1, 3, 2</li></ul>\n  <li>Consider the next member of the series, (the fourth member i.e. 1)</li>\n</ol>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a function that returns the position in the Stern-Brocot sequence at which $ n $ is first encountered, where the sequence is generated with the method outlined above. Note that this sequence uses 1 based indexing.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 134,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
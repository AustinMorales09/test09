{
  "id": "597089c87eec450c68aa1643",
  "title": "Define a primitive data type",
  "challengeType": 1,
  "forumTopicId": 302248,
  "dashedName": "define-a-primitive-data-type",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Num(n) {\n\n  return n;\n}",
      "error": null,
      "seed": "function Num(n) {\n\n  return n;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Num(n) {\n  if (isNaN(n)) {\n    throw new TypeError('Not a Number');\n  }\n  if (n < 1 || n > 10) {\n    throw new TypeError('Out of range');\n  }\n\n  this._value = +n;\n}\nNum.prototype.valueOf = function() { return this._value; };\nNum.prototype.toString = function () { return this._value.toString(); };",
        "error": null,
        "seed": "function Num(n) {\n  if (isNaN(n)) {\n    throw new TypeError('Not a Number');\n  }\n  if (n < 1 || n > 10) {\n    throw new TypeError('Out of range');\n  }\n\n  this._value = +n;\n}\nNum.prototype.valueOf = function() { return this._value; };\nNum.prototype.toString = function () { return this._value.toString(); };"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>Num</code> should be a function.</p>",
      "testString": "assert(typeof Num === 'function');"
    },
    {
      "text": "<p><code>new Num(4)</code> should return an object.</p>",
      "testString": "assert(typeof new Num(4) === 'object');"
    },
    {
      "text": "<p><code>new Num('test')</code> should throw a TypeError with message 'Not a Number'.</p>",
      "testString": "assert.throws(() => new Num('test'), TypeError);"
    },
    {
      "text": "<p><code>new Num(0)</code> should throw a TypeError with message 'Out of range'.</p>",
      "testString": "assert.throws(() => new Num(0), TypeError);"
    },
    {
      "text": "<p><code>new Num(-5)</code> should throw a TypeError with message 'Out of range'.</p>",
      "testString": "assert.throws(() => new Num(-5), TypeError);"
    },
    {
      "text": "<p><code>new Num(10)</code> should throw a TypeError with message 'Out of range'.</p>",
      "testString": "assert.throws(() => new Num(11), TypeError);"
    },
    {
      "text": "<p><code>new Num(20)</code> should throw a TypeError with message 'Out of range'.</p>",
      "testString": "assert.throws(() => new Num(20), TypeError);"
    },
    {
      "text": "<p><code>new Num(3) + new Num(4)</code> should equal 7.</p>",
      "testString": "assert.equal(new Num(3) + new Num(4), 7);"
    },
    {
      "text": "<p><code>new Num(3) - new Num(4)</code> should equal -1.</p>",
      "testString": "assert.equal(new Num(3) - new Num(4), -1);"
    },
    {
      "text": "<p><code>new Num(3) * new Num(4)</code> should equal 12.</p>",
      "testString": "assert.equal(new Num(3) * new Num(4), 12);"
    },
    {
      "text": "<p><code>new Num(3) / new Num(4)</code> should equal 0.75.</p>",
      "testString": "assert.equal(new Num(3) / new Num(4), 0.75);"
    },
    {
      "text": "<p><code>new Num(3) &#x3C; new Num(4)</code> should be true.</p>",
      "testString": "assert(new Num(3) < new Num(4));"
    },
    {
      "text": "<p><code>new Num(3) > new Num(4)</code> should be false.</p>",
      "testString": "assert(!(new Num(3) > new Num(4)));"
    },
    {
      "text": "<p><code>(new Num(5)).toString()</code> should return '5'</p>",
      "testString": "assert.equal(new Num(5).toString(), '5');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Define a type that behaves like an integer but has a lowest valid value of 1 and a highest valid value of 10.</p>\n<p>Error handling:</p>\n<ul>\n  <li>If you try to instantiate a <code>Num</code> with a value outside of 1 - 10, it should throw a <code>TypeError</code> with an error message of <code>'Out of range'</code>.</li>\n  <li>If you try to instantiate a <code>Num</code> with a value that is not a number, it should throw a <code>TypeError</code> with an error message of <code>'Not a Number'</code>.</li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 31,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
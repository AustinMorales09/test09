{
  "id": "5a7dad05be01840e1778a0d1",
  "title": "Fractran",
  "challengeType": 1,
  "forumTopicId": 302270,
  "dashedName": "fractran",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function fractran(progStr) {\n\n}",
      "error": null,
      "seed": "function fractran(progStr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function fractran(progStr){\n  var num = new Array();\n  var den = new Array();\n  var val ;\n  var out=\"\";\n  function compile(prog){\n    var regex = /\\s*(\\d*)\\s*\\/\\s*(\\d*)\\s*(.*)/m;\n    while(regex.test(prog)){\n      num.push(regex.exec(prog)[1]);\n      den.push(regex.exec(prog)[2]);\n      prog = regex.exec(prog)[3];\n    }\n  }\n\n  function step(val){\n    var i=0;\n    while(i<den.length && val%den[i] != 0) i++;\n    return num[i]*val/den[i];\n  }\n\n  var seq=[]\n\n  function exec(val){\n    var i = 0;\n    while(val && i<limit){\n      seq.push(val)\n      val = step(val);\n      i ++;\n    }\n  }\n\n  // Main\n  compile(progStr);\n  var limit = 10;\n  exec(2);\n  return seq;\n}",
        "error": null,
        "seed": "function fractran(progStr){\n  var num = new Array();\n  var den = new Array();\n  var val ;\n  var out=\"\";\n  function compile(prog){\n    var regex = /\\s*(\\d*)\\s*\\/\\s*(\\d*)\\s*(.*)/m;\n    while(regex.test(prog)){\n      num.push(regex.exec(prog)[1]);\n      den.push(regex.exec(prog)[2]);\n      prog = regex.exec(prog)[3];\n    }\n  }\n\n  function step(val){\n    var i=0;\n    while(i<den.length && val%den[i] != 0) i++;\n    return num[i]*val/den[i];\n  }\n\n  var seq=[]\n\n  function exec(val){\n    var i = 0;\n    while(val && i<limit){\n      seq.push(val)\n      val = step(val);\n      i ++;\n    }\n  }\n\n  // Main\n  compile(progStr);\n  var limit = 10;\n  exec(2);\n  return seq;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>fractran</code> should be a function.</p>",
      "testString": "assert(typeof fractran == 'function');"
    },
    {
      "text": "<p><code>fractran(\"3/2, 1/3\")</code> should return an array.</p>",
      "testString": "assert(Array.isArray(fractran('3/2, 1/3')));"
    },
    {
      "text": "<p><code>fractran(\"3/2, 1/3\")</code> should return <code>[ 2, 3, 1 ]</code>.</p>",
      "testString": "assert.deepEqual(fractran('3/2, 1/3'), [2, 3, 1]);"
    },
    {
      "text": "<p><code>fractran(\"3/2, 5/3, 1/5\")</code> should return <code>[ 2, 3, 5, 1 ]</code>.</p>",
      "testString": "assert.deepEqual(fractran('3/2, 5/3, 1/5'), [2, 3, 5, 1]);"
    },
    {
      "text": "<p><code>fractran(\"3/2, 6/3\")</code> should return <code>[ 2, 3, 6, 9, 18, 27, 54, 81, 162, 243 ]</code>.</p>",
      "testString": "assert.deepEqual(fractran('3/2, 6/3'), [2, 3, 6, 9, 18, 27, 54, 81, 162, 243]);"
    },
    {
      "text": "<p><code>fractran(\"2/7, 7/2\")</code> should return <code>[ 2, 7, 2, 7, 2, 7, 2, 7, 2, 7 ]</code>.</p>",
      "testString": "assert.deepEqual(fractran('2/7, 7/2'), [2, 7, 2, 7, 2, 7, 2, 7, 2, 7]);"
    },
    {
      "text": "<p><code>fractran(\"17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23, 77/19, 1/17, 11/13, 13/11, 15/14, 15/2, 55/1\")</code> should return <code>[ 2, 15, 825, 725, 1925, 2275, 425, 390, 330, 290 ]</code>.</p>",
      "testString": "assert.deepEqual(\n  fractran(\n    '17/91, 78/85, 19/51, 23/38, 29/33, 77/29, 95/23, 77/19, 1/17, 11/13, 13/11, 15/14, 15/2, 55/1'\n  ),\n  [2, 15, 825, 725, 1925, 2275, 425, 390, 330, 290]\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>FRACTRAN is a Turing-complete esoteric programming language invented by the mathematician John Horton Conway.</p>\n<p>A FRACTRAN program is an ordered list of positive fractions $P = (f_1, f_2, \\ldots, f_m)$, together with an initial positive integer input $n$.</p>\n<p>The program is run by updating the integer $n$ as follows:</p>\n<ul>\n  <li>for the first fraction, $f_i$, in the list for which $nf_i$ is an integer, replace $n$ with $nf_i$ ;</li>\n  <li>repeat this rule until no fraction in the list produces an integer when multiplied by $n$, then halt.</li>\n</ul>\n<p>Conway gave a program for primes in FRACTRAN:</p>\n<p>$\\dfrac{17}{91}$, $\\dfrac{78}{85}$, $\\dfrac{19}{51}$, $\\dfrac{23}{38}$, $\\dfrac{29}{33}$, $\\dfrac{77}{29}$, $\\dfrac{95}{23}$, $\\dfrac{77}{19}$, $\\dfrac{1}{17}$, $\\dfrac{11}{13}$, $\\dfrac{13}{11}$, $\\dfrac{15}{14}$, $\\dfrac{15}{2}$, $\\dfrac{55}{1}$</p>\n<p>Starting with $n=2$, this FRACTRAN program will change $n$ to $15=2\\times (\\frac{15}{2})$, then $825=15\\times (\\frac{55}{1})$, generating the following sequence of integers:</p>\n<p>$2$, $15$, $825$, $725$, $1925$, $2275$, $425$, $390$, $330$, $290$, $770$, $\\ldots$</p>\n<p>After 2, this sequence contains the following powers of 2:</p>\n<p>$2^2=4$, $2^3=8$, $2^5=32$, $2^7=128$, $2^{11}=2048$, $2^{13}=8192$, $2^{17}=131072$, $2^{19}=524288$, $\\ldots$</p>\n<p>which are the prime powers of 2.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a fractran program as a string parameter and returns the first 10 numbers of the program as an array. If the result does not have 10 numbers then return the numbers as is.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 53,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
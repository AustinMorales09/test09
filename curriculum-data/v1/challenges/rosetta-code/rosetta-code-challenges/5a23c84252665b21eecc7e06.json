{
  "id": "5a23c84252665b21eecc7e06",
  "title": "Cut a rectangle",
  "challengeType": 1,
  "forumTopicId": 302242,
  "dashedName": "cut-a-rectangle",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function cutRectangle(w, h) {\n\n}",
      "error": null,
      "seed": "function cutRectangle(w, h) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function cutRectangle(w, h) {\n  if (w % 2 == 1 && h % 2 == 1) return;\n\n  var dirs = [[0, -1], [-1, 0], [0, 1], [1, 0]];\n\n  var grid = new Array(h);\n  for (var i = 0; i < grid.length; i++) grid[i] = new Array(w);\n  var stack = [];\n\n  var half = Math.floor((w * h) / 2);\n  var bits = Math.pow(2, half) - 1;\n  var result = 0;\n  for (; bits > 0; bits -= 2) {\n    for (var i = 0; i < half; i++) {\n      var r = Math.floor(i / w);\n      var c = i % w;\n      grid[r][c] = (bits & (1 << i)) != 0 ? 1 : 0;\n      grid[h - r - 1][w - c - 1] = 1 - grid[r][c];\n    }\n\n    stack.push(0);\n    grid[0][0] = 2;\n    var count = 1;\n    while (stack.length != 0) {\n      var pos = stack.pop();\n      var r = Math.floor(pos / w);\n      var c = pos % w;\n\n      for (var dir of dirs) {\n        var nextR = r + dir[0];\n        var nextC = c + dir[1];\n\n        if (nextR >= 0 && nextR < h && nextC >= 0 && nextC < w) {\n          if (grid[nextR][nextC] == 1) {\n            stack.push(nextR * w + nextC);\n            grid[nextR][nextC] = 2;\n            count++;\n          }\n        }\n      }\n    }\n\n    if (count == half) {\n      result++;\n    }\n  }\n\n  return result;\n}",
        "error": null,
        "seed": "function cutRectangle(w, h) {\n  if (w % 2 == 1 && h % 2 == 1) return;\n\n  var dirs = [[0, -1], [-1, 0], [0, 1], [1, 0]];\n\n  var grid = new Array(h);\n  for (var i = 0; i < grid.length; i++) grid[i] = new Array(w);\n  var stack = [];\n\n  var half = Math.floor((w * h) / 2);\n  var bits = Math.pow(2, half) - 1;\n  var result = 0;\n  for (; bits > 0; bits -= 2) {\n    for (var i = 0; i < half; i++) {\n      var r = Math.floor(i / w);\n      var c = i % w;\n      grid[r][c] = (bits & (1 << i)) != 0 ? 1 : 0;\n      grid[h - r - 1][w - c - 1] = 1 - grid[r][c];\n    }\n\n    stack.push(0);\n    grid[0][0] = 2;\n    var count = 1;\n    while (stack.length != 0) {\n      var pos = stack.pop();\n      var r = Math.floor(pos / w);\n      var c = pos % w;\n\n      for (var dir of dirs) {\n        var nextR = r + dir[0];\n        var nextC = c + dir[1];\n\n        if (nextR >= 0 && nextR < h && nextC >= 0 && nextC < w) {\n          if (grid[nextR][nextC] == 1) {\n            stack.push(nextR * w + nextC);\n            grid[nextR][nextC] = 2;\n            count++;\n          }\n        }\n      }\n    }\n\n    if (count == half) {\n      result++;\n    }\n  }\n\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>cutRectangle</code> should be a function.</p>",
      "testString": "assert(typeof cutRectangle == 'function');"
    },
    {
      "text": "<p><code>cutRectangle(2, 2)</code> should return a number.</p>",
      "testString": "assert(typeof cutRectangle(2, 2) == 'number');"
    },
    {
      "text": "<p><code>cutRectangle(2, 2)</code> should return <code>2</code>.</p>",
      "testString": "assert.equal(cutRectangle(2, 2), 2);"
    },
    {
      "text": "<p><code>cutRectangle(4, 3)</code> should return <code>9</code>.</p>",
      "testString": "assert.equal(cutRectangle(4, 3), 9);"
    },
    {
      "text": "<p><code>cutRectangle(4, 4)</code> should return <code>22</code>.</p>",
      "testString": "assert.equal(cutRectangle(4, 4), 22);"
    },
    {
      "text": "<p><code>cutRectangle(8, 3)</code> should return <code>53</code>.</p>",
      "testString": "assert.equal(cutRectangle(8, 3), 53);"
    },
    {
      "text": "<p><code>cutRectangle(7, 4)</code> should return <code>151</code>.</p>",
      "testString": "assert.equal(cutRectangle(7, 4), 151);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A given rectangle is made from <em>m</em> × <em>n</em> squares. If <em>m</em> and <em>n</em> are not both odd, then it is possible to cut a path through the rectangle along the square edges such that the rectangle splits into two connected pieces with the same shape (after rotating one of the pieces by 180°). All such paths for 2 × 2 and 4 × 3 rectangles are shown below.</p>\n<div style=\"width: 100%; text-align: center;\">\n  <svg xmlns=\"https://www.w3.org/2000/svg\" xmlns:xlink=\"https://www.w3.org/1999/xlink\" width=\"520\" height=\"170\" aria-hidden=\"true\" alt=\"Diagram showing the possible paths for 2 by 2 and 4 by 3 rectangles\">\n    <style>\n      .diagram-g { fill: none; stroke: #ccc }\n      .diagram-s, .diagram-s2 { fill: #bff; stroke: black; fill-opacity: .4 }\n      .diagram-s2 { fill: #fbf }\n      .diagram-d { stroke:black; fill:none}\n    </style>\n    <defs>\n      <g id=\"diagram-m\">\n        <g id=\"diagram-h4\">\n          <g id=\"diagram-h2\">\n            <path id=\"diagram-h\" d=\"m0 10h 640\" class=\"diagram-g\"/>\n            <use xlink:href=\"#diagram-h\" transform=\"translate(0, 20)\"/>\n          </g>\n          <use xlink:href=\"#diagram-h2\" transform=\"translate(0, 40)\"/>\n        </g>\n        <use xlink:href=\"#diagram-h4\" transform=\"translate(0, 80)\"/>\n        <g id=\"diagram-v8\">\n          <g id=\"diagram-v4\">\n            <g id=\"diagram-v2\">\n              <path id=\"diagram-v\" d=\"m10 0v160 m 20 0 v-160\" class=\"diagram-g\"/>\n              <use xlink:href=\"#diagram-v\" transform=\"translate(40, 0)\"/>\n            </g>\n            <use xlink:href=\"#diagram-v2\" transform=\"translate(80, 0)\"/>\n          </g>\n          <use xlink:href=\"#diagram-v4\" transform=\"translate(160, 0)\"/>\n        </g>\n        <use xlink:href=\"#diagram-v8\" transform=\"translate(320, 0)\"/>\n      </g>\n      <path id=\"diagram-b\" d=\"m0 0h80v60h-80z\" class=\"diagram-s\"/>\n    </defs>\n    <g transform=\"translate(.5, .5)\">\n      <use xlink:href=\"#diagram-m\"/>\n      <g transform=\"translate(10, 10)\">\n        <path d=\"m0 0v40h40v-40z\" class=\"diagram-s2\"/>\n        <path d=\"m20 0v40\" class=\"diagram-d\"/>\n        <path d=\"m60 0v40h40v-40z\" class=\"diagram-s2\"/>\n        <path d=\"m60 20h40\" class=\"diagram-d\"/>\n        <g transform=\"translate(120, 0)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m0 20h40v20h40\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(220, 0)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m0 40h40v-20h40\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(320, 0)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m20 0v40h20v-20h20v40\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(420, 0)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m60 0v40h-20v-20h-20v40\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(20, 80)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m40 0v60\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(120, 80)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m60 0v20h-20v20h-20v20\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(220, 80)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m20 0v20h20v20h20v20\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(320, 80)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m0 20h20v20h20v-20h20v20h20\" class=\"diagram-d\"/>\n        </g>\n        <g transform=\"translate(420, 80)\">\n          <use xlink:href=\"#diagram-b\"/>\n          <path d=\"m0 40h20v-20h20v20h20v-20h20\" class=\"diagram-d\"/>\n        </g>\n      </g>\n    </g>\n  </svg>\n</div>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that calculates the number of different ways to cut an <em>m</em> × <em>n</em> rectangle.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 25,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
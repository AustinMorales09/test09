{
  "id": "5eaf48389ee512d4d103684b",
  "title": "Self Describing Numbers",
  "challengeType": 1,
  "forumTopicId": 385289,
  "dashedName": "self-describing-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isSelfDescribing(n) {\n\n}",
      "error": null,
      "seed": "function isSelfDescribing(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isSelfDescribing(n) {\n    let digits = String(n).split(\"\");\n    digits = digits.map(function(e) {return parseInt(e)});\n    let count = digits.map((x) => {return 0})\n    digits.forEach((d) =>{\n        if (d >= count.length) {\n            return false\n        }\n        count[d] += 1;\n    });\n\n     if (digits === count) {\n        return true;\n    }\n    if (digits.length != count.length) {\n        return false;\n    }\n    \n    for (let i=0; i< digits.length; i++){\n      if (digits[i] !== count[i]) {\n        return false;\n      }\n    }\n    return true;\n}",
        "error": null,
        "seed": "function isSelfDescribing(n) {\n    let digits = String(n).split(\"\");\n    digits = digits.map(function(e) {return parseInt(e)});\n    let count = digits.map((x) => {return 0})\n    digits.forEach((d) =>{\n        if (d >= count.length) {\n            return false\n        }\n        count[d] += 1;\n    });\n\n     if (digits === count) {\n        return true;\n    }\n    if (digits.length != count.length) {\n        return false;\n    }\n    \n    for (let i=0; i< digits.length; i++){\n      if (digits[i] !== count[i]) {\n        return false;\n      }\n    }\n    return true;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isSelfDescribing</code> should be a function.</p>",
      "testString": "assert(typeof isSelfDescribing == 'function');"
    },
    {
      "text": "<p><code>isSelfDescribing()</code> should return a boolean.</p>",
      "testString": "assert(typeof isSelfDescribing(2020) == 'boolean');"
    },
    {
      "text": "<p><code>isSelfDescribing(2020)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSelfDescribing(2020), true);"
    },
    {
      "text": "<p><code>isSelfDescribing(3021)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isSelfDescribing(3021), false);"
    },
    {
      "text": "<p><code>isSelfDescribing(3211000)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSelfDescribing(3211000), true);"
    }
  ],
  "description": "<section id=\"description\">\n<p>There are several so-called \"self-describing\" or \"self-descriptive\" integers.</p>\n<p>An integer is said to be \"self-describing\" if it has the property that, when digit positions are labeled 0 to N-1, the digit in each position is equal to the number of times that digit appears in the number.</p>\n<p>For example, <strong>2020</strong> is a four-digit self describing number:</p>\n<ul>\n    <li> position 0 has value 2 and there are two 0s in the number; </li>\n    <li> position 1 has value 0 and there are no 1s in the number; </li>\n    <li> position 2 has value 2 and there are two 2s; </li>\n    <li> position 3 has value 0 and there are zero 3s; </li>\n</ul>\n<p>Self-describing numbers &#x3C; 100,000,000 are: 1210, 2020, 21200, 3211000, 42101000.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a positive integer as a parameter. If it is self-describing return true. Otherwise, return false.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 109,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
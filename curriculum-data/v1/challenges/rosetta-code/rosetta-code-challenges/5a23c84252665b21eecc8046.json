{
  "id": "5a23c84252665b21eecc8046",
  "title": "Symmetric difference",
  "challengeType": 1,
  "forumTopicId": 16086,
  "dashedName": "symmetric-difference",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function symmetricDifference(A, B) {\n\n}",
      "error": null,
      "seed": "function symmetricDifference(A, B) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function symmetricDifference(A, B) {\n  function relative_complement(A, B) {\n    return A.filter(function(elem) {\n      return B.indexOf(elem) == -1;\n    });\n  }\n\n  function unique(ary) {\n    var u = ary.concat().sort();\n    for (var i = 1; i < u.length; ) {\n      if (u[i - 1] === u[i]) u.splice(i, 1);\n      else i++;\n    }\n    return u;\n  }\n\n  return unique(\n    relative_complement(A, B).concat(relative_complement(B, A))\n  ).sort();\n}",
        "error": null,
        "seed": "function symmetricDifference(A, B) {\n  function relative_complement(A, B) {\n    return A.filter(function(elem) {\n      return B.indexOf(elem) == -1;\n    });\n  }\n\n  function unique(ary) {\n    var u = ary.concat().sort();\n    for (var i = 1; i < u.length; ) {\n      if (u[i - 1] === u[i]) u.splice(i, 1);\n      else i++;\n    }\n    return u;\n  }\n\n  return unique(\n    relative_complement(A, B).concat(relative_complement(B, A))\n  ).sort();\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>symmetricDifference</code> should be a function.</p>",
      "testString": "assert(typeof symmetricDifference == 'function');"
    },
    {
      "text": "<p><code>symmetricDifference([\"John\", \"Bob\", \"Mary\", \"Serena\"], [\"Jim\", \"Mary\", \"John\", \"Bob\"])</code> should return an array.</p>",
      "testString": "assert(\n  Array.isArray(\n    symmetricDifference(\n      ['John', 'Bob', 'Mary', 'Serena'],\n      ['Jim', 'Mary', 'John', 'Bob']\n    )\n  )\n);"
    },
    {
      "text": "<p><code>symmetricDifference([\"John\", \"Bob\", \"Mary\", \"Serena\"], [\"Jim\", \"Mary\", \"John\", \"Bob\"])</code> should return <code>[\"Jim\", \"Serena\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  symmetricDifference(\n    ['John', 'Bob', 'Mary', 'Serena'],\n    ['Jim', 'Mary', 'John', 'Bob']\n  ),\n  ['Jim', 'Serena']\n);"
    },
    {
      "text": "<p><code>symmetricDifference([1, 2, 3], [3, 4])</code> should return <code>[1, 2, 4]</code>.</p>",
      "testString": "assert.deepEqual(symmetricDifference([1, 2, 3], [3, 4]), [1, 2, 4]);"
    },
    {
      "text": "<p><code>symmetricDifference([1, 2, 3, 4, 5], [3, 4, 8, 7])</code> should return <code>[1, 2, 5, 7, 8]</code>.</p>",
      "testString": "assert.deepEqual(symmetricDifference([1, 2, 3, 4, 5], [3, 4, 8, 7]), [\n  1,\n  2,\n  5,\n  7,\n  8\n]);"
    },
    {
      "text": "<p><code>symmetricDifference([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9])</code> should return <code>[2, 4, 9]</code>.</p>",
      "testString": "assert.deepEqual(\n  symmetricDifference([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8, 9]),\n  [2, 4, 9]\n);"
    },
    {
      "text": "<p><code>symmetricDifference([1, 2, 4, 7, 9], [2, 3, 7, 8, 9])</code> should return <code>[1, 3, 4, 8]</code>.</p>",
      "testString": "assert.deepEqual(symmetricDifference([1, 2, 4, 7, 9], [2, 3, 7, 8, 9]), [\n  1,\n  3,\n  4,\n  8\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given two sets <em>A</em> and <em>B</em>, compute $(A \\setminus B) \\cup (B \\setminus A).$ That is, enumerate the items that are in <em>A</em> or <em>B</em> but not both. This set is called the symmetric difference of <em>A</em> and <em>B</em>. In other words: $(A \\cup B) \\setminus (A \\cap B)$ (the set of items that are in at least one of <em>A</em> or <em>B</em> minus the set of items that are in both <em>A</em> and <em>B</em>).</p>\n<p>Example:</p>\n<p>For sets <code>A = [1, 2, 3]</code>, and <code>B = [1, 3, 4]</code>, the symmetric difference of <em>A</em> and <em>B</em> is <code>[2, 4]</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes two arrays as parameters and returns the symmetric difference. Sort the resultant array before returning it.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 146,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "594dc6c729e5700999302b45",
  "title": "Balanced brackets",
  "challengeType": 1,
  "forumTopicId": 302230,
  "dashedName": "balanced-brackets",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testCases = [\n  '[]',\n  ']][[[][][][]][',\n  '[][[[[][][[[]]]]]]',\n  '][',\n  '[[[]]]][[]',\n  '][[]',\n  '][[][]][[[]]',\n  '[[][]]][',\n  '[[[]]][[]]]][][[',\n  '[]][[]]][[[[][]]',\n  '][]][[][',\n  '[[]][[][]]',\n  '[[]]',\n  ']][]][[]][[[',\n  '][]][][[',\n  '][][',\n  '[]]]',\n  ''\n];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isBalanced(str) {\n\n  return true;\n}",
      "error": null,
      "seed": "function isBalanced(str) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isBalanced(str) {\n  if (str === '') return true;\n  let a = str;\n  let b;\n  do {\n    b = a;\n    a = a.replace(/\\[\\]/g, '');\n  } while (a !== b);\n  return !a;\n}",
        "error": null,
        "seed": "function isBalanced(str) {\n  if (str === '') return true;\n  let a = str;\n  let b;\n  do {\n    b = a;\n    a = a.replace(/\\[\\]/g, '');\n  } while (a !== b);\n  return !a;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isBalanced</code> should be a function.</p>",
      "testString": "assert(typeof isBalanced === 'function');"
    },
    {
      "text": "<p><code>isBalanced(\"[]\")</code> should return true.</p>",
      "testString": "assert(isBalanced(testCases[0]));"
    },
    {
      "text": "<p><code>isBalanced(\"]][[[][][][]][\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[1]));"
    },
    {
      "text": "<p><code>isBalanced(\"[][[[[][][[[]]]]]]\")</code> should return true.</p>",
      "testString": "assert(isBalanced(testCases[2]));"
    },
    {
      "text": "<p><code>isBalanced(\"][\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[3]));"
    },
    {
      "text": "<p><code>isBalanced(\"[[[]]]][[]\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[4]));"
    },
    {
      "text": "<p><code>isBalanced(\"][[]\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[5]));"
    },
    {
      "text": "<p><code>isBalanced(\"][[][]][[[]]\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[6]));"
    },
    {
      "text": "<p><code>isBalanced(\"[[][]]][\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[7]));"
    },
    {
      "text": "<p><code>isBalanced(\"[[[]]][[]]]][][[\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[8]));"
    },
    {
      "text": "<p><code>isBalanced(\"[]][[]]][[[[][]]\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[9]));"
    },
    {
      "text": "<p><code>isBalanced(\"][]][[][\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[10]));"
    },
    {
      "text": "<p><code>isBalanced(\"[[]][[][]]\")</code> should return true.</p>",
      "testString": "assert(isBalanced(testCases[11]));"
    },
    {
      "text": "<p><code>isBalanced(\"[[]]\")</code> should return true.</p>",
      "testString": "assert(isBalanced(testCases[12]));"
    },
    {
      "text": "<p><code>isBalanced(\"]][]][[]][[[\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[13]));"
    },
    {
      "text": "<p><code>isBalanced(\"][]][][[\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[14]));"
    },
    {
      "text": "<p><code>isBalanced(\"][][\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[15]));"
    },
    {
      "text": "<p><code>isBalanced(\"[]]]\")</code> should return false.</p>",
      "testString": "assert(!isBalanced(testCases[16]));"
    },
    {
      "text": "<p><code>isBalanced(\"\")</code> should return true.</p>",
      "testString": "assert(isBalanced(testCases[17]));"
    }
  ],
  "description": "<section id=\"description\">\n<p>Determine whether a generated string of brackets is balanced; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</p>\n<p><strong>Examples:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>][</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>[][]</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>][]</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>[]][[]</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>[[[[]]]]</code></td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 13,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
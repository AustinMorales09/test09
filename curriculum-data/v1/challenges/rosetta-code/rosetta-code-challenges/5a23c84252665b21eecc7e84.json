{
  "id": "5a23c84252665b21eecc7e84",
  "title": "Greatest subsequential sum",
  "challengeType": 1,
  "forumTopicId": 302278,
  "dashedName": "greatest-subsequential-sum",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function maximumSubsequence(population) {\n\n}",
      "error": null,
      "seed": "function maximumSubsequence(population) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function maximumSubsequence(population) {\n  function sumValues(arr) {\n      var result = 0;\n      for (var i = 0, len = arr.length; i < len; i++) {\n          result += arr[i];\n      }\n      return result;\n  }\n  var greatest;\n  var maxValue = 0;\n\n  for (var i = 0, len = population.length; i < len; i++) {\n      for (var j = i; j <= len; j++) {\n          var subsequence = population.slice(i, j);\n          var value = sumValues(subsequence);\n          if (value > maxValue) {\n              maxValue = value;\n              greatest = subsequence;\n          };\n      }\n  }\n\n  return greatest;\n}",
        "error": null,
        "seed": "function maximumSubsequence(population) {\n  function sumValues(arr) {\n      var result = 0;\n      for (var i = 0, len = arr.length; i < len; i++) {\n          result += arr[i];\n      }\n      return result;\n  }\n  var greatest;\n  var maxValue = 0;\n\n  for (var i = 0, len = population.length; i < len; i++) {\n      for (var j = i; j <= len; j++) {\n          var subsequence = population.slice(i, j);\n          var value = sumValues(subsequence);\n          if (value > maxValue) {\n              maxValue = value;\n              greatest = subsequence;\n          };\n      }\n  }\n\n  return greatest;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>maximumSubsequence</code> should be a function.</p>",
      "testString": "assert(typeof maximumSubsequence == 'function');"
    },
    {
      "text": "<p><code>maximumSubsequence([ 1, 2, -1, 3, 10, -10 ])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(maximumSubsequence([1, 2, -1, 3, 10, -10])));"
    },
    {
      "text": "<p><code>maximumSubsequence([ 1, 2, -1, 3, 10, -10 ])</code> should return <code>[ 1, 2, -1, 3, 10 ]</code>.</p>",
      "testString": "assert.deepEqual(maximumSubsequence([1, 2, -1, 3, 10, -10]), [1, 2, -1, 3, 10]);"
    },
    {
      "text": "<p><code>maximumSubsequence([ 0, 8, 10, -2, -4, -1, -5, -3 ])</code> should return <code>[ 0, 8, 10 ]</code>.</p>",
      "testString": "assert.deepEqual(maximumSubsequence([0, 8, 10, -2, -4, -1, -5, -3]), [\n  0,\n  8,\n  10\n]);"
    },
    {
      "text": "<p><code>maximumSubsequence([ 9, 9, -10, 1 ])</code> should return <code>[ 9, 9 ]</code>.</p>",
      "testString": "assert.deepEqual(maximumSubsequence([9, 9, -10, 1]), [9, 9]);"
    },
    {
      "text": "<p><code>maximumSubsequence([ 7, 1, -5, -3, -8, 1 ])</code> should return <code>[ 7, 1 ]</code>.</p>",
      "testString": "assert.deepEqual(maximumSubsequence([7, 1, -5, -3, -8, 1]), [7, 1]);"
    },
    {
      "text": "<p><code>maximumSubsequence([ -3, 6, -1, 4, -4, -6 ])</code> should return <code>[ 6, -1, 4 ]</code>.</p>",
      "testString": "assert.deepEqual(maximumSubsequence([-3, 6, -1, 4, -4, -6]), [6, -1, 4]);"
    },
    {
      "text": "<p><code>maximumSubsequence([ -1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1 ])</code> should return <code>[ 3, 5, 6, -2, -1, 4 ]</code>.</p>",
      "testString": "assert.deepEqual(maximumSubsequence([-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1]), [\n  3,\n  5,\n  6,\n  -2,\n  -1,\n  4\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given a sequence of integers, find a continuous subsequence which maximizes the sum of its elements, that is, the elements of no other single subsequence add up to a value larger than this one.</p>\n<p>An empty subsequence is considered to have the sum of \\( 0 \\); thus if all elements are negative, the result must be the empty sequence.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 61,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "598eea87e5cf4b116c3ff81a",
  "title": "Factors of a Mersenne number",
  "challengeType": 1,
  "forumTopicId": 302264,
  "dashedName": "factors-of-a-mersenne-number",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function check_mersenne(p) {\n\n}",
      "error": null,
      "seed": "function check_mersenne(p) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function check_mersenne(p){\n    function isPrime(value){\n      for (let i=2; i < value; i++){\n        if (value % i == 0){\n          return false;\n        }\n        if (value % i != 0){\n          return true;\n         }\n      }\n    }\n\n    function trial_factor(base, exp, mod){\n      let square, bits;\n      square = 1;\n      bits = exp.toString(2).split('');\n      for (let i=0,ln=bits.length; i<ln; i++){\n        square = Math.pow(square, 2) * (bits[i] == 1 ? base : 1) % mod;\n      }\n      return (square == 1);\n    }\n\n    function mersenne_factor(p){\n      let limit, k, q;\n      limit = Math.sqrt(Math.pow(2,p) - 1);\n      k = 1;\n      while ((2*k*p - 1) < limit){\n        q = 2*k*p + 1;\n        if (isPrime(q) && (q % 8 == 1 || q % 8 == 7) && trial_factor(2,p,q)){\n          return q; // q is a factor of 2**p-1\n        }\n        k++;\n      }\n      return null;\n    }\n  let f, result;\n  result=\"M\"+p+\" = 2^\"+p+\"-1 is \";\n  f = mersenne_factor(p);\n  result+=f == null ? \"prime\" : \"composite with factor \"+f;\n  return result;\n}",
        "error": null,
        "seed": "function check_mersenne(p){\n    function isPrime(value){\n      for (let i=2; i < value; i++){\n        if (value % i == 0){\n          return false;\n        }\n        if (value % i != 0){\n          return true;\n         }\n      }\n    }\n\n    function trial_factor(base, exp, mod){\n      let square, bits;\n      square = 1;\n      bits = exp.toString(2).split('');\n      for (let i=0,ln=bits.length; i<ln; i++){\n        square = Math.pow(square, 2) * (bits[i] == 1 ? base : 1) % mod;\n      }\n      return (square == 1);\n    }\n\n    function mersenne_factor(p){\n      let limit, k, q;\n      limit = Math.sqrt(Math.pow(2,p) - 1);\n      k = 1;\n      while ((2*k*p - 1) < limit){\n        q = 2*k*p + 1;\n        if (isPrime(q) && (q % 8 == 1 || q % 8 == 7) && trial_factor(2,p,q)){\n          return q; // q is a factor of 2**p-1\n        }\n        k++;\n      }\n      return null;\n    }\n  let f, result;\n  result=\"M\"+p+\" = 2^\"+p+\"-1 is \";\n  f = mersenne_factor(p);\n  result+=f == null ? \"prime\" : \"composite with factor \"+f;\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>check_mersenne</code> should be a function.</p>",
      "testString": "assert(typeof check_mersenne === 'function');"
    },
    {
      "text": "<p><code>check_mersenne(3)</code> should return a string.</p>",
      "testString": "assert(typeof check_mersenne(3) == 'string');"
    },
    {
      "text": "<p><code>check_mersenne(3)</code> should return the string <code>M3 = 2^3-1 is prime</code>.</p>",
      "testString": "assert.equal(check_mersenne(3), 'M3 = 2^3-1 is prime');"
    },
    {
      "text": "<p><code>check_mersenne(23)</code> should return the string <code>M23 = 2^23-1 is composite with factor 47</code>.</p>",
      "testString": "assert.equal(check_mersenne(23), 'M23 = 2^23-1 is composite with factor 47');"
    },
    {
      "text": "<p><code>check_mersenne(929)</code> should return the string <code>M929 = 2^929-1 is composite with factor 13007</code>.</p>",
      "testString": "assert.equal(\n  check_mersenne(929),\n  'M929 = 2^929-1 is composite with factor 13007'\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A Mersenne number is a number in the form of <code>2<sup>P</sup>-1</code>.</p>\n<p>If <code>P</code> is prime, the Mersenne number may be a Mersenne prime. (If <code>P</code> is not prime, the Mersenne number is also not prime.)</p>\n<p>In the search for Mersenne prime numbers it is advantageous to eliminate exponents by finding a small factor before starting a, potentially lengthy, <a href=\"https://rosettacode.org/wiki/Lucas-Lehmer test\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Lucas-Lehmer test</a>.</p>\n<p>There are very efficient algorithms for determining if a number divides <code>2<sup>P</sup>-1</code> (or equivalently, if <code>2<sup>P</sup> mod (the number) = 1</code>).</p>\n<p>Some languages already have built-in implementations of this exponent-and-mod operation (called modPow or similar).</p>\n<p>The following is how to implement this modPow yourself:</p>\n<p>For example, let's compute <code>2<sup>23</sup> mod 47</code>.</p>\n<p>Convert the exponent 23 to binary, you get 10111. Starting with <code><tt>square</tt> = 1</code>, repeatedly square it.</p>\n<p>Remove the top bit of the exponent, and if it's 1 multiply <code>square</code> by the base of the exponentiation (2), then compute <code><tt>square</tt> modulo 47</code>.</p>\n<p>Use the result of the modulo from the last step as the initial value of <code>square</code> in the next step:</p>\n<pre>Remove   Optional\nsquare        top bit  multiply by 2  mod 47\n------------  -------  -------------  ------\n1*1 = 1       1  0111  1*2 = 2           2\n2*2 = 4       0   111     no             4\n4*4 = 16      1    11  16*2 = 32        32\n32*32 = 1024  1     1  1024*2 = 2048    27\n27*27 = 729   1        729*2 = 1458      1\n</pre>\n<p>Since <code>2<sup>23</sup> mod 47 = 1</code>, 47 is a factor of <code>2<sup>P</sup>-1</code>.</p>\n<p>(To see this, subtract 1 from both sides: <code>2<sup>23</sup>-1 = 0 mod 47</code>.)</p>\n<p>Since we've shown that 47 is a factor, <code>2<sup>23</sup>-1</code> is not prime.</p>\n<p>Further properties of Mersenne numbers allow us to refine the process even more.</p>\n<p>Any factor <code>q</code> of <code>2<sup>P</sup>-1</code> must be of the form <code>2kP+1</code>, <code>k</code> being a positive integer or zero. Furthermore, <code>q</code> must be <code>1</code> or <code>7 mod 8</code>.</p>\n<p>Finally any potential factor <code>q</code> must be <a href=\"https://rosettacode.org/wiki/Primality_by_trial_division\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">prime</a>.</p>\n<p>As in other trial division algorithms, the algorithm stops when <code>2kP+1 > sqrt(N)</code>.These primarily tests only work on Mersenne numbers where <code>P</code> is prime. For example, <code>M<sub>4</sub>=15</code> yields no factors using these techniques, but factors into 3 and 5, neither of which fit <code>2kP+1</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Using the above method find a factor of <code>2<sup>p</sup>-1</code>.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 46,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5ea2815a8640bcc6cb7dab3c",
  "title": "Lychrel numbers",
  "challengeType": 1,
  "forumTopicId": 385287,
  "dashedName": "lychrel-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isLychrel(n) {\n\n}",
      "error": null,
      "seed": "function isLychrel(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isLychrel(n) {\n  function reverse(num) {\n    return parseInt(\n      num\n        .toString()\n        .split('')\n        .reverse()\n        .join('')\n    );\n  }\n\n  var i;\n  for (i = 0; i < 500; i++) {\n    n = n + reverse(n);\n    if (n == reverse(n)) break;\n  }\n\n  return i == 500;\n}",
        "error": null,
        "seed": "function isLychrel(n) {\n  function reverse(num) {\n    return parseInt(\n      num\n        .toString()\n        .split('')\n        .reverse()\n        .join('')\n    );\n  }\n\n  var i;\n  for (i = 0; i < 500; i++) {\n    n = n + reverse(n);\n    if (n == reverse(n)) break;\n  }\n\n  return i == 500;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isLychrel</code> should be a function.</p>",
      "testString": "assert(typeof isLychrel === 'function');"
    },
    {
      "text": "<p><code>isLychrel(12)</code> should return a boolean.</p>",
      "testString": "assert(typeof isLychrel(12) === 'boolean');"
    },
    {
      "text": "<p><code>isLychrel(12)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isLychrel(12), false);"
    },
    {
      "text": "<p><code>isLychrel(55)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isLychrel(55), false);"
    },
    {
      "text": "<p><code>isLychrel(196)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isLychrel(196), true);"
    },
    {
      "text": "<p><code>isLychrel(879)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isLychrel(879), true);"
    },
    {
      "text": "<p><code>isLychrel(44987)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isLychrel(44987), false);"
    },
    {
      "text": "<p><code>isLychrel(7059)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isLychrel(7059), true);"
    }
  ],
  "description": "<section id=\"description\">\n<ol>\n  <li>Take an integer <code>n₀</code>, greater than zero.</li>\n  <li>Form the next number <code>n</code> of the series by reversing <code>n₀</code> and adding it to <code>n₀</code></li>\n  <li>Stop when <code>n</code> becomes palindromic - i.e. the digits of <code>n</code> in reverse order == <code>n</code>.</li>\n</ol>\n<p>The above recurrence relation when applied to most starting numbers <code>n</code> = 1, 2, ... terminates in a palindrome quite quickly.</p>\n<p>For example if <code>n₀</code> = 12 we get:</p>\n<pre><code class=\"language-bash\">12\n12 + 21 = 33,  a palindrome!\n</code></pre>\n<p>And if <code>n₀</code> = 55 we get:</p>\n<pre><code class=\"language-bash\">55\n55 + 55 = 110\n110 + 011 = 121,  a palindrome!\n</code></pre>\n<p>Notice that the check for a palindrome happens <em>after</em> an addition.</p>\n<p>Some starting numbers seem to go on forever; the recurrence relation for 196 has been calculated for millions of repetitions forming numbers with millions of digits, without forming a palindrome. These numbers that do not end in a palindrome are called <strong>Lychrel numbers</strong>.</p>\n<p>For the purposes of this task a Lychrel number is any starting number that does not form a palindrome within 500 (or more) iterations.</p>\n<p><strong>Seed and related Lychrel numbers:</strong></p>\n<p>Any integer produced in the sequence of a Lychrel number is also a Lychrel number.</p>\n<p>In general, any sequence from one Lychrel number <em>might</em> converge to join the sequence from a prior Lychrel number candidate; for example the sequences for the numbers 196 and then 689 begin:</p>\n<pre><code class=\"language-bash\">    196\n    196 + 691 = 887\n    887 + 788 = 1675\n    1675 + 5761 = 7436\n    7436 + 6347 = 13783\n    13783 + 38731 = 52514\n    52514 + 41525 = 94039\n    ...\n    689\n    689 + 986 = 1675\n    1675 + 5761 = 7436\n    ...\n</code></pre>\n<p>So we see that the sequence starting with 689 converges to, and continues with the same numbers as that for 196.</p>\n<p>Because of this we can further split the Lychrel numbers into true <strong>Seed</strong> Lychrel number candidates, and <strong>Related</strong> numbers that produce no palindromes but have integers in their sequence seen as part of the sequence generated from a lower Lychrel number.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a number as a parameter. Return true if the number is a Lynchrel number. Otherwise, return false. Remember that the iteration limit is 500.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 103,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc800c",
  "title": "Sorting algorithms/Permutation sort",
  "challengeType": 1,
  "forumTopicId": 302316,
  "dashedName": "sorting-algorithmspermutation-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function permutationSort(arr) {\n\n}",
      "error": null,
      "seed": "function permutationSort(arr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function permutationSort(arr) {\n  function pSort(a) {\n    var list = [];\n    permute(a, a.length, list);\n    for (var i = 0; i < list.length; i++) {\n      var x = list[i];\n      if (isSorted(x)) return x;\n    }\n    return a;\n  }\n\n  function permute(a, n, list) {\n    if (n === 1) {\n      var b = a.slice();\n      list.push(b);\n      return;\n    }\n    for (var i = 0; i < n; i++) {\n      swap(a, i, n - 1);\n      permute(a, n - 1, list);\n      swap(a, i, n - 1);\n    }\n  }\n\n  function isSorted(a){\n    for(let i = 0; i < a.length - 1; i++)\n      if(a[i] > a[i + 1])\n        return false;\n    return true;\n  }\n\n  function swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  return pSort(arr);\n}",
        "error": null,
        "seed": "function permutationSort(arr) {\n  function pSort(a) {\n    var list = [];\n    permute(a, a.length, list);\n    for (var i = 0; i < list.length; i++) {\n      var x = list[i];\n      if (isSorted(x)) return x;\n    }\n    return a;\n  }\n\n  function permute(a, n, list) {\n    if (n === 1) {\n      var b = a.slice();\n      list.push(b);\n      return;\n    }\n    for (var i = 0; i < n; i++) {\n      swap(a, i, n - 1);\n      permute(a, n - 1, list);\n      swap(a, i, n - 1);\n    }\n  }\n\n  function isSorted(a){\n    for(let i = 0; i < a.length - 1; i++)\n      if(a[i] > a[i + 1])\n        return false;\n    return true;\n  }\n\n  function swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n  return pSort(arr);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>permutationSort</code> should be a function.</p>",
      "testString": "assert(typeof permutationSort == 'function');"
    },
    {
      "text": "<p><code>permutationSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(permutationSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>permutationSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(permutationSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>permutationSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(permutationSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>permutationSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(permutationSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>permutationSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(permutationSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>permutationSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(permutationSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function to implement a permutation sort, which proceeds by generating the possible permutations of the input array until discovering the sorted one. The function should return the sorted array.</p>\n<p>Pseudocode:</p>\n<pre><b>while not</b> InOrder(list) <b>do</b>\n  nextPermutation(list)\n<b>done</b>\n</pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 126,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
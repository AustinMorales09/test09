{
  "id": "5eb3e4aa847216613aa81983",
  "title": "Semiprime",
  "challengeType": 1,
  "forumTopicId": 385318,
  "dashedName": "semiprime",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isSemiPrime(n) {\n\n}",
      "error": null,
      "seed": "function isSemiPrime(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isSemiPrime(n) {\n  if (n <= 3) return false;\n\n  var ans = [];\n  var done = false;\n  while (!done) {\n    if (n % 2 === 0) {\n      ans.push(2);\n      n /= 2;\n      continue;\n    }\n    if (n % 3 === 0) {\n      ans.push(3);\n      n /= 3;\n      continue;\n    }\n    if (n === 1) return ans.length == 2;\n    var sr = Math.sqrt(n);\n    done = true;\n    // try to divide the checked number by all numbers till its square root.\n    for (var i = 6; i <= sr; i += 6) {\n      if (n % (i - 1) === 0) {\n        // is n divisible by i-1?\n        ans.push(i - 1);\n        n /= i - 1;\n        done = false;\n        break;\n      }\n      if (n % (i + 1) === 0) {\n        // is n divisible by i+1?\n        ans.push(i + 1);\n        n /= i + 1;\n        done = false;\n        break;\n      }\n    }\n  }\n  ans.push(n);\n  return ans.length == 2;\n}",
        "error": null,
        "seed": "function isSemiPrime(n) {\n  if (n <= 3) return false;\n\n  var ans = [];\n  var done = false;\n  while (!done) {\n    if (n % 2 === 0) {\n      ans.push(2);\n      n /= 2;\n      continue;\n    }\n    if (n % 3 === 0) {\n      ans.push(3);\n      n /= 3;\n      continue;\n    }\n    if (n === 1) return ans.length == 2;\n    var sr = Math.sqrt(n);\n    done = true;\n    // try to divide the checked number by all numbers till its square root.\n    for (var i = 6; i <= sr; i += 6) {\n      if (n % (i - 1) === 0) {\n        // is n divisible by i-1?\n        ans.push(i - 1);\n        n /= i - 1;\n        done = false;\n        break;\n      }\n      if (n % (i + 1) === 0) {\n        // is n divisible by i+1?\n        ans.push(i + 1);\n        n /= i + 1;\n        done = false;\n        break;\n      }\n    }\n  }\n  ans.push(n);\n  return ans.length == 2;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isSemiPrime</code> should be a function.</p>",
      "testString": "assert(typeof isSemiPrime === 'function');"
    },
    {
      "text": "<p><code>isSemiPrime(100)</code> should return a boolean.</p>",
      "testString": "assert(typeof isSemiPrime(100) === 'boolean');"
    },
    {
      "text": "<p><code>isSemiPrime(100)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isSemiPrime(100), false);"
    },
    {
      "text": "<p><code>isSemiPrime(504)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isSemiPrime(504), false);"
    },
    {
      "text": "<p><code>isSemiPrime(4)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSemiPrime(4), true);"
    },
    {
      "text": "<p><code>isSemiPrime(46)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSemiPrime(46), true);"
    },
    {
      "text": "<p><code>isSemiPrime(13)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isSemiPrime(13), false);"
    },
    {
      "text": "<p><code>isSemiPrime(74)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSemiPrime(74), true);"
    },
    {
      "text": "<p><code>isSemiPrime(1679)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSemiPrime(1679), true);"
    },
    {
      "text": "<p><code>isSemiPrime(2)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isSemiPrime(2), false);"
    },
    {
      "text": "<p><code>isSemiPrime(95)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isSemiPrime(95), true);"
    },
    {
      "text": "<p><code>isSemiPrime(124)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isSemiPrime(124), false);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Semiprime numbers are natural numbers that are products of exactly two (possibly equal) <a href=\"https://rosettacode.org/wiki/prime_number\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">prime numbers</a>.</p>\n<pre>1679  =  23 x 73</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that returns true if a number is semiprime, or false if it is not.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 111,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc8010",
  "title": "Sorting algorithms/Shell sort",
  "challengeType": 1,
  "forumTopicId": 302317,
  "dashedName": "sorting-algorithmsshell-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function shellSort(a) {\n\n}",
      "error": null,
      "seed": "function shellSort(a) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function shellSort(a) {\n  for (var h = a.length; h > 0; h = parseInt(h / 2)) {\n    for (var i = h; i < a.length; i++) {\n      var k = a[i];\n      for (var j = i; j >= h && k < a[j - h]; j -= h) a[j] = a[j - h];\n      a[j] = k;\n    }\n  }\n  return a;\n}",
        "error": null,
        "seed": "function shellSort(a) {\n  for (var h = a.length; h > 0; h = parseInt(h / 2)) {\n    for (var i = h; i < a.length; i++) {\n      var k = a[i];\n      for (var j = i; j >= h && k < a[j - h]; j -= h) a[j] = a[j - h];\n      a[j] = k;\n    }\n  }\n  return a;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>shellSort</code> should be a function.</p>",
      "testString": "assert(typeof shellSort == 'function');"
    },
    {
      "text": "<p><code>shellSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(shellSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>shellSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(shellSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>shellSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(shellSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>shellSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(shellSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>shellSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(shellSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>shellSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(shellSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function to sort an array of elements using the Shell sort algorithm, a diminishing increment sort. The function should return the sorted array.</p>\n<p>The Shell sort (also known as Shellsort or Shell's method) is named after its inventor, Donald Shell, who published the algorithm in 1959.</p>\n<p>Shell sort is a sequence of interleaved insertion sorts based on an increment sequence. The increment size is reduced after each pass until the increment size is 1.</p>\n<p>With an increment size of 1, the sort is a basic insertion sort, but by this time the data is guaranteed to be almost sorted, which is insertion sort's \"best case\".</p>\n<p>Any sequence will sort the data as long as it ends in 1, but some work better than others.</p>\n<p>Empirical studies have shown a geometric increment sequence with a ratio of about 2.2 work well in practice.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 127,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
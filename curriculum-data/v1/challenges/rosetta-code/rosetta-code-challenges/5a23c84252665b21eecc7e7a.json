{
  "id": "5a23c84252665b21eecc7e7a",
  "title": "Generate lower case ASCII alphabet",
  "challengeType": 1,
  "forumTopicId": 302274,
  "dashedName": "generate-lower-case-ascii-alphabet",
  "challengeFiles": [
    {
      "head": "",
      "tail": "let results=[\n  [ 'a', 'b', 'c', 'd' ],\n  [ 'c', 'd', 'e', 'f', 'g', 'h', 'i' ],\n  [ 'm', 'n', 'o', 'p', 'q' ],\n  [ 'k', 'l', 'm', 'n' ],\n  [ 't', 'u', 'v', 'w', 'x', 'y', 'z' ]\n]",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function lascii(cFrom, cTo) {\n\n}",
      "error": null,
      "seed": "function lascii(cFrom, cTo) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function lascii(cFrom, cTo) {\n\n  function cRange(cFrom, cTo) {\n    var iStart = cFrom.charCodeAt(0);\n\n    return Array.apply(\n      null, Array(cTo.charCodeAt(0) - iStart + 1)\n    ).map(function (_, i) {\n\n      return String.fromCharCode(iStart + i);\n\n    });\n  }\n\n  return cRange(cFrom, cTo);\n\n}",
        "error": null,
        "seed": "function lascii(cFrom, cTo) {\n\n  function cRange(cFrom, cTo) {\n    var iStart = cFrom.charCodeAt(0);\n\n    return Array.apply(\n      null, Array(cTo.charCodeAt(0) - iStart + 1)\n    ).map(function (_, i) {\n\n      return String.fromCharCode(iStart + i);\n\n    });\n  }\n\n  return cRange(cFrom, cTo);\n\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>lascii</code> should be a function.</p>",
      "testString": "assert(typeof lascii == 'function');"
    },
    {
      "text": "<p><code>lascii(\"a\",\"d\")</code> should return an array.</p>",
      "testString": "assert(Array.isArray(lascii('a', 'd')));"
    },
    {
      "text": "<p><code>lascii('a','d')</code> should return <code>[ 'a', 'b', 'c', 'd' ]</code>.</p>",
      "testString": "assert.deepEqual(lascii('a', 'd'), results[0]);"
    },
    {
      "text": "<p><code>lascii('c','i')</code> should return <code>[ 'c', 'd', 'e', 'f', 'g', 'h', 'i' ]</code>.</p>",
      "testString": "assert.deepEqual(lascii('c', 'i'), results[1]);"
    },
    {
      "text": "<p><code>lascii('m','q')</code> should return <code>[ 'm', 'n', 'o', 'p', 'q' ]</code>.</p>",
      "testString": "assert.deepEqual(lascii('m', 'q'), results[2]);"
    },
    {
      "text": "<p><code>lascii('k','n')</code> should return <code>[ 'k', 'l', 'm', 'n' ]</code>.</p>",
      "testString": "assert.deepEqual(lascii('k', 'n'), results[3]);"
    },
    {
      "text": "<p><code>lascii('t','z')</code> should return <code>[ 't', 'u', 'v', 'w', 'x', 'y', 'z' ]</code>.</p>",
      "testString": "assert.deepEqual(lascii('t', 'z'), results[4]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function to generate an array of lower case ASCII characters for a given range. For example, given the range <code>['a', 'd']</code>, the function should return <code>['a', 'b', 'c', 'd']</code>.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 57,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
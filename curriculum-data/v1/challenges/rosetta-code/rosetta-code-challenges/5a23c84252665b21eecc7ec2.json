{
  "id": "5a23c84252665b21eecc7ec2",
  "title": "Jaro distance",
  "challengeType": 1,
  "forumTopicId": 302292,
  "dashedName": "jaro-distance",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function jaro(s, t) {\n\n}",
      "error": null,
      "seed": "function jaro(s, t) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function jaro(s, t) {\n  var s_len = s.length;\n  var t_len = t.length;\n\n  if (s_len == 0 && t_len == 0) return 1;\n\n  var match_distance = Math.max(s_len, t_len) / 2 - 1;\n\n  var s_matches = new Array(s_len);\n  var t_matches = new Array(t_len);\n\n  var matches = 0;\n  var transpositions = 0;\n\n  for (var i = 0; i < s_len; i++) {\n    var start = Math.max(0, i - match_distance);\n    var end = Math.min(i + match_distance + 1, t_len);\n\n    for (var j = start; j < end; j++) {\n      if (t_matches[j]) continue;\n      if (s.charAt(i) != t.charAt(j)) continue;\n      s_matches[i] = true;\n      t_matches[j] = true;\n      matches++;\n      break;\n    }\n  }\n\n  if (matches == 0) return 0;\n\n  var k = 0;\n  for (var i = 0; i < s_len; i++) {\n    if (!s_matches[i]) continue;\n    while (!t_matches[k]) k++;\n    if (s.charAt(i) != t.charAt(k)) transpositions++;\n    k++;\n  }\n\n  return ((matches / s_len) +\n    (matches / t_len) +\n    ((matches - transpositions / 2.0) / matches)) / 3.0;\n}",
        "error": null,
        "seed": "function jaro(s, t) {\n  var s_len = s.length;\n  var t_len = t.length;\n\n  if (s_len == 0 && t_len == 0) return 1;\n\n  var match_distance = Math.max(s_len, t_len) / 2 - 1;\n\n  var s_matches = new Array(s_len);\n  var t_matches = new Array(t_len);\n\n  var matches = 0;\n  var transpositions = 0;\n\n  for (var i = 0; i < s_len; i++) {\n    var start = Math.max(0, i - match_distance);\n    var end = Math.min(i + match_distance + 1, t_len);\n\n    for (var j = start; j < end; j++) {\n      if (t_matches[j]) continue;\n      if (s.charAt(i) != t.charAt(j)) continue;\n      s_matches[i] = true;\n      t_matches[j] = true;\n      matches++;\n      break;\n    }\n  }\n\n  if (matches == 0) return 0;\n\n  var k = 0;\n  for (var i = 0; i < s_len; i++) {\n    if (!s_matches[i]) continue;\n    while (!t_matches[k]) k++;\n    if (s.charAt(i) != t.charAt(k)) transpositions++;\n    k++;\n  }\n\n  return ((matches / s_len) +\n    (matches / t_len) +\n    ((matches - transpositions / 2.0) / matches)) / 3.0;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>jaro</code> should be a function.</p>",
      "testString": "assert(typeof jaro == 'function');"
    },
    {
      "text": "<p><code>jaro(\"MARTHA\", \"MARHTA\")</code> should return a number.</p>",
      "testString": "assert(typeof jaro('MARTHA', 'MARHTA') == 'number');"
    },
    {
      "text": "<p><code>jaro(\"MARTHA\", \"MARHTA\")</code> should return <code>0.9444444444444445</code>.</p>",
      "testString": "assert.equal(jaro('MARTHA', 'MARHTA'), 0.9444444444444445);"
    },
    {
      "text": "<p><code>jaro(\"DIXON\", \"DICKSONX\")</code> should return <code>0.7666666666666666</code>.</p>",
      "testString": "assert.equal(jaro('DIXON', 'DICKSONX'), 0.7666666666666666);"
    },
    {
      "text": "<p><code>jaro(\"JELLYFISH\", \"SMELLYFISH\")</code> should return <code>0.8962962962962964</code>.</p>",
      "testString": "assert.equal(jaro('JELLYFISH', 'SMELLYFISH'), 0.8962962962962964);"
    },
    {
      "text": "<p><code>jaro(\"HELLOS\", \"CHELLO\")</code> should return <code>0.888888888888889</code>.</p>",
      "testString": "assert.equal(jaro('HELLOS', 'CHELLO'), 0.888888888888889);"
    },
    {
      "text": "<p><code>jaro(\"ABCD\", \"BCDA\")</code> should return <code>0.8333333333333334</code>.</p>",
      "testString": "assert.equal(jaro('ABCD', 'BCDA'), 0.8333333333333334);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Jaro distance is a measure of similarity between two strings. The higher the Jaro distance for two strings is, the more similar the strings are. The score is normalized such that <code>0</code> equates to no similarity and <code>1</code> is an exact match.</p>\n<p><strong>Definition</strong></p>\n<p>The Jaro distance \\( d_j \\) of two given strings \\(s_1\\) and \\(s_2\\) is</p>\n<p>\\begin{align}d_j = \\begin{cases}0&#x26; &#x26; \\text{if }m=0 \\\\\\\\{\\frac {1}{3}}\\left({\\frac {m}{|s_{1}|}}+{\\frac {m}{|s_{2}|}}+{\\frac {m-t}{m}}\\right)&#x26; &#x26; \\text{otherwise}\\end{cases}\\end{align}</p>\n<p>Where:</p>\n<ul>\n  <li>\\(m\\) is the number of <i>matching characters</i>;</li>\n  <li> \\(t\\) is half the number of <i>transpositions</i>.</li>\n</ul>\n<p>Two characters from \\(s_1\\) and \\(s_2\\) respectively, are considered <em>matching</em> only if they are the same and not farther than \\(\\left\\lfloor\\frac{\\max(|s_1|,|s_2|)}{2}\\right\\rfloor-1\\).</p>\n<p>Each character of \\(s_1\\) is compared with all its matching characters in \\(s_2\\) . The number of matching (but different sequence order) characters divided by 2 defines the number of <em>transpositions</em>.</p>\n<p><strong>Example</strong></p>\n<p>Given the strings \\(s_1\\) <em>DWAYNE</em> and \\(s_2\\) <em>DUANE</em> we find:</p>\n<ul>\n  <li>\\(m = 4\\)</li>\n  <li>\\(|s_1| = 6\\)</li>\n  <li>\\(|s_2| = 5\\)</li>\n  <li>\\(t = 0\\)</li>\n</ul>\n<p>We find a Jaro score of: \\(d_j = \\frac{1}{3}\\left(\\frac{4}{6} + \\frac{4}{5} + \\frac{4-0}{4}\\right) = 0.822\\).</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function a that takes two strings as parameters and returns the associated Jaro distance.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 74,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
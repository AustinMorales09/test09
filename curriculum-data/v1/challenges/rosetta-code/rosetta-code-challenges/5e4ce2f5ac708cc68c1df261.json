{
  "id": "5e4ce2f5ac708cc68c1df261",
  "title": "Linear congruential generator",
  "challengeType": 1,
  "forumTopicId": 385266,
  "dashedName": "linear-congruential-generator",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function linearCongGenerator(r0, a, c, m, n) {\n\n}",
      "error": null,
      "seed": "function linearCongGenerator(r0, a, c, m, n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function linearCongGenerator(r0, a, c, m, n) {\n    for (let i = 0; i < n; i++) {\n        r0 = (a * r0 + c) % m;\n    }\n    return r0;\n}",
        "error": null,
        "seed": "function linearCongGenerator(r0, a, c, m, n) {\n    for (let i = 0; i < n; i++) {\n        r0 = (a * r0 + c) % m;\n    }\n    return r0;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>linearCongGenerator</code> should be a function.</p>",
      "testString": "assert(typeof linearCongGenerator == 'function');"
    },
    {
      "text": "<p><code>linearCongGenerator(324, 1145, 177, 2148, 3)</code> should return a number.</p>",
      "testString": "assert(typeof linearCongGenerator(324, 1145, 177, 2148, 3) == 'number');"
    },
    {
      "text": "<p><code>linearCongGenerator(324, 1145, 177, 2148, 3)</code> should return <code>855</code>.</p>",
      "testString": "assert.equal(linearCongGenerator(324, 1145, 177, 2148, 3), 855);"
    },
    {
      "text": "<p><code>linearCongGenerator(234, 11245, 145, 83648, 4)</code> should return <code>1110</code>.</p>",
      "testString": "assert.equal(linearCongGenerator(234, 11245, 145, 83648, 4), 1110);"
    },
    {
      "text": "<p><code>linearCongGenerator(85, 11, 1234, 214748, 5)</code> should return <code>62217</code>.</p>",
      "testString": "assert.equal(linearCongGenerator(85, 11, 1234, 214748, 5), 62217);"
    },
    {
      "text": "<p><code>linearCongGenerator(0, 1103515245, 12345, 2147483648, 1)</code> should return <code>12345</code>.</p>",
      "testString": "assert.equal(linearCongGenerator(0, 1103515245, 12345, 2147483648, 1), 12345);"
    },
    {
      "text": "<p><code>linearCongGenerator(0, 1103515245, 12345, 2147483648, 2)</code> should return <code>1406932606</code>.</p>",
      "testString": "assert.equal(\n  linearCongGenerator(0, 1103515245, 12345, 2147483648, 2),\n  1406932606\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A linear congruential generator (LCG) is an <em>algorithm</em> that yields a sequence of pseudo-randomized numbers calculated with a discontinuous piecewise linear equation. All linear congruential generators use this formula:</p>\n<p>$$r_{n + 1} = (a \\times r_n + c) \\bmod m$$</p>\n<p>Where:</p>\n<ul>\n<li>$ r_0 $ is a seed.</li>\n<li>$r_1$, $r_2$, $r_3$, ..., are the random numbers.</li>\n<li>$a$, $c$, $m$ are constants.</li>\n</ul>\n<p>If one chooses the values of $a$, $c$ and $m$ with care, then the generator produces a uniform distribution of integers from $0$ to $m - 1$.</p>\n<p><abbr title=\"linear congruential generator\">LCG</abbr> numbers have poor quality. $r_n$ and $r_{n + 1}$ are not independent, as true random numbers would be. Anyone who knows $r_n$ can predict $r_{n + 1}$, therefore <abbr title=\"linear congruential generator\">LCG</abbr> is not cryptographically secure. The <abbr title=\"linear congruential generator\">LCG</abbr> is still good enough for simple tasks like Miller-Rabin primality test, or FreeCell deals. Among the benefits of the <abbr title=\"linear congruential generator\">LCG</abbr>, one can easily reproduce a sequence of numbers, from the same $r_0$. One can also reproduce such sequence with a different programming language, because the formula is so simple.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes $r_0,a,c,m,n$ as parameters and returns $r_n$.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 92,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
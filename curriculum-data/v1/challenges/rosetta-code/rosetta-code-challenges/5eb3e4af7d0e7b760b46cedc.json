{
  "id": "5eb3e4af7d0e7b760b46cedc",
  "title": "Set consolidation",
  "challengeType": 1,
  "forumTopicId": 385319,
  "dashedName": "set-consolidation",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function setConsolidation(sets) {\n\n}",
      "error": null,
      "seed": "function setConsolidation(sets) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function setConsolidation(sets) {\n  function addAll(l1, l2) {\n    l2.forEach(function(e) {\n      if (l1.indexOf(e) == -1) l1.push(e);\n    });\n  }\n\n  function consolidate(sets) {\n    var r = [];\n    for (var i = 0; i < sets.length; i++) {\n      var s = sets[i];\n      {\n        var new_r = [];\n        new_r.push(s);\n        for (var j = 0; j < r.length; j++) {\n          var x = r[j];\n          {\n            if (\n              !(function(c1, c2) {\n                for (var i = 0; i < c1.length; i++) {\n                  if (c2.indexOf(c1[i]) >= 0) return false;\n                }\n                return true;\n              })(s, x)\n            ) {\n              (function(l1, l2) {\n                addAll(l1, l2);\n              })(s, x);\n            } else {\n              new_r.push(x);\n            }\n          }\n        }\n        r = new_r;\n      }\n    }\n    return r;\n  }\n\n  function consolidateR(sets) {\n    if (sets.length < 2) return sets;\n    var r = [];\n    r.push(sets[0]);\n    {\n      var arr1 = consolidateR(sets.slice(1, sets.length));\n      for (var i = 0; i < arr1.length; i++) {\n        var x = arr1[i];\n        {\n          if (\n            !(function(c1, c2) {\n              for (var i = 0; i < c1.length; i++) {\n                if (c2.indexOf(c1[i]) >= 0) return false;\n              }\n              return true;\n            })(r[0], x)\n          ) {\n            (function(l1, l2) {\n              return l1.push.apply(l1, l2);\n            })(r[0], x);\n          } else {\n            r.push(x);\n          }\n        }\n      }\n    }\n    return r;\n  }\n\n  function hashSetList(set) {\n    var r = [];\n    for (var i = 0; i < set.length; i++) {\n      r.push([]);\n      for (var j = 0; j < set[i].length; j++)\n        (function(s, e) {\n          if (s.indexOf(e) == -1) {\n            s.push(e);\n            return true;\n          } else {\n            return false;\n          }\n        })(r[i], set[i].charAt(j));\n    }\n    return r;\n  }\n\n  var h1 = consolidate(hashSetList(sets)).map(function(e) {\n    e.sort();\n    return e;\n  });\n  return h1;\n}",
        "error": null,
        "seed": "function setConsolidation(sets) {\n  function addAll(l1, l2) {\n    l2.forEach(function(e) {\n      if (l1.indexOf(e) == -1) l1.push(e);\n    });\n  }\n\n  function consolidate(sets) {\n    var r = [];\n    for (var i = 0; i < sets.length; i++) {\n      var s = sets[i];\n      {\n        var new_r = [];\n        new_r.push(s);\n        for (var j = 0; j < r.length; j++) {\n          var x = r[j];\n          {\n            if (\n              !(function(c1, c2) {\n                for (var i = 0; i < c1.length; i++) {\n                  if (c2.indexOf(c1[i]) >= 0) return false;\n                }\n                return true;\n              })(s, x)\n            ) {\n              (function(l1, l2) {\n                addAll(l1, l2);\n              })(s, x);\n            } else {\n              new_r.push(x);\n            }\n          }\n        }\n        r = new_r;\n      }\n    }\n    return r;\n  }\n\n  function consolidateR(sets) {\n    if (sets.length < 2) return sets;\n    var r = [];\n    r.push(sets[0]);\n    {\n      var arr1 = consolidateR(sets.slice(1, sets.length));\n      for (var i = 0; i < arr1.length; i++) {\n        var x = arr1[i];\n        {\n          if (\n            !(function(c1, c2) {\n              for (var i = 0; i < c1.length; i++) {\n                if (c2.indexOf(c1[i]) >= 0) return false;\n              }\n              return true;\n            })(r[0], x)\n          ) {\n            (function(l1, l2) {\n              return l1.push.apply(l1, l2);\n            })(r[0], x);\n          } else {\n            r.push(x);\n          }\n        }\n      }\n    }\n    return r;\n  }\n\n  function hashSetList(set) {\n    var r = [];\n    for (var i = 0; i < set.length; i++) {\n      r.push([]);\n      for (var j = 0; j < set[i].length; j++)\n        (function(s, e) {\n          if (s.indexOf(e) == -1) {\n            s.push(e);\n            return true;\n          } else {\n            return false;\n          }\n        })(r[i], set[i].charAt(j));\n    }\n    return r;\n  }\n\n  var h1 = consolidate(hashSetList(sets)).map(function(e) {\n    e.sort();\n    return e;\n  });\n  return h1;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>setConsolidation</code> should be a function.</p>",
      "testString": "assert(typeof setConsolidation === 'function');"
    },
    {
      "text": "<p><code>setConsolidation([\"AB\", \"CD\"])</code> should return a array.</p>",
      "testString": "assert(Array.isArray(setConsolidation(['AB', 'CD'])));"
    },
    {
      "text": "<p><code>setConsolidation([\"AB\", \"CD\"])</code> should return <code>[[\"C\", \"D\"], [\"A\", \"B\"]]</code>.</p>",
      "testString": "assert.deepEqual(setConsolidation(['AB', 'CD']), [\n  ['C', 'D'],\n  ['A', 'B']\n]);"
    },
    {
      "text": "<p><code>setConsolidation([\"AB\", \"BD\"])</code> should return <code>[[\"A\", \"B\", \"D\"]]</code>.</p>",
      "testString": "assert.deepEqual(setConsolidation(['AB', 'BD']), [['A', 'B', 'D']]);"
    },
    {
      "text": "<p><code>setConsolidation([\"AB\", \"CD\", \"DB\"])</code> should return <code>[[\"A\", \"B\", \"C\", \"D\"]]</code>.</p>",
      "testString": "assert.deepEqual(setConsolidation(['AB', 'CD', 'DB']), [['A', 'B', 'C', 'D']]);"
    },
    {
      "text": "<p><code>setConsolidation([\"HIK\", \"AB\", \"CD\", \"DB\", \"FGH\"])</code> should return <code>[[\"F\", \"G\", \"H\", \"I\", \"K\"], [\"A\", \"B\", \"C\", \"D\"]]</code>.</p>",
      "testString": "assert.deepEqual(setConsolidation(['HIK', 'AB', 'CD', 'DB', 'FGH']), [\n  ['F', 'G', 'H', 'I', 'K'],\n  ['A', 'B', 'C', 'D']\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given two sets of items then if any item is common to any set then the result of applying <em>consolidation</em> to those sets is a set of sets whose contents is:</p>\n<ul>\n  <li>The two input sets if no common item exists between the two input sets of items.</li>\n  <li>The single set that is the union of the two input sets if they share a common item.</li>\n</ul>\n<p>Given N sets of items where N > 2 then the result is the same as repeatedly replacing all combinations of two sets by their consolidation until no further consolidation between set pairs is possible. If N &#x3C; 2 then consolidation has no strict meaning and the input can be returned.</p>\n<p>Here are some examples:</p>\n<p><strong>Example 1:</strong></p>\n<p>Given the two sets <code>{A,B}</code> and <code>{C,D}</code> then there is no common element between the sets and the result is the same as the input.</p>\n<p><strong>Example 2:</strong></p>\n<p>Given the two sets <code>{A,B}</code> and <code>{B,D}</code> then there is a common element <code>B</code> between the sets and the result is the single set <code>{B,D,A}</code>. (Note that order of items in a set is immaterial: <code>{A,B,D}</code> is the same as <code>{B,D,A}</code> and <code>{D,A,B}</code>, etc).</p>\n<p><strong>Example 3:</strong></p>\n<p>Given the three sets <code>{A,B}</code> and <code>{C,D}</code> and <code>{D,B}</code> then there is no common element between the sets <code>{A,B}</code> and <code>{C,D}</code> but the sets <code>{A,B}</code> and <code>{D,B}</code> do share a common element that consolidates to produce the result <code>{B,D,A}</code>. On examining this result with the remaining set, <code>{C,D}</code>, they share a common element and so consolidate to the final output of the single set <code>{A,B,C,D}</code></p>\n<p><strong>Example 4:</strong></p>\n<p>The consolidation of the five sets:</p>\n<p><code>{H,I,K}</code>, <code>{A,B}</code>, <code>{C,D}</code>, <code>{D,B}</code>, and <code>{F,G,H}</code></p>\n<p>Is the two sets:</p>\n<p><code>{A, C, B, D}</code>, and <code>{G, F, I, H, K}</code></p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes an array of strings as a parameter. Each string is represents a set with the characters representing the set elements. The function should return a 2D array containing the consolidated sets. Note: Each set should be sorted.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 112,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc7eaf",
  "title": "IBAN",
  "challengeType": 1,
  "forumTopicId": 302289,
  "dashedName": "iban",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isValid(iban) {\n\n}",
      "error": null,
      "seed": "function isValid(iban) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isValid(iban) {\n  var ibanLen = {\n    NO:15, BE:16, DK:18, FI:18, FO:18, GL:18, NL:18, MK:19,\n    SI:19, AT:20, BA:20, EE:20, KZ:20, LT:20, LU:20, CR:21,\n    CH:21, HR:21, LI:21, LV:21, BG:22, BH:22, DE:22, GB:22,\n    GE:22, IE:22, ME:22, RS:22, AE:23, GI:23, IL:23, AD:24,\n    CZ:24, ES:24, MD:24, PK:24, RO:24, SA:24, SE:24, SK:24,\n    VG:24, TN:24, PT:25, IS:26, TR:26, FR:27, GR:27, IT:27,\n    MC:27, MR:27, SM:27, AL:28, AZ:28, CY:28, DO:28, GT:28,\n    HU:28, LB:28, PL:28, BR:29, PS:29, KW:30, MU:30, MT:31\n  }\n    iban = __helpers.removeWhiteSpace(iban)\n    if (!iban.match(/^[\\dA-Z]+$/)) return false\n    var len = iban.length\n    if (len != ibanLen[iban.substring(0,2)]) return false\n    iban = iban.substring(4) + iban.substring(0,4)\n    for (var s='', i=0; i<len; i+=1) s+=parseInt(iban.charAt(i),36)\n    for (var m=s.substring(0,15)%97, s=s.substring(15); s; s=s.substring(13)) m=(m+s.substring(0,13))%97\n    return m == 1\n}",
        "error": null,
        "seed": "function isValid(iban) {\n  var ibanLen = {\n    NO:15, BE:16, DK:18, FI:18, FO:18, GL:18, NL:18, MK:19,\n    SI:19, AT:20, BA:20, EE:20, KZ:20, LT:20, LU:20, CR:21,\n    CH:21, HR:21, LI:21, LV:21, BG:22, BH:22, DE:22, GB:22,\n    GE:22, IE:22, ME:22, RS:22, AE:23, GI:23, IL:23, AD:24,\n    CZ:24, ES:24, MD:24, PK:24, RO:24, SA:24, SE:24, SK:24,\n    VG:24, TN:24, PT:25, IS:26, TR:26, FR:27, GR:27, IT:27,\n    MC:27, MR:27, SM:27, AL:28, AZ:28, CY:28, DO:28, GT:28,\n    HU:28, LB:28, PL:28, BR:29, PS:29, KW:30, MU:30, MT:31\n  }\n    iban = __helpers.removeWhiteSpace(iban)\n    if (!iban.match(/^[\\dA-Z]+$/)) return false\n    var len = iban.length\n    if (len != ibanLen[iban.substring(0,2)]) return false\n    iban = iban.substring(4) + iban.substring(0,4)\n    for (var s='', i=0; i<len; i+=1) s+=parseInt(iban.charAt(i),36)\n    for (var m=s.substring(0,15)%97, s=s.substring(15); s; s=s.substring(13)) m=(m+s.substring(0,13))%97\n    return m == 1\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isValid</code> should be a function.</p>",
      "testString": "assert(typeof isValid == 'function');"
    },
    {
      "text": "<p><code>isValid(\"GB82 WEST 1234 5698 7654 32\")</code> should return a boolean.</p>",
      "testString": "assert(typeof isValid('GB82 WEST 1234 5698 7654 32') == 'boolean');"
    },
    {
      "text": "<p><code>isValid(\"GB82 WEST 1234 5698 7654 32\")</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isValid('GB82 WEST 1234 5698 7654 32'), true);"
    },
    {
      "text": "<p><code>isValid(\"GB82 WEST 1.34 5698 7654 32\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isValid('GB82 WEST 1.34 5698 7654 32'), false);"
    },
    {
      "text": "<p><code>isValid(\"GB82 WEST 1234 5698 7654 325\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isValid('GB82 WEST 1234 5698 7654 325'), false);"
    },
    {
      "text": "<p><code>isValid(\"GB82 TEST 1234 5698 7654 32\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isValid('GB82 TEST 1234 5698 7654 32'), false);"
    },
    {
      "text": "<p><code>isValid(\"SA03 8000 0000 6080 1016 7519\")</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isValid('SA03 8000 0000 6080 1016 7519'), true);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The International Bank Account Number (IBAN) is an internationally agreed means of identifying bank accounts across national borders with a reduced risk of propagating transcription errors.</p>\n<p>The <abbr title=\"International Bank Account Number\">IBAN</abbr> consists of up to 34 alphanumeric characters:</p>\n<ul>\n  <li>first the two-letter <abbr title=\"International Organization for Standardization\">ISO</abbr> 3166-1 alpha-2 country code</li>\n  <li>then two check digits, and</li>\n  <li>finally a country-specific Basic Bank Account Number (BBAN).</li>\n</ul>\n<p>The check digits enable a sanity check of the bank account number to confirm its integrity even before submitting a transaction.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes IBAN string as parameter. If it is valid return true. Otherwise, return false.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 71,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5eb3e4c3a894c333d2811a3f",
  "title": "SHA-256",
  "challengeType": 1,
  "forumTopicId": 385328,
  "dashedName": "sha-256",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function SHA256(input) {\n\n}",
      "error": null,
      "seed": "function SHA256(input) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function SHA256(input) {\n  var chrsz = 8;\n  var hexcase = 0;\n\n  function safe_add(x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n  }\n\n  function S(X, n) {\n    return (X >>> n) | (X << (32 - n));\n  }\n\n  function R(X, n) {\n    return X >>> n;\n  }\n\n  function Ch(x, y, z) {\n    return (x & y) ^ (~x & z);\n  }\n\n  function Maj(x, y, z) {\n    return (x & y) ^ (x & z) ^ (y & z);\n  }\n\n  function Sigma0256(x) {\n    return S(x, 2) ^ S(x, 13) ^ S(x, 22);\n  }\n\n  function Sigma1256(x) {\n    return S(x, 6) ^ S(x, 11) ^ S(x, 25);\n  }\n\n  function Gamma0256(x) {\n    return S(x, 7) ^ S(x, 18) ^ R(x, 3);\n  }\n\n  function Gamma1256(x) {\n    return S(x, 17) ^ S(x, 19) ^ R(x, 10);\n  }\n\n  function Sigma0512(x) {\n    return S(x, 28) ^ S(x, 34) ^ S(x, 39);\n  }\n\n  function Sigma1512(x) {\n    return S(x, 14) ^ S(x, 18) ^ S(x, 41);\n  }\n\n  function Gamma0512(x) {\n    return S(x, 1) ^ S(x, 8) ^ R(x, 7);\n  }\n\n  function Gamma1512(x) {\n    return S(x, 19) ^ S(x, 61) ^ R(x, 6);\n  }\n\n  function core_sha256(m, l) {\n    var K = new Array(\n      0x428a2f98,\n      0x71374491,\n      0xb5c0fbcf,\n      0xe9b5dba5,\n      0x3956c25b,\n      0x59f111f1,\n      0x923f82a4,\n      0xab1c5ed5,\n      0xd807aa98,\n      0x12835b01,\n      0x243185be,\n      0x550c7dc3,\n      0x72be5d74,\n      0x80deb1fe,\n      0x9bdc06a7,\n      0xc19bf174,\n      0xe49b69c1,\n      0xefbe4786,\n      0xfc19dc6,\n      0x240ca1cc,\n      0x2de92c6f,\n      0x4a7484aa,\n      0x5cb0a9dc,\n      0x76f988da,\n      0x983e5152,\n      0xa831c66d,\n      0xb00327c8,\n      0xbf597fc7,\n      0xc6e00bf3,\n      0xd5a79147,\n      0x6ca6351,\n      0x14292967,\n      0x27b70a85,\n      0x2e1b2138,\n      0x4d2c6dfc,\n      0x53380d13,\n      0x650a7354,\n      0x766a0abb,\n      0x81c2c92e,\n      0x92722c85,\n      0xa2bfe8a1,\n      0xa81a664b,\n      0xc24b8b70,\n      0xc76c51a3,\n      0xd192e819,\n      0xd6990624,\n      0xf40e3585,\n      0x106aa070,\n      0x19a4c116,\n      0x1e376c08,\n      0x2748774c,\n      0x34b0bcb5,\n      0x391c0cb3,\n      0x4ed8aa4a,\n      0x5b9cca4f,\n      0x682e6ff3,\n      0x748f82ee,\n      0x78a5636f,\n      0x84c87814,\n      0x8cc70208,\n      0x90befffa,\n      0xa4506ceb,\n      0xbef9a3f7,\n      0xc67178f2\n    );\n    var HASH = new Array(\n      0x6a09e667,\n      0xbb67ae85,\n      0x3c6ef372,\n      0xa54ff53a,\n      0x510e527f,\n      0x9b05688c,\n      0x1f83d9ab,\n      0x5be0cd19\n    );\n    var W = new Array(64);\n    var a, b, c, d, e, f, g, h, i, j;\n    var T1, T2;\n\n    m[l >> 5] |= 0x80 << (24 - (l % 32));\n    m[(((l + 64) >> 9) << 4) + 15] = l;\n\n    for (var i = 0; i < m.length; i += 16) {\n      a = HASH[0];\n      b = HASH[1];\n      c = HASH[2];\n      d = HASH[3];\n      e = HASH[4];\n      f = HASH[5];\n      g = HASH[6];\n      h = HASH[7];\n\n      for (var j = 0; j < 64; j++) {\n        if (j < 16) W[j] = m[j + i];\n        else\n          W[j] = safe_add(\n            safe_add(\n              safe_add(Gamma1256(W[j - 2]), W[j - 7]),\n              Gamma0256(W[j - 15])\n            ),\n            W[j - 16]\n          );\n\n        T1 = safe_add(\n          safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]),\n          W[j]\n        );\n        T2 = safe_add(Sigma0256(a), Maj(a, b, c));\n\n        h = g;\n        g = f;\n        f = e;\n        e = safe_add(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = safe_add(T1, T2);\n      }\n\n      HASH[0] = safe_add(a, HASH[0]);\n      HASH[1] = safe_add(b, HASH[1]);\n      HASH[2] = safe_add(c, HASH[2]);\n      HASH[3] = safe_add(d, HASH[3]);\n      HASH[4] = safe_add(e, HASH[4]);\n      HASH[5] = safe_add(f, HASH[5]);\n      HASH[6] = safe_add(g, HASH[6]);\n      HASH[7] = safe_add(h, HASH[7]);\n    }\n    return HASH;\n  }\n\n  function core_sha512(m, l) {\n    var K = new Array(\n      0x428a2f98d728ae22,\n      0x7137449123ef65cd,\n      0xb5c0fbcfec4d3b2f,\n      0xe9b5dba58189dbbc,\n      0x3956c25bf348b538,\n      0x59f111f1b605d019,\n      0x923f82a4af194f9b,\n      0xab1c5ed5da6d8118,\n      0xd807aa98a3030242,\n      0x12835b0145706fbe,\n      0x243185be4ee4b28c,\n      0x550c7dc3d5ffb4e2,\n      0x72be5d74f27b896f,\n      0x80deb1fe3b1696b1,\n      0x9bdc06a725c71235,\n      0xc19bf174cf692694,\n      0xe49b69c19ef14ad2,\n      0xefbe4786384f25e3,\n      0x0fc19dc68b8cd5b5,\n      0x240ca1cc77ac9c65,\n      0x2de92c6f592b0275,\n      0x4a7484aa6ea6e483,\n      0x5cb0a9dcbd41fbd4,\n      0x76f988da831153b5,\n      0x983e5152ee66dfab,\n      0xa831c66d2db43210,\n      0xb00327c898fb213f,\n      0xbf597fc7beef0ee4,\n      0xc6e00bf33da88fc2,\n      0xd5a79147930aa725,\n      0x06ca6351e003826f,\n      0x142929670a0e6e70,\n      0x27b70a8546d22ffc,\n      0x2e1b21385c26c926,\n      0x4d2c6dfc5ac42aed,\n      0x53380d139d95b3df,\n      0x650a73548baf63de,\n      0x766a0abb3c77b2a8,\n      0x81c2c92e47edaee6,\n      0x92722c851482353b,\n      0xa2bfe8a14cf10364,\n      0xa81a664bbc423001,\n      0xc24b8b70d0f89791,\n      0xc76c51a30654be30,\n      0xd192e819d6ef5218,\n      0xd69906245565a910,\n      0xf40e35855771202a,\n      0x106aa07032bbd1b8,\n      0x19a4c116b8d2d0c8,\n      0x1e376c085141ab53,\n      0x2748774cdf8eeb99,\n      0x34b0bcb5e19b48a8,\n      0x391c0cb3c5c95a63,\n      0x4ed8aa4ae3418acb,\n      0x5b9cca4f7763e373,\n      0x682e6ff3d6b2b8a3,\n      0x748f82ee5defb2fc,\n      0x78a5636f43172f60,\n      0x84c87814a1f0ab72,\n      0x8cc702081a6439ec,\n      0x90befffa23631e28,\n      0xa4506cebde82bde9,\n      0xbef9a3f7b2c67915,\n      0xc67178f2e372532b,\n      0xca273eceea26619c,\n      0xd186b8c721c0c207,\n      0xeada7dd6cde0eb1e,\n      0xf57d4f7fee6ed178,\n      0x06f067aa72176fba,\n      0x0a637dc5a2c898a6,\n      0x113f9804bef90dae,\n      0x1b710b35131c471b,\n      0x28db77f523047d84,\n      0x32caab7b40c72493,\n      0x3c9ebe0a15c9bebc,\n      0x431d67c49c100d4c,\n      0x4cc5d4becb3e42b6,\n      0x597f299cfc657e2a,\n      0x5fcb6fab3ad6faec,\n      0x6c44198c4a475817\n    );\n    var HASH = new Array(\n      0x6a09e667f3bcc908,\n      0xbb67ae8584caa73b,\n      0x3c6ef372fe94f82b,\n      0xa54ff53a5f1d36f1,\n      0x510e527fade682d1,\n      0x9b05688c2b3e6c1f,\n      0x1f83d9abfb41bd6b,\n      0x5be0cd19137e2179\n    );\n    var W = new Array(80);\n    var a, b, c, d, e, f, g, h, i, j;\n    var T1, T2;\n  }\n\n  function str2binb(str) {\n    var bin = Array();\n    var mask = (1 << chrsz) - 1;\n    for (var i = 0; i < str.length * chrsz; i += chrsz)\n      bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - (i % 32));\n    return bin;\n  }\n\n  function binb2str(bin) {\n    var str = '';\n    var mask = (1 << chrsz) - 1;\n    for (var i = 0; i < bin.length * 32; i += chrsz)\n      str += String.fromCharCode((bin[i >> 5] >>> (24 - (i % 32))) & mask);\n    return str;\n  }\n\n  function binb2hex(binarray) {\n    var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';\n    var str = '';\n    for (var i = 0; i < binarray.length * 4; i++) {\n      str +=\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8 + 4)) & 0xf) +\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8)) & 0xf);\n    }\n    return str;\n  }\n\n  function binb2b64(binarray) {\n    var tab =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var str = '';\n    for (var i = 0; i < binarray.length * 4; i += 3) {\n      var triplet =\n        (((binarray[i >> 2] >> (8 * (3 - (i % 4)))) & 0xff) << 16) |\n        (((binarray[(i + 1) >> 2] >> (8 * (3 - ((i + 1) % 4)))) & 0xff) << 8) |\n        ((binarray[(i + 2) >> 2] >> (8 * (3 - ((i + 2) % 4)))) & 0xff);\n      for (var j = 0; j < 4; j++) {\n        if (i * 8 + j * 6 > binarray.length * 32) str += '';\n        else str += tab.charAt((triplet >> (6 * (3 - j))) & 0x3f);\n      }\n    }\n    return str;\n  }\n\n  function hex_sha2(s) {\n    return binb2hex(core_sha256(str2binb(s), s.length * chrsz));\n  }\n\n  function b64_sha2(s) {\n    return binb2b64(core_sha256(str2binb(s), s.length * chrsz));\n  }\n\n  function str_sha2(s) {\n    return binb2str(core_sha256(str2binb(s), s.length * chrsz));\n  }\n  return hex_sha2(input);\n}",
        "error": null,
        "seed": "function SHA256(input) {\n  var chrsz = 8;\n  var hexcase = 0;\n\n  function safe_add(x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xffff);\n  }\n\n  function S(X, n) {\n    return (X >>> n) | (X << (32 - n));\n  }\n\n  function R(X, n) {\n    return X >>> n;\n  }\n\n  function Ch(x, y, z) {\n    return (x & y) ^ (~x & z);\n  }\n\n  function Maj(x, y, z) {\n    return (x & y) ^ (x & z) ^ (y & z);\n  }\n\n  function Sigma0256(x) {\n    return S(x, 2) ^ S(x, 13) ^ S(x, 22);\n  }\n\n  function Sigma1256(x) {\n    return S(x, 6) ^ S(x, 11) ^ S(x, 25);\n  }\n\n  function Gamma0256(x) {\n    return S(x, 7) ^ S(x, 18) ^ R(x, 3);\n  }\n\n  function Gamma1256(x) {\n    return S(x, 17) ^ S(x, 19) ^ R(x, 10);\n  }\n\n  function Sigma0512(x) {\n    return S(x, 28) ^ S(x, 34) ^ S(x, 39);\n  }\n\n  function Sigma1512(x) {\n    return S(x, 14) ^ S(x, 18) ^ S(x, 41);\n  }\n\n  function Gamma0512(x) {\n    return S(x, 1) ^ S(x, 8) ^ R(x, 7);\n  }\n\n  function Gamma1512(x) {\n    return S(x, 19) ^ S(x, 61) ^ R(x, 6);\n  }\n\n  function core_sha256(m, l) {\n    var K = new Array(\n      0x428a2f98,\n      0x71374491,\n      0xb5c0fbcf,\n      0xe9b5dba5,\n      0x3956c25b,\n      0x59f111f1,\n      0x923f82a4,\n      0xab1c5ed5,\n      0xd807aa98,\n      0x12835b01,\n      0x243185be,\n      0x550c7dc3,\n      0x72be5d74,\n      0x80deb1fe,\n      0x9bdc06a7,\n      0xc19bf174,\n      0xe49b69c1,\n      0xefbe4786,\n      0xfc19dc6,\n      0x240ca1cc,\n      0x2de92c6f,\n      0x4a7484aa,\n      0x5cb0a9dc,\n      0x76f988da,\n      0x983e5152,\n      0xa831c66d,\n      0xb00327c8,\n      0xbf597fc7,\n      0xc6e00bf3,\n      0xd5a79147,\n      0x6ca6351,\n      0x14292967,\n      0x27b70a85,\n      0x2e1b2138,\n      0x4d2c6dfc,\n      0x53380d13,\n      0x650a7354,\n      0x766a0abb,\n      0x81c2c92e,\n      0x92722c85,\n      0xa2bfe8a1,\n      0xa81a664b,\n      0xc24b8b70,\n      0xc76c51a3,\n      0xd192e819,\n      0xd6990624,\n      0xf40e3585,\n      0x106aa070,\n      0x19a4c116,\n      0x1e376c08,\n      0x2748774c,\n      0x34b0bcb5,\n      0x391c0cb3,\n      0x4ed8aa4a,\n      0x5b9cca4f,\n      0x682e6ff3,\n      0x748f82ee,\n      0x78a5636f,\n      0x84c87814,\n      0x8cc70208,\n      0x90befffa,\n      0xa4506ceb,\n      0xbef9a3f7,\n      0xc67178f2\n    );\n    var HASH = new Array(\n      0x6a09e667,\n      0xbb67ae85,\n      0x3c6ef372,\n      0xa54ff53a,\n      0x510e527f,\n      0x9b05688c,\n      0x1f83d9ab,\n      0x5be0cd19\n    );\n    var W = new Array(64);\n    var a, b, c, d, e, f, g, h, i, j;\n    var T1, T2;\n\n    m[l >> 5] |= 0x80 << (24 - (l % 32));\n    m[(((l + 64) >> 9) << 4) + 15] = l;\n\n    for (var i = 0; i < m.length; i += 16) {\n      a = HASH[0];\n      b = HASH[1];\n      c = HASH[2];\n      d = HASH[3];\n      e = HASH[4];\n      f = HASH[5];\n      g = HASH[6];\n      h = HASH[7];\n\n      for (var j = 0; j < 64; j++) {\n        if (j < 16) W[j] = m[j + i];\n        else\n          W[j] = safe_add(\n            safe_add(\n              safe_add(Gamma1256(W[j - 2]), W[j - 7]),\n              Gamma0256(W[j - 15])\n            ),\n            W[j - 16]\n          );\n\n        T1 = safe_add(\n          safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]),\n          W[j]\n        );\n        T2 = safe_add(Sigma0256(a), Maj(a, b, c));\n\n        h = g;\n        g = f;\n        f = e;\n        e = safe_add(d, T1);\n        d = c;\n        c = b;\n        b = a;\n        a = safe_add(T1, T2);\n      }\n\n      HASH[0] = safe_add(a, HASH[0]);\n      HASH[1] = safe_add(b, HASH[1]);\n      HASH[2] = safe_add(c, HASH[2]);\n      HASH[3] = safe_add(d, HASH[3]);\n      HASH[4] = safe_add(e, HASH[4]);\n      HASH[5] = safe_add(f, HASH[5]);\n      HASH[6] = safe_add(g, HASH[6]);\n      HASH[7] = safe_add(h, HASH[7]);\n    }\n    return HASH;\n  }\n\n  function core_sha512(m, l) {\n    var K = new Array(\n      0x428a2f98d728ae22,\n      0x7137449123ef65cd,\n      0xb5c0fbcfec4d3b2f,\n      0xe9b5dba58189dbbc,\n      0x3956c25bf348b538,\n      0x59f111f1b605d019,\n      0x923f82a4af194f9b,\n      0xab1c5ed5da6d8118,\n      0xd807aa98a3030242,\n      0x12835b0145706fbe,\n      0x243185be4ee4b28c,\n      0x550c7dc3d5ffb4e2,\n      0x72be5d74f27b896f,\n      0x80deb1fe3b1696b1,\n      0x9bdc06a725c71235,\n      0xc19bf174cf692694,\n      0xe49b69c19ef14ad2,\n      0xefbe4786384f25e3,\n      0x0fc19dc68b8cd5b5,\n      0x240ca1cc77ac9c65,\n      0x2de92c6f592b0275,\n      0x4a7484aa6ea6e483,\n      0x5cb0a9dcbd41fbd4,\n      0x76f988da831153b5,\n      0x983e5152ee66dfab,\n      0xa831c66d2db43210,\n      0xb00327c898fb213f,\n      0xbf597fc7beef0ee4,\n      0xc6e00bf33da88fc2,\n      0xd5a79147930aa725,\n      0x06ca6351e003826f,\n      0x142929670a0e6e70,\n      0x27b70a8546d22ffc,\n      0x2e1b21385c26c926,\n      0x4d2c6dfc5ac42aed,\n      0x53380d139d95b3df,\n      0x650a73548baf63de,\n      0x766a0abb3c77b2a8,\n      0x81c2c92e47edaee6,\n      0x92722c851482353b,\n      0xa2bfe8a14cf10364,\n      0xa81a664bbc423001,\n      0xc24b8b70d0f89791,\n      0xc76c51a30654be30,\n      0xd192e819d6ef5218,\n      0xd69906245565a910,\n      0xf40e35855771202a,\n      0x106aa07032bbd1b8,\n      0x19a4c116b8d2d0c8,\n      0x1e376c085141ab53,\n      0x2748774cdf8eeb99,\n      0x34b0bcb5e19b48a8,\n      0x391c0cb3c5c95a63,\n      0x4ed8aa4ae3418acb,\n      0x5b9cca4f7763e373,\n      0x682e6ff3d6b2b8a3,\n      0x748f82ee5defb2fc,\n      0x78a5636f43172f60,\n      0x84c87814a1f0ab72,\n      0x8cc702081a6439ec,\n      0x90befffa23631e28,\n      0xa4506cebde82bde9,\n      0xbef9a3f7b2c67915,\n      0xc67178f2e372532b,\n      0xca273eceea26619c,\n      0xd186b8c721c0c207,\n      0xeada7dd6cde0eb1e,\n      0xf57d4f7fee6ed178,\n      0x06f067aa72176fba,\n      0x0a637dc5a2c898a6,\n      0x113f9804bef90dae,\n      0x1b710b35131c471b,\n      0x28db77f523047d84,\n      0x32caab7b40c72493,\n      0x3c9ebe0a15c9bebc,\n      0x431d67c49c100d4c,\n      0x4cc5d4becb3e42b6,\n      0x597f299cfc657e2a,\n      0x5fcb6fab3ad6faec,\n      0x6c44198c4a475817\n    );\n    var HASH = new Array(\n      0x6a09e667f3bcc908,\n      0xbb67ae8584caa73b,\n      0x3c6ef372fe94f82b,\n      0xa54ff53a5f1d36f1,\n      0x510e527fade682d1,\n      0x9b05688c2b3e6c1f,\n      0x1f83d9abfb41bd6b,\n      0x5be0cd19137e2179\n    );\n    var W = new Array(80);\n    var a, b, c, d, e, f, g, h, i, j;\n    var T1, T2;\n  }\n\n  function str2binb(str) {\n    var bin = Array();\n    var mask = (1 << chrsz) - 1;\n    for (var i = 0; i < str.length * chrsz; i += chrsz)\n      bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - (i % 32));\n    return bin;\n  }\n\n  function binb2str(bin) {\n    var str = '';\n    var mask = (1 << chrsz) - 1;\n    for (var i = 0; i < bin.length * 32; i += chrsz)\n      str += String.fromCharCode((bin[i >> 5] >>> (24 - (i % 32))) & mask);\n    return str;\n  }\n\n  function binb2hex(binarray) {\n    var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';\n    var str = '';\n    for (var i = 0; i < binarray.length * 4; i++) {\n      str +=\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8 + 4)) & 0xf) +\n        hex_tab.charAt((binarray[i >> 2] >> ((3 - (i % 4)) * 8)) & 0xf);\n    }\n    return str;\n  }\n\n  function binb2b64(binarray) {\n    var tab =\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var str = '';\n    for (var i = 0; i < binarray.length * 4; i += 3) {\n      var triplet =\n        (((binarray[i >> 2] >> (8 * (3 - (i % 4)))) & 0xff) << 16) |\n        (((binarray[(i + 1) >> 2] >> (8 * (3 - ((i + 1) % 4)))) & 0xff) << 8) |\n        ((binarray[(i + 2) >> 2] >> (8 * (3 - ((i + 2) % 4)))) & 0xff);\n      for (var j = 0; j < 4; j++) {\n        if (i * 8 + j * 6 > binarray.length * 32) str += '';\n        else str += tab.charAt((triplet >> (6 * (3 - j))) & 0x3f);\n      }\n    }\n    return str;\n  }\n\n  function hex_sha2(s) {\n    return binb2hex(core_sha256(str2binb(s), s.length * chrsz));\n  }\n\n  function b64_sha2(s) {\n    return binb2b64(core_sha256(str2binb(s), s.length * chrsz));\n  }\n\n  function str_sha2(s) {\n    return binb2str(core_sha256(str2binb(s), s.length * chrsz));\n  }\n  return hex_sha2(input);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>SHA256</code> should be a function.</p>",
      "testString": "assert(typeof SHA256 === 'function');"
    },
    {
      "text": "<p><code>SHA256(\"Rosetta code\")</code> should return a string.</p>",
      "testString": "assert(typeof SHA256('Rosetta code') === 'string');"
    },
    {
      "text": "<p><code>SHA256(\"Rosetta code\")</code> should return <code>\"764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf\"</code>.</p>",
      "testString": "assert.equal(\n  SHA256('Rosetta code'),\n  '764faf5c61ac315f1497f9dfa542713965b785e5cc2f707d6468d7d1124cdfcf'\n);"
    },
    {
      "text": "<p><code>SHA256(\"SHA-256 Hash\")</code> should return <code>\"bee8c0cabdcf8c7835f40217dd35a8b0dba9134520e633f1c57285f35ca7ee3e\"</code>.</p>",
      "testString": "assert.equal(\n  SHA256('SHA-256 Hash'),\n  'bee8c0cabdcf8c7835f40217dd35a8b0dba9134520e633f1c57285f35ca7ee3e'\n);"
    },
    {
      "text": "<p><code>SHA256(\"implementation\")</code> should return <code>\"da31012c40330e7e21538e7dd57503b16e8a0839159e96137090cccc9910b171\"</code>.</p>",
      "testString": "assert.equal(\n  SHA256('implementation'),\n  'da31012c40330e7e21538e7dd57503b16e8a0839159e96137090cccc9910b171'\n);"
    },
    {
      "text": "<p><code>SHA256(\"algorithm\")</code> should return <code>\"b1eb2ec8ac9f31ff7918231e67f96e6deda83a9ff33ed2c67443f1df81e5ed14\"</code>.</p>",
      "testString": "assert.equal(\n  SHA256('algorithm'),\n  'b1eb2ec8ac9f31ff7918231e67f96e6deda83a9ff33ed2c67443f1df81e5ed14'\n);"
    },
    {
      "text": "<p><code>SHA256(\"language\")</code> should return <code>\"a4ef304ba42a200bafd78b046e0869af9183f6eee5524aead5dcb3a5ab5f8f3f\"</code>.</p>",
      "testString": "assert.equal(\n  SHA256('language'),\n  'a4ef304ba42a200bafd78b046e0869af9183f6eee5524aead5dcb3a5ab5f8f3f'\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <code>SHA-2</code> family is a stronger alternative to <code>SHA-1</code>. The main difference between them is the length of the hash.\nMeaning <code>SHA-1</code> provides a shorter code with fewer possibilities for unique combinations. <code>SHA-2</code> or <code>SHA-256</code> creates a longer and thus more complex hash with more possibilities.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Research implementation details and write a function that takes a string as the parameter and returns a hash using <code>SHA-256</code></p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 115,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
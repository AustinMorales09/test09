{
  "id": "594810f028c0303b75339ad8",
  "title": "Zig-zag matrix",
  "challengeType": 1,
  "forumTopicId": 302348,
  "dashedName": "zig-zag-matrix",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const zm1 = [[0]];\nconst zm2 = [[0, 1], [2, 3]];\nconst zm5 = [\n  [0, 1, 5, 6, 14],\n  [2, 4, 7, 13, 15],\n  [3, 8, 12, 16, 21],\n  [9, 11, 17, 20, 22],\n  [10, 18, 19, 23, 24]\n];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function ZigZagMatrix(n) {\n\n  return [[], []];\n}",
      "error": null,
      "seed": "function ZigZagMatrix(n) {\n\n  return [[], []];\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}",
        "error": null,
        "seed": "function ZigZagMatrix(n) {\n  const mtx = [];\n  for (let i = 0; i < n; i++) {\n    mtx[i] = [];\n  }\n\n  let i = 1;\n  let j = 1;\n  for (let e = 0; e < n * n; e++) {\n    mtx[i - 1][j - 1] = e;\n    if ((i + j) % 2 === 0) {\n      // Even stripes\n      if (j < n) j++;\n      else i += 2;\n      if (i > 1) i--;\n    } else {\n      // Odd stripes\n      if (i < n) i++;\n      else j += 2;\n      if (j > 1) j--;\n    }\n  }\n  return mtx;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>ZigZagMatrix should be a function.</p>",
      "testString": "assert.equal(typeof ZigZagMatrix, 'function');"
    },
    {
      "text": "<p>ZigZagMatrix should return array.</p>",
      "testString": "assert.equal(typeof ZigZagMatrix(1), 'object');"
    },
    {
      "text": "<p>ZigZagMatrix should return an array of nested arrays.</p>",
      "testString": "assert.equal(typeof ZigZagMatrix(1)[0], 'object');"
    },
    {
      "text": "<p>ZigZagMatrix(1) should return [[0]].</p>",
      "testString": "assert.deepEqual(ZigZagMatrix(1), zm1);"
    },
    {
      "text": "<p>ZigZagMatrix(2) should return [[0, 1], [2, 3]].</p>",
      "testString": "assert.deepEqual(ZigZagMatrix(2), zm2);"
    },
    {
      "text": "<p>ZigZagMatrix(5) should return specified matrix.</p>",
      "testString": "assert.deepEqual(ZigZagMatrix(5), zm5);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A 'zig-zag' array is a square arrangement of the first $N^2$ integers, where the numbers increase sequentially as you zig-zag along the array's anti-diagonals.</p>\n<p>For example, for the input <code>5</code>, the following result should be produced:</p>\n<pre>\n 0  1  5  6 14\n 2  4  7 13 15\n 3  8 12 16 21\n 9 11 17 20 22\n10 18 19 23 24\n</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes the size of the zig-zag matrix, and returns the corresponding matrix as two-dimensional array.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 159,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
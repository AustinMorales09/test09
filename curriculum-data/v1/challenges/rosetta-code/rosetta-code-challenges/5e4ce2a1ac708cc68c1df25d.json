{
  "id": "5e4ce2a1ac708cc68c1df25d",
  "title": "Long multiplication",
  "challengeType": 1,
  "forumTopicId": 385269,
  "dashedName": "long-multiplication",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function mult(strNum1, strNum2) {\n\n}",
      "error": null,
      "seed": "function mult(strNum1, strNum2) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function mult(strNum1, strNum2) {\n    var a1 = strNum1.split(\"\").reverse();\n    var a2 = strNum2.toString().split(\"\").reverse();\n    var aResult = new Array;\n\n    for ( var iterNum1 = 0; iterNum1 < a1.length; iterNum1++ ) {\n        for ( var iterNum2 = 0; iterNum2 < a2.length; iterNum2++ ) {\n            var idxIter = iterNum1 + iterNum2;    // Get the current array position.\n            aResult[idxIter] = a1[iterNum1] * a2[iterNum2] + ( idxIter >= aResult.length ? 0 : aResult[idxIter] );\n\n            if ( aResult[idxIter] > 9 ) {    // Carrying\n                aResult[idxIter + 1] = Math.floor( aResult[idxIter] / 10 ) + ( idxIter + 1 >= aResult.length ? 0 : aResult[idxIter + 1] );\n                aResult[idxIter] %= 10;\n            }\n        }\n    }\n    return aResult.reverse().join(\"\");\n}",
        "error": null,
        "seed": "function mult(strNum1, strNum2) {\n    var a1 = strNum1.split(\"\").reverse();\n    var a2 = strNum2.toString().split(\"\").reverse();\n    var aResult = new Array;\n\n    for ( var iterNum1 = 0; iterNum1 < a1.length; iterNum1++ ) {\n        for ( var iterNum2 = 0; iterNum2 < a2.length; iterNum2++ ) {\n            var idxIter = iterNum1 + iterNum2;    // Get the current array position.\n            aResult[idxIter] = a1[iterNum1] * a2[iterNum2] + ( idxIter >= aResult.length ? 0 : aResult[idxIter] );\n\n            if ( aResult[idxIter] > 9 ) {    // Carrying\n                aResult[idxIter + 1] = Math.floor( aResult[idxIter] / 10 ) + ( idxIter + 1 >= aResult.length ? 0 : aResult[idxIter + 1] );\n                aResult[idxIter] %= 10;\n            }\n        }\n    }\n    return aResult.reverse().join(\"\");\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>mult</code> should be a function.</p>",
      "testString": "assert(typeof mult == 'function');"
    },
    {
      "text": "<p><code>mult(\"18446744073709551616\", \"18446744073709551616\")</code> should return a string.</p>",
      "testString": "assert(typeof mult('18446744073709551616', '18446744073709551616') == 'string');"
    },
    {
      "text": "<p><code>mult(\"18446744073709551616\", \"18446744073709551616\")</code> should return <code>\"340282366920938463463374607431768211456\"</code>.</p>",
      "testString": "assert.equal(\n  mult('18446744073709551616', '18446744073709551616'),\n  '340282366920938463463374607431768211456'\n);"
    },
    {
      "text": "<p><code>mult(\"31844674073709551616\", \"1844674407309551616\")</code> should return <code>\"58743055272886011737990786529368211456\"</code>.</p>",
      "testString": "assert.equal(\n  mult('31844674073709551616', '1844674407309551616'),\n  '58743055272886011737990786529368211456'\n);"
    },
    {
      "text": "<p><code>mult(\"1846744073709551616\", \"44844644073709551616\")</code> should return <code>\"82816580680737279241781007431768211456\"</code>.</p>",
      "testString": "assert.equal(\n  mult('1846744073709551616', '44844644073709551616'),\n  '82816580680737279241781007431768211456'\n);"
    },
    {
      "text": "<p><code>mult(\"1844674407370951616\", \"1844674407709551616\")</code> should return <code>\"3402823669833978308014392742590611456\"</code>.</p>",
      "testString": "assert.equal(\n  mult('1844674407370951616', '1844674407709551616'),\n  '3402823669833978308014392742590611456'\n);"
    },
    {
      "text": "<p><code>mult(\"2844674407370951616\", \"1844674407370955616\")</code> should return <code>\"5247498076580334548376218009219475456\"</code>.</p>",
      "testString": "assert.equal(\n  mult('2844674407370951616', '1844674407370955616'),\n  '5247498076580334548376218009219475456'\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Explicitly implement long multiplication.</p>\n<p>This is one possible approach to arbitrary-precision integer algebra.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes two strings of large numbers as parameters. Your function should return the product of these two large numbers as a string.</p>\n<p><strong>Note:</strong> In JavaScript, arithmetic operations are inaccurate with large numbers, so you will have to implement precise multiplication yourself.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 93,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "594810f028c0303b75339acc",
  "title": "ABC Problem",
  "challengeType": 1,
  "forumTopicId": 302220,
  "dashedName": "abc-problem",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const words = ['bark', 'BooK', 'TReAT', 'COMMON', 'squAD', 'conFUSE'];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function canMakeWord(word) {\n\n}",
      "error": null,
      "seed": "function canMakeWord(word) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function canMakeWord(word) {\n  const characters = 'BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM';\n  const blocks = characters.split(' ').map(pair => pair.split(''));\n\n  const letters = [...word.toUpperCase()];\n  let length = letters.length;\n  const copy = new Set(blocks);\n\n  letters.forEach(letter => {\n    for (let block of copy) {\n      const index = block.indexOf(letter);\n\n      if (index !== -1) {\n        length--;\n        copy.delete(block);\n        break;\n      }\n    }\n  });\n  return !length;\n}",
        "error": null,
        "seed": "function canMakeWord(word) {\n  const characters = 'BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM';\n  const blocks = characters.split(' ').map(pair => pair.split(''));\n\n  const letters = [...word.toUpperCase()];\n  let length = letters.length;\n  const copy = new Set(blocks);\n\n  letters.forEach(letter => {\n    for (let block of copy) {\n      const index = block.indexOf(letter);\n\n      if (index !== -1) {\n        length--;\n        copy.delete(block);\n        break;\n      }\n    }\n  });\n  return !length;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>canMakeWord</code> should be a function.</p>",
      "testString": "assert(typeof canMakeWord === 'function');"
    },
    {
      "text": "<p><code>canMakeWord</code> should return a boolean.</p>",
      "testString": "assert(typeof canMakeWord('hi') === 'boolean');"
    },
    {
      "text": "<p><code>canMakeWord(\"bark\")</code> should return true.</p>",
      "testString": "assert(canMakeWord(words[0]));"
    },
    {
      "text": "<p><code>canMakeWord(\"BooK\")</code> should return false.</p>",
      "testString": "assert(!canMakeWord(words[1]));"
    },
    {
      "text": "<p><code>canMakeWord(\"TReAT\")</code> should return true.</p>",
      "testString": "assert(canMakeWord(words[2]));"
    },
    {
      "text": "<p><code>canMakeWord(\"COMMON\")</code> should return false.</p>",
      "testString": "assert(!canMakeWord(words[3]));"
    },
    {
      "text": "<p><code>canMakeWord(\"squAD\")</code> should return true.</p>",
      "testString": "assert(canMakeWord(words[4]));"
    },
    {
      "text": "<p><code>canMakeWord(\"conFUSE\")</code> should return true.</p>",
      "testString": "assert(canMakeWord(words[5]));"
    }
  ],
  "description": "<section id=\"description\">\n<p>You are given a collection of ABC blocks (e.g., childhood alphabet blocks). There are 20 blocks with two letters on each block. A complete alphabet is guaranteed amongst all sides of the blocks. The sample collection of blocks:</p>\n<pre>(B O)\n(X K)\n(D Q)\n(C P)\n(N A)\n(G T)\n(R E)\n(T G)\n(Q D)\n(F S)\n(J W)\n(H U)\n(V I)\n(A N)\n(O B)\n(E R)\n(F S)\n(L Y)\n(P C)\n(Z M)\n</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Implement a function that takes a string (word) and determines whether the word can be spelled with the given collection of blocks.</p>\n<p>Some rules to keep in mind:</p>\n<ul>\n  <li>Once a letter on a block is used, that block cannot be used again.</li>\n  <li>The function should be case-insensitive.</li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 3,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
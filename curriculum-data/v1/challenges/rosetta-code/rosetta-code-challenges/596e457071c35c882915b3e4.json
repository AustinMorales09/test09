{
  "id": "596e457071c35c882915b3e4",
  "title": "Compare a list of strings",
  "challengeType": 1,
  "forumTopicId": 302235,
  "dashedName": "compare-a-list-of-strings",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testCases = [['AA', 'AA', 'AA', 'AA'], ['AA', 'ACB', 'BB', 'CC'], [], ['AA'], ['BB', 'AA']];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function allEqual(arr) {\n\n  return true;\n}\n\nfunction azSorted(arr) {\n\n  return true;\n}",
      "error": null,
      "seed": "function allEqual(arr) {\n\n  return true;\n}\n\nfunction azSorted(arr) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function allEqual(a) {\n  let out = true;\n  let i = 0;\n  while (++i < a.length) {\n    out = out && (a[i - 1] === a[i]);\n  } return out;\n}\n\nfunction azSorted(a) {\n  let out = true;\n  let i = 0;\n  while (++i < a.length) {\n    out = out && (a[i - 1] < a[i]);\n  } return out;\n}",
        "error": null,
        "seed": "function allEqual(a) {\n  let out = true;\n  let i = 0;\n  while (++i < a.length) {\n    out = out && (a[i - 1] === a[i]);\n  } return out;\n}\n\nfunction azSorted(a) {\n  let out = true;\n  let i = 0;\n  while (++i < a.length) {\n    out = out && (a[i - 1] < a[i]);\n  } return out;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>allEqual</code> should be a function.</p>",
      "testString": "assert(typeof allEqual === 'function');"
    },
    {
      "text": "<p><code>azSorted</code> should be a function.</p>",
      "testString": "assert(typeof azSorted === 'function');"
    },
    {
      "text": "<p><code>allEqual([\"AA\", \"AA\", \"AA\", \"AA\"])</code> should return true.</p>",
      "testString": "assert(allEqual(testCases[0]));"
    },
    {
      "text": "<p><code>azSorted([\"AA\", \"AA\", \"AA\", \"AA\"])</code> should return false.</p>",
      "testString": "assert(!azSorted(testCases[0]));"
    },
    {
      "text": "<p><code>allEqual([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> should return false.</p>",
      "testString": "assert(!allEqual(testCases[1]));"
    },
    {
      "text": "<p><code>azSorted([\"AA\", \"ACB\", \"BB\", \"CC\"])</code> should return true.</p>",
      "testString": "assert(azSorted(testCases[1]));"
    },
    {
      "text": "<p><code>allEqual([])</code> should return true.</p>",
      "testString": "assert(allEqual(testCases[2]));"
    },
    {
      "text": "<p><code>azSorted([])</code> should return true.</p>",
      "testString": "assert(azSorted(testCases[2]));"
    },
    {
      "text": "<p><code>allEqual([\"AA\"])</code> should return true.</p>",
      "testString": "assert(allEqual(testCases[3]));"
    },
    {
      "text": "<p><code>azSorted([\"AA\"])</code> should return true.</p>",
      "testString": "assert(azSorted(testCases[3]));"
    },
    {
      "text": "<p><code>allEqual([\"BB\", \"AA\"])</code> should return false.</p>",
      "testString": "assert(!allEqual(testCases[4]));"
    },
    {
      "text": "<p><code>azSorted([\"BB\", \"AA\"])</code> should return false.</p>",
      "testString": "assert(!azSorted(testCases[4]));"
    }
  ],
  "description": "<section id=\"description\">\n<p>A list is an ordered set of values that may contain duplicates. Here is an example:</p>\n<pre><code class=\"language-js\">const list = [['AA',  'BB', 'CC'], ['AA', 'ACB', 'AA'], [], ['AA']];\n</code></pre>\n<p>Given a list of arbitrarily many strings, implement a function for each of the following conditions:</p>\n<ul>\n  <li>test if they are all lexically equal</li>\n  <li>test if every string is lexically less than the one after it  (i.e. whether the list is in strict ascending order)</li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 18,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
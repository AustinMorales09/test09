{
  "id": "5e94a54cc7b022105bf0fd2c",
  "title": "Word frequency",
  "challengeType": 1,
  "forumTopicId": 393913,
  "dashedName": "word-frequency",
  "challengeFiles": [
    {
      "head": "var example_1 = 'Hello hello world';\nvar example_1_solution = [['hello', 2], ['world', 1]];\nvar example_2 = 'The quick brown fox jumped over the lazy dog';\nvar example_2_solution = [['the', 2]];\nvar example_3 = 'Opensource opensource open-source open source';\nvar example_3_solution = [['opensource', 2]];\nvar example_4 = 'Apple App apply aPP aPPlE';\nvar example_4_solution_a = \"[[\\\"app\\\",2],[\\\"apple\\\",2],[\\\"apply\\\",1]]\";\nvar example_4_solution_b = \"[[\\\"apple\\\",2],[\\\"app\\\",2],[\\\"apply\\\",1]]\";\nvar example_5 = 'c d a d c a b d d c';\nvar example_5_solution = [['d', 4], ['c', 3], ['a', 2], ['b', 1]];\nvar example_6 = '';\nvar example_6_solution = [];",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function wordFrequency(txt, n) {\n\n}",
      "error": null,
      "seed": "function wordFrequency(txt, n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function wordFrequency(txt, n) {\n  var words = txt.split(/\\s+/);\n  var wordCount = {};\n  words.forEach(word => {\n    if (word == '') {\n      return;\n    }\n    const lowerWord = word.toLowerCase();\n    wordCount[lowerWord] =\n      lowerWord in wordCount ? wordCount[lowerWord] + 1 : 1;\n  });\n\n  var wordsArray = [];\n  for (let [word, count] of Object.entries(wordCount)) {\n    wordsArray.push([word, count]);\n  }\n\n  wordsArray.sort((a, b) => {\n    if (a[1] !== b[1]) {\n      return b[1] - a[1];\n    } else if (a[0] !== b[0]) {\n      return a[0] < b[0] ? -1 : 1;\n    }\n    return 0;\n  });\n  return wordsArray.slice(0, n);\n}",
        "error": null,
        "seed": "function wordFrequency(txt, n) {\n  var words = txt.split(/\\s+/);\n  var wordCount = {};\n  words.forEach(word => {\n    if (word == '') {\n      return;\n    }\n    const lowerWord = word.toLowerCase();\n    wordCount[lowerWord] =\n      lowerWord in wordCount ? wordCount[lowerWord] + 1 : 1;\n  });\n\n  var wordsArray = [];\n  for (let [word, count] of Object.entries(wordCount)) {\n    wordsArray.push([word, count]);\n  }\n\n  wordsArray.sort((a, b) => {\n    if (a[1] !== b[1]) {\n      return b[1] - a[1];\n    } else if (a[0] !== b[0]) {\n      return a[0] < b[0] ? -1 : 1;\n    }\n    return 0;\n  });\n  return wordsArray.slice(0, n);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>wordFrequency</code> should be a function.</p>",
      "testString": "assert(typeof wordFrequency == 'function');"
    },
    {
      "text": "<p><code>wordFrequency</code> should return an array.</p>",
      "testString": "assert(Array.isArray(wordFrequency('test')));"
    },
    {
      "text": "<p><code>wordFrequency(\"Hello hello world\", 2)</code> should return <code>[['hello', 2], ['world', 1]]</code></p>",
      "testString": "assert.deepEqual(wordFrequency(example_1, 2), example_1_solution);"
    },
    {
      "text": "<p><code>wordFrequency(\"The quick brown fox jumped over the lazy dog\", 1)</code> should return <code>[['the', 2]]</code></p>",
      "testString": "assert.deepEqual(wordFrequency(example_2, 1), example_2_solution);"
    },
    {
      "text": "<p><code>wordFrequency(\"Opensource opensource open-source open source\", 1)</code> should return <code>[['opensource', 2]]</code></p>",
      "testString": "assert.deepEqual(wordFrequency(example_3, 1), example_3_solution);"
    },
    {
      "text": "<p><code>wordFrequency(\"Apple App apply aPP aPPlE\", 3)</code> should return <code>[['app', 2], ['apple', 2], ['apply', 1]]</code> or <code>[['apple', 2], ['app', 2], ['apply', 1]]</code></p>",
      "testString": "const arr = JSON.stringify(wordFrequency(example_4, 3));\nassert(arr === example_4_solution_a || arr === example_4_solution_b);"
    },
    {
      "text": "<p><code>wordFrequency(\"c d a d c a b d d c\", 4)</code> should return <code>[['d', 4], ['c', 3], ['a', 2], ['b', 1]]</code></p>",
      "testString": "assert.deepEqual(wordFrequency(example_5, 4), example_5_solution);"
    },
    {
      "text": "<p><code>wordFrequency(\"\", 5)</code> should return <code>[]</code></p>",
      "testString": "assert.deepEqual(wordFrequency(example_6, 5), example_6_solution);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given a text string and an integer n, return the n most common words in the file (and the number of their occurrences) in decreasing frequency.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function to count the occurrences of each word and return the n most commons words along with the number of their occurrences in decreasing frequency.</p>\n<p>The function should return a 2D array with each of the elements in the following form: <code>[word, freq]</code>. <code>word</code> should be the lowercase version of the word and <code>freq</code> the number denoting the count.</p>\n<p>The function should return an empty array, if no string is provided.</p>\n<p>The function should be case insensitive, for example, the strings \"Hello\" and \"hello\" should be treated the same.</p>\n<p>You can treat words that have special characters such as underscores, dashes, apostrophes, commas, etc., as distinct words.</p>\n<p>For example, given the string \"Hello hello goodbye\", your function should return <code>[['hello', 2], ['goodbye', 1]]</code>.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 154,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
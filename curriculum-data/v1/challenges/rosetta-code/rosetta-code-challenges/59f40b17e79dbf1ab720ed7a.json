{
  "id": "59f40b17e79dbf1ab720ed7a",
  "title": "Department Numbers",
  "challengeType": 1,
  "forumTopicId": 302249,
  "dashedName": "department-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const nums = [1, 2, 3, 4, 5, 6, 7];\nconst total = 12;\nconst len = 14;\nconst result = [\n  [2, 3, 7],\n  [2, 4, 6],\n  [2, 6, 4],\n  [2, 7, 3],\n  [4, 1, 7],\n  [4, 2, 6],\n  [4, 3, 5],\n  [4, 5, 3],\n  [4, 6, 2],\n  [4, 7, 1],\n  [6, 1, 5],\n  [6, 2, 4],\n  [6, 4, 2],\n  [6, 5, 1]\n];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function combinations(possibleNumbers, total) {\n\n  return true;\n}",
      "error": null,
      "seed": "function combinations(possibleNumbers, total) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function combinations(possibleNumbers, total) {\n  let firstNumber;\n  let secondNumber;\n  let thirdNumber;\n  const allCombinations = [];\n\n  for (let i = 0; i < possibleNumbers.length; i += 1) {\n    firstNumber = possibleNumbers[i];\n\n    if (firstNumber % 2 === 0) {\n      for (let j = 0; j < possibleNumbers.length; j += 1) {\n        secondNumber = possibleNumbers[j];\n\n        if (j !== i && firstNumber + secondNumber <= total) {\n          thirdNumber = total - firstNumber - secondNumber;\n\n          if (thirdNumber !== firstNumber && thirdNumber !== secondNumber && possibleNumbers.includes(thirdNumber)) {\n            allCombinations.push([firstNumber, secondNumber, thirdNumber]);\n          }\n        }\n      }\n    }\n  }\n  return allCombinations;\n}",
        "error": null,
        "seed": "function combinations(possibleNumbers, total) {\n  let firstNumber;\n  let secondNumber;\n  let thirdNumber;\n  const allCombinations = [];\n\n  for (let i = 0; i < possibleNumbers.length; i += 1) {\n    firstNumber = possibleNumbers[i];\n\n    if (firstNumber % 2 === 0) {\n      for (let j = 0; j < possibleNumbers.length; j += 1) {\n        secondNumber = possibleNumbers[j];\n\n        if (j !== i && firstNumber + secondNumber <= total) {\n          thirdNumber = total - firstNumber - secondNumber;\n\n          if (thirdNumber !== firstNumber && thirdNumber !== secondNumber && possibleNumbers.includes(thirdNumber)) {\n            allCombinations.push([firstNumber, secondNumber, thirdNumber]);\n          }\n        }\n      }\n    }\n  }\n  return allCombinations;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>combinations</code> should be a function.</p>",
      "testString": "assert(typeof combinations === 'function');"
    },
    {
      "text": "<p><code>combinations([1, 2, 3], 6)</code> should return an Array.</p>",
      "testString": "assert(Array.isArray(combinations([1, 2, 3], 6)));"
    },
    {
      "text": "<p><code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return an array of length 14.</p>",
      "testString": "assert(combinations(nums, total).length === len);"
    },
    {
      "text": "<p><code>combinations([1, 2, 3, 4, 5, 6, 7], 12)</code> should return all valid combinations.</p>",
      "testString": "assert.deepEqual(combinations(nums, total), result);"
    }
  ],
  "description": "<section id=\"description\">\n<p>There is a highly organized city that has decided to assign a number to each of their departments:</p>\n<ul>\n  <li>Police department</li>\n  <li>Sanitation department</li>\n  <li>Fire department</li>\n</ul>\n<p>Each department can have a number between 1 and 7 (inclusive).</p>\n<p>The three department numbers are to be unique (different from each other) and must add up to the number 12.</p>\n<p>The Chief of the Police doesn't like odd numbers and wants to have an even number for his department.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a program which outputs all valid combinations as an array.</p>\n<pre><code class=\"language-js\">[2, 3, 7] [2, 4, 6] [2, 6, 4]\n[2, 7, 3] [4, 1, 7] [4, 2, 6]\n[4, 3, 5] [4, 5, 3] [4, 6, 2]\n[4, 7, 1] [6, 1, 5] [6, 2, 4]\n[6, 4, 2] [6, 5, 1]\n</code></pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 32,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5e6dd1278e6ca105cde40ea9",
  "title": "Longest common subsequence",
  "challengeType": 1,
  "forumTopicId": 385271,
  "dashedName": "longest-common-subsequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function lcs(a, b) {\n\n}",
      "error": null,
      "seed": "function lcs(a, b) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function lcs(a, b) {\n  var aSub = a.substring(0, a.length - 1);\n  var bSub = b.substring(0, b.length - 1);\n\n  if (a.length === 0 || b.length === 0) {\n    return '';\n  } else if (a.charAt(a.length - 1) === b.charAt(b.length - 1)) {\n    return lcs(aSub, bSub) + a.charAt(a.length - 1);\n  } else {\n    var x = lcs(a, bSub);\n    var y = lcs(aSub, b);\n    return (x.length > y.length) ? x : y;\n  }\n}",
        "error": null,
        "seed": "function lcs(a, b) {\n  var aSub = a.substring(0, a.length - 1);\n  var bSub = b.substring(0, b.length - 1);\n\n  if (a.length === 0 || b.length === 0) {\n    return '';\n  } else if (a.charAt(a.length - 1) === b.charAt(b.length - 1)) {\n    return lcs(aSub, bSub) + a.charAt(a.length - 1);\n  } else {\n    var x = lcs(a, bSub);\n    var y = lcs(aSub, b);\n    return (x.length > y.length) ? x : y;\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>lcs</code> should be a function.</p>",
      "testString": "assert(typeof lcs == 'function');"
    },
    {
      "text": "<p><code>lcs(\"thisisatest\", \"testing123testing\")</code> should return a string.</p>",
      "testString": "assert(typeof lcs('thisisatest', 'testing123testing') == 'string');"
    },
    {
      "text": "<p><code>lcs(\"thisisatest\", \"testing123testing\")</code> should return <code>\"tsitest\"</code>.</p>",
      "testString": "assert.equal(lcs('thisisatest', 'testing123testing'), 'tsitest');"
    },
    {
      "text": "<p><code>lcs(\"ABCDGH\", \"AEDFHR\")</code> should return <code>\"ADH\"</code>.</p>",
      "testString": "assert.equal(lcs('ABCDGH', 'AEDFHR'), 'ADH');"
    },
    {
      "text": "<p><code>lcs(\"AGGTAB\", \"GXTXAYB\")</code> should return <code>\"GTAB\"</code>.</p>",
      "testString": "assert.equal(lcs('AGGTAB', 'GXTXAYB'), 'GTAB');"
    },
    {
      "text": "<p><code>lcs(\"BDACDB\", \"BDCB\")</code> should return <code>\"BDCB\"</code>.</p>",
      "testString": "assert.equal(lcs('BDACDB', 'BDCB'), 'BDCB');"
    },
    {
      "text": "<p><code>lcs(\"ABAZDC\", \"BACBAD\")</code> should return <code>\"ABAD\"</code>.</p>",
      "testString": "assert.equal(lcs('ABAZDC', 'BACBAD'), 'ABAD');"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <strong>longest common subsequence</strong> (or <strong>LCS</strong>) of groups A and B is the longest group of elements from A and B that are common between the two groups and in the same order in each group. For example, the sequences <code>1234</code> and <code>1224533324</code> have an LCS of <code>1234</code>:</p>\n<p><u>1234</u></p>\n<p><u>12</u>245<u>3</u>332<u>4</u></p>\n<p>For a string example, consider the sequences <code>thisisatest</code> and <code>testing123testing</code>. An LCS would be <code>tsitest</code>:</p>\n<p><u>t</u>hi<u>si</u>sa<u>test</u></p>\n<p><u>t</u>e<u>s</u>t<u>i</u>ng123<u>test</u>ing.</p>\n<p>Your code only needs to deal with strings.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a case-sensitive function that returns the LCS of two strings. You don't need to show multiple LCS's.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 94,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc7e78",
  "title": "General FizzBuzz",
  "challengeType": 1,
  "forumTopicId": 302273,
  "dashedName": "general-fizzbuzz",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function genFizzBuzz(rules, num) {\n\n}",
      "error": null,
      "seed": "function genFizzBuzz(rules, num) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function genFizzBuzz(rules, num) {\n  let res='';\n  rules.forEach(function (e) {\n    if(num % e[0] == 0)\n      res+=e[1];\n  })\n\n  if(res==''){\n    res=num.toString();\n  }\n\n  return res;\n}",
        "error": null,
        "seed": "function genFizzBuzz(rules, num) {\n  let res='';\n  rules.forEach(function (e) {\n    if(num % e[0] == 0)\n      res+=e[1];\n  })\n\n  if(res==''){\n    res=num.toString();\n  }\n\n  return res;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>genFizzBuzz</code> should be a function.</p>",
      "testString": "assert(typeof genFizzBuzz == 'function');"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 6)</code> should return a string.</p>",
      "testString": "assert(\n  typeof genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    6\n  ) == 'string'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 6)</code> should return <code>\"Fizz\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    6\n  ),\n  'Fizz'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 10)</code> should return <code>\"Buzz\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    10\n  ),\n  'Buzz'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Buzz\"],[5, \"Fizz\"]], 12)</code> should return <code>\"Buzz\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Buzz'],\n      [5, 'Fizz']\n    ],\n    12\n  ),\n  'Buzz'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Buzz\"],[5, \"Fizz\"]], 13)</code> should return <code>\"13\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Buzz'],\n      [5, 'Fizz']\n    ],\n    13\n  ),\n  '13'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Buzz\"],[5, \"Fizz\"]], 15)</code> should return <code>\"BuzzFizz\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Buzz'],\n      [5, 'Fizz']\n    ],\n    15\n  ),\n  'BuzzFizz'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"]], 15)</code> should return <code>\"FizzBuzz\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz']\n    ],\n    15\n  ),\n  'FizzBuzz'\n);"
    },
    {
      "text": "<p><code>genFizzBuzz([[3, \"Fizz\"],[5, \"Buzz\"],[7, \"Baxx\"]], 105)</code> should return <code>\"FizzBuzzBaxx\"</code>.</p>",
      "testString": "assert.equal(\n  genFizzBuzz(\n    [\n      [3, 'Fizz'],\n      [5, 'Buzz'],\n      [7, 'Baxx']\n    ],\n    105\n  ),\n  'FizzBuzzBaxx'\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a generalized version of <a href=\"https://rosettacode.org/wiki/FizzBuzz\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">FizzBuzz</a> that works for any list of factors, along with their words.</p>\n<p>This is basically a \"fizzbuzz\" implementation where the rules of the game are supplied to the user. Create a function to implement this. The function should take two parameters.</p>\n<p>The first will be an array with the FizzBuzz rules. For example: <code>[ [3, \"Fizz\"] , [5, \"Buzz\"] ]</code>.</p>\n<p>This indicates that <code>Fizz</code> should be printed if the number is a multiple of 3 and <code>Buzz</code> if it is a multiple of 5. If it is a multiple of both then the strings should be concatenated in the order specified in the array. In this case, <code>FizzBuzz</code> if the number is a multiple of 3 and 5.</p>\n<p>The second parameter is the number for which the function should return a string as stated above.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 56,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
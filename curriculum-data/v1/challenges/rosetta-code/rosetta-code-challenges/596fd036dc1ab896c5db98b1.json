{
  "id": "596fd036dc1ab896c5db98b1",
  "title": "Convert seconds to compound duration",
  "challengeType": 1,
  "forumTopicId": 302236,
  "dashedName": "convert-seconds-to-compound-duration",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testCases = [7259, 86400, 6000000];\nconst results = ['2 hr, 59 sec', '1 d', '9 wk, 6 d, 10 hr, 40 min'];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function convertSeconds(sec) {\n\n  return true;\n}",
      "error": null,
      "seed": "function convertSeconds(sec) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function convertSeconds(sec) {\n  const localNames = ['wk', 'd', 'hr', 'min', 'sec'];\n  // compoundDuration :: [String] -> Int -> String\n  const compoundDuration = (labels, intSeconds) =>\n    weekParts(intSeconds)\n    .map((v, i) => [v, labels[i]])\n    .reduce((a, x) =>\n      a.concat(x[0] ? [`${x[0]} ${x[1] || '?'}`] : []), []\n    )\n    .join(', ');\n\n    // weekParts :: Int -> [Int]\n  const weekParts = intSeconds => [0, 7, 24, 60, 60]\n    .reduceRight((a, x) => {\n      const r = a.rem;\n      const mod = x !== 0 ? r % x : r;\n\n      return {\n        rem: (r - mod) / (x || 1),\n        parts: [mod].concat(a.parts)\n      };\n    }, {\n      rem: intSeconds,\n      parts: []\n    })\n    .parts;\n\n  return compoundDuration(localNames, sec);\n}",
        "error": null,
        "seed": "function convertSeconds(sec) {\n  const localNames = ['wk', 'd', 'hr', 'min', 'sec'];\n  // compoundDuration :: [String] -> Int -> String\n  const compoundDuration = (labels, intSeconds) =>\n    weekParts(intSeconds)\n    .map((v, i) => [v, labels[i]])\n    .reduce((a, x) =>\n      a.concat(x[0] ? [`${x[0]} ${x[1] || '?'}`] : []), []\n    )\n    .join(', ');\n\n    // weekParts :: Int -> [Int]\n  const weekParts = intSeconds => [0, 7, 24, 60, 60]\n    .reduceRight((a, x) => {\n      const r = a.rem;\n      const mod = x !== 0 ? r % x : r;\n\n      return {\n        rem: (r - mod) / (x || 1),\n        parts: [mod].concat(a.parts)\n      };\n    }, {\n      rem: intSeconds,\n      parts: []\n    })\n    .parts;\n\n  return compoundDuration(localNames, sec);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>convertSeconds</code> should be a function.</p>",
      "testString": "assert(typeof convertSeconds === 'function');"
    },
    {
      "text": "<p><code>convertSeconds(7259)</code> should return <code>2 hr, 59 sec</code>.</p>",
      "testString": "assert.equal(convertSeconds(testCases[0]), results[0]);"
    },
    {
      "text": "<p><code>convertSeconds(86400)</code> should return <code>1 d</code>.</p>",
      "testString": "assert.equal(convertSeconds(testCases[1]), results[1]);"
    },
    {
      "text": "<p><code>convertSeconds(6000000)</code> should return <code>9 wk, 6 d, 10 hr, 40 min</code>.</p>",
      "testString": "assert.equal(convertSeconds(testCases[2]), results[2]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Implement a function which:</p>\n<ul>\n  <li>takes a positive integer representing a duration in seconds as input (e.g., <code>100</code>), and</li>\n  <li>returns a string which shows the same duration decomposed into weeks, days, hours, minutes, and seconds as detailed below (e.g., <code>1 min, 40 sec</code>).</li>\n</ul>\n<p>Demonstrate that it passes the following three test-cases:</p>\n<div style='font-size:115%; font-weight: bold;'>Test Cases</div>\n<table>\n<thead>\n<tr>\n<th>Input number</th>\n<th>Output number</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>7259</td>\n<td><code>2 hr, 59 sec</code></td>\n</tr>\n<tr>\n<td>86400</td>\n<td><code>1 d</code></td>\n</tr>\n<tr>\n<td>6000000</td>\n<td><code>9 wk, 6 d, 10 hr, 40 min</code></td>\n</tr>\n</tbody>\n</table>\n<div style=\"font-size:115%; font-weight: bold;\">Details</div>\n<ul>\n  <li>\n    The following five units should be used:\n<table>\n<thead>\n<tr>\n<th>Unit</th>\n<th>Suffix used in Output</th>\n<th>Conversion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>week</td>\n<td><code>wk</code></td>\n<td>1 week = 7 days</td>\n</tr>\n<tr>\n<td>day</td>\n<td><code>d</code></td>\n<td>1 day = 24 hours</td>\n</tr>\n<tr>\n<td>hour</td>\n<td><code>hr</code></td>\n<td>1 hour = 60 minutes</td>\n</tr>\n<tr>\n<td>minute</td>\n<td><code>min</code></td>\n<td>1 minute = 60 seconds</td>\n</tr>\n<tr>\n<td>second</td>\n<td><code>sec</code></td>\n<td>---</td>\n</tr>\n</tbody>\n</table>\n  </li>\n  <li>\n    However, <strong>only</strong> include quantities with non-zero values in the output (e.g., return <code>1 d</code> and not <code>0 wk, 1 d, 0 hr, 0 min, 0 sec</code>).\n  </li>\n  <li>\n    Give larger units precedence over smaller ones as much as possible (e.g., return <code>2 min, 10 sec</code> and not <code>1 min, 70 sec</code> or <code>130 sec</code>).\n  </li>\n  <li>\n    Mimic the formatting shown in the test-cases (quantities sorted from largest unit to smallest and separated by comma+space; value and unit of each quantity separated by space).\n  </li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 19,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
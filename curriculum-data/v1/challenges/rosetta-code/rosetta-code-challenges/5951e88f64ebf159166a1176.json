{
  "id": "5951e88f64ebf159166a1176",
  "title": "24 game",
  "challengeType": 1,
  "forumTopicId": 302218,
  "dashedName": "24-game",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testCases_ = [\n  '4878',\n  '1234',\n  '6789',\n  '1127'\n];\n\nconst OPERATORS_ = {\n  \"+\": (a, b) => a + b,\n  \"-\": (a, b) => a - b,\n  \"*\": (a, b) => a * b,\n  \"/\": (a, b) => a / b,\n}\n\nconst PRECEDENCE_ = {\n  \"+\": 1,\n  \"-\": 1,\n  \"*\": 2,\n  \"/\": 2,\n}\n\nfunction evaluate_(expression) {\n  expression = expression.replace('/\\s+/g', '');\n  const stack = [];\n  let postfix = \"\";\n\n  // Convert from infix to postfix\n  let head = 0;\n  while (head < expression.length) {\n    let c = expression[head];\n    switch (c) {\n      case \"(\":\n        stack.push(c);\n        break;\n      case \")\":\n        let last = stack.pop();\n        while (last !== \"(\") {\n          postfix += last;\n          last = stack.pop();\n        }\n        break;\n      case \"+\":\n      case \"-\":\n      case \"*\":\n      case \"/\":\n        while (stack.length &&\n               PRECEDENCE_[c] <= PRECEDENCE_[stack[stack.length-1]]) {\n          postfix += stack.pop();\n        }\n        stack.push(c);\n        break;\n      case \"0\":\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        postfix += c;\n        break;\n      default:\n        return false;\n    }\n    head++;\n  }\n\n  // Clear out stack\n  while (stack.length) {\n    postfix += stack.pop();\n  }\n\n  // Evaluate postfix\n  for (let c of postfix) {\n    switch (c) {\n      case \"+\":\n      case \"-\":\n      case \"*\":\n      case \"/\":\n        const b = +stack.pop();\n        const a = +stack.pop();\n        stack.push(OPERATORS_[c](a, b));\n        break;\n      default:\n        stack.push(c);\n    }\n  }\n  return stack.pop();\n}\n\n// Check solution validity\nfunction isValidSolution_(userSolution) {\n  return evaluate_(userSolution) === 24;\n}",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function solve24 (numStr) {\n\n  return true;\n}",
      "error": null,
      "seed": "function solve24 (numStr) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function solve24(numStr) {\n  const digitsArr = numStr.split('');\n  const answers = [];\n\n  const digitPermutations = [];\n  const operatorPermutations = [];\n\n  function generateDigitPermutations (digits, permutations = []) {\n    if (digits.length === 0) {\n      digitPermutations.push(permutations);\n    }\n    else {\n      for (let i = 0; i < digits.length; i++) {\n        const curr = digits.slice();\n        const next = curr.splice(i, 1);\n        generateDigitPermutations(curr.slice(), permutations.concat(next));\n      }\n    }\n  }\n\n  function generateOperatorPermutations (permutations = []) {\n    const operators = ['+', '-', '*', '/'];\n    if (permutations.length === 3) {\n      operatorPermutations.push(permutations);\n    }\n    else {\n      for (let i = 0; i < operators.length; i++) {\n        const curr = permutations.slice();\n        curr.push(operators[i]);\n        generateOperatorPermutations(curr);\n      }\n    }\n  }\n\n  generateDigitPermutations(digitsArr);\n  generateOperatorPermutations();\n\n  interleave();\n\n  return answers[0];\n\n  function interleave () {\n    for (let i = 0; i < digitPermutations.length; i++) {\n      for (let j = 0; j < operatorPermutations.length; j++) {\n        const d = digitPermutations[i];\n        const o = operatorPermutations[j];\n        const perm = [\n          `${d[0]}${o[0]}${d[1]}${o[1]}${d[2]}${o[2]}${d[3]}`,\n          `(${d[0]}${o[0]}${d[1]})${o[1]}${d[2]}${o[2]}${d[3]}`,\n          `${d[0]}${o[0]}(${d[1]}${o[1]}${d[2]})${o[2]}${d[3]}`,\n          `${d[0]}${o[0]}${d[1]}${o[1]}(${d[2]}${o[2]}${d[3]})`,\n          `${d[0]}${o[0]}(${d[1]}${o[1]}${d[2]}${o[2]}${d[3]})`,\n          `(${d[0]}${o[0]}${d[1]}${o[1]}${d[2]})${o[2]}${d[3]}`,\n          `(${d[0]}${o[0]}${d[1]})${o[1]}(${d[2]}${o[2]}${d[3]})`\n        ];\n\n        perm.forEach(combination => {\n          const res = eval(combination);\n\n          if (res === 24) {\n            return answers.push(combination);\n          }\n        });\n      }\n    }\n  }\n}",
        "error": null,
        "seed": "function solve24(numStr) {\n  const digitsArr = numStr.split('');\n  const answers = [];\n\n  const digitPermutations = [];\n  const operatorPermutations = [];\n\n  function generateDigitPermutations (digits, permutations = []) {\n    if (digits.length === 0) {\n      digitPermutations.push(permutations);\n    }\n    else {\n      for (let i = 0; i < digits.length; i++) {\n        const curr = digits.slice();\n        const next = curr.splice(i, 1);\n        generateDigitPermutations(curr.slice(), permutations.concat(next));\n      }\n    }\n  }\n\n  function generateOperatorPermutations (permutations = []) {\n    const operators = ['+', '-', '*', '/'];\n    if (permutations.length === 3) {\n      operatorPermutations.push(permutations);\n    }\n    else {\n      for (let i = 0; i < operators.length; i++) {\n        const curr = permutations.slice();\n        curr.push(operators[i]);\n        generateOperatorPermutations(curr);\n      }\n    }\n  }\n\n  generateDigitPermutations(digitsArr);\n  generateOperatorPermutations();\n\n  interleave();\n\n  return answers[0];\n\n  function interleave () {\n    for (let i = 0; i < digitPermutations.length; i++) {\n      for (let j = 0; j < operatorPermutations.length; j++) {\n        const d = digitPermutations[i];\n        const o = operatorPermutations[j];\n        const perm = [\n          `${d[0]}${o[0]}${d[1]}${o[1]}${d[2]}${o[2]}${d[3]}`,\n          `(${d[0]}${o[0]}${d[1]})${o[1]}${d[2]}${o[2]}${d[3]}`,\n          `${d[0]}${o[0]}(${d[1]}${o[1]}${d[2]})${o[2]}${d[3]}`,\n          `${d[0]}${o[0]}${d[1]}${o[1]}(${d[2]}${o[2]}${d[3]})`,\n          `${d[0]}${o[0]}(${d[1]}${o[1]}${d[2]}${o[2]}${d[3]})`,\n          `(${d[0]}${o[0]}${d[1]}${o[1]}${d[2]})${o[2]}${d[3]}`,\n          `(${d[0]}${o[0]}${d[1]})${o[1]}(${d[2]}${o[2]}${d[3]})`\n        ];\n\n        perm.forEach(combination => {\n          const res = eval(combination);\n\n          if (res === 24) {\n            return answers.push(combination);\n          }\n        });\n      }\n    }\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>solve24</code> should be a function.</p>",
      "testString": "assert(typeof solve24 === 'function');"
    },
    {
      "text": "<p><code>solve24(\"4878\")</code> should return <code>(7-8/8)*4</code>, <code>4*(7-8/8)</code>, or a similar valid string</p>",
      "testString": "assert(isValidSolution_(solve24(testCases_[0])));"
    },
    {
      "text": "<p><code>solve24(\"1234\")</code> should return <code>1*2*3*4</code> or a similar valid string</p>",
      "testString": "assert(isValidSolution_(solve24(testCases_[1])));"
    },
    {
      "text": "<p><code>solve24(\"6789\")</code> should return <code>(6*8)/(9-7)</code>, <code>(8*6)/(9-7)</code>, or a similar valid string</p>",
      "testString": "assert(isValidSolution_(solve24(testCases_[2])));"
    },
    {
      "text": "<p><code>solve24(\"1127\")</code> should return <code>(1+7)*(1+2)</code> or a similar valid string</p>",
      "testString": "assert(isValidSolution_(solve24(testCases_[3])));"
    }
  ],
  "description": "<section id=\"description\">\n<p>The 24 Game tests a person's mental arithmetic.</p>\n<p>The aim of the game is to arrange four numbers in a way that when evaluated, the result is 24</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Implement a function that takes a string of four digits as its argument, with each digit from 1 to 9 (inclusive) with repetitions allowed, and returns an arithmetic expression that evaluates to the number 24. If no such solution exists, return \"no solution exists\".</p>\n<p><strong>Rules:</strong></p>\n<ul>\n  <li> Only the following operators/functions are allowed: multiplication, division, addition, subtraction. </li>\n  <li> Division should use floating point or rational arithmetic, etc, to preserve remainders. </li>\n  <li> Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong). </li>\n  <li> The order of the digits when given does not have to be preserved. </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Example input</th>\n<th>Example output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>solve24(\"4878\");</code></td>\n<td><code>(7-8/8)*4</code></td>\n</tr>\n<tr>\n<td><code>solve24(\"1234\");</code></td>\n<td><code>3*1*4*2</code></td>\n</tr>\n<tr>\n<td><code>solve24(\"6789\");</code></td>\n<td><code>(6*8)/(9-7)</code></td>\n</tr>\n<tr>\n<td><code>solve24(\"1127\");</code></td>\n<td><code>(1+7)*(2+1)</code></td>\n</tr>\n</tbody>\n</table>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
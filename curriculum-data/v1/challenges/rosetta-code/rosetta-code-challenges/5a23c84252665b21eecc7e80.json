{
  "id": "5a23c84252665b21eecc7e80",
  "title": "Gray code",
  "challengeType": 1,
  "forumTopicId": 302276,
  "dashedName": "gray-code",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function gray(enc, number) {\n\n}",
      "error": null,
      "seed": "function gray(enc, number) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function gray(enc, number){\n  if(enc){\n      return number ^ (number >> 1);\n  }else{\n      let n = number;\n\n      while (number >>= 1) {\n          n ^= number;\n      }\n      return n;\n  }\n}",
        "error": null,
        "seed": "function gray(enc, number){\n  if(enc){\n      return number ^ (number >> 1);\n  }else{\n      let n = number;\n\n      while (number >>= 1) {\n          n ^= number;\n      }\n      return n;\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>gray</code> should be a function.</p>",
      "testString": "assert(typeof gray == 'function');"
    },
    {
      "text": "<p><code>gray(true,177)</code> should return a number.</p>",
      "testString": "assert(typeof gray(true, 177) == 'number');"
    },
    {
      "text": "<p><code>gray(true,177)</code> should return <code>233</code>.</p>",
      "testString": "assert.equal(gray(true, 177), 233);"
    },
    {
      "text": "<p><code>gray(true,425)</code> should return <code>381</code>.</p>",
      "testString": "assert.equal(gray(true, 425), 381);"
    },
    {
      "text": "<p><code>gray(true,870)</code> should return <code>725</code>.</p>",
      "testString": "assert.equal(gray(true, 870), 725);"
    },
    {
      "text": "<p><code>gray(false,233)</code> should return <code>177</code>.</p>",
      "testString": "assert.equal(gray(false, 233), 177);"
    },
    {
      "text": "<p><code>gray(false,381)</code> should return <code>425</code>.</p>",
      "testString": "assert.equal(gray(false, 381), 425);"
    },
    {
      "text": "<p><code>gray(false,725)</code> should return <code>870</code>.</p>",
      "testString": "assert.equal(gray(false, 725), 870);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Gray code is a form of binary encoding where transitions between consecutive numbers differ by only one bit.</p>\n<p>This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs.</p>\n<p>It is also useful for generating inputs for Karnaugh maps in order from left to right or top to bottom.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a function to encode a number to and decode a number from Gray code. The function should will have 2 parameters.</p>\n<p>The first would be a boolean. The function should encode for true and decode for false. The second parameter would be the number to be encoded/decoded.</p>\n<p>Display the normal binary representations, Gray code representations, and decoded Gray code values for all 5-bit binary numbers (0-31 inclusive, leading 0's not necessary).</p>\n<p>There are many possible Gray codes. The following encodes what is called \"binary reflected Gray code.\"</p>\n<p>Encoding (MSB is bit 0, b is binary, g is Gray code):</p>\n<pre>if b[i-1] = 1\n  g[i] = not b[i]\nelse\n  g[i] = b[i]\n</pre>\n<p>Or:</p>\n<pre>g = b xor (b logically right shifted 1 time)\n</pre>\n<p>Decoding (MSB is bit 0, b is binary, g is Gray code):</p>\n<pre>b[0] = g[0]<br>\nfor other bits:\nb[i] = g[i] xor b[i-1]\n</pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 59,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "59c3ec9f15068017c96eb8a3",
  "title": "Farey sequence",
  "challengeType": 1,
  "forumTopicId": 302266,
  "dashedName": "farey-sequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function farey(n) {\n\n}",
      "error": null,
      "seed": "function farey(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function farey(n) {\n  const sequence = [{ string: \"0/1\", float: 0.0 }];\n  for (let i = 1; i < n; i++) {\n    for (let j = n; j >= i; j--) {\n      if (i === 1 || j % i > 0) {\n        sequence.push({ string: `${i}/${j}`, float: i / j });\n      }\n    }\n  }\n  return sequence\n    .sort((a, b) => a.float - b.float)\n    .map(e => e.string)\n}",
        "error": null,
        "seed": "function farey(n) {\n  const sequence = [{ string: \"0/1\", float: 0.0 }];\n  for (let i = 1; i < n; i++) {\n    for (let j = n; j >= i; j--) {\n      if (i === 1 || j % i > 0) {\n        sequence.push({ string: `${i}/${j}`, float: i / j });\n      }\n    }\n  }\n  return sequence\n    .sort((a, b) => a.float - b.float)\n    .map(e => e.string)\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>farey</code> should be a function.</p>",
      "testString": "assert(typeof farey === 'function');"
    },
    {
      "text": "<p><code>farey(3)</code> should return an array</p>",
      "testString": "assert(Array.isArray(farey(3)));"
    },
    {
      "text": "<p><code>farey(3)</code> should return <code>['0/1','1/3','1/2','2/3','1/1']</code></p>",
      "testString": "assert.deepEqual(farey(3),['0/1', '1/3', '1/2', '2/3', '1/1']);"
    },
    {
      "text": "<p><code>farey(4)</code> should return <code>['0/1','1/4','1/3','1/2','2/3','3/4','1/1']</code></p>",
      "testString": "assert.deepEqual(farey(4), ['0/1', '1/4', '1/3', '1/2', '2/3', '3/4', '1/1']);"
    },
    {
      "text": "<p><code>farey(5)</code> should return <code>['0/1','1/5','1/4','1/3','2/5','1/2','3/5','2/3','3/4','4/5','1/1']</code></p>",
      "testString": "assert.deepEqual(farey(5), [\n  '0/1',\n  '1/5',\n  '1/4',\n  '1/3',\n  '2/5',\n  '1/2',\n  '3/5',\n  '2/3',\n  '3/4',\n  '4/5',\n  '1/1'\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Farey sequence <code>F<sub>n</sub></code> of order <code>n</code> is the sequence of completely reduced fractions between <code>0</code> and <code>1</code> which, when in lowest terms, have denominators less than or equal to <code>n</code>, arranged in order of increasing size.</p>\n<p>The <em>Farey sequence</em> is sometimes incorrectly called a <em>Farey series</em>.</p>\n<p>Each Farey sequence:</p>\n<ul>\n  <li>starts with the value  0,  denoted by the fraction  $ \\frac{0}{1} $</li>\n  <li>ends with the value  1,  denoted by the fraction  $ \\frac{1}{1}$.</li>\n</ul>\n<p>The Farey sequences of orders <code>1</code> to <code>5</code> are:</p>\n<ul>\n  <li style='list-style: none;'>${\\bf\\it{F}}_1 = \\frac{0}{1}, \\frac{1}{1}$</li>\n  <li style='list-style: none;'>${\\bf\\it{F}}_2 = \\frac{0}{1}, \\frac{1}{2}, \\frac{1}{1}$</li>\n  <li style='list-style: none;'>${\\bf\\it{F}}_3 = \\frac{0}{1}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{1}{1}$</li>\n  <li style='list-style: none;'>${\\bf\\it{F}}_4 = \\frac{0}{1}, \\frac{1}{4}, \\frac{1}{3}, \\frac{1}{2}, \\frac{2}{3}, \\frac{3}{4}, \\frac{1}{1}$</li>\n  <li style='list-style: none;'>${\\bf\\it{F}}_5 = \\frac{0}{1}, \\frac{1}{5}, \\frac{1}{4}, \\frac{1}{3}, \\frac{2}{5}, \\frac{1}{2}, \\frac{3}{5}, \\frac{2}{3}, \\frac{3}{4}, \\frac{4}{5}, \\frac{1}{1}$</li>\n</ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that returns the Farey sequence of order <code>n</code>. The function should have one parameter that is <code>n</code>. It should return the sequence as an array.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 48,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc8013",
  "title": "Sorting algorithms/Strand sort",
  "challengeType": 1,
  "forumTopicId": 302319,
  "dashedName": "sorting-algorithmsstrand-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function strandSort(list) {\n\n}",
      "error": null,
      "seed": "function strandSort(list) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function strandSort(list) {\n  function merge(left, right) {\n    var result = [];\n    while (left.length != 0 && right.length != 0) {\n      if (left[0] <= right[0]) result.push(left.shift());\n      else result.push(right.shift());\n    }\n    result.push.apply(result, left);\n    result.push.apply(result, right);\n    return result;\n  }\n\n  if (list.length <= 1) return list;\n  var result = [];\n  while (list.length > 0) {\n    var sorted = [];\n    sorted.push(list.shift());\n    var len = list.length;\n    for (var i = 1; i < len; i++) {\n      var elem = list[i];\n      if (sorted[i - 1] <= elem) {\n        sorted.push(elem);\n        sorted.splice(i, 1);\n      }\n    }\n\n    result = merge(result, sorted);\n  }\n  return result;\n}",
        "error": null,
        "seed": "function strandSort(list) {\n  function merge(left, right) {\n    var result = [];\n    while (left.length != 0 && right.length != 0) {\n      if (left[0] <= right[0]) result.push(left.shift());\n      else result.push(right.shift());\n    }\n    result.push.apply(result, left);\n    result.push.apply(result, right);\n    return result;\n  }\n\n  if (list.length <= 1) return list;\n  var result = [];\n  while (list.length > 0) {\n    var sorted = [];\n    sorted.push(list.shift());\n    var len = list.length;\n    for (var i = 1; i < len; i++) {\n      var elem = list[i];\n      if (sorted[i - 1] <= elem) {\n        sorted.push(elem);\n        sorted.splice(i, 1);\n      }\n    }\n\n    result = merge(result, sorted);\n  }\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>strandSort</code> should be a function.</p>",
      "testString": "assert(typeof strandSort == 'function');"
    },
    {
      "text": "<p><code>strandSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(strandSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>strandSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(strandSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>strandSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(strandSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>strandSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(strandSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>strandSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(strandSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>strandSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(strandSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <strong>Strand sort</strong> creates sorted subsets that are merged to create the final result.</p>\n<p>Consider an <code>unsortedArray = [3, 1, 4, 2]</code>. Pick the first item <code>3</code> and copy it into a separate array. Search for any bigger item following this item. When you find the a larger item, in this case <code>4</code>, copy it to the separate array, <code>[3, 4]</code>, and compare the following items to this new value, <code>4</code>.</p>\n<p>After you have reached the end of the array, remove the items you copied, <code>[3, 4]</code>, and start again with the first item remaining in the <code>unsortedArray</code>, in this case <code>1</code>.</p>\n<p>Following this process results in two sorted arrays, <code>[3, 4]</code> and <code>[1, 2]</code>. Merge these two arrays to create the <code>strandSortedArray</code>.</p>\n<pre><code class=\"language-js\">const unsortedArray = [3, 1, 4, 2];\nconst strandsortedArray = [1, 2, 3, 4];\n</code></pre>\n<p>Write a function to sort an array using the <strong>Strand sort</strong>. The function should return the sorted array.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 129,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
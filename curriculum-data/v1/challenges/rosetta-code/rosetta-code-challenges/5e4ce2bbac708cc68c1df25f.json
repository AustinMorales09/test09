{
  "id": "5e4ce2bbac708cc68c1df25f",
  "title": "Letter frequency",
  "challengeType": 1,
  "forumTopicId": 385263,
  "dashedName": "letter-frequency",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function letterFrequency(txt) {\n\n}",
      "error": null,
      "seed": "function letterFrequency(txt) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function letterFrequency(txt) {\n    var cs = txt.split(''),\n        i = cs.length,\n        dct =  {},\n        c = '',\n        keys;\n\n    while (i--) {\n        c = cs[i];\n        dct[c] = (dct[c] || 0) + 1;\n    }\n\n    keys = Object.keys(dct);\n    keys.sort();\n    return keys.map(function (c) { return [c, dct[c]]; });\n}",
        "error": null,
        "seed": "function letterFrequency(txt) {\n    var cs = txt.split(''),\n        i = cs.length,\n        dct =  {},\n        c = '',\n        keys;\n\n    while (i--) {\n        c = cs[i];\n        dct[c] = (dct[c] || 0) + 1;\n    }\n\n    keys = Object.keys(dct);\n    keys.sort();\n    return keys.map(function (c) { return [c, dct[c]]; });\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>letterFrequency</code> should be a function.</p>",
      "testString": "assert(typeof letterFrequency == 'function');"
    },
    {
      "text": "<p><code>letterFrequency(\"Not all that Mrs. Bennet, however\")</code> should return an array.</p>",
      "testString": "assert(Array.isArray(letterFrequency('Not all that Mrs. Bennet, however')));"
    },
    {
      "text": "<p><code>letterFrequency(\"Not all that Mrs. Bennet, however\")</code> should return <code>[[\" \", 5], [\",\", 1], [\".\", 1], [\"B\", 1], [\"M\", 1], [\"N\", 1], [\"a\", 2], [\"e\", 4], [\"h\", 2], [\"l\", 2], [\"n\", 2], [\"o\", 2], [\"r\", 2], [\"s\", 1], [\"t\", 4], [\"v\", 1], [\"w\", 1]]</code>.</p>",
      "testString": "assert.deepEqual(letterFrequency('Not all that Mrs. Bennet, however'), [\n  [' ', 5],\n  [',', 1],\n  ['.', 1],\n  ['B', 1],\n  ['M', 1],\n  ['N', 1],\n  ['a', 2],\n  ['e', 4],\n  ['h', 2],\n  ['l', 2],\n  ['n', 2],\n  ['o', 2],\n  ['r', 2],\n  ['s', 1],\n  ['t', 4],\n  ['v', 1],\n  ['w', 1]\n]);"
    },
    {
      "text": "<p><code>letterFrequency(\"daughters, could ask on the \")</code> should return <code>[[\" \", 5],[\",\", 1],[\"a\", 2],[\"c\", 1],[\"d\", 2],[\"e\", 2],[\"g\", 1],[\"h\", 2],[\"k\", 1],[\"l\", 1],[\"n\", 1],[\"o\", 2],[\"r\", 1],[\"s\", 2],[\"t\", 2],[\"u\", 2]]</code>.</p>",
      "testString": "assert.deepEqual(letterFrequency('daughters, could ask on the '), [\n  [' ', 5],\n  [',', 1],\n  ['a', 2],\n  ['c', 1],\n  ['d', 2],\n  ['e', 2],\n  ['g', 1],\n  ['h', 2],\n  ['k', 1],\n  ['l', 1],\n  ['n', 1],\n  ['o', 2],\n  ['r', 1],\n  ['s', 2],\n  ['t', 2],\n  ['u', 2]\n]);"
    },
    {
      "text": "<p><code>letterFrequency(\"husband any satisfactory description\")</code> should return <code>[[\" \", 3], [\"a\", 4], [\"b\", 1], [\"c\", 2], [\"d\", 2], [\"e\", 1], [\"f\", 1], [\"h\", 1], [\"i\", 3], [\"n\", 3], [\"o\", 2], [\"p\", 1], [\"r\", 2], [\"s\", 4], [\"t\", 3], [\"u\", 1], [\"y\", 2]]</code>.</p>",
      "testString": "assert.deepEqual(letterFrequency('husband any satisfactory description'), [\n  [' ', 3],\n  ['a', 4],\n  ['b', 1],\n  ['c', 2],\n  ['d', 2],\n  ['e', 1],\n  ['f', 1],\n  ['h', 1],\n  ['i', 3],\n  ['n', 3],\n  ['o', 2],\n  ['p', 1],\n  ['r', 2],\n  ['s', 4],\n  ['t', 3],\n  ['u', 1],\n  ['y', 2]\n]);"
    },
    {
      "text": "<p><code>letterFrequency(\"in various ways--with barefaced\")</code> should return <code>[[\" \", 3], [\"-\", 2], [\"a\", 4], [\"b\", 1], [\"c\", 1], [\"d\", 1], [\"e\", 2], [\"f\", 1], [\"h\", 1], [\"i\", 3], [\"n\", 1], [\"o\", 1], [\"r\", 2], [\"s\", 2], [\"t\", 1], [\"u\", 1], [\"v\", 1], [\"w\", 2], [\"y\", 1]]</code>.</p>",
      "testString": "assert.deepEqual(letterFrequency('in various ways--with barefaced'), [\n  [' ', 3],\n  ['-', 2],\n  ['a', 4],\n  ['b', 1],\n  ['c', 1],\n  ['d', 1],\n  ['e', 2],\n  ['f', 1],\n  ['h', 1],\n  ['i', 3],\n  ['n', 1],\n  ['o', 1],\n  ['r', 2],\n  ['s', 2],\n  ['t', 1],\n  ['u', 1],\n  ['v', 1],\n  ['w', 2],\n  ['y', 1]\n]);"
    },
    {
      "text": "<p><code>letterFrequency(\"distant surmises; but he eluded\")</code> should return <code>[[\" \", 4], [\";\", 1], [\"a\", 1], [\"b\", 1], [\"d\", 3], [\"e\", 4], [\"h\", 1], [\"i\", 2], [\"l\", 1], [\"m\", 1], [\"n\", 1], [\"r\", 1], [\"s\", 4], [\"t\", 3], [\"u\", 3]]</code>.</p>",
      "testString": "assert.deepEqual(letterFrequency('distant surmises; but he eluded'), [\n  [' ', 4],\n  [';', 1],\n  ['a', 1],\n  ['b', 1],\n  ['d', 3],\n  ['e', 4],\n  ['h', 1],\n  ['i', 2],\n  ['l', 1],\n  ['m', 1],\n  ['n', 1],\n  ['r', 1],\n  ['s', 4],\n  ['t', 3],\n  ['u', 3]\n]);"
    },
    {
      "text": "<p><code>letterFrequency(\"last obliged to accept the second-hand,\")</code> should return <code>[[\" \", 5], [\",\", 1], [\"-\", 1], [\"a\", 3], [\"b\", 1], [\"c\", 3], [\"d\", 3], [\"e\", 4], [\"g\", 1], [\"h\", 2], [\"i\", 1], [\"l\", 2], [\"n\", 2], [\"o\", 3], [\"p\", 1], [\"s\", 2], [\"t\", 4]]</code>.</p>",
      "testString": "assert.deepEqual(letterFrequency('last obliged to accept the second-hand,'), [\n  [' ', 5],\n  [',', 1],\n  ['-', 1],\n  ['a', 3],\n  ['b', 1],\n  ['c', 3],\n  ['d', 3],\n  ['e', 4],\n  ['g', 1],\n  ['h', 2],\n  ['i', 1],\n  ['l', 2],\n  ['n', 2],\n  ['o', 3],\n  ['p', 1],\n  ['s', 2],\n  ['t', 4]\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given a string, calculate the frequency of each character.</p>\n<p>All characters should be counted. This includes lower and upper case letters, digits, whitespace, special characters, or any other distinct characters.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function to count the occurrences of each character in a given string.</p>\n<p>The function should return a 2D array with each of the elements in the following form: <code>['char', freq]</code>. The character should be a string with a length of 1, and frequency is a number denoting the count.</p>\n<p>For example, given the string \"ab\", your function should return <code>[['a', 1], ['b', 1]]</code>.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 90,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc8016",
  "title": "Sort using a custom comparator",
  "challengeType": 1,
  "forumTopicId": 302309,
  "dashedName": "sort-using-a-custom-comparator",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function lengthSorter(arr) {\n\n}",
      "error": null,
      "seed": "function lengthSorter(arr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function lengthSorter(arr) {\n  arr.sort(function(a, b) {\n    var result = b.length - a.length;\n    if (result == 0) result = a.localeCompare(b);\n    return result;\n  });\n  return arr;\n}",
        "error": null,
        "seed": "function lengthSorter(arr) {\n  arr.sort(function(a, b) {\n    var result = b.length - a.length;\n    if (result == 0) result = a.localeCompare(b);\n    return result;\n  });\n  return arr;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>lengthSorter</code> should be a function.</p>",
      "testString": "assert(typeof lengthSorter == 'function');"
    },
    {
      "text": "<p><code>lengthSorter([\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"])</code> should return an array.</p>",
      "testString": "assert(\n  Array.isArray(\n    lengthSorter([\n      'Here',\n      'are',\n      'some',\n      'sample',\n      'strings',\n      'to',\n      'be',\n      'sorted'\n    ])\n  )\n);"
    },
    {
      "text": "<p><code>lengthSorter([\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"])</code> should return <code>[\"strings\", \"sample\", \"sorted\", \"Here\", \"some\", \"are\", \"be\", \"to\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  lengthSorter([\n    'Here',\n    'are',\n    'some',\n    'sample',\n    'strings',\n    'to',\n    'be',\n    'sorted'\n  ]),\n  ['strings', 'sample', 'sorted', 'Here', 'some', 'are', 'be', 'to']\n);"
    },
    {
      "text": "<p><code>lengthSorter([\"I\", \"hope\", \"your\", \"day\", \"is\", \"going\", \"good\", \"?\"])</code> should return <code>[\"going\", \"good\", \"hope\", \"your\", \"day\", \"is\", \"?\",\"I\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  lengthSorter(['I', 'hope', 'your', 'day', 'is', 'going', 'good', '?']),\n  ['going', 'good', 'hope', 'your', 'day', 'is', '?', 'I']\n);"
    },
    {
      "text": "<p><code>lengthSorter([\"Mine\", \"is\", \"going\", \"great\"])</code> should return <code>[\"going\", \"great\", \"Mine\", \"is\"]</code>.</p>",
      "testString": "assert.deepEqual(lengthSorter(['Mine', 'is', 'going', 'great']), [\n  'going',\n  'great',\n  'Mine',\n  'is'\n]);"
    },
    {
      "text": "<p><code>lengthSorter([\"Have\", \"fun\", \"sorting\", \"!!\"])</code> should return <code>[\"sorting\", \"Have\", \"fun\", \"!!\"]</code>.</p>",
      "testString": "assert.deepEqual(lengthSorter(['Have', 'fun', 'sorting', '!!']), [\n  'sorting',\n  'Have',\n  'fun',\n  '!!'\n]);"
    },
    {
      "text": "<p><code>lengthSorter([\"Everything\", \"is\", \"good\", \"!!\"])</code> should return <code>[\"Everything\", \"good\", \"!!\", \"is\"]</code>.</p>",
      "testString": "assert.deepEqual(lengthSorter(['Everything', 'is', 'good', '!!']), [\n  'Everything',\n  'good',\n  '!!',\n  'is'\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function to sort an array (or list) of strings in order of descending length, and in ascending lexicographic order for strings of equal length.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 119,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
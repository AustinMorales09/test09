{
  "id": "594d8d0ab97724821379b1e6",
  "title": "Averages/Mode",
  "challengeType": 1,
  "forumTopicId": 302226,
  "dashedName": "averagesmode",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const arr1 = [1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17];\nconst arr2 = [1, 2, 4, 4, 1];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function mode(arr) {\n\n  return true;\n}",
      "error": null,
      "seed": "function mode(arr) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function mode(arr) {\n  const counter = {};\n  let result = [];\n  let max = 0;\n  // for (const i in arr) {\n  arr.forEach(el => {\n    if (!(el in counter)) {\n      counter[el] = 0;\n    }\n    counter[el]++;\n\n    if (counter[el] === max) {\n      result.push(el);\n    }\n    else if (counter[el] > max) {\n      max = counter[el];\n      result = [el];\n    }\n  });\n  return result;\n}",
        "error": null,
        "seed": "function mode(arr) {\n  const counter = {};\n  let result = [];\n  let max = 0;\n  // for (const i in arr) {\n  arr.forEach(el => {\n    if (!(el in counter)) {\n      counter[el] = 0;\n    }\n    counter[el]++;\n\n    if (counter[el] === max) {\n      result.push(el);\n    }\n    else if (counter[el] > max) {\n      max = counter[el];\n      result = [el];\n    }\n  });\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>mode</code> should be a function.</p>",
      "testString": "assert(typeof mode === 'function');"
    },
    {
      "text": "<p><code>mode([1, 3, 6, 6, 6, 6, 7, 7, 12, 12, 17])</code> should equal <code>[6]</code></p>",
      "testString": "assert.deepEqual(mode(arr1), [6]);"
    },
    {
      "text": "<p><code>mode([1, 2, 4, 4, 1])</code> should equal <code>[1, 4]</code>.</p>",
      "testString": "assert.deepEqual(mode(arr2).sort(), [1, 4]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function <code>mode</code> to find the value that appears most in an array.</p>\n<p>The case where the collection is empty may be ignored. Care must be taken to handle the case where the mode is non-unique.</p>\n<p>If it is not appropriate or possible to support a general collection, use a vector (array), if possible. If it is not appropriate or possible to support an unspecified value type, use integers.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5958469238c0d8d2632f46db",
  "title": "Combinations",
  "challengeType": 1,
  "forumTopicId": 302233,
  "dashedName": "combinations",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testInput1 = [3, 5];\nconst testOutput1 = [[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]];\n\nconst testInput2 = [4, 6];\nconst testOutput2 = [[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 4, 5], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function combinations(m, n) {\n\n  return true;\n}",
      "error": null,
      "seed": "function combinations(m, n) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function combinations(m, n) {\n  const nArr = [...Array(n).keys()];\n\n  return (function generateCombinations (size, numArr) {\n    const ret = [];\n\n    for (let i = 0; i < numArr.length; i++) {\n      if (size === 1) {\n        ret.push([numArr[i]]);\n      }\n      else {\n        const sub = generateCombinations(size - 1, numArr.slice(i + 1, numArr.length));\n        for (let subI = 0; subI < sub.length; subI++) {\n          const next = sub[subI];\n          next.unshift(numArr[i]);\n          ret.push(next);\n        }\n      }\n    }\n    return ret;\n  }(m, nArr));\n}",
        "error": null,
        "seed": "function combinations(m, n) {\n  const nArr = [...Array(n).keys()];\n\n  return (function generateCombinations (size, numArr) {\n    const ret = [];\n\n    for (let i = 0; i < numArr.length; i++) {\n      if (size === 1) {\n        ret.push([numArr[i]]);\n      }\n      else {\n        const sub = generateCombinations(size - 1, numArr.slice(i + 1, numArr.length));\n        for (let subI = 0; subI < sub.length; subI++) {\n          const next = sub[subI];\n          next.unshift(numArr[i]);\n          ret.push(next);\n        }\n      }\n    }\n    return ret;\n  }(m, nArr));\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>combinations</code> should be a function.</p>",
      "testString": "assert(typeof combinations === 'function');"
    },
    {
      "text": "<p><code>combinations(3, 5)</code> should return <code>[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]</code>.</p>",
      "testString": "assert.deepEqual(combinations(testInput1[0], testInput1[1]), testOutput1);"
    },
    {
      "text": "<p><code>combinations(4, 6)</code> should return <code>[[0,1,2,3], [0,1,2,4], [0,1,2,5], [0,1,3,4], [0,1,3,5], [0,1,4,5], [0,2,3,4], [0,2,3,5], [0,2,4,5], [0,3,4,5], [1,2,3,4], [1,2,3,5], [1,2,4,5], [1,3,4,5], [2,3,4,5]]</code></p>",
      "testString": "assert.deepEqual(combinations(testInput2[0], testInput2[1]), testOutput2);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given non-negative integers <code>m</code> and <code>n</code>, generate all size <code>m</code> combinations of the integers from <code>0</code> (zero) to <code>n-1</code> in sorted order (each combination is sorted and the entire table is sorted).</p>\n<p><strong>Example:</strong></p>\n<p><code>3</code> comb <code>5</code> is:</p>\n<pre>0 1 2\n0 1 3\n0 1 4\n0 2 3\n0 2 4\n0 3 4\n1 2 3\n1 2 4\n1 3 4\n2 3 4\n</pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 16,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
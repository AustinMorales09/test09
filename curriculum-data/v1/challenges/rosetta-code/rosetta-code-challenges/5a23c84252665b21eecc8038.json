{
  "id": "5a23c84252665b21eecc8038",
  "title": "Subleq",
  "challengeType": 1,
  "forumTopicId": 302328,
  "dashedName": "subleq",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function Subleq(mem) {\n\n}",
      "error": null,
      "seed": "function Subleq(mem) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function Subleq(mem) {\n  var out = '';\n  var instructionPointer = 0;\n  do {\n    var a = mem[instructionPointer];\n    var b = mem[instructionPointer + 1];\n    if (a === -1) {\n    } else if (b === -1) {\n      out += String.fromCharCode(mem[a]);\n    } else {\n      mem[b] -= mem[a];\n      if (mem[b] < 1) {\n        instructionPointer = mem[instructionPointer + 2];\n        continue;\n      }\n    }\n    instructionPointer += 3;\n  } while (instructionPointer >= 0);\n\n  return out;\n}",
        "error": null,
        "seed": "function Subleq(mem) {\n  var out = '';\n  var instructionPointer = 0;\n  do {\n    var a = mem[instructionPointer];\n    var b = mem[instructionPointer + 1];\n    if (a === -1) {\n    } else if (b === -1) {\n      out += String.fromCharCode(mem[a]);\n    } else {\n      mem[b] -= mem[a];\n      if (mem[b] < 1) {\n        instructionPointer = mem[instructionPointer + 2];\n        continue;\n      }\n    }\n    instructionPointer += 3;\n  } while (instructionPointer >= 0);\n\n  return out;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>Subleq</code> should be a function.</p>",
      "testString": "assert(typeof Subleq == 'function');"
    },
    {
      "text": "<p><code>Subleq([15, 17, -1, 17, -1, -1, 16, 1, -1, 16, 3, -1, 15, 15, 0, 0, -1, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 0])</code> should return a string.</p>",
      "testString": "assert(\n  typeof Subleq([\n    15,\n    17,\n    -1,\n    17,\n    -1,\n    -1,\n    16,\n    1,\n    -1,\n    16,\n    3,\n    -1,\n    15,\n    15,\n    0,\n    0,\n    -1,\n    72,\n    101,\n    108,\n    108,\n    111,\n    44,\n    32,\n    119,\n    111,\n    114,\n    108,\n    100,\n    33,\n    0\n  ]) == 'string'\n);"
    },
    {
      "text": "<p><code>Subleq([15, 17, -1, 17, -1, -1, 16, 1, -1, 16, 3, -1, 15, 15, 0, 0, -1, 72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33, 0])</code> should return <code>\"Hello, world!\"</code>.</p>",
      "testString": "assert.equal(\n  Subleq([\n    15,\n    17,\n    -1,\n    17,\n    -1,\n    -1,\n    16,\n    1,\n    -1,\n    16,\n    3,\n    -1,\n    15,\n    15,\n    0,\n    0,\n    -1,\n    72,\n    101,\n    108,\n    108,\n    111,\n    44,\n    32,\n    119,\n    111,\n    114,\n    108,\n    100,\n    33,\n    0\n  ]),\n  'Hello, world!'\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Subleq is an example of a One-Instruction Set Computer (OISC).</p>\n<p>It is named after its only instruction, which is <strong>SU</strong>btract and <strong>B</strong>ranch if <strong>L</strong>ess than or <strong>EQ</strong>ual to zero.</p>\n<p>Your task is to create an interpreter which emulates such a machine.</p>\n<p>The machine's memory consists of an array of signed integers. Any reasonable word size is fine, but the memory must be able to hold negative as well as positive numbers.</p>\n<p>Execution begins with the instruction pointer aimed at the first word, which is address 0. It proceeds as follows:</p>\n<ol>\n  <li>Let A, B, and C be the value stored in the three consecutive words in memory starting at the instruction pointer.</li>\n  <li>Advance the instruction pointer 3 words to point at the address after the one containing C.</li>\n  <li>If A is -1, then a character is read from standard input and its code point stored in the address given by B. C is unused.</li>\n  <li>If B is -1, then the number contained in the address given by A is interpreted as a code point and the corresponding character output. C is again unused.</li>\n  <li>Otherwise, both A and B are treated as the addresses of memory locations. The number contained in the address given by A is subtracted from the number at the address given by B (and the result stored back in address B). If the result is zero or negative, the value C becomes the new instruction pointer.</li>\n  <li>If the instruction pointer becomes negative, execution halts.</li>\n</ol>\n<p>Other negative addresses besides -1 may be treated as equivalent to -1, or generate an error, as you see fit.</p>\n<p>Your solution should accept a program to execute on the machine, separately from the input fed to the program itself.</p>\n<p>This program should be in raw subleq \"machine code\" - whitespace-separated decimal numbers, with no symbolic names or other assembly-level extensions, to be loaded into memory starting at address 0. Show the output of your solution when fed this \"Hello, world!\" program. (Note that the example assumes ASCII or a superset of it, such as any of the Latin-N character sets or Unicode. You may translate it into another character set if your implementation is on a non-ASCiI-compatible environment.)</p>\n<pre>15 17 -1 17 -1 -1 16 1 -1 16 3 -1 15 15 0 0 -1 72 101 108 108 111 44 32 119 111 114 108 100 33 10 0</pre>\n<p>Which corresponds to something like this in a hypothetical assembler language:</p>\n<pre>start:\n    zero, message, -1\n    message, -1, -1\n    neg1, start+1, -1\n    neg1, start+3, -1\n    zero, zero, start\nzero: 0\nneg1: -1\nmessage: \"Hello, world!\\n\\0\"\n</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes an array of integers as a parameter. This represents the memory elements. The function should interpret the sequence and return the output string. For this task, assume that there is no standard input.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 138,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
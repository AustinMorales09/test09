{
  "id": "595608ff8bcd7a50bd490181",
  "title": "Hailstone sequence",
  "challengeType": 1,
  "forumTopicId": 302279,
  "dashedName": "hailstone-sequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function hailstoneSequence(limit) {\n  const res = [];\n\n\n  return res;\n}",
      "error": null,
      "seed": "function hailstoneSequence(limit) {\n  const res = [];\n\n\n  return res;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function hailstoneSequence (limit) {\n  function hailstone(n) {\n    const seq = [n];\n    while (n > 1) {\n      n = n % 2 ? 3 * n + 1 : n / 2;\n      seq.push(n);\n    }\n    return seq;\n  }\n\n  let n = 0;\n  let max = 0;\n  for (let i = limit; --i;) {\n    const seq = hailstone(i);\n    const sLen = seq.length;\n\n    if (sLen > max) {\n      n = i;\n      max = sLen;\n    }\n  }\n\n  return [n, max];\n}",
        "error": null,
        "seed": "function hailstoneSequence (limit) {\n  function hailstone(n) {\n    const seq = [n];\n    while (n > 1) {\n      n = n % 2 ? 3 * n + 1 : n / 2;\n      seq.push(n);\n    }\n    return seq;\n  }\n\n  let n = 0;\n  let max = 0;\n  for (let i = limit; --i;) {\n    const seq = hailstone(i);\n    const sLen = seq.length;\n\n    if (sLen > max) {\n      n = i;\n      max = sLen;\n    }\n  }\n\n  return [n, max];\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>hailstoneSequence</code> should be a function.</p>",
      "testString": "assert(typeof hailstoneSequence === 'function');"
    },
    {
      "text": "<p><code>hailstoneSequence(30)</code> should return an array.</p>",
      "testString": "assert(Array.isArray(hailstoneSequence(30)));"
    },
    {
      "text": "<p><code>hailstoneSequence(30)</code> should return <code>[27, 112]</code>.</p>",
      "testString": "assert.deepEqual(hailstoneSequence(30), [27, 112]);"
    },
    {
      "text": "<p><code>hailstoneSequence(50000)</code> should return <code>[35655, 324]</code>.</p>",
      "testString": "assert.deepEqual(hailstoneSequence(50000), [35655, 324]);"
    },
    {
      "text": "<p><code>hailstoneSequence(100000)</code> should return <code>[77031, 351]</code>.</p>",
      "testString": "assert.deepEqual(hailstoneSequence(100000), [77031, 351]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Hailstone sequence of numbers can be generated from a starting positive integer, <code>n</code> by:</p>\n<ul>\n<li>If <code>n</code> is <code>1</code> then the sequence ends</li>\n<li>If <code>n</code> is <code>even</code> then the next <code>n</code> of the sequence <code>= n/2</code></li>\n<li>If <code>n</code> is <code>odd</code> then the next <code>n</code> of the sequence <code>= (3 * n) + 1</code></li>\n</ul>\n<p>The (unproven) Collatz conjecture is that the hailstone sequence for any starting number always terminates.</p>\n<p>The hailstone sequence is also known as hailstone numbers (because the values are usually subject to multiple descents and ascents like hailstones in a cloud), or as the Collatz sequence.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<ol>\n<li>Create a routine to generate the hailstone sequence for a number</li>\n<li>Your function should return an array with the number less than <code>limit</code> which has the longest hailstone sequence and that sequence's length. (But don't show the actual sequence!)</li>\n</ol>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 62,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc7ec5",
  "title": "Josephus problem",
  "challengeType": 1,
  "forumTopicId": 302294,
  "dashedName": "josephus-problem",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function josephus(init, kill) {\n\n}",
      "error": null,
      "seed": "function josephus(init, kill) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function josephus(init, kill) {\n  const arr = Array.from(Array(init).keys());\n  let curr = -1\n  while (arr.length > 1) {\n    curr = (curr + kill) % arr.length;\n    arr.splice(curr, 1);\n    curr--;\n  }\n  return arr[0];\n}",
        "error": null,
        "seed": "function josephus(init, kill) {\n  const arr = Array.from(Array(init).keys());\n  let curr = -1\n  while (arr.length > 1) {\n    curr = (curr + kill) % arr.length;\n    arr.splice(curr, 1);\n    curr--;\n  }\n  return arr[0];\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>josephus</code> should be a function.</p>",
      "testString": "assert(typeof josephus == 'function');"
    },
    {
      "text": "<p><code>josephus(30,3)</code> should return a number.</p>",
      "testString": "assert(typeof josephus(30, 3) == 'number');"
    },
    {
      "text": "<p><code>josephus(30,3)</code> should return <code>28</code>.</p>",
      "testString": "assert.equal(josephus(30, 3), 28);"
    },
    {
      "text": "<p><code>josephus(30,5)</code> should return <code>2</code>.</p>",
      "testString": "assert.equal(josephus(30, 5), 2);"
    },
    {
      "text": "<p><code>josephus(20,2)</code> should return <code>8</code>.</p>",
      "testString": "assert.equal(josephus(20, 2), 8);"
    },
    {
      "text": "<p><code>josephus(17,6)</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(josephus(17, 6), 1);"
    },
    {
      "text": "<p><code>josephus(29,4)</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(josephus(29, 4), 1);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Josephus problem is a math puzzle with a grim description: $n$ prisoners are standing on a circle, sequentially numbered from $0$ to $n-1$.</p>\n<p>An executioner walks along the circle, starting from prisoner $0$, removing every $k$-th prisoner and killing him.</p>\n<p>As the process goes on, the circle becomes smaller and smaller, until only one prisoner remains, who is then freed.</p>\n<p>For example, if there are $n=5$ prisoners and $k=2$, the order the prisoners are killed in (let's call it the \"killing sequence\") will be 1, 3, 0, and 4, and the survivor will be #2.</p>\n<p>Given any $n, k > 0$, find out which prisoner will be the final survivor.</p>\n<p>In one such incident, there were 41 prisoners and every 3<sup>rd</sup> prisoner was being killed ($k=3$).</p>\n<p>Among them was a clever chap name Josephus who worked out the problem, stood at the surviving position, and lived on to tell the tale.</p>\n<p>Which number was he?</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes the initial number of prisoners and <code>k</code> as parameters and returns the number of the prisoner that survives.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 76,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
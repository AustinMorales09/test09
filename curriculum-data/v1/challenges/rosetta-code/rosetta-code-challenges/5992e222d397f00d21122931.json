{
  "id": "5992e222d397f00d21122931",
  "title": "Fibonacci word",
  "challengeType": 1,
  "forumTopicId": 302269,
  "dashedName": "fibonacci-word",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const words5 = [\n  { N: 1, Length: 1, Entropy: 0, Word: '1' },\n  { N: 2, Length: 1, Entropy: 0, Word: '0' },\n  { N: 3, Length: 2, Entropy: 1, Word: '01' },\n  { N: 4, Length: 3, Entropy: 0.91829583, Word: '010' },\n  { N: 5, Length: 5, Entropy: 0.97095059, Word: '01001' }\n];\n\nconst words7 = [\n  { N: 1, Length: 1, Entropy: 0, Word: '1' },\n  { N: 2, Length: 1, Entropy: 0, Word: '0' },\n  { N: 3, Length: 2, Entropy: 1, Word: '01' },\n  { N: 4, Length: 3, Entropy: 0.91829583, Word: '010' },\n  { N: 5, Length: 5, Entropy: 0.97095059, Word: '01001' },\n  { N: 6, Length: 8, Entropy: 0.954434, Word: '01001010' },\n  { N: 7, Length: 13, Entropy: 0.9612366, Word: '0100101001001' }\n];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function fibWord(n) {\n\n}",
      "error": null,
      "seed": "function fibWord(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "// Round to digits\nfunction roundFloat(num, digits) {\n  return Math.round(num * 10.0**digits) / (10.0**digits);\n}\n\n// Entropy calculation for string with only 0 and 1\nfunction entropy(word) {\n  function digitEntropy(count) {\n    return count < 1 ? 0\n      : - count / word.length * Math.log2(count / word.length);\n  }\n  const numZeros = word.split('').filter(e => e === '0').length;\n  const numOnes  = word.length - numZeros;\n  return roundFloat(digitEntropy(numZeros) + digitEntropy(numOnes), 8);\n}\n\n// Compute array of Fibonacci words\nfunction fibWord(n) {\n  return [...Array(n).keys()]\n    .reduce((words, i) => {\n      const word = i === 0 ? \"1\"\n                 : i === 1 ? \"0\"\n                 : words[i - 1].Word + words[i - 2].Word;\n      words.push(\n        { N: i + 1, Length: word.length, Entropy: entropy(word), Word: word }\n      );\n      return words;\n    }, []);\n}",
        "error": null,
        "seed": "// Round to digits\nfunction roundFloat(num, digits) {\n  return Math.round(num * 10.0**digits) / (10.0**digits);\n}\n\n// Entropy calculation for string with only 0 and 1\nfunction entropy(word) {\n  function digitEntropy(count) {\n    return count < 1 ? 0\n      : - count / word.length * Math.log2(count / word.length);\n  }\n  const numZeros = word.split('').filter(e => e === '0').length;\n  const numOnes  = word.length - numZeros;\n  return roundFloat(digitEntropy(numZeros) + digitEntropy(numOnes), 8);\n}\n\n// Compute array of Fibonacci words\nfunction fibWord(n) {\n  return [...Array(n).keys()]\n    .reduce((words, i) => {\n      const word = i === 0 ? \"1\"\n                 : i === 1 ? \"0\"\n                 : words[i - 1].Word + words[i - 2].Word;\n      words.push(\n        { N: i + 1, Length: word.length, Entropy: entropy(word), Word: word }\n      );\n      return words;\n    }, []);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>fibWord</code> should be a function.</p>",
      "testString": "assert(typeof fibWord === 'function');"
    },
    {
      "text": "<p><code>fibWord(5)</code> should return an array.</p>",
      "testString": "assert(Array.isArray(fibWord(5)));"
    },
    {
      "text": "<p><code>fibWord(5)</code> should return <code>[{ N:1, Length:1, Entropy:0, Word:\"1\" },{ N:2, Length:1, Entropy:0, Word:\"0\" },{ N:3, Length:2, Entropy:1, Word:\"01\" },{ N:4, Length:3, Entropy:0.91829583, Word:\"010\" },{ N:5, Length:5, Entropy:0.97095059, Word:\"01001\" }]</code>.</p>",
      "testString": "assert.deepEqual(fibWord(5), words5);"
    },
    {
      "text": "<p><code>fibWord(7)</code> should return <code>[{ N:1, Length:1, Entropy:0, Word:\"1\" },{ N:2, Length:1, Entropy:0, Word:\"0\" },{ N:3, Length:2, Entropy:1, Word:\"01\" },{ N:4, Length:3, Entropy:0.91829583, Word:\"010\" },{ N:5, Length:5, Entropy:0.97095059, Word:\"01001\" }, { N:6, Length:8, Entropy:0.954434, Word:'01001010' }, { N:7, Length:13, Entropy:0.9612366, Word:'0100101001001' }]</code>.</p>",
      "testString": "assert.deepEqual(fibWord(7), words7);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Fibonacci Word Sequence may be created in a manner analogous to the Fibonacci Sequence, but it focuses on iterating concatenation.</p>\n<pre>Define  F_Word<sub>1</sub>  as  <strong>1</strong>\nDefine  F_Word<sub>2</sub>  as  <strong>0</strong>\nForm   F_Word<sub>3</sub>  as  F_Word<sub>2</sub>   concatenated with  F_Word<sub>1</sub>   i.e.:  <strong>01</strong>\nForm   F_Word<sub>n</sub>  as  F_Word<sub>n-1</sub>  concatenated with  F_word<sub>n-2</sub>\n</pre>\n<p>Entropy calculation is required in this challenge, <a href=\"https://www.freecodecamp.org/learn/coding-interview-prep/rosetta-code/entropy\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">as shown in this Rosetta Code challenge</a></p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function to return the first <code>n</code> Fibonacci Words. The number of <code>n</code> is provided as a parameter to the function. The function should return an array of objects. The objects should be of the form: <code>{ N: 1, Length: 1, Entropy: 0, Word: '1' }</code>. <code>Entropy</code> is computed for the string <code>Word</code> and rounded to 8 decimal digits of accuracy. Note that the indices of this sequence start at <code>1</code>.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 51,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
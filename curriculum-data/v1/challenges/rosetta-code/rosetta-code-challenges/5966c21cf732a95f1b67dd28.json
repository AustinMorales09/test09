{
  "id": "5966c21cf732a95f1b67dd28",
  "title": "Date manipulation",
  "challengeType": 1,
  "forumTopicId": 302244,
  "dashedName": "date-manipulation",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function add12Hours(dateString) {\n\n  return true;\n}",
      "error": null,
      "seed": "function add12Hours(dateString) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function add12Hours(dateString) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'];\n  // Get the parts of the string\n  const parts = dateString.split(' ');\n  const month = months.indexOf(parts[0]);\n  const day = parseInt(parts[1], 10);\n  const year = parseInt(parts[2], 10);\n  const time = parts[3].split(':');\n  let hours = parseInt(time[0], 10);\n  if (time[1].slice(-2) === 'pm') {\n    hours += 12;\n  }\n  const minutes = parseInt(time[1].slice(0, -2), 10);\n\n  // Create a date with given parts, and updated hours\n  const date = new Date();\n  date.setFullYear(year, month, day);\n  date.setHours(hours + 12);  // Add 12 hours\n  date.setMinutes(minutes);\n\n  let hoursOutput = date.getHours();\n  let abbreviation = 'am';\n  if (hoursOutput > 12) {\n    hoursOutput -= 12;\n    abbreviation = 'pm';\n  }\n\n  return `${months[date.getMonth()]} ${date.getDate()} ${date.getFullYear()} ${hoursOutput}:${date.getMinutes()}${abbreviation} EST`;\n}",
        "error": null,
        "seed": "function add12Hours(dateString) {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'];\n  // Get the parts of the string\n  const parts = dateString.split(' ');\n  const month = months.indexOf(parts[0]);\n  const day = parseInt(parts[1], 10);\n  const year = parseInt(parts[2], 10);\n  const time = parts[3].split(':');\n  let hours = parseInt(time[0], 10);\n  if (time[1].slice(-2) === 'pm') {\n    hours += 12;\n  }\n  const minutes = parseInt(time[1].slice(0, -2), 10);\n\n  // Create a date with given parts, and updated hours\n  const date = new Date();\n  date.setFullYear(year, month, day);\n  date.setHours(hours + 12);  // Add 12 hours\n  date.setMinutes(minutes);\n\n  let hoursOutput = date.getHours();\n  let abbreviation = 'am';\n  if (hoursOutput > 12) {\n    hoursOutput -= 12;\n    abbreviation = 'pm';\n  }\n\n  return `${months[date.getMonth()]} ${date.getDate()} ${date.getFullYear()} ${hoursOutput}:${date.getMinutes()}${abbreviation} EST`;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>add12Hours</code> should be a function.</p>",
      "testString": "assert(typeof add12Hours === 'function');"
    },
    {
      "text": "<p><code>add12Hours(dateString)</code> should return a string.</p>",
      "testString": "assert(typeof add12Hours('January 17 2017 11:43am EST') === 'string');"
    },
    {
      "text": "<p><code>add12Hours(\"January 17 2017 11:43am EST\")</code> should return <code>\"January 17 2017 11:43pm EST\"</code></p>",
      "testString": "assert(\n  add12Hours('January 17 2017 11:43am EST') === 'January 17 2017 11:43pm EST'\n);"
    },
    {
      "text": "<p>Should handle day change. <code>add12Hours(\"March 6 2009 7:30pm EST\")</code> should return <code>\"March 7 2009 7:30am EST\"</code></p>",
      "testString": "assert(add12Hours('March 6 2009 7:30pm EST') === 'March 7 2009 7:30am EST');"
    },
    {
      "text": "<p>Should handle month change in a leap years. <code>add12Hours(\"February 29 2004 9:15pm EST\")</code> should return <code>\"March 1 2004 9:15am EST\"</code></p>",
      "testString": "assert(add12Hours('February 29 2004 9:15pm EST') === 'March 1 2004 9:15am EST');"
    },
    {
      "text": "<p>Should handle month change in a common years. <code>add12Hours(\"February 28 1999 3:15pm EST\")</code> should return <code>\"March 1 1999 3:15am EST\"</code></p>",
      "testString": "assert(add12Hours('February 28 1999 3:15pm EST') === 'March 1 1999 3:15am EST');"
    },
    {
      "text": "<p>Should handle year change. <code>add12Hours(\"December 31 2020 1:45pm EST\")</code> should return <code>\"January 1 2021 1:45am EST\"</code></p>",
      "testString": "assert(\n  add12Hours('December 31 2020 1:45pm EST') === 'January 1 2021 1:45am EST'\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given a date string in EST, output the given date as a string with 12 hours added to the time. Time zone should be preserved.</p>\n<p>Example input: <code>\"March 6 2009 7:30pm EST\"</code></p>\n<p>Example output: <code>\"March 7 2009 7:30am EST\"</code></p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 27,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
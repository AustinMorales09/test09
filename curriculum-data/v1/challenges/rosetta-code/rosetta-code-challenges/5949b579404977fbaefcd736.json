{
  "id": "5949b579404977fbaefcd736",
  "title": "9 billion names of God the integer",
  "challengeType": 1,
  "forumTopicId": 302219,
  "dashedName": "9-billion-names-of-god-the-integer",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function numberOfNames(num) {\n\n  return true;\n}",
      "error": null,
      "seed": "function numberOfNames(num) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function numberOfNames(num) {\n  const cache = [\n    [1]\n  ];\n  for (let l = cache.length; l < num + 1; l++) {\n    let Aa;\n    let Mi;\n    const r = [0];\n    for (let x = 1; x < l + 1; x++) {\n      r.push(r[r.length - 1] + (Aa = cache[l - x < 0 ? cache.length - (l - x) : l - x])[(Mi = Math.min(x, l - x)) < 0 ? Aa.length - Mi : Mi]);\n    }\n    cache.push(r);\n  }\n  return cache[num][cache[num].length - 1];\n}",
        "error": null,
        "seed": "function numberOfNames(num) {\n  const cache = [\n    [1]\n  ];\n  for (let l = cache.length; l < num + 1; l++) {\n    let Aa;\n    let Mi;\n    const r = [0];\n    for (let x = 1; x < l + 1; x++) {\n      r.push(r[r.length - 1] + (Aa = cache[l - x < 0 ? cache.length - (l - x) : l - x])[(Mi = Math.min(x, l - x)) < 0 ? Aa.length - Mi : Mi]);\n    }\n    cache.push(r);\n  }\n  return cache[num][cache[num].length - 1];\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>numberOfNames</code> should be function.</p>",
      "testString": "assert(typeof numberOfNames === 'function');"
    },
    {
      "text": "<p><code>numberOfNames(5)</code> should equal 7.</p>",
      "testString": "assert.equal(numberOfNames(5), 7);"
    },
    {
      "text": "<p><code>numberOfNames(12)</code> should equal 77.</p>",
      "testString": "assert.equal(numberOfNames(12), 77);"
    },
    {
      "text": "<p><code>numberOfNames(18)</code> should equal 385.</p>",
      "testString": "assert.equal(numberOfNames(18), 385);"
    },
    {
      "text": "<p><code>numberOfNames(23)</code> should equal 1255.</p>",
      "testString": "assert.equal(numberOfNames(23), 1255);"
    },
    {
      "text": "<p><code>numberOfNames(42)</code> should equal 53174.</p>",
      "testString": "assert.equal(numberOfNames(42), 53174);"
    },
    {
      "text": "<p><code>numberOfNames(123)</code> should equal 2552338241.</p>",
      "testString": "assert.equal(numberOfNames(123), 2552338241);"
    }
  ],
  "description": "<section id=\"description\">\n<p>This task is a variation of the short story by Arthur C. Clarke.</p>\n<p>(Solvers should be aware of the consequences of completing this task.)</p>\n<p>In detail, to specify what is meant by a \"name\":</p>\n<ul>\n  <li>The integer 1 has 1 name \"1\".</li>\n  <li>The integer 2 has 2 names \"1+1\" and \"2\".</li>\n  <li>The integer 3 has 3 names \"1+1+1\", \"2+1\",  and \"3\".</li>\n  <li>The integer 4 has 5 names \"1+1+1+1\", \"2+1+1\", \"2+2\", \"3+1\", \"4\".</li>\n  <li>The integer 5 has 7 names \"1+1+1+1+1\", \"2+1+1+1\", \"2+2+1\", \"3+1+1\", \"3+2\", \"4+1\", \"5\".</li>\n</ul>\n<p>This can be visualized in the following form:</p>\n<pre>          1\n        1   1\n      1   1   1\n    1   2   1   1\n  1   2   2   1   1\n1   3   3   2   1   1\n</pre>\n<p>Where row $n$ corresponds to integer $n$, and each column $C$ in row $m$ from left to right corresponds to the number of names beginning with $C$.</p>\n<p>Optionally note that the sum of the $n$-th row $P(n)$ is the integer partition function.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Implement a function that returns the sum of the $n$-th row.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 2,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
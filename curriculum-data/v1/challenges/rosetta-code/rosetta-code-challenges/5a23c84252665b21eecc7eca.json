{
  "id": "5a23c84252665b21eecc7eca",
  "title": "Kaprekar numbers",
  "challengeType": 1,
  "forumTopicId": 302296,
  "dashedName": "kaprekar-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isKaprekar(n, bs) {\n\n}",
      "error": null,
      "seed": "function isKaprekar(n, bs) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isKaprekar(n, bs) {\n  if (n < 1) return false;\n  if (n == 1) return true;\n  for (var a = n * n, b = 0, s = 1; a; s *= bs) {\n    b += (a % bs) * s;\n    a = Math.floor(a / bs);\n    if (b && a + b == n) return true;\n  }\n  return false;\n}",
        "error": null,
        "seed": "function isKaprekar(n, bs) {\n  if (n < 1) return false;\n  if (n == 1) return true;\n  for (var a = n * n, b = 0, s = 1; a; s *= bs) {\n    b += (a % bs) * s;\n    a = Math.floor(a / bs);\n    if (b && a + b == n) return true;\n  }\n  return false;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isKaprekar</code> should be a function.</p>",
      "testString": "assert(typeof isKaprekar == 'function');"
    },
    {
      "text": "<p><code>isKaprekar(1, 10)</code> should return a boolean.</p>",
      "testString": "assert(typeof isKaprekar(1, 10) == 'boolean');"
    },
    {
      "text": "<p><code>isKaprekar(1, 10)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isKaprekar(1, 10), true);"
    },
    {
      "text": "<p><code>isKaprekar(9, 10)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isKaprekar(9, 10), true);"
    },
    {
      "text": "<p><code>isKaprekar(2223, 10)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isKaprekar(2223, 10), true);"
    },
    {
      "text": "<p><code>isKaprekar(22823, 10)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isKaprekar(22823, 10), false);"
    },
    {
      "text": "<p><code>isKaprekar(9, 17)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isKaprekar(9, 17), false);"
    },
    {
      "text": "<p><code>isKaprekar(225, 17)</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isKaprekar(225, 17), true);"
    },
    {
      "text": "<p><code>isKaprekar(999, 17)</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isKaprekar(999, 17), false);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A positive integer is a Kaprekar number if:</p>\n<ul>\n  <li>It is 1, or,</li>\n  <li>The decimal representation of its square may be split once into two parts consisting of positive integers which sum to the original number. </li>\n</ul>\n<p>Note that a split resulting in a part consisting purely of 0s is not valid, as 0 is not considered positive.</p>\n<p>Example Kaprekar numbers:</p>\n<ul>\n  <li><code>2223</code> is a Kaprekar number, as <code>2223 * 2223 = 4941729</code>, <code>4941729</code> may be split to <code>494</code> and <code>1729</code>, and <code>494 + 1729 = 2223</code></li>\n  <li>The series of Kaprekar numbers is known as A006886, and begins as <code>1, 9, 45, 55, ...</code></li>\n</ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a number $n$, a base $bs$, and returns true if the number is a Kaprekar number for the given base. Otherwise, the function returns false.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 78,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "594810f028c0303b75339ad3",
  "title": "Vector dot product",
  "challengeType": 1,
  "forumTopicId": 302343,
  "dashedName": "vector-dot-product",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function dotProduct(...vectors) {\n\n}",
      "error": null,
      "seed": "function dotProduct(...vectors) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function dotProduct(...vectors) {\n  if (!vectors || !vectors.length || vectors.length > 2 || vectors[0].length !== vectors[1].length) {\n    return null;\n  }\n  const vectorLen = vectors[0].length;\n\n  let prod = 0;\n  let sum = 0;\n  let j = vectorLen;\n  let i = 2;\n  // Sum terms\n  while (j--) {\n    i = 2;\n    prod = 1;\n\n    while (i--) {\n      prod *= vectors[i][j];\n    }\n    sum += prod;\n  }\n  return sum;\n}",
        "error": null,
        "seed": "function dotProduct(...vectors) {\n  if (!vectors || !vectors.length || vectors.length > 2 || vectors[0].length !== vectors[1].length) {\n    return null;\n  }\n  const vectorLen = vectors[0].length;\n\n  let prod = 0;\n  let sum = 0;\n  let j = vectorLen;\n  let i = 2;\n  // Sum terms\n  while (j--) {\n    i = 2;\n    prod = 1;\n\n    while (i--) {\n      prod *= vectors[i][j];\n    }\n    sum += prod;\n  }\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>dotProduct</code> should be a function.</p>",
      "testString": "assert.equal(typeof dotProduct, 'function');"
    },
    {
      "text": "<p><code>dotProduct()</code> should return <code>null</code>.</p>",
      "testString": "assert.equal(dotProduct(), null);"
    },
    {
      "text": "<p><code>dotProduct([1], [1])</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(dotProduct([1], [1]), 1);"
    },
    {
      "text": "<p><code>dotProduct([1], [1, 2])</code> should return <code>null</code>.</p>",
      "testString": "assert.equal(dotProduct([1], [1, 2]), null);"
    },
    {
      "text": "<p><code>dotProduct([1, 3, -5], [4, -2, -1])</code> should return <code>3</code>.</p>",
      "testString": "assert.equal(dotProduct([1, 3, -5], [4, -2, -1]), 3);"
    },
    {
      "text": "<p><code>dotProduct([3, 2, 1], [2, 4, 2], [5, 3, 1])</code> should return <code>null</code>.</p>",
      "testString": "assert.equal(dotProduct([3, 2, 1], [2, 4, 2], [5, 3, 1]), null);"
    },
    {
      "text": "<p><code>dotProduct([ 0, 3, 6, 9, 12 ], [ 0, 4, 8, 12, 16 ])</code> should return <code>360</code>.</p>",
      "testString": "assert.equal(dotProduct([ 0, 3, 6, 9, 12 ], [ 0, 4, 8, 12, 16 ]), 360);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A vector can have one or more values represented by an ordered collection. Examples could be (x), (x, y), or (x, y, z).</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes two vectors (represented as one-dimensional arrays) as input and computes their dot product. Your function should return <code>null</code> on invalid inputs such as vectors of different lengths or passing anything other than two vectors.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 153,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
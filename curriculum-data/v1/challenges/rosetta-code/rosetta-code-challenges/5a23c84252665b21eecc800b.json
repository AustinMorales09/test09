{
  "id": "5a23c84252665b21eecc800b",
  "title": "Sorting algorithms/Pancake sort",
  "challengeType": 1,
  "forumTopicId": 302315,
  "dashedName": "sorting-algorithmspancake-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function pancakeSort(arr) {\n\n}",
      "error": null,
      "seed": "function pancakeSort(arr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function pancakeSort(arr) {\n  for (var i = arr.length - 1; i >= 1; i--) {\n    // find the index of the largest element not yet sorted\n    var max_idx = 0;\n    var max = arr[0];\n    for (var j = 1; j <= i; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        max_idx = j;\n      }\n    }\n\n    if (max_idx == i) continue; // element already in place\n\n    var new_slice;\n\n    // flip arr max element to index 0\n    if (max_idx > 0) {\n      new_slice = arr.slice(0, max_idx + 1).reverse();\n      for (var j = 0; j <= max_idx; j++) arr[j] = new_slice[j];\n    }\n\n    // then flip the max element to its place\n    new_slice = arr.slice(0, i + 1).reverse();\n    for (var j = 0; j <= i; j++) arr[j] = new_slice[j];\n  }\n  return arr;\n}",
        "error": null,
        "seed": "function pancakeSort(arr) {\n  for (var i = arr.length - 1; i >= 1; i--) {\n    // find the index of the largest element not yet sorted\n    var max_idx = 0;\n    var max = arr[0];\n    for (var j = 1; j <= i; j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n        max_idx = j;\n      }\n    }\n\n    if (max_idx == i) continue; // element already in place\n\n    var new_slice;\n\n    // flip arr max element to index 0\n    if (max_idx > 0) {\n      new_slice = arr.slice(0, max_idx + 1).reverse();\n      for (var j = 0; j <= max_idx; j++) arr[j] = new_slice[j];\n    }\n\n    // then flip the max element to its place\n    new_slice = arr.slice(0, i + 1).reverse();\n    for (var j = 0; j <= i; j++) arr[j] = new_slice[j];\n  }\n  return arr;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>pancakeSort</code> should be a function.</p>",
      "testString": "assert(typeof pancakeSort == 'function');"
    },
    {
      "text": "<p><code>pancakeSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(pancakeSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>pancakeSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(pancakeSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>pancakeSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(pancakeSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>pancakeSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(pancakeSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>pancakeSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(pancakeSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>pancakeSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(pancakeSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function to sort an array of integers (of any convenient size) into ascending order using Pancake sorting. The function should return the sorted array.</p>\n<p>In short, instead of individual elements being sorted, the only operation allowed is to \"flip\" one end of the list, like so:</p>\n<pre>Before:\n<b>6 7 8 9</b> 2 5 3 4 1<br>\nAfter:\n<b>9 8 7 6</b> 2 5 3 4 1\n</pre>\n<p>Only one end of the list can be flipped; this should be the low end, but the high end is okay if it's easier to code or works better, but it <strong>must</strong> be the same end for the entire solution. (The end flipped can't be arbitrarily changed.)</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 125,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
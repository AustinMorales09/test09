{
  "id": "5a23c84252665b21eecc7e05",
  "title": "CUSIP",
  "challengeType": 1,
  "forumTopicId": 302241,
  "dashedName": "cusip",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function isCusip(s) {\n\n}",
      "error": null,
      "seed": "function isCusip(s) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function isCusip(s) {\n  if (s.length != 9) return false;\n  var sum = 0;\n  var ASCII = x => x.charCodeAt(0);\n  for (var i = 0; i < 7; i++) {\n    var c = s.charCodeAt(i);\n\n    var v;\n    if (c >= ASCII('0') && c <= ASCII('9')) {\n      v = c - 48;\n    } else if (c >= ASCII('A') && c <= ASCII('Z')) {\n      v = c - 64; // lower case letters apparently invalid\n    } else if (c == ASCII('*')) {\n      v = 36;\n    } else if (c == ASCII('@')) {\n      v = 37;\n    } else if (c == ASCII('#')) {\n      v = 38;\n    } else {\n      return false;\n    }\n    if (i % 2 == 1) v *= 2; // check if odd as using 0-based indexing\n    sum += Math.floor(v / 10) + (v % 10);\n  }\n  return s.charCodeAt(8) - 48 == (10 - (sum % 10)) % 10;\n}",
        "error": null,
        "seed": "function isCusip(s) {\n  if (s.length != 9) return false;\n  var sum = 0;\n  var ASCII = x => x.charCodeAt(0);\n  for (var i = 0; i < 7; i++) {\n    var c = s.charCodeAt(i);\n\n    var v;\n    if (c >= ASCII('0') && c <= ASCII('9')) {\n      v = c - 48;\n    } else if (c >= ASCII('A') && c <= ASCII('Z')) {\n      v = c - 64; // lower case letters apparently invalid\n    } else if (c == ASCII('*')) {\n      v = 36;\n    } else if (c == ASCII('@')) {\n      v = 37;\n    } else if (c == ASCII('#')) {\n      v = 38;\n    } else {\n      return false;\n    }\n    if (i % 2 == 1) v *= 2; // check if odd as using 0-based indexing\n    sum += Math.floor(v / 10) + (v % 10);\n  }\n  return s.charCodeAt(8) - 48 == (10 - (sum % 10)) % 10;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>isCusip</code> should be a function.</p>",
      "testString": "assert(typeof isCusip == 'function');"
    },
    {
      "text": "<p><code>isCusip(\"037833100\")</code> should return a boolean.</p>",
      "testString": "assert(typeof isCusip('037833100') == 'boolean');"
    },
    {
      "text": "<p><code>isCusip(\"037833100\")</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isCusip('037833100'), true);"
    },
    {
      "text": "<p><code>isCusip(\"17275R102\")</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isCusip('17275R102'), true);"
    },
    {
      "text": "<p><code>isCusip(\"38259P50a\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isCusip('38259P50a'), false);"
    },
    {
      "text": "<p><code>isCusip(\"38259P508\")</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isCusip('38259P508'), true);"
    },
    {
      "text": "<p><code>isCusip(\"38259P50#\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isCusip('38259P50#'), false);"
    },
    {
      "text": "<p><code>isCusip(\"68389X105\")</code> should return <code>true</code>.</p>",
      "testString": "assert.equal(isCusip('68389X105'), true);"
    },
    {
      "text": "<p><code>isCusip(\"68389X106\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isCusip('68389X106'), false);"
    },
    {
      "text": "<p><code>isCusip(\"5949181\")</code> should return <code>false</code>.</p>",
      "testString": "assert.equal(isCusip('5949181'), false);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A <strong>CUSIP</strong> is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades. The CUSIP was adopted as an American National Standard under Accredited Standards X9.6.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a string as a parameter and checks if the string is valid CUSIP.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 24,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
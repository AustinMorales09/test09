{
  "id": "5a23c84252665b21eecc7ee0",
  "title": "Left factorials",
  "challengeType": 1,
  "forumTopicId": 302302,
  "dashedName": "left-factorials",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function leftFactorial(n) {\n\n}",
      "error": null,
      "seed": "function leftFactorial(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function leftFactorial(n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n\n  // Note: for n>=20, the result may not be correct.\n  // This is because JavaScript uses 53 bit integers and\n  // for n>=20 result becomes too large.\n\n  let res = 2,\n    fact = 2;\n  for (var i = 2; i < n; i++) {\n    res += fact;\n    fact *= i + 1;\n  }\n\n  return res;\n}",
        "error": null,
        "seed": "function leftFactorial(n) {\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n\n  // Note: for n>=20, the result may not be correct.\n  // This is because JavaScript uses 53 bit integers and\n  // for n>=20 result becomes too large.\n\n  let res = 2,\n    fact = 2;\n  for (var i = 2; i < n; i++) {\n    res += fact;\n    fact *= i + 1;\n  }\n\n  return res;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>leftFactorial</code> should be a function.</p>",
      "testString": "assert(typeof leftFactorial == 'function');"
    },
    {
      "text": "<p><code>leftFactorial(0)</code> should return a number.</p>",
      "testString": "assert(typeof leftFactorial(0) == 'number');"
    },
    {
      "text": "<p><code>leftFactorial(0)</code> should return <code>0</code>.</p>",
      "testString": "assert.equal(leftFactorial(0), 0);"
    },
    {
      "text": "<p><code>leftFactorial(1)</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(leftFactorial(1), 1);"
    },
    {
      "text": "<p><code>leftFactorial(2)</code> should return <code>2</code>.</p>",
      "testString": "assert.equal(leftFactorial(2), 2);"
    },
    {
      "text": "<p><code>leftFactorial(3)</code> should return <code>4</code>.</p>",
      "testString": "assert.equal(leftFactorial(3), 4);"
    },
    {
      "text": "<p><code>leftFactorial(10)</code> should return <code>409114</code>.</p>",
      "testString": "assert.equal(leftFactorial(10), 409114);"
    },
    {
      "text": "<p><code>leftFactorial(17)</code> should return <code>22324392524314</code>.</p>",
      "testString": "assert.equal(leftFactorial(17), 22324392524314);"
    },
    {
      "text": "<p><code>leftFactorial(19)</code> should return <code>6780385526348314</code>.</p>",
      "testString": "assert.equal(leftFactorial(19), 6780385526348314);"
    }
  ],
  "description": "<section id=\"description\">\n<p><strong>Left factorials</strong>, $ !n $, may refer to either <em>subfactorials</em> or to <em>factorial sums</em>. The same notation can be confusingly seen used for the two different definitions. Sometimes, <em>subfactorials</em> (also known as <em>derangements</em>) may use any of the notations:</p>\n<ul>\n  <li>$!n`$</li>\n  <li>$!n$</li>\n  <li>$nÂ¡$</li>\n</ul>\n<p>(It may not be visually obvious, but the last example uses an upside-down exclamation mark.) This task will be using this formula for <strong>left factorial</strong>:</p>\n<p>$ !n = \\sum_{k=0}^{n-1} k! $</p>\n<p>where $!0 = 0$</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function to calculate the left factorial of a given number.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 89,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
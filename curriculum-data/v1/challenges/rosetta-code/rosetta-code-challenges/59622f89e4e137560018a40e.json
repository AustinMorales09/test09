{
  "id": "59622f89e4e137560018a40e",
  "title": "Hofstadter Figure-Figure sequences",
  "challengeType": 1,
  "forumTopicId": 302286,
  "dashedName": "hofstadter-figure-figure-sequences",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const ffrParamRes = [[10, 69], [50, 1509], [100, 5764], [1000, 526334]];\nconst ffsParamRes = [[10, 14], [50, 59], [100, 112], [1000, 1041]];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function ffr(n) {\n  return n;\n}\n\nfunction ffs(n) {\n  return n;\n}",
      "error": null,
      "seed": "function ffr(n) {\n  return n;\n}\n\nfunction ffs(n) {\n  return n;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const R = [null, 1];\nconst S = [null, 2];\n\nfunction extendSequences (n) {\n  let current = Math.max(R[R.length - 1], S[S.length - 1]);\n  let i;\n  while (R.length <= n || S.length <= n) {\n    i = Math.min(R.length, S.length) - 1;\n    current += 1;\n    if (current === R[i] + S[i]) {\n      R.push(current);\n    } else {\n      S.push(current);\n    }\n  }\n}\n\nfunction ffr (n) {\n  extendSequences(n);\n  return R[n];\n}\n\nfunction ffs (n) {\n  extendSequences(n);\n  return S[n];\n}",
        "error": null,
        "seed": "const R = [null, 1];\nconst S = [null, 2];\n\nfunction extendSequences (n) {\n  let current = Math.max(R[R.length - 1], S[S.length - 1]);\n  let i;\n  while (R.length <= n || S.length <= n) {\n    i = Math.min(R.length, S.length) - 1;\n    current += 1;\n    if (current === R[i] + S[i]) {\n      R.push(current);\n    } else {\n      S.push(current);\n    }\n  }\n}\n\nfunction ffr (n) {\n  extendSequences(n);\n  return R[n];\n}\n\nfunction ffs (n) {\n  extendSequences(n);\n  return S[n];\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>ffr</code> should be a function.</p>",
      "testString": "assert(typeof ffr === 'function');"
    },
    {
      "text": "<p><code>ffs</code> should be a function.</p>",
      "testString": "assert(typeof ffs === 'function');"
    },
    {
      "text": "<p><code>ffr</code> should return integer.</p>",
      "testString": "assert(Number.isInteger(ffr(1)));"
    },
    {
      "text": "<p><code>ffs</code> should return integer.</p>",
      "testString": "assert(Number.isInteger(ffs(1)));"
    },
    {
      "text": "<p><code>ffr(10)</code> should return <code>69</code></p>",
      "testString": "assert.equal(ffr(ffrParamRes[0][0]), ffrParamRes[0][1]);"
    },
    {
      "text": "<p><code>ffr(50)</code> should return <code>1509</code></p>",
      "testString": "assert.equal(ffr(ffrParamRes[1][0]), ffrParamRes[1][1]);"
    },
    {
      "text": "<p><code>ffr(100)</code> should return <code>5764</code></p>",
      "testString": "assert.equal(ffr(ffrParamRes[2][0]), ffrParamRes[2][1]);"
    },
    {
      "text": "<p><code>ffr(1000)</code> should return <code>526334</code></p>",
      "testString": "assert.equal(ffr(ffrParamRes[3][0]), ffrParamRes[3][1]);"
    },
    {
      "text": "<p><code>ffs(10)</code> should return <code>14</code></p>",
      "testString": "assert.equal(ffs(ffsParamRes[0][0]), ffsParamRes[0][1]);"
    },
    {
      "text": "<p><code>ffs(50)</code> should return <code>59</code></p>",
      "testString": "assert.equal(ffs(ffsParamRes[1][0]), ffsParamRes[1][1]);"
    },
    {
      "text": "<p><code>ffs(100)</code> should return <code>112</code></p>",
      "testString": "assert.equal(ffs(ffsParamRes[2][0]), ffsParamRes[2][1]);"
    },
    {
      "text": "<p><code>ffs(1000)</code> should return <code>1041</code></p>",
      "testString": "assert.equal(ffs(ffsParamRes[3][0]), ffsParamRes[3][1]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Hofstadter Figure-Figure sequences $R_n$ and $S_n$ are given by</p>\n<p>$R_1 = 1\\ ;\\ S_1 = 2 \\\\R_n = R_{n-1} + S_{n-1}, \\quad n>1.$</p>\n<p>Specifically, the sequence $R_n$ contains the values</p>\n<pre>1, 3, 7, 12, 18, ...</pre>\n<p>and the sequence $S_n$ contains the values</p>\n<pre>2, 4, 5, 6, 8, ...</pre>\n<p>The sequence $R_n$ is defined by the recurrence relation $R_n = R_{n-1} + S_{n-1}$, while $S_n$ is defined as sequence of positive integers that are not included in the sequence $R_n$.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create two functions named <code>ffr</code> and <code>ffs</code> that return <code>R(n)</code> or <code>S(n)</code>, respectively, for any index <code>n</code>. Note that the Hofstadter Figure-Figure sequences are 1-indexed, with $R_1 = 1$ and $S_1 = 2$.</p>\n<p>No maximum value for <code>n</code> should be assumed.</p>\n<p><strong>References</strong></p>\n <p>Rosetta: <a href='https://rosettacode.org/wiki/Hofstadter_Figure-Figure_sequences' target='_blank'>Hofstadter Figure-Figure sequences</a></p>.\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 68,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc8000",
  "title": "Sort disjoint sublist",
  "challengeType": 1,
  "forumTopicId": 302307,
  "dashedName": "sort-disjoint-sublist",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sortDisjoint(values, indices) {\n\n}",
      "error": null,
      "seed": "function sortDisjoint(values, indices) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function sortDisjoint(values, indices) {\n  let sublist = [];\n\n  indices.sort(function(a, b) {\n    return a - b;\n  });\n\n  for (let i = 0; i < indices.length; i++) {\n    sublist.push(values[indices[i]]);\n  }\n\n  sublist.sort((a, b) => {\n    return a - b;\n  });\n\n  for (let i = 0; i < indices.length; i++) {\n    values[indices[i]] = sublist[i];\n  }\n\n  return values;\n}",
        "error": null,
        "seed": "function sortDisjoint(values, indices) {\n  let sublist = [];\n\n  indices.sort(function(a, b) {\n    return a - b;\n  });\n\n  for (let i = 0; i < indices.length; i++) {\n    sublist.push(values[indices[i]]);\n  }\n\n  sublist.sort((a, b) => {\n    return a - b;\n  });\n\n  for (let i = 0; i < indices.length; i++) {\n    values[indices[i]] = sublist[i];\n  }\n\n  return values;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sortDisjoint</code> should be a function.</p>",
      "testString": "assert(typeof sortDisjoint == 'function');"
    },
    {
      "text": "<p><code>sortDisjoint([7, 6, 5, 4, 3, 2, 1, 0], [6, 1, 7])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(sortDisjoint([7, 6, 5, 4, 3, 2, 1, 0], [6, 1, 7])));"
    },
    {
      "text": "<p><code>sortDisjoint([7, 6, 5, 4, 3, 2, 1, 0], [6, 1, 7])</code> should return <code>[7, 0, 5, 4, 3, 2, 1, 6]</code>.</p>",
      "testString": "assert.deepEqual(sortDisjoint([7, 6, 5, 4, 3, 2, 1, 0], [6, 1, 7]), [\n  7,\n  0,\n  5,\n  4,\n  3,\n  2,\n  1,\n  6\n]);"
    },
    {
      "text": "<p><code>sortDisjoint([7, 6, 5, 4, 3, 2, 1, 0], [1, 2, 5, 6])</code> should return <code>[7, 1, 2, 4, 3, 5, 6, 0]</code>.</p>",
      "testString": "assert.deepEqual(sortDisjoint([7, 6, 5, 4, 3, 2, 1, 0], [1, 2, 5, 6]), [\n  7,\n  1,\n  2,\n  4,\n  3,\n  5,\n  6,\n  0\n]);"
    },
    {
      "text": "<p><code>sortDisjoint([8, 7, 6, 5, 4, 3, 2, 1], [6, 1, 7])</code> should return <code>[8, 1, 6, 5, 4, 3, 2, 7]</code>.</p>",
      "testString": "assert.deepEqual(sortDisjoint([8, 7, 6, 5, 4, 3, 2, 1], [6, 1, 7]), [\n  8,\n  1,\n  6,\n  5,\n  4,\n  3,\n  2,\n  7\n]);"
    },
    {
      "text": "<p><code>sortDisjoint([8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 6])</code> should return <code>[8, 2, 6, 3, 4, 5, 7, 1]</code>.</p>",
      "testString": "assert.deepEqual(sortDisjoint([8, 7, 6, 5, 4, 3, 2, 1], [1, 3, 5, 6]), [\n  8,\n  2,\n  6,\n  3,\n  4,\n  5,\n  7,\n  1\n]);"
    },
    {
      "text": "<p><code>sortDisjoint([6, 1, 7, 1, 3, 5, 6], [6, 1, 5, 4])</code> should return <code>[6, 1, 7, 1, 3, 5, 6]</code>.</p>",
      "testString": "assert.deepEqual(sortDisjoint([6, 1, 7, 1, 3, 5, 6], [6, 1, 5, 4]), [\n  6,\n  1,\n  7,\n  1,\n  3,\n  5,\n  6\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Given a list of values and a set of integer indices into that value list, the task is to sort the values at the given indices, but preserving the values at indices outside the set of those to be sorted.</p>\n<p>Make your function work with the following list of values and set of indices:</p>\n<p><code>values: [7, <b>6</b>, 5, 4, 3, 2, <b>1</b>, <b>0</b>]</code></p>\n<pre><code class=\"language-js\">indices(0-based): {6, 1, 7}\n</code></pre>\n<p>Where the correct result would be:</p>\n<p><code>[7, <b>0</b>, 5, 4, 3, 2, <b>1</b>, <b>6</b>]</code>.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 117,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
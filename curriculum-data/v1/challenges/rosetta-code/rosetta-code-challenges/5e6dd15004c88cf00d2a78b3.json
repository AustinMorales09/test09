{
  "id": "5e6dd15004c88cf00d2a78b3",
  "title": "Loop over multiple arrays simultaneously",
  "challengeType": 1,
  "forumTopicId": 385279,
  "dashedName": "loop-over-multiple-arrays-simultaneously",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function loopSimult(A) {\n\n}",
      "error": null,
      "seed": "function loopSimult(A) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function loopSimult(A) {\n    var res = [], output;\n    for (var i = 0; i < A[0].length; i += 1) {\n        output = \"\";\n        for (var j = 0; j < A.length; j++)\n            output += A[j][i];\n        res.push(output);\n    }\n    return res;\n}",
        "error": null,
        "seed": "function loopSimult(A) {\n    var res = [], output;\n    for (var i = 0; i < A[0].length; i += 1) {\n        output = \"\";\n        for (var j = 0; j < A.length; j++)\n            output += A[j][i];\n        res.push(output);\n    }\n    return res;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>loopSimult</code> should be a function.</p>",
      "testString": "assert(typeof loopSimult == 'function');"
    },
    {
      "text": "<p><code>loopSimult([[\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3]])</code> should return a array.</p>",
      "testString": "assert(\n  Array.isArray(\n    loopSimult([\n      ['a', 'b', 'c'],\n      ['A', 'B', 'C'],\n      [1, 2, 3]\n    ])\n  )\n);"
    },
    {
      "text": "<p><code>loopSimult([[\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3]])</code> should return <code>[\"aA1\", \"bB2\", \"cC3\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  loopSimult([\n    ['a', 'b', 'c'],\n    ['A', 'B', 'C'],\n    [1, 2, 3]\n  ]),\n  ['aA1', 'bB2', 'cC3']\n);"
    },
    {
      "text": "<p><code>loopSimult([[\"c\", \"b\", \"c\"], [\"4\", \"5\", \"C\"], [7, 7, 3]])</code> should return <code>[\"c47\", \"b57\", \"cC3\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  loopSimult([\n    ['c', 'b', 'c'],\n    ['4', '5', 'C'],\n    [7, 7, 3]\n  ]),\n  ['c47', 'b57', 'cC3']\n);"
    },
    {
      "text": "<p><code>loopSimult([[\"a\", \"b\", \"c\", \"d\"], [\"A\", \"B\", \"C\", \"d\"], [1, 2, 3, 4]])</code> should return <code>[\"aA1\", \"bB2\", \"cC3\", \"dd4\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  loopSimult([\n    ['a', 'b', 'c', 'd'],\n    ['A', 'B', 'C', 'd'],\n    [1, 2, 3, 4]\n  ]),\n  ['aA1', 'bB2', 'cC3', 'dd4']\n);"
    },
    {
      "text": "<p><code>loopSimult([[\"a\", \"b\"], [\"A\", \"B\"], [1, 2]])</code> should return <code>[\"aA1\", \"bB2\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  loopSimult([\n    ['a', 'b'],\n    ['A', 'B'],\n    [1, 2]\n  ]),\n  ['aA1', 'bB2']\n);"
    },
    {
      "text": "<p><code>loopSimult([[\"b\", \"c\"], [\"B\", \"C\"], [2, 3]])</code> should return <code>[\"bB2\", \"cC3\"]</code>.</p>",
      "testString": "assert.deepEqual(\n  loopSimult([\n    ['b', 'c'],\n    ['B', 'C'],\n    [2, 3]\n  ]),\n  ['bB2', 'cC3']\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Loop over multiple arrays and create a new array whose $i^{th}$ element is the concatenation of $i^{th}$ element of each of the given.</p>\n<p>For this example, if you are given this array of arrays:</p>\n<pre><code class=\"language-js\">[ [\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3] ]\n</code></pre>\n<p>the output should be:</p>\n<pre><code class=\"language-js\">[\"aA1\",\"bB2\",\"cC3\"]\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes an array of arrays as a parameter and returns an array of strings satisfying the given description.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 98,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "594810f028c0303b75339acf",
  "title": "Ackermann function",
  "challengeType": 1,
  "forumTopicId": 302223,
  "dashedName": "ackermann-function",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function ack(m, n) {\n\n}",
      "error": null,
      "seed": "function ack(m, n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function ack(m, n) {\n  return m === 0 ? n + 1 : ack(m - 1, n === 0 ? 1 : ack(m, n - 1));\n}",
        "error": null,
        "seed": "function ack(m, n) {\n  return m === 0 ? n + 1 : ack(m - 1, n === 0 ? 1 : ack(m, n - 1));\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>ack</code> should be a function.</p>",
      "testString": "assert(typeof ack === 'function');"
    },
    {
      "text": "<p><code>ack(0, 0)</code> should return 1.</p>",
      "testString": "assert(ack(0, 0) === 1);"
    },
    {
      "text": "<p><code>ack(1, 1)</code> should return 3.</p>",
      "testString": "assert(ack(1, 1) === 3);"
    },
    {
      "text": "<p><code>ack(2, 5)</code> should return 13.</p>",
      "testString": "assert(ack(2, 5) === 13);"
    },
    {
      "text": "<p><code>ack(3, 3)</code> should return 61.</p>",
      "testString": "assert(ack(3, 3) === 61);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Ackermann function is a classic example of a recursive function, notable especially because it is not a primitive recursive function. It grows very quickly in value, as does the size of its call tree.</p>\n<p>The Ackermann function is usually defined as follows:</p>\n<p>$A(m, n) = \\begin{cases} n+1 &#x26; \\mbox{if } m = 0 \\\\ A(m-1, 1) &#x26; \\mbox{if } m > 0 \\mbox{ and } n = 0 \\\\ A(m-1, A(m, n-1)) &#x26; \\mbox{if } m > 0 \\mbox{ and } n > 0. \\end{cases}$</p>\n<p>Its arguments are never negative and it always terminates.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function which returns the value of $A(m, n)$. Arbitrary precision is preferred (since the function grows so quickly), but not required.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 6,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
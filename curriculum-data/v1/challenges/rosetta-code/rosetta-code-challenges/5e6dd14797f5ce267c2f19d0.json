{
  "id": "5e6dd14797f5ce267c2f19d0",
  "title": "Look-and-say sequence",
  "challengeType": 1,
  "forumTopicId": 385277,
  "dashedName": "look-and-say-sequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function lookAndSay(str) {\n\n}",
      "error": null,
      "seed": "function lookAndSay(str) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function lookAndSay(str) {\n    return str.replace(/(.)\\1*/g, function(seq, p1) {\n      return seq.length.toString() + p1;\n    });\n}",
        "error": null,
        "seed": "function lookAndSay(str) {\n    return str.replace(/(.)\\1*/g, function(seq, p1) {\n      return seq.length.toString() + p1;\n    });\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>lookAndSay</code> should be a function.</p>",
      "testString": "assert(typeof lookAndSay == 'function');"
    },
    {
      "text": "<p><code>lookAndSay(\"1\")</code> should return a string.</p>",
      "testString": "assert(typeof lookAndSay('1') == 'string');"
    },
    {
      "text": "<p><code>lookAndSay(\"1\")</code> should return <code>\"11\"</code>.</p>",
      "testString": "assert.equal(lookAndSay('1'), '11');"
    },
    {
      "text": "<p><code>lookAndSay(\"11\")</code> should return <code>\"21\"</code>.</p>",
      "testString": "assert.equal(lookAndSay('11'), '21');"
    },
    {
      "text": "<p><code>lookAndSay(\"21\")</code> should return <code>\"1211\"</code>.</p>",
      "testString": "assert.equal(lookAndSay('21'), '1211');"
    },
    {
      "text": "<p><code>lookAndSay(\"1211\")</code> should return <code>\"111221\"</code>.</p>",
      "testString": "assert.equal(lookAndSay('1211'), '111221');"
    },
    {
      "text": "<p><code>lookAndSay(\"3542\")</code> should return <code>\"13151412\"</code>.</p>",
      "testString": "assert.equal(lookAndSay('3542'), '13151412');"
    }
  ],
  "description": "<section id=\"description\">\n<p>The Look and say sequence is a recursively defined sequence of numbers.</p>\n<p>Sequence Definition</p>\n<ul><li>Take a decimal number</li>\n<li><span>Look</span> at the number, visually grouping consecutive runs of the same digit.</li>\n<li><span>Say</span> the number, from left to right, group by group; as how many of that digit there are - followed by the digit grouped.</li></ul><span> This becomes the next number of the sequence.</span>\n<p>An example:</p>\n<ul><li>Starting with the number 1, you have <span>one</span> 1 which produces 11</li>\n<li>Starting with 11, you have <span>two</span> 1's. I.E.: 21</li>\n<li>Starting with 21, you have <span>one</span> 2, then <span>one</span> 1. I.E.: (12)(11) which becomes 1211</li>\n<li>Starting with 1211, you have <span>one</span> 1, <span>one</span> 2, then <span>two</span> 1's. I.E.: (11)(12)(21) which becomes 111221</li></ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that accepts a string as a parameter, processes it, and returns the resultant string.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 97,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
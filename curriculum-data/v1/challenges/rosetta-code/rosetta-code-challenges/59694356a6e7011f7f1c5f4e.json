{
  "id": "59694356a6e7011f7f1c5f4e",
  "title": "Deal cards for FreeCell",
  "challengeType": 1,
  "forumTopicId": 302246,
  "dashedName": "deal-cards-for-freecell",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const replaceThis = 3;\nconst game1 = [\n  ['JD', '2D', '9H', 'JC', '5D', '7H', '7C', '5H'],\n  ['KD', 'KC', '9S', '5S', 'AD', 'QC', 'KH', '3H'],\n  ['2S', 'KS', '9D', 'QD', 'JS', 'AS', 'AH', '3C'],\n  ['4C', '5C', 'TS', 'QH', '4H', 'AC', '4D', '7S'],\n  ['3S', 'TD', '4S', 'TH', '8H', '2C', 'JH', '7D'],\n  ['6D', '8S', '8D', 'QS', '6C', '3D', '8C', 'TC'],\n  ['6S', '9C', '2H', '6H']\n];\nconst game617 = [\n  ['7D', 'AD', '5C', '3S', '5S', '8C', '2D', 'AH'],\n  ['TD', '7S', 'QD', 'AC', '6D', '8H', 'AS', 'KH'],\n  ['TH', 'QC', '3H', '9D', '6S', '8D', '3D', 'TC'],\n  ['KD', '5H', '9S', '3C', '8S', '7H', '4D', 'JS'],\n  ['4C', 'QS', '9C', '9H', '7C', '6H', '2C', '2S'],\n  ['4S', 'TS', '2H', '5D', 'JC', '6C', 'JH', 'QH'],\n  ['JD', 'KS', 'KC', '4H']\n];",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function dealFreeCell(seed) {\n\n  return true;\n}",
      "error": null,
      "seed": "function dealFreeCell(seed) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "// RNG\nfunction FreeCellRNG(seed) {\n  return {\n    lastNum: seed,\n    next() {\n      this.lastNum = ((214013 * this.lastNum) + 2531011) % (Math.pow(2, 31));\n      return this.lastNum >> 16;\n    }\n  };\n}\n// Get cards\nfunction getDeck() {\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'];\n  const suits = ['C', 'D', 'H', 'S'];\n  const cards = [];\n  for (let i = 0; i < ranks.length; i += 1) {\n    for (let j = 0; j < suits.length; j += 1) {\n      cards.push(`${ranks[i]}${suits[j]}`);\n    }\n  }\n  return cards;\n}\nfunction dealFreeCell(seed) {\n  const rng = FreeCellRNG(seed);\n  const deck = getDeck();\n\n  const dealtCards = [[], [], [], [], [], [], []];\n  let currentColumn = 0;\n  let currentRow = 0;\n\n  let rand;\n  let temp;\n  let card;\n  while (deck.length > 0) {\n    // Choose a random card\n    rand = rng.next() % deck.length;\n\n    // Swap this random card with the last card in the array\n    temp = deck[deck.length - 1];\n    deck[deck.length - 1] = deck[rand];\n    deck[rand] = temp;\n\n    // Remove this card from the array\n    card = deck.pop();\n\n    // Deal this card\n    dealtCards[currentRow].push(card);\n    currentColumn += 1;\n    if (currentColumn === 8) {\n      currentColumn = 0;\n      currentRow += 1;\n    }\n  }\n\n  return dealtCards;\n}",
        "error": null,
        "seed": "// RNG\nfunction FreeCellRNG(seed) {\n  return {\n    lastNum: seed,\n    next() {\n      this.lastNum = ((214013 * this.lastNum) + 2531011) % (Math.pow(2, 31));\n      return this.lastNum >> 16;\n    }\n  };\n}\n// Get cards\nfunction getDeck() {\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'];\n  const suits = ['C', 'D', 'H', 'S'];\n  const cards = [];\n  for (let i = 0; i < ranks.length; i += 1) {\n    for (let j = 0; j < suits.length; j += 1) {\n      cards.push(`${ranks[i]}${suits[j]}`);\n    }\n  }\n  return cards;\n}\nfunction dealFreeCell(seed) {\n  const rng = FreeCellRNG(seed);\n  const deck = getDeck();\n\n  const dealtCards = [[], [], [], [], [], [], []];\n  let currentColumn = 0;\n  let currentRow = 0;\n\n  let rand;\n  let temp;\n  let card;\n  while (deck.length > 0) {\n    // Choose a random card\n    rand = rng.next() % deck.length;\n\n    // Swap this random card with the last card in the array\n    temp = deck[deck.length - 1];\n    deck[deck.length - 1] = deck[rand];\n    deck[rand] = temp;\n\n    // Remove this card from the array\n    card = deck.pop();\n\n    // Deal this card\n    dealtCards[currentRow].push(card);\n    currentColumn += 1;\n    if (currentColumn === 8) {\n      currentColumn = 0;\n      currentRow += 1;\n    }\n  }\n\n  return dealtCards;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>dealFreeCell</code> should be a function.</p>",
      "testString": "assert(typeof dealFreeCell === 'function');"
    },
    {
      "text": "<p><code>dealFreeCell(seed)</code> should return an object.</p>",
      "testString": "assert(typeof dealFreeCell(1) === 'object');"
    },
    {
      "text": "<p><code>dealFreeCell(seed)</code> should return an array of length 7.</p>",
      "testString": "assert(dealFreeCell(1).length === 7);"
    },
    {
      "text": "<p><code>dealFreeCell(1)</code> should return an array identical to example \"Game #1\"</p>",
      "testString": "assert.deepEqual(dealFreeCell(1), game1);"
    },
    {
      "text": "<p><code>dealFreeCell(617)</code> should return an array identical to example \"Game #617\"</p>",
      "testString": "assert.deepEqual(dealFreeCell(617), game617);"
    }
  ],
  "description": "<section id=\"description\">\n<p><em>FreeCell</em> is the solitaire card game that Paul Alfille introduced to the PLATO system in 1978. Jim Horne, at Microsoft, changed the name to FreeCell and reimplemented the game for DOS, then Windows. This version introduced 32000 numbered deals.</p>\n<p>As the game became popular, Jim Horne disclosed the algorithm, and other implementations of FreeCell began to reproduce the Microsoft deals. These deals are numbered from 1 to 32000. Newer versions from Microsoft have 1 million deals, numbered from 1 to 1000000; some implementations allow numbers outside that range.</p>\n<p>The algorithm uses this linear congruential generator from Microsoft C:</p>\n<ul>\n  <li>$state_{n + 1} \\equiv 214013 \\times state_n + 2531011 \\pmod{2^{31}}$</li>\n  <li>$rand_n = state_n \\div 2^{16}$</li>\n  <li>$rand_n$ is in range 0 to 32767.</li>\n</ul>\n<p>The algorithm follows:</p>\n<ol>\n  <li>Seed the RNG with the number of the deal.\n  </li><li>Create an array of 52 cards: Ace of Clubs, Ace of Diamonds, Ace of Hearts, Ace of Spades, 2 of Clubs, 2 of Diamonds, and so on through the ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King. The array indexes are 0 to 51, with Ace of Clubs at 0, and King of Spades at 51.</li>\n  <li>Until the array is empty:</li>\n    <ul>\n      <li>Choose a random card at <i>index</i> â‰¡ <i>next random number</i> (mod <i>array length</i>).</li>\n      <li>Swap this random card with the last card of the array.</li>\n      <li>Remove this random card from the array. (Array length goes down by 1.)</li>\n      <li>Deal this random card.</li>\n    </ul>\n  <li>Deal all 52 cards, face up, across 8 columns. The first 8 cards go in 8 columns, the next 8 cards go on the first 8 cards, and so on.</li>\n</ol>\n<p><strong>Example:</strong></p>\n<p><strong>Order to deal cards</strong></p>\n<pre> 1  2  3  4  5  6  7  8\n 9 10 11 12 13 14 15 16\n17 18 19 20 21 22 23 24\n25 26 27 28 29 30 31 32\n33 34 35 36 37 38 39 40\n41 42 43 44 45 46 47 48\n49 50 51 52</pre>\n<p><strong>Game #1</strong></p>\n<pre><code class=\"language-js\">[\n  ['JD', '2D', '9H', 'JC', '5D', '7H', '7C', '5H'],\n  ['KD', 'KC', '9S', '5S', 'AD', 'QC', 'KH', '3H'],\n  ['2S', 'KS', '9D', 'QD', 'JS', 'AS', 'AH', '3C'],\n  ['4C', '5C', 'TS', 'QH', '4H', 'AC', '4D', '7S'],\n  ['3S', 'TD', '4S', 'TH', '8H', '2C', 'JH', '7D'],\n  ['6D', '8S', '8D', 'QS', '6C', '3D', '8C', 'TC'],\n  ['6S', '9C', '2H', '6H']\n]\n</code></pre>\n<p><strong>Game #617</strong></p>\n<pre><code class=\"language-js\">[\n  ['7D', 'AD', '5C', '3S', '5S', '8C', '2D', 'AH'],\n  ['TD', '7S', 'QD', 'AC', '6D', '8H', 'AS', 'KH'],\n  ['TH', 'QC', '3H', '9D', '6S', '8D', '3D', 'TC'],\n  ['KD', '5H', '9S', '3C', '8S', '7H', '4D', 'JS'],\n  ['4C', 'QS', '9C', '9H', '7C', '6H', '2C', '2S'],\n  ['4S', 'TS', '2H', '5D', 'JC', '6C', 'JH', 'QH'],\n  ['JD', 'KS', 'KC', '4H']\n]\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function to take a deal number and deal cards in the same order as this algorithm. The function must return a two dimensional array representing the FreeCell board.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 29,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5a23c84252665b21eecc8012",
  "title": "Sorting algorithms/Stooge sort",
  "challengeType": 1,
  "forumTopicId": 302318,
  "dashedName": "sorting-algorithmsstooge-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function stoogeSort(arr) {\n\n}",
      "error": null,
      "seed": "function stoogeSort(arr) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function stoogeSort(arr) {\n  function stoogeSortRecurse(array, i, j) {\n    if (j === undefined) {\n      j = array.length - 1;\n    }\n\n    if (i === undefined) {\n      i = 0;\n    }\n\n    if (array[j] < array[i]) {\n      var aux = array[i];\n      array[i] = array[j];\n      array[j] = aux;\n    }\n\n    if (j - i > 1) {\n      var t = Math.floor((j - i + 1) / 3);\n      stoogeSortRecurse(array, i, j - t);\n      stoogeSortRecurse(array, i + t, j);\n      stoogeSortRecurse(array, i, j - t);\n    }\n  }\n  stoogeSortRecurse(arr);\n  return arr;\n}",
        "error": null,
        "seed": "function stoogeSort(arr) {\n  function stoogeSortRecurse(array, i, j) {\n    if (j === undefined) {\n      j = array.length - 1;\n    }\n\n    if (i === undefined) {\n      i = 0;\n    }\n\n    if (array[j] < array[i]) {\n      var aux = array[i];\n      array[i] = array[j];\n      array[j] = aux;\n    }\n\n    if (j - i > 1) {\n      var t = Math.floor((j - i + 1) / 3);\n      stoogeSortRecurse(array, i, j - t);\n      stoogeSortRecurse(array, i + t, j);\n      stoogeSortRecurse(array, i, j - t);\n    }\n  }\n  stoogeSortRecurse(arr);\n  return arr;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>stoogeSort</code> should be a function.</p>",
      "testString": "assert(typeof stoogeSort == 'function');"
    },
    {
      "text": "<p><code>stoogeSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(stoogeSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>stoogeSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(stoogeSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>stoogeSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(stoogeSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>stoogeSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(stoogeSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>stoogeSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(stoogeSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>stoogeSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(stoogeSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Write a function to perform Stooge Sort on an array of integers. The function should return a sorted array.</p>\n<p>The Stooge Sort algorithm is as follows:</p>\n<pre><b>algorithm</b> stoogesort(<b>array</b> L, i = 0, j = <b>length</b>(L)-1)\n  <b>if</b> L[j] &#x3C; L[i] <b>then</b>\n    L[i] <b>â†”</b> L[j]\n  <b>if</b> j - i > 1 <b>then</b>\n    t <b>:=</b> (j - i + 1)/3\n    stoogesort(L, i , j-t)\n    stoogesort(L, i+t, j )\n    stoogesort(L, i , j-t)\n  <b>return</b> L\n</pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 128,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "595011cba5a81735713873bd",
  "title": "Top rank per group",
  "challengeType": 1,
  "forumTopicId": 302339,
  "dashedName": "top-rank-per-group",
  "challengeFiles": [
    {
      "head": "",
      "tail": "const testData1 = [\n  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },\n  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },\n  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },\n  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },\n  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },\n  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },\n  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }\n];\n\nconst res1 = topRankPerGroup(10, testData1, 'dept', 'salary');\n\nconst testData2 = [\n  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },\n  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },\n  { name: 'Titanic', genre: 'drama', rating: 7.3 },\n  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },\n  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }\n];\n\nconst res2 = topRankPerGroup(1, testData2, 'genre', 'rating');\nconst res3 = topRankPerGroup(2, testData2, 'genre', 'rating');",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function topRankPerGroup(n, data, groupName, rankName) {\n\n  return true;\n}",
      "error": null,
      "seed": "function topRankPerGroup(n, data, groupName, rankName) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const collectDept = function (arrOfObj, groupName) {\n  const collect = arrOfObj.reduce((rtnObj, obj) => {\n    if (rtnObj[obj[groupName]] === undefined) {\n      rtnObj[obj[groupName]] = [];\n    }\n    rtnObj[obj[groupName]].push(obj);\n    return rtnObj;\n  }, {} // initial value to reduce\n  );\n\n  return Object.keys(collect).sort().map(key => collect[key]);\n};\n\nconst sortRank = function (arrOfRankArrs, rankName) {\n  return arrOfRankArrs.map(item => item.sort((a, b) => {\n    if (a[rankName] > b[rankName]) { return -1; }\n    if (a[rankName] < b[rankName]) { return 1; }\n    return 0;\n  }));\n};\n\nfunction topRankPerGroup(n, data, groupName, rankName) {\n  if (n < 0) { return; }\n  return sortRank(collectDept(data, groupName),\n    rankName).map(list => list.slice(0, n));\n}",
        "error": null,
        "seed": "const collectDept = function (arrOfObj, groupName) {\n  const collect = arrOfObj.reduce((rtnObj, obj) => {\n    if (rtnObj[obj[groupName]] === undefined) {\n      rtnObj[obj[groupName]] = [];\n    }\n    rtnObj[obj[groupName]].push(obj);\n    return rtnObj;\n  }, {} // initial value to reduce\n  );\n\n  return Object.keys(collect).sort().map(key => collect[key]);\n};\n\nconst sortRank = function (arrOfRankArrs, rankName) {\n  return arrOfRankArrs.map(item => item.sort((a, b) => {\n    if (a[rankName] > b[rankName]) { return -1; }\n    if (a[rankName] < b[rankName]) { return 1; }\n    return 0;\n  }));\n};\n\nfunction topRankPerGroup(n, data, groupName, rankName) {\n  if (n < 0) { return; }\n  return sortRank(collectDept(data, groupName),\n    rankName).map(list => list.slice(0, n));\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>topRankPerGroup</code> should be a function.</p>",
      "testString": "assert(typeof topRankPerGroup === 'function');"
    },
    {
      "text": "<p><code>topRankPerGroup</code> should return undefined on negative n values.</p>",
      "testString": "assert(typeof topRankPerGroup(-1, []) === 'undefined');"
    },
    {
      "text": "<p>For <code>topRankPerGroup(10, testData1, 'dept', 'salary')</code>, the first result in the first group should be <code>{ name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050'}</code>.</p>",
      "testString": "assert.deepEqual(res1[0][0], { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050'});"
    },
    {
      "text": "<p>For <code>topRankPerGroup(10, testData1, 'dept', 'salary')</code>, the last result in the last group should be <code>{ name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' }</code>.</p>",
      "testString": "assert.deepEqual(res1[3][3], { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' });"
    },
    {
      "text": "<p><code>topRankPerGroup(1, ...)</code> should return only top ranking result per group.</p>",
      "testString": "assert.equal(res2[2].length, 1);"
    },
    {
      "text": "<p><code>topRankPerGroup(2, ...)</code> should return two ranking results per group.</p>",
      "testString": "assert.equal(res3[2][1].name, 'Maze Runner');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Find the top <code>n</code> ranked data in each group, where <code>n</code> is provided as a parameter. Name of the rank and the group are also provided as parameter.</p>\n<p>Given the following data:</p>\n<pre><code class=\"language-js\">testData1 = [\n  { name: 'Tyler Bennett', id: 'E10297', salary: 32000, dept: 'D101' },\n  { name: 'John Rappl', id: 'E21437', salary: 47000, dept: 'D050' },\n  { name: 'George Woltman', id: 'E00127', salary: 53500, dept: 'D101' },\n  { name: 'Adam Smith', id: 'E63535', salary: 18000, dept: 'D202' },\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D202' },\n  { name: 'David McClellan', id: 'E04242', salary: 41500, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D202' },\n  { name: 'Nathan Adams', id: 'E41298', salary: 21900, dept: 'D050' },\n  { name: 'Richard Potter', id: 'E43128', salary: 15900, dept: 'D101' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D202' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D190' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D190' }\n];\n</code></pre>\n<p>One could rank top 10 employees in each department by calling:</p>\n<pre><code class=\"language-js\">topRankPerGroup(10, testData1, 'dept', 'salary')\n</code></pre>\n<p>Given the following data:</p>\n<pre><code class=\"language-js\">testData2 = [\n  { name: 'Friday 13th', genre: 'horror', rating: 9.9 },\n  { name: \"Nightmare on Elm's Street\", genre: 'horror', rating: 5.7 },\n  { name: 'Titanic', genre: 'drama', rating: 7.3 },\n  { name: 'Maze Runner', genre: 'scifi', rating: 7.1 },\n  { name: 'Blade runner', genre: 'scifi', rating: 8.9 }\n];\n</code></pre>\n<p>One could rank the top-rated movie in each genre by calling:</p>\n<pre><code class=\"language-js\">topRankPerGroup(1, testData2, 'genre', 'rating')\n</code></pre>\n<p>The function should return an array with an array for each group containing the top <code>n</code> objects.</p>\n<p>For example, given data:</p>\n<pre><code class=\"language-js\">[\n  { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D101' },\n  { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D050' },\n  { name: 'David Motsinger', id: 'E27002', salary: 19250, dept: 'D050' },\n  { name: 'Tim Sampair', id: 'E03033', salary: 27000, dept: 'D101' },\n  { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D050' },\n  { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D101' }\n];\n</code></pre>\n<p>Top two ranking employees in each department by salary would be:</p>\n<pre><code class=\"language-js\">[ [ { name: 'Kim Arlich', id: 'E10001', salary: 57000, dept: 'D050' },\n    { name: 'Rich Holcomb', id: 'E01234', salary: 49500, dept: 'D050' } ],\n  [ { name: 'Timothy Grove', id: 'E16398', salary: 29900, dept: 'D101' },\n    { name: 'Claire Buckman', id: 'E39876', salary: 27800, dept: 'D101' } ] ]\n</code></pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 150,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
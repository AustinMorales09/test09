{
  "id": "5a23c84252665b21eecc8007",
  "title": "Sorting algorithms/Gnome sort",
  "challengeType": 1,
  "forumTopicId": 302314,
  "dashedName": "sorting-algorithmsgnome-sort",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function gnomeSort(a) {\n\n}",
      "error": null,
      "seed": "function gnomeSort(a) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function gnomeSort(a) {\n  function moveBack(i) {\n    for (; i > 0 && a[i - 1] > a[i]; i--) {\n      var t = a[i];\n      a[i] = a[i - 1];\n      a[i - 1] = t;\n    }\n  }\n  for (var i = 1; i < a.length; i++) {\n    if (a[i - 1] > a[i]) moveBack(i);\n  }\n  return a;\n}",
        "error": null,
        "seed": "function gnomeSort(a) {\n  function moveBack(i) {\n    for (; i > 0 && a[i - 1] > a[i]; i--) {\n      var t = a[i];\n      a[i] = a[i - 1];\n      a[i - 1] = t;\n    }\n  }\n  for (var i = 1; i < a.length; i++) {\n    if (a[i - 1] > a[i]) moveBack(i);\n  }\n  return a;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>gnomeSort</code> should be a function.</p>",
      "testString": "assert(typeof gnomeSort == 'function');"
    },
    {
      "text": "<p><code>gnomeSort([25, 32, 12, 7, 20])</code> should return an array.</p>",
      "testString": "assert(Array.isArray(gnomeSort([25, 32, 12, 7, 20])));"
    },
    {
      "text": "<p><code>gnomeSort([25, 32, 12, 7, 20])</code> should return <code>[7, 12, 20, 25, 32]</code>.</p>",
      "testString": "assert.deepEqual(gnomeSort([25, 32, 12, 7, 20]), [7, 12, 20, 25, 32]);"
    },
    {
      "text": "<p><code>gnomeSort([38, 45, 35, 8, 13])</code> should return <code>[8, 13, 35, 38, 45]</code>.</p>",
      "testString": "assert.deepEqual(gnomeSort([38, 45, 35, 8, 13]), [8, 13, 35, 38, 45]);"
    },
    {
      "text": "<p><code>gnomeSort([43, 36, 20, 34, 24])</code> should return <code>[20, 24, 34, 36, 43]</code>.</p>",
      "testString": "assert.deepEqual(gnomeSort([43, 36, 20, 34, 24]), [20, 24, 34, 36, 43]);"
    },
    {
      "text": "<p><code>gnomeSort([12, 33, 26, 18, 1, 16, 38])</code> should return <code>[1, 12, 16, 18, 26, 33, 38]</code>.</p>",
      "testString": "assert.deepEqual(gnomeSort([12, 33, 26, 18, 1, 16, 38]), [\n  1,\n  12,\n  16,\n  18,\n  26,\n  33,\n  38\n]);"
    },
    {
      "text": "<p><code>gnomeSort([3, 39, 48, 16, 1, 4, 29])</code> should return <code>[1, 3, 4, 16, 29, 39, 48]</code>.</p>",
      "testString": "assert.deepEqual(gnomeSort([3, 39, 48, 16, 1, 4, 29]), [\n  1,\n  3,\n  4,\n  16,\n  29,\n  39,\n  48\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Gnome sort is a sorting algorithm which is similar to <a href=\"https://rosettacode.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Insertion sort</a>, except that moving an element to its proper place is accomplished by a series of swaps, as in <a href=\"https://rosettacode.org/wiki/Bubble\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Bubble Sort</a>.</p>\n<p>The pseudocode for the algorithm is:</p>\n<pre><b>function</b> <i>gnomeSort</i>(a[0..size-1])\n  i := 1\n  j := 2\n  <b>while</b> i &#x3C; size <b>do</b>\n    <b>if</b> a[i-1] &#x3C;= a[i] <b>then</b>\n      <i>/// for descending sort, use >= for comparison</i>\n      i := j\n      j := j + 1\n    <b>else</b>\n      <b>swap</b> a[i-1] <b>and</b> a[i]\n      i := i - 1\n      <b>if</b> i = 0 <b>then</b>\n        i := j\n        j := j + 1\n      <b>endif</b>\n    <b>endif</b>\n  <b>done</b>\n</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function to implement the above pseudo code. The function should return the sorted array.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 124,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5eb3e497b8d6d7f63c5517ea",
  "title": "Search a list of records",
  "challengeType": 1,
  "forumTopicId": 385315,
  "dashedName": "search-a-list-of-records",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function searchCity(name) {\n\n}\n\nconst list = [\n  { name: 'Lagos', population: 21.0 },\n  { name: 'Cairo', population: 15.2 },\n  { name: 'Kinshasa-Brazzaville', population: 11.3 },\n  { name: 'Greater Johannesburg', population: 7.55 },\n  { name: 'Mogadishu', population: 5.85 },\n  { name: 'Khartoum-Omdurman', population: 4.98 },\n  { name: 'Dar Es Salaam', population: 4.7 },\n  { name: 'Alexandria', population: 4.58 },\n  { name: 'Abidjan', population: 4.4 },\n  { name: 'Casablanca', population: 3.98 }\n];",
      "error": null,
      "seed": "function searchCity(name) {\n\n}\n\nconst list = [\n  { name: 'Lagos', population: 21.0 },\n  { name: 'Cairo', population: 15.2 },\n  { name: 'Kinshasa-Brazzaville', population: 11.3 },\n  { name: 'Greater Johannesburg', population: 7.55 },\n  { name: 'Mogadishu', population: 5.85 },\n  { name: 'Khartoum-Omdurman', population: 4.98 },\n  { name: 'Dar Es Salaam', population: 4.7 },\n  { name: 'Alexandria', population: 4.58 },\n  { name: 'Abidjan', population: 4.4 },\n  { name: 'Casablanca', population: 3.98 }\n];"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function searchCity(name) {\n  return list.findIndex(item => item.name === name);\n}\n\nconst list = [\n  { name: 'Lagos', population: 21.0 },\n  { name: 'Cairo', population: 15.2 },\n  { name: 'Kinshasa-Brazzaville', population: 11.3 },\n  { name: 'Greater Johannesburg', population: 7.55 },\n  { name: 'Mogadishu', population: 5.85 },\n  { name: 'Khartoum-Omdurman', population: 4.98 },\n  { name: 'Dar Es Salaam', population: 4.7 },\n  { name: 'Alexandria', population: 4.58 },\n  { name: 'Abidjan', population: 4.4 },\n  { name: 'Casablanca', population: 3.98 }\n];",
        "error": null,
        "seed": "function searchCity(name) {\n  return list.findIndex(item => item.name === name);\n}\n\nconst list = [\n  { name: 'Lagos', population: 21.0 },\n  { name: 'Cairo', population: 15.2 },\n  { name: 'Kinshasa-Brazzaville', population: 11.3 },\n  { name: 'Greater Johannesburg', population: 7.55 },\n  { name: 'Mogadishu', population: 5.85 },\n  { name: 'Khartoum-Omdurman', population: 4.98 },\n  { name: 'Dar Es Salaam', population: 4.7 },\n  { name: 'Alexandria', population: 4.58 },\n  { name: 'Abidjan', population: 4.4 },\n  { name: 'Casablanca', population: 3.98 }\n];"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>searchCity</code> should be a function.</p>",
      "testString": "assert(typeof searchCity === 'function');"
    },
    {
      "text": "<p><code>searchCity(\"Dar Es Salaam\")</code> should return a number.</p>",
      "testString": "assert(typeof searchCity('Dar Es Salaam') === 'number');"
    },
    {
      "text": "<p><code>searchCity(\"Dar Es Salaam\")</code> should return <code>6</code>.</p>",
      "testString": "assert.equal(searchCity('Dar Es Salaam'), 6);"
    },
    {
      "text": "<p><code>searchCity(\"Casablanca\")</code> should return <code>9</code>.</p>",
      "testString": "assert.equal(searchCity('Casablanca'), 9);"
    },
    {
      "text": "<p><code>searchCity(\"Cairo\")</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(searchCity('Cairo'), 1);"
    },
    {
      "text": "<p><code>searchCity(\"Mogadishu\")</code> should return <code>4</code>.</p>",
      "testString": "assert.equal(searchCity('Mogadishu'), 4);"
    },
    {
      "text": "<p><code>searchCity(\"Lagos\")</code> should return <code>0</code>.</p>",
      "testString": "assert.equal(searchCity('Lagos'), 0);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A record consists of attributes that describe an entity. Each attribute has a name and a value. For example, a person can have an attribute <code>age</code> with a value of 25. An important operation on a list of records is to find a record with a particular attribute value.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a string as a parameter. The function should return the index of the item in <code>list</code> for which the value of the <code>name</code> attribute matches the given string.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 107,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
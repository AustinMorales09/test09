{
  "id": "5a23c84252665b21eecc7ec1",
  "title": "Iterated digits squaring",
  "challengeType": 1,
  "forumTopicId": 302291,
  "dashedName": "iterated-digits-squaring",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function iteratedSquare(n) {\n\n}",
      "error": null,
      "seed": "function iteratedSquare(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function iteratedSquare(n) {\n    var total;\n    while (n != 89 && n != 1) {\n        total = 0;\n        while (n > 0) {\n            total += Math.pow(n % 10, 2);\n            n = Math.floor(n/10);\n        }\n        n = total;\n    }\n    return n;\n}",
        "error": null,
        "seed": "function iteratedSquare(n) {\n    var total;\n    while (n != 89 && n != 1) {\n        total = 0;\n        while (n > 0) {\n            total += Math.pow(n % 10, 2);\n            n = Math.floor(n/10);\n        }\n        n = total;\n    }\n    return n;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>iteratedSquare</code> should be a function.</p>",
      "testString": "assert(typeof iteratedSquare == 'function');"
    },
    {
      "text": "<p><code>iteratedSquare(4)</code> should return a number.</p>",
      "testString": "assert(typeof iteratedSquare(4) == 'number');"
    },
    {
      "text": "<p><code>iteratedSquare(4)</code> should return <code>89</code>.</p>",
      "testString": "assert.equal(iteratedSquare(4), 89);"
    },
    {
      "text": "<p><code>iteratedSquare(7)</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(iteratedSquare(7), 1);"
    },
    {
      "text": "<p><code>iteratedSquare(15)</code> should return <code>89</code>.</p>",
      "testString": "assert.equal(iteratedSquare(15), 89);"
    },
    {
      "text": "<p><code>iteratedSquare(20)</code> should return <code>89</code>.</p>",
      "testString": "assert.equal(iteratedSquare(20), 89);"
    },
    {
      "text": "<p><code>iteratedSquare(70)</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(iteratedSquare(70), 1);"
    },
    {
      "text": "<p><code>iteratedSquare(100)</code> should return <code>1</code>.</p>",
      "testString": "assert.equal(iteratedSquare(100), 1);"
    }
  ],
  "description": "<section id=\"description\">\n<p>If you add the square of the digits of a Natural number (an integer bigger than zero), you always end with either 1 or 89:</p>\n<pre>15 -> 26 -> 40 -> 16 -> 37 -> 58 -> 89\n7 -> 49 -> 97 -> 130 -> 10 -> 1\n</pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Write a function that takes a number as a parameter and returns 1 or 89 after performing the mentioned process.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 73,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "599d15309e88c813a40baf58",
  "title": "Entropy",
  "challengeType": 1,
  "forumTopicId": 302254,
  "dashedName": "entropy",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function entropy(s) {\n\n}",
      "error": null,
      "seed": "function entropy(s) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function entropy(s) {\n    // Create a dictionary of character frequencies and iterate over it.\n  function process(s, evaluator) {\n    let h = Object.create(null),\n      k;\n    s.split('').forEach(c => {\n      h[c] && h[c]++ || (h[c] = 1); });\n    if (evaluator) for (k in h) evaluator(k, h[k]);\n    return h;\n  }\n    // Measure the entropy of a string in bits per symbol.\n\n  let sum = 0,\n    len = s.length;\n  process(s, (k, f) => {\n    const p = f / len;\n    sum -= p * Math.log(p) / Math.log(2);\n  });\n  return sum;\n}",
        "error": null,
        "seed": "function entropy(s) {\n    // Create a dictionary of character frequencies and iterate over it.\n  function process(s, evaluator) {\n    let h = Object.create(null),\n      k;\n    s.split('').forEach(c => {\n      h[c] && h[c]++ || (h[c] = 1); });\n    if (evaluator) for (k in h) evaluator(k, h[k]);\n    return h;\n  }\n    // Measure the entropy of a string in bits per symbol.\n\n  let sum = 0,\n    len = s.length;\n  process(s, (k, f) => {\n    const p = f / len;\n    sum -= p * Math.log(p) / Math.log(2);\n  });\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>entropy</code> should be a function.</p>",
      "testString": "assert(typeof entropy === 'function');"
    },
    {
      "text": "<p><code>entropy(\"0\")</code> should return <code>0</code></p>",
      "testString": "assert.equal(entropy('0'), 0);"
    },
    {
      "text": "<p><code>entropy(\"01\")</code> should return <code>1</code></p>",
      "testString": "assert.equal(entropy('01'), 1);"
    },
    {
      "text": "<p><code>entropy(\"0123\")</code> should return <code>2</code></p>",
      "testString": "assert.equal(entropy('0123'), 2);"
    },
    {
      "text": "<p><code>entropy(\"01234567\")</code> should return <code>3</code></p>",
      "testString": "assert.equal(entropy('01234567'), 3);"
    },
    {
      "text": "<p><code>entropy(\"0123456789abcdef\")</code> should return <code>4</code></p>",
      "testString": "assert.equal(entropy('0123456789abcdef'), 4);"
    },
    {
      "text": "<p><code>entropy(\"1223334444\")</code> should return <code>1.8464393446710154</code></p>",
      "testString": "assert.equal(entropy('1223334444'), 1.8464393446710154);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Calculate the Shannon entropy H of a given input string.</p>\n<p>Given the discrete random variable $X$ that is a string of $N$ \"symbols\" (total characters) consisting of $n$ different characters (n=2 for binary), the Shannon entropy of X in bits/symbol is:</p>\n<p>$H_2(X) = -\\sum_{i=1}^n \\frac{count_i}{N} \\log_2 \\left(\\frac{count_i}{N}\\right)$</p>\n<p>where $count_i$ is the count of character $n_i$.</p>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 37,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
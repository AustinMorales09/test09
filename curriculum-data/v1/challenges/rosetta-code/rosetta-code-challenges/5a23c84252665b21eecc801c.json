{
  "id": "5a23c84252665b21eecc801c",
  "title": "Spiral matrix",
  "challengeType": 1,
  "forumTopicId": 302321,
  "dashedName": "spiral-matrix",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function spiralArray(n) {\n\n}",
      "error": null,
      "seed": "function spiralArray(n) {\n\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function spiralArray(n) {\n  var arr = Array(n),\n    x = 0,\n    y = n,\n    total = n * n--,\n    dx = 1,\n    dy = 0,\n    i = 0,\n    j = 0;\n  while (y) arr[--y] = [];\n  while (i < total) {\n    arr[y][x] = i++;\n    x += dx;\n    y += dy;\n    if (++j == n) {\n      if (dy < 0) {\n        x++;\n        y++;\n        n -= 2;\n      }\n      j = dx;\n      dx = -dy;\n      dy = j;\n      j = 0;\n    }\n  }\n  return arr;\n}",
        "error": null,
        "seed": "function spiralArray(n) {\n  var arr = Array(n),\n    x = 0,\n    y = n,\n    total = n * n--,\n    dx = 1,\n    dy = 0,\n    i = 0,\n    j = 0;\n  while (y) arr[--y] = [];\n  while (i < total) {\n    arr[y][x] = i++;\n    x += dx;\n    y += dy;\n    if (++j == n) {\n      if (dy < 0) {\n        x++;\n        y++;\n        n -= 2;\n      }\n      j = dx;\n      dx = -dy;\n      dy = j;\n      j = 0;\n    }\n  }\n  return arr;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>spiralArray</code> should be a function.</p>",
      "testString": "assert(typeof spiralArray == 'function');"
    },
    {
      "text": "<p><code>spiralArray(3)</code> should return an array.</p>",
      "testString": "assert(Array.isArray(spiralArray(3)));"
    },
    {
      "text": "<p><code>spiralArray(3)</code> should return <code>[[0, 1, 2],[7, 8, 3],[6, 5, 4]]</code>.</p>",
      "testString": "assert.deepEqual(spiralArray(3), [\n  [0, 1, 2],\n  [7, 8, 3],\n  [6, 5, 4]\n]);"
    },
    {
      "text": "<p><code>spiralArray(4)</code> should return <code>[[0, 1, 2, 3],[11, 12, 13, 4],[10, 15, 14, 5],[9, 8, 7, 6]]</code>.</p>",
      "testString": "assert.deepEqual(spiralArray(4), [\n  [0, 1, 2, 3],\n  [11, 12, 13, 4],\n  [10, 15, 14, 5],\n  [9, 8, 7, 6]\n]);"
    },
    {
      "text": "<p><code>spiralArray(5)</code> should return <code>[[0, 1, 2, 3, 4],[15, 16, 17, 18, 5],[14, 23, 24, 19, 6],[13, 22, 21, 20, 7],[12, 11, 10, 9, 8]]</code>.</p>",
      "testString": "assert.deepEqual(spiralArray(5), [\n  [0, 1, 2, 3, 4],\n  [15, 16, 17, 18, 5],\n  [14, 23, 24, 19, 6],\n  [13, 22, 21, 20, 7],\n  [12, 11, 10, 9, 8]\n]);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Produce a spiral array. A <em>spiral array</em> is a square arrangement of the first N<sup>2</sup> natural numbers, where the numbers increase sequentially as you go around the edges of the array spiraling inwards. For example, given <strong>5</strong>, produce this array:</p>\n<pre>\n0  1  2  3  4\n15 16 17 18 5\n14 23 24 19 6\n13 22 21 20 7\n12 11 10  9 8\n</pre>\n</section>",
  "translationPending": false,
  "block": "rosetta-code-challenges",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 17,
  "certification": "rosetta-code",
  "superBlock": "rosetta-code",
  "challengeOrder": 131,
  "required": [],
  "helpCategory": "Rosetta",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
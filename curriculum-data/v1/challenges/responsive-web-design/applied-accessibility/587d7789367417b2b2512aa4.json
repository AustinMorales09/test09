{
  "id": "587d7789367417b2b2512aa4",
  "title": "Improve Accessibility of Audio Content with the audio Element",
  "challengeType": 0,
  "videoUrl": "https://scrimba.com/c/cVJVkcZ",
  "forumTopicId": 301014,
  "dashedName": "improve-accessibility-of-audio-content-with-the-audio-element",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n\n\n\n  </main>\n</body>",
      "error": null,
      "seed": "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n\n\n\n  </main>\n</body>"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.html"
        ],
        "name": "index",
        "ext": "html",
        "path": "index.html",
        "fileKey": "indexhtml",
        "contents": "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n    <audio controls>\n      <source src=\"https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3\" type=\"audio/mpeg\"/>\n    </audio>\n  </main>\n</body>",
        "error": null,
        "seed": "<body>\n  <header>\n    <h1>Real Coding Ninjas</h1>\n  </header>\n  <main>\n    <p>A sound clip of Zersiax's screen reader in action.</p>\n    <audio controls>\n      <source src=\"https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3\" type=\"audio/mpeg\"/>\n    </audio>\n  </main>\n</body>"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should have one <code>audio</code> tag.</p>",
      "testString": "assert($('audio').length === 1);"
    },
    {
      "text": "<p>Your <code>audio</code> element should have a closing tag.</p>",
      "testString": "assert(\n  code.match(/<\\/audio>/g).length === 1 &&\n    code.match(/<audio.*>[\\s\\S]*<\\/audio>/g)\n);"
    },
    {
      "text": "<p>The <code>audio</code> tag should have the <code>controls</code> attribute.</p>",
      "testString": "assert($('audio').attr('controls'));"
    },
    {
      "text": "<p>Your code should have one <code>source</code> tag.</p>",
      "testString": "assert($('source').length === 1);"
    },
    {
      "text": "<p>Your <code>source</code> tag should be inside the <code>audio</code> tags.</p>",
      "testString": "assert($('audio').children('source').length === 1);"
    },
    {
      "text": "<p>The value for the <code>src</code> attribute on the <code>source</code> tag should match the link in the instructions exactly.</p>",
      "testString": "assert(\n  $('source').attr('src') ===\n    'https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3'\n);"
    },
    {
      "text": "<p>Your code should include a <code>type</code> attribute on the <code>source</code> tag with a value of audio/mpeg.</p>",
      "testString": "assert($('source').attr('type') === 'audio/mpeg');"
    }
  ],
  "description": "<section id=\"description\">\n<p>HTML5's <code>audio</code> element gives semantic meaning when it wraps sound or audio stream content in your markup. Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. This can be done with nearby text on the page or a link to a transcript.</p>\n<p>The <code>audio</code> tag supports the <code>controls</code> attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, meaning it doesn't need a value, its presence on the tag turns the setting on.</p>\n<p>Here's an example:</p>\n<pre><code class=\"language-html\">&#x3C;audio id=\"meowClip\" controls>\n  &#x3C;source src=\"audio/meow.mp3\" type=\"audio/mpeg\">\n  &#x3C;source src=\"audio/meow.ogg\" type=\"audio/ogg\">\n&#x3C;/audio>\n</code></pre>\n<p><strong>Note:</strong> Multimedia content usually has both visual and auditory components. It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Time to take a break from Camper Cat and meet fellow camper Zersiax (@zersiax), a champion of accessibility and a screen reader user. To hear a clip of his screen reader in action, add an <code>audio</code> element after the <code>p</code> element. Include the <code>controls</code> attribute. Then place a <code>source</code> element inside the <code>audio</code> tags with the <code>src</code> attribute set to <code>https://cdn.freecodecamp.org/curriculum/applied-accessibility/screen-reader.mp3</code> and <code>type</code> attribute set to <code>\"audio/mpeg\"</code>.</p>\n<p><strong>Note:</strong> The audio clip may sound fast and be difficult to understand, but that is a normal speed for screen reader users.</p>\n</section>",
  "translationPending": false,
  "block": "applied-accessibility",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 18,
  "certification": "responsive-web-design",
  "superBlock": "responsive-web-design",
  "challengeOrder": 8,
  "required": [],
  "helpCategory": "HTML-CSS",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
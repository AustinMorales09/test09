{
  "id": "587d824a367417b2b2512c45",
  "title": "Anonymous Message Board",
  "challengeType": 4,
  "forumTopicId": 301568,
  "dashedName": "anonymous-message-board",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You can provide your own project, not the example URL.</p>",
      "testString": "(getUserInput) => {\n  assert(\n    !/.*\\/anonymous-message-board\\.freecodecamp\\.rocks/.test(\n      getUserInput('url')\n    )\n  );\n};"
    },
    {
      "text": "<p>Only allow your site to be loaded in an iFrame on your own pages.</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(parsed.headers['x-frame-options']?.includes('SAMEORIGIN'));\n};"
    },
    {
      "text": "<p>Do not allow DNS prefetching.</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(parsed.headers['x-dns-prefetch-control']?.includes('off'));\n};"
    },
    {
      "text": "<p>Only allow your site to send the referrer for your own pages.</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.isTrue(parsed.headers['referrer-policy']?.includes('same-origin'));\n};"
    },
    {
      "text": "<p>You can send a POST request to <code>/api/threads/{board}</code> with form data including <code>text</code> and <code>delete_password</code>. The saved database record will have at least the fields <code>_id</code>, <code>text</code>, <code>created_on</code>(date &#x26; time), <code>bumped_on</code>(date &#x26; time, starts same as <code>created_on</code>), <code>reported</code> (boolean), <code>delete_password</code>, &#x26; <code>replies</code> (array).</p>",
      "testString": "async (getUserInput) => {\n  const date = new Date();\n  const text = `fcc_test_${date}`;\n  const deletePassword = 'delete_me';\n  const data = { text, delete_password: deletePassword };\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/threads/fcc_test', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n  if (res.ok) {\n    const checkData = await fetch(url + '/api/threads/fcc_test');\n    const parsed = await checkData.json();\n    try {\n      assert.equal(parsed[0].text, text);\n      assert.isNotNull(parsed[0]._id);\n      assert.equal(new Date(parsed[0].created_on).toDateString(), date.toDateString());\n      assert.equal(parsed[0].bumped_on, parsed[0].created_on);\n      assert.isArray(parsed[0].replies);\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a POST request to <code>/api/replies/{board}</code> with form data including <code>text</code>, <code>delete_password</code>, &#x26; <code>thread_id</code>. This will update the <code>bumped_on</code> date to the comment's date. In the thread's <code>replies</code> array, an object will be saved with at least the properties <code>_id</code>, <code>text</code>, <code>created_on</code>, <code>delete_password</code>, &#x26; <code>reported</code>.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n  const body = await fetch(url + '/api/threads/fcc_test');\n  const thread = await body.json();\n\n  const date = new Date();\n  const text = `fcc_test_reply_${date}`;\n  const delete_password = 'delete_me';\n  const thread_id = thread[0]._id;\n  const replyCount = thread[0].replies.length;\n\n  const data = { text, delete_password, thread_id };\n  const res = await fetch(url + '/api/replies/fcc_test', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n  if (res.ok) {\n    const checkData = await fetch(`${url}/api/replies/fcc_test?thread_id=${thread_id}`);\n    const parsed = await checkData.json();\n    try {\n      assert.equal(parsed.replies.length, replyCount + 1);\n      assert.equal(parsed.replies[0].text, text);\n      assert.equal(parsed._id, thread_id);\n      assert.equal(parsed.bumped_on, parsed.replies[0].created_on);\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a GET request to <code>/api/threads/{board}</code>. Returned will be an array of the most recent 10 bumped threads on the board with only the most recent 3 replies for each. The <code>reported</code> and <code>delete_password</code> fields will not be sent to the client.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n  const res = await fetch(url + '/api/threads/fcc_test');\n\n  if (res.ok) {\n    const threads = await res.json();\n    try {\n      assert.equal(res.status, 200);\n      assert.isAtMost(threads.length, 10);\n      for (let i = 0; i < threads.length; i++) {\n        assert.containsAllKeys(threads[i], [\"_id\", \"text\", \"created_on\", \"bumped_on\", \"replies\"]);\n        assert.isAtMost(threads[i].replies.length, 3);\n        assert.notExists(threads[i].delete_password);\n        assert.notExists(threads[i].reported);\n        for (let j = 0; j < threads[i].replies.length; j++) {\n          assert.notExists(threads[i].replies[j].delete_password);\n          assert.notExists(threads[i].replies[j].reported);\n        }\n      }\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a GET request to <code>/api/replies/{board}?thread_id={thread_id}</code>. Returned will be the entire thread with all its replies, also excluding the same fields from the client as the previous test.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n  let res = await fetch(url + '/api/threads/fcc_test');\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  res = await fetch(`${url}/api/replies/fcc_test?thread_id=${thread_id}`);\n\n  if (res.ok) {\n    const thread = await res.json();\n    try {\n      assert.equal(res.status, 200);\n      assert.isObject(thread);\n      assert.containsAllKeys(thread, [\"_id\", \"text\", \"created_on\", \"bumped_on\", \"replies\"]);\n      assert.isArray(thread.replies);\n      assert.notExists(thread.delete_password);\n      assert.notExists(thread.reported);\n      for (let i = 0; i < thread.replies.length; i++) {\n        assert.notExists(thread.replies[i].delete_password);\n        assert.notExists(thread.replies[i].reported);\n      }\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a DELETE request to <code>/api/threads/{board}</code> and pass along the <code>thread_id</code> &#x26; <code>delete_password</code> to delete the thread. Returned will be the string <code>incorrect password</code> or <code>success</code>.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n  let res = await fetch(url + '/api/threads/fcc_test');\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  let data = { thread_id, delete_password: \"wrong_password\" };\n  const res_invalid = await fetch(url + '/api/threads/fcc_test', {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n  data = { thread_id, delete_password: \"delete_me\" };\n  res = await fetch(url + '/api/threads/fcc_test', {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\n  if (res.ok) {\n    const deleted = await res.text();\n    const not_deleted = await res_invalid.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(deleted, \"success\");\n      assert.equal(not_deleted, \"incorrect password\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a DELETE request to <code>/api/replies/{board}</code> and pass along the <code>thread_id</code>, <code>reply_id</code>, &#x26; <code>delete_password</code>. Returned will be the string <code>incorrect password</code> or <code>success</code>. On success, the text of the <code>reply_id</code> will be changed to <code>[deleted]</code>.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n\n  const thread_data = {\n    text: \"fcc_test_thread\",\n    delete_password: \"delete_me\",\n  };\n  await fetch(`${url}/api/threads/fcc_test`, {\n    method: \"POST\",\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(thread_data)\n  });\n  let res = await fetch(`${url}/api/threads/fcc_test`);\n  let threads = await res.json();\n  const thread_id = threads[0]._id;\n  \n  const reply_data = { thread_id, text: \"fcc_test_reply\", delete_password: \"delete_me\" };\n  await fetch(`${url}/api/replies/fcc_test`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(reply_data)\n  });\n  res = await fetch(`${url}/api/threads/fcc_test`);\n  threads = await res.json();\n  const reply_id = threads[0].replies[0]._id;\n\n  const data = { thread_id, reply_id, delete_password: \"delete_me\" };\n  res = await fetch(url + '/api/replies/fcc_test', {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\n  if (res.ok) {\n    const deleted = await res.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(deleted, \"success\");\n      res = await fetch(`${url}/api/replies/fcc_test?thread_id=${thread_id}`);\n      const thread = await res.json();\n      assert.equal(thread._id, thread_id);\n      assert.equal(thread.replies[0]._id, reply_id);\n      assert.equal(thread.replies[0].text, \"[deleted]\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a PUT request to <code>/api/threads/{board}</code> and pass along the <code>thread_id</code>. Returned will be the string <code>reported</code>. The <code>reported</code> value of the <code>thread_id</code> will be changed to <code>true</code>.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n\n  let res = await fetch(`${url}/api/threads/fcc_test`);\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  const data = { thread_id };\n  \n  res = await fetch(`${url}/api/threads/fcc_test`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\n  if (res.ok) {\n    const reported = await res.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(reported, \"reported\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>You can send a PUT request to <code>/api/replies/{board}</code> and pass along the <code>thread_id</code> &#x26; <code>reply_id</code>. Returned will be the string <code>reported</code>. The <code>reported</code> value of the <code>reply_id</code> will be changed to <code>true</code>.</p>",
      "testString": "async (getUserInput) => {\n  const url = getUserInput('url');\n\n  let res = await fetch(`${url}/api/threads/fcc_test`);\n  const threads = await res.json();\n  const thread_id = threads[0]._id;\n  const reply_id = threads[0].replies[0]._id;\n  const data = { thread_id, reply_id };\n  \n  res = await fetch(`${url}/api/replies/fcc_test`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  });\n\n  if (res.ok) {\n    const reported = await res.text();\n    try {\n      assert.equal(res.status, 200);\n      assert.equal(reported, \"reported\");\n    } catch (err) {\n      throw new Error(err.responseText || err.message);\n    }\n  } else {\n    throw new Error(`${res.status} ${res.statusText}`);\n  }\n};"
    },
    {
      "text": "<p>All 10 functional tests are complete and passing.</p>",
      "testString": "async (getUserInput) => {\n  const tests = await fetch(getUserInput('url') + '/_api/get-tests');\n  const parsed = await tests.json();\n  assert.isTrue(parsed.length >= 10);\n  parsed.forEach((test) => {\n    assert.equal(test.state, 'passed');\n    assert.isAtLeast(test.assertions.length, 1);\n  });\n};"
    }
  ],
  "description": "<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://anonymous-message-board.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://anonymous-message-board.freecodecamp.rocks/</a>.</p>\n<p>Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-messageboard/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-messageboard/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<ol>\n<li>Set <code>NODE_ENV</code> to test without quotes when ready to write tests and DB to your databases connection string (in <code>.env</code>)</li>\n<li>Recommended to create controllers/handlers and handle routing in <code>routes/api.js</code></li>\n<li>You will add any security features to <code>server.js</code></li>\n</ol>\n<p>Write the following tests in <code>tests/2_functional-tests.js</code>:</p>\n<ul>\n<li>Creating a new thread: POST request to <code>/api/threads/{board}</code></li>\n<li>Viewing the 10 most recent threads with 3 replies each: GET request to <code>/api/threads/{board}</code></li>\n<li>Deleting a thread with the incorrect password: DELETE request to <code>/api/threads/{board}</code> with an invalid <code>delete_password</code></li>\n<li>Deleting a thread with the correct password: DELETE request to <code>/api/threads/{board}</code> with a valid <code>delete_password</code></li>\n<li>Reporting a thread: PUT request to <code>/api/threads/{board}</code></li>\n<li>Creating a new reply: POST request to <code>/api/replies/{board}</code></li>\n<li>Viewing a single thread with all replies: GET request to <code>/api/replies/{board}</code></li>\n<li>Deleting a reply with the incorrect password: DELETE request to <code>/api/replies/{board}</code> with an invalid <code>delete_password</code></li>\n<li>Deleting a reply with the correct password: DELETE request to <code>/api/replies/{board}</code> with a valid <code>delete_password</code></li>\n<li>Reporting a reply: PUT request to <code>/api/replies/{board}</code></li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "information-security-projects",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 9,
  "certification": "information-security",
  "superBlock": "information-security",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
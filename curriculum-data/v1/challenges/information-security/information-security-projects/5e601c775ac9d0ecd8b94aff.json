{
  "id": "5e601c775ac9d0ecd8b94aff",
  "title": "Secure Real Time Multiplayer Game",
  "challengeType": 4,
  "forumTopicId": 462375,
  "dashedName": "secure-real-time-multiplayer-game",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You can provide your own project, not the example URL.</p>",
      "testString": "(getUserInput) => {\n  assert(\n    !/.*\\/secure-real-time-multiplayer-game\\.freecodecamp\\.rocks/.test(\n      getUserInput('url')\n    )\n  );\n};"
    },
    {
      "text": "<p>Multiple players can connect to a server and play.</p>",
      "testString": ""
    },
    {
      "text": "<p>Each player has an avatar.</p>",
      "testString": ""
    },
    {
      "text": "<p>Each player is represented by an object created by the <code>Player</code> class in <code>Player.mjs</code>.</p>",
      "testString": ""
    },
    {
      "text": "<p>At a minimum, each player object should contain a unique <code>id</code>, a <code>score</code>, and <code>x</code> and <code>y</code> coordinates representing the player's current position.</p>",
      "testString": ""
    },
    {
      "text": "<p>The game has at least one type of collectible item. Complete the <code>Collectible</code> class in <code>Collectible.mjs</code> to implement this.</p>",
      "testString": ""
    },
    {
      "text": "<p>At a minimum, each collectible item object created by the <code>Collectible</code> class should contain a unique <code>id</code>, a <code>value</code>, and <code>x</code> and <code>y</code> coordinates representing the item's current position.</p>",
      "testString": ""
    },
    {
      "text": "<p>Players can use the WASD and/or arrow keys to move their avatar. Complete the <code>movePlayer</code> method in <code>Player.mjs</code> to implement this.</p>",
      "testString": ""
    },
    {
      "text": "<p>The <code>movePlayer</code> method should accept two arguments: a string of \"up\", \"down\", \"left\", or \"right\", and a number for the amount of pixels the player's position should change. <code>movePlayer</code> should adjust the <code>x</code> and <code>y</code> coordinates of the player object it's called from.</p>",
      "testString": ""
    },
    {
      "text": "<p>The player's score should be used to calculate their rank among the other players. Complete the <code>calculateRank</code> method in the <code>Player</code> class to implement this.</p>",
      "testString": ""
    },
    {
      "text": "<p>The <code>calculateRank</code> method should accept an array of objects representing all connected players and return the string <code>Rank: currentRanking/totalPlayers</code>. For example, in a game with two players, if Player A has a score of 3 and Player B has a score of 5, <code>calculateRank</code> for Player A should return <code>Rank: 2/2</code>.</p>",
      "testString": ""
    },
    {
      "text": "<p>Players can collide with a collectible item. Complete the <code>collision</code> method in <code>Player.mjs</code> to implement this.</p>",
      "testString": ""
    },
    {
      "text": "<p>The <code>collision</code> method should accept a collectible item's object as an argument. If the player's avatar intersects with the item, the <code>collision</code> method should return <code>true</code>.</p>",
      "testString": ""
    },
    {
      "text": "<p>All players are kept in sync.</p>",
      "testString": ""
    },
    {
      "text": "<p>Players can disconnect from the game at any time.</p>",
      "testString": ""
    },
    {
      "text": "<p>Prevent the client from trying to guess / sniff the MIME type.</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['x-content-type-options'], 'nosniff');\n};"
    },
    {
      "text": "<p>Prevent cross-site scripting (XSS) attacks.</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['x-xss-protection'], '1; mode=block');\n};"
    },
    {
      "text": "<p>Nothing from the website is cached in the client.</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['surrogate-control'], 'no-store');\n  assert.equal(\n    parsed.headers['cache-control'],\n    'no-store, no-cache, must-revalidate, proxy-revalidate'\n  );\n  assert.equal(parsed.headers['pragma'], 'no-cache');\n  assert.equal(parsed.headers['expires'], '0');\n};"
    },
    {
      "text": "<p>The headers say that the site is powered by \"PHP 7.4.3\" even though it isn't (as a security measure).</p>",
      "testString": "async (getUserInput) => {\n  const data = await fetch(getUserInput('url') + '/_api/app-info');\n  const parsed = await data.json();\n  assert.equal(parsed.headers['x-powered-by'], 'PHP 7.4.3');\n};"
    }
  ],
  "description": "<section id=\"description\">\n<p>Develop a 2D real time multiplayer game using the HTML Canvas API and Socket.io that is functionally similar to this: <a href=\"https://secure-real-time-multiplayer-game.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://secure-real-time-multiplayer-game.freecodecamp.rocks/</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-secure-real-time-multiplayer-game/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-secure-real-time-multiplayer-game/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Create a secure multiplayer game in which each player can move their avatar, there is at least one collectible item, and the rank of the players is calculated based on their score.</p>\n<p>For details consult the tests below.</p>\n<p>Make sure that your game is secure! Include these security measures:</p>\n<ul>\n<li>The client should not be able to guess/sniff the MIME type</li>\n<li>Prevent XSS attacks</li>\n<li>Do not cache anything from the website in the client</li>\n<li>The headers say that the site is powered by <code>PHP 7.4.3</code></li>\n</ul>\n<p><strong>Note</strong>: <code>helmet@^3.21.3</code> is needed for the user stories. This means you will need to use the previous version of Helmet's docs, for information on how to achieve the user stories.</p>\n</section>",
  "translationPending": false,
  "block": "information-security-projects",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 9,
  "certification": "information-security",
  "superBlock": "information-security",
  "challengeOrder": 4,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "61437d575fb98f57fa8f7f36",
  "title": "Step 1",
  "challengeType": 0,
  "dashedName": "step-1",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        2
      ],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "",
      "error": null,
      "seed": ""
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "",
      "error": null,
      "seed": ""
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should contain the <code>DOCTYPE</code> reference.</p>",
      "testString": "assert(code.match(/<!DOCTYPE/gi));"
    },
    {
      "text": "<p>You should include a space after the <code>DOCTYPE</code> reference.</p>",
      "testString": "assert(code.match(/<!DOCTYPE\\s+/gi));"
    },
    {
      "text": "<p>You should define the document type to be <code>html</code>.</p>",
      "testString": "assert(code.match(/<!DOCTYPE\\s+html/gi));"
    },
    {
      "text": "<p>You should close the <code>DOCTYPE</code> declaration with a <code>></code> after the type.</p>",
      "testString": "assert(code.match(/<!DOCTYPE\\s+html\\s*>/gi));"
    },
    {
      "text": "<p>You should have an opening <code>&#x3C;html></code> tag, and it should have <code>lang</code> of <code>en</code>.</p>",
      "testString": "assert(code.match(/<html\\s+lang\\s*=\\s*('|\")en\\1\\s*>/gi));"
    },
    {
      "text": "<p>Your <code>html</code> element should have a closing tag.</p>",
      "testString": "assert(code.match(/<\\/html\\s*>/));"
    },
    {
      "text": "<p>Your <code>DOCTYPE</code> declaration should be at the beginning of your HTML.</p>",
      "testString": "assert(__helpers.removeHtmlComments(code).match(/^\\s*<!DOCTYPE\\s+html\\s*>/i));"
    },
    {
      "text": "<p>You should have an opening <code>&#x3C;head></code> tag.</p>",
      "testString": "assert(code.match(/<head\\s*>/i));"
    },
    {
      "text": "<p>You should have a closing <code>&#x3C;/head></code> tag.</p>",
      "testString": "assert(code.match(/<\\/head\\s*>/i));"
    },
    {
      "text": "<p>You should have an opening <code>&#x3C;body></code> tag.</p>",
      "testString": "assert(code.match(/<body\\s*>/i));"
    },
    {
      "text": "<p>You should have a closing <code>&#x3C;/body></code> tag.</p>",
      "testString": "assert(code.match(/<\\/body\\s*>/i));"
    },
    {
      "text": "<p>The <code>head</code> and <code>body</code> elements should be siblings.</p>",
      "testString": "assert(document.querySelector('head')?.nextElementSibling?.localName === 'body');"
    },
    {
      "text": "<p>The <code>head</code> element should be within the <code>html</code> element.</p>",
      "testString": "assert([...document.querySelector('html')?.children].some(x => x?.localName === 'head'));"
    },
    {
      "text": "<p>The <code>body</code> element should be within the <code>html</code> element.</p>",
      "testString": "assert([...document.querySelector('html')?.children].some(x => x?.localName === 'body'));"
    },
    {
      "text": "<p>You should have two <code>meta</code> elements.</p>",
      "testString": "const meta = document.querySelectorAll('meta');\nassert(meta?.length === 2);"
    },
    {
      "text": "<p>One <code>meta</code> element should have a <code>name</code> set to <code>viewport</code>, and <code>content</code> set to <code>width=device-width, initial-scale=1.0</code>.</p>",
      "testString": "const meta = [...document.querySelectorAll('meta')];\nconst target = meta?.find(m => m?.getAttribute('name') === 'viewport' && m?.getAttribute('content') === 'width=device-width, initial-scale=1.0' && !m?.getAttribute('charset'));\nassert.exists(target);"
    },
    {
      "text": "<p>The other <code>meta</code> element should have the <code>charset</code> attribute set to <code>UTF-8</code>.</p>",
      "testString": "const meta = [...document.querySelectorAll('meta')];\nconst target = meta?.find(m => !m?.getAttribute('name') && !m?.getAttribute('content') && m?.getAttribute('charset')?.toLowerCase() === 'utf-8');\nassert.exists(target);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Begin with your standard HTML boilerplate. Add a <code>DOCTYPE</code> declaration, an <code>html</code> element specifying this page is in English, a <code>head</code> element, and a <code>body</code> element.</p>\n<p>Add a <code>&#x3C;meta></code> tag with the appropriate <code>charset</code> and a <code>&#x3C;meta></code> tag for mobile responsiveness within the <code>head</code> element.</p>\n</section>",
  "translationPending": false,
  "block": "learn-css-grid-by-building-a-magazine",
  "hasEditableBoundaries": true,
  "order": 15,
  "superOrder": 0,
  "certification": "responsive-web-design",
  "superBlock": "2022/responsive-web-design",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "HTML-CSS",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
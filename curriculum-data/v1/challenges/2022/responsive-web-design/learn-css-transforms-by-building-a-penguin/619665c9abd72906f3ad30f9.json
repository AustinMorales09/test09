{
  "id": "619665c9abd72906f3ad30f9",
  "title": "Step 1",
  "challengeType": 0,
  "dashedName": "step-1",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        2
      ],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "",
      "error": null,
      "seed": ""
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "",
      "error": null,
      "seed": ""
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your code should have a <code>&#x3C;!DOCTYPE html></code> declaration.</p>",
      "testString": "assert(code.match(/<!DOCTYPE html>/i));"
    },
    {
      "text": "<p>Your code should have an <code>html</code> element.</p>",
      "testString": "assert.equal(document.querySelectorAll('html')?.length, 1);"
    },
    {
      "text": "<p>Your <code>html</code> element should have an opening tag with a <code>lang</code> attribute of <code>en</code>.</p>",
      "testString": "assert(code.match(/<html\\s+lang\\s*=\\s*('|\")en\\1\\s*>/gi));"
    },
    {
      "text": "<p>Your <code>html</code> element should have a closing tag.</p>",
      "testString": "assert(code.match(/<\\/html\\s*>/gi));"
    },
    {
      "text": "<p>Your code should have a <code>head</code> element within the <code>html</code> element.</p>",
      "testString": "assert.equal(document.querySelectorAll('head')?.length, 1);"
    },
    {
      "text": "<p>Your code should have a <code>body</code> element within the <code>html</code> element.</p>",
      "testString": "assert.equal(document.querySelectorAll('body')?.length, 1);"
    },
    {
      "text": "<p>Your <code>head</code> element should come before your <code>body</code> element.</p>",
      "testString": "assert.equal(document.querySelector('body')?.previousElementSibling?.tagName, 'HEAD');"
    },
    {
      "text": "<p>You should have two <code>meta</code> elements.</p>",
      "testString": "const meta = document.querySelectorAll('meta');\nassert.equal(meta?.length, 2);"
    },
    {
      "text": "<p>One <code>meta</code> element should have a <code>name</code> set to <code>viewport</code>, and <code>content</code> set to <code>width=device-width, initial-scale=1.0</code>.</p>",
      "testString": "const meta = [...document.querySelectorAll('meta')];\nconst target = meta?.find(m => m?.getAttribute('name') === 'viewport' && m?.getAttribute('content') === 'width=device-width, initial-scale=1.0' && !m?.getAttribute('charset'));\nassert.exists(target);"
    },
    {
      "text": "<p>The other <code>meta</code> element should have the <code>charset</code> attribute set to <code>UTF-8</code>.</p>",
      "testString": "const meta = [...document.querySelectorAll('meta')];\nconst target = meta?.find(m => !m?.getAttribute('name') && !m?.getAttribute('content') && m?.getAttribute('charset')?.toLowerCase() === 'utf-8');\nassert.exists(target);"
    },
    {
      "text": "<p>Your code should have a <code>title</code> element.</p>",
      "testString": "const title = document.querySelector('title');\nassert.exists(title);"
    },
    {
      "text": "<p>Your <code>title</code> should have some text.</p>",
      "testString": "const title = document.querySelector('title');\nassert.isAtLeast(title?.textContent?.length, 1);"
    },
    {
      "text": "<p>Your code should have a <code>link</code> element.</p>",
      "testString": "assert.exists(document.querySelector('link'));"
    },
    {
      "text": "<p>Your <code>link</code> element should be within your <code>head</code> element.</p>",
      "testString": "assert(code.match(/<head>[\\w\\W\\s]*<link[\\w\\W\\s]*\\/?>[\\w\\W\\s]*<\\/head>/i));"
    },
    {
      "text": "<p>Your <code>link</code> element should have a <code>rel</code> attribute with the value <code>stylesheet</code>.</p>",
      "testString": "const link_element = document.querySelector('link');\nconst rel = link_element.getAttribute(\"rel\");\nassert.equal(rel, \"stylesheet\");"
    },
    {
      "text": "<p>Your <code>link</code> element should have an <code>href</code> attribute with the value <code>styles.css</code>.</p>",
      "testString": "const link = document.querySelector('link');\nassert.equal(link.dataset.href, \"styles.css\");"
    }
  ],
  "description": "<section id=\"description\">\n<p>You will be building a happy Flappy Penguin, and further exploring CSS transforms and animations in the process.</p>\n<p>Begin with your basic HTML boilerplate. Include the <code>DOCTYPE</code> declaration, <code>html</code> element with a language set to English, the appropriate <code>meta</code> tags, a <code>head</code>, <code>body</code>, and <code>title</code> element. Also, link your stylesheet to the page.</p>\n</section>",
  "translationPending": false,
  "block": "learn-css-transforms-by-building-a-penguin",
  "hasEditableBoundaries": true,
  "order": 18,
  "superOrder": 0,
  "certification": "responsive-web-design",
  "superBlock": "2022/responsive-web-design",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "HTML-CSS",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
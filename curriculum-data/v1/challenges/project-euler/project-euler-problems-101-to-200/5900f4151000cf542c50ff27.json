{
  "id": "5900f4151000cf542c50ff27",
  "title": "Problem 168: Number Rotations",
  "challengeType": 1,
  "forumTopicId": 301802,
  "dashedName": "problem-168-number-rotations",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function numberRotations(a, b) {\n\n  return 0;\n}\n\nnumberRotations();",
      "error": null,
      "seed": "function numberRotations(a, b) {\n\n  return 0;\n}\n\nnumberRotations();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function numberRotations(minDigits, maxDigits) {\n  const DIGITS_TO_KEEP = 100000n;\n  const powersOfTen = Array(maxDigits).fill(0);\n  powersOfTen[0] = 1n;\n  for (let i = 1; i < maxDigits; i++) {\n    powersOfTen[i] = powersOfTen[i - 1] * 10n;\n  }\n\n  // We want numbers of the form xd * m = dx\n  // Or more precisely:\n  //   (x * 10 + d) * m = d*10^(n-1) + x\n  // Solving for x:\n  //   x = d (10^(n-1) - m) / (10 * m - 1)\n  let total = 0n;\n  for (let numDigits = minDigits; numDigits <= maxDigits; numDigits++) {\n    // Check all multiplier - digit pairs to see if a candidate can be built\n    //  with the correct number of digits\n    for (let multiplier = 1n; multiplier < 10n; multiplier++) {\n      for (let lastDigit = 1n; lastDigit < 10n; lastDigit++) {\n        const numerator   = lastDigit * (powersOfTen[numDigits - 1] - multiplier);\n        const denominator = (powersOfTen[1] * multiplier - 1n);\n        if (numerator % denominator === 0n) {\n          const candidate = (numerator / denominator) * 10n + lastDigit;\n          if (candidate.toString().length === numDigits) {\n            total = (total + candidate) % DIGITS_TO_KEEP;\n          }\n        }\n      }\n    }\n  }\n\n  return parseInt(total);\n}",
        "error": null,
        "seed": "function numberRotations(minDigits, maxDigits) {\n  const DIGITS_TO_KEEP = 100000n;\n  const powersOfTen = Array(maxDigits).fill(0);\n  powersOfTen[0] = 1n;\n  for (let i = 1; i < maxDigits; i++) {\n    powersOfTen[i] = powersOfTen[i - 1] * 10n;\n  }\n\n  // We want numbers of the form xd * m = dx\n  // Or more precisely:\n  //   (x * 10 + d) * m = d*10^(n-1) + x\n  // Solving for x:\n  //   x = d (10^(n-1) - m) / (10 * m - 1)\n  let total = 0n;\n  for (let numDigits = minDigits; numDigits <= maxDigits; numDigits++) {\n    // Check all multiplier - digit pairs to see if a candidate can be built\n    //  with the correct number of digits\n    for (let multiplier = 1n; multiplier < 10n; multiplier++) {\n      for (let lastDigit = 1n; lastDigit < 10n; lastDigit++) {\n        const numerator   = lastDigit * (powersOfTen[numDigits - 1] - multiplier);\n        const denominator = (powersOfTen[1] * multiplier - 1n);\n        if (numerator % denominator === 0n) {\n          const candidate = (numerator / denominator) * 10n + lastDigit;\n          if (candidate.toString().length === numDigits) {\n            total = (total + candidate) % DIGITS_TO_KEEP;\n          }\n        }\n      }\n    }\n  }\n\n  return parseInt(total);\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>numberRotations(2, 10)</code> should return <code>98311</code>.</p>",
      "testString": "assert.strictEqual(numberRotations(2, 10), 98311);"
    },
    {
      "text": "<p><code>numberRotations(2, 100)</code> should return <code>59206</code>.</p>",
      "testString": "assert.strictEqual(numberRotations(2, 100), 59206);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Consider the number 142857. We can right-rotate this number by moving the last digit (7) to the front of it, giving us 714285.</p>\n<p>It can be verified that $714285 = 5 Ã— 142857$.</p>\n<p>This demonstrates an unusual property of 142857: it is a divisor of its right-rotation.</p>\n<p>For integer number of digits $a$ and $b$, find the last 5 digits of the sum of all integers $n$, $10^a &#x3C; n &#x3C; 10^b$, that have this property.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-101-to-200",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 67,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
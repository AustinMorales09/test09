{
  "id": "5900f4231000cf542c50ff35",
  "title": "Problem 182: RSA encryption",
  "challengeType": 1,
  "forumTopicId": 301818,
  "dashedName": "problem-182-rsa-encryption",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function RSAEncryption(p, q) {\n\n  return true;\n}\n\nRSAEncryption(19, 37);",
      "error": null,
      "seed": "function RSAEncryption(p, q) {\n\n  return true;\n}\n\nRSAEncryption(19, 37);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function gcd(a, b) {\n    if (b)\n        return gcd(b, a % b);\n    else\n        return a;\n}\n\nfunction RSAEncryption(p, q) {\n    let phi = (p - 1) * (q - 1);\n\n    let best = Number.MAX_SAFE_INTEGER;\n    let sum = 0;\n\n    for (let e = 0; e < phi; ++e) {\n        if (!(gcd(e, phi) == 1))\n            continue;\n\n        let msg = (gcd(p - 1, e - 1) + 1) * (gcd(q - 1, e - 1) + 1);\n\n        if (best == msg) {\n            sum += e;\n        } else if (best > msg) {\n            best = msg;\n            sum = e;\n        }\n    }\n\n    return sum;\n}",
        "error": null,
        "seed": "function gcd(a, b) {\n    if (b)\n        return gcd(b, a % b);\n    else\n        return a;\n}\n\nfunction RSAEncryption(p, q) {\n    let phi = (p - 1) * (q - 1);\n\n    let best = Number.MAX_SAFE_INTEGER;\n    let sum = 0;\n\n    for (let e = 0; e < phi; ++e) {\n        if (!(gcd(e, phi) == 1))\n            continue;\n\n        let msg = (gcd(p - 1, e - 1) + 1) * (gcd(q - 1, e - 1) + 1);\n\n        if (best == msg) {\n            sum += e;\n        } else if (best > msg) {\n            best = msg;\n            sum = e;\n        }\n    }\n\n    return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>RSAEncryption</code> should be a function.</p>",
      "testString": "assert(typeof RSAEncryption === 'function')"
    },
    {
      "text": "<p><code>RSAEncryption</code> should return a number.</p>",
      "testString": "assert.strictEqual(typeof RSAEncryption(19, 37), 'number');"
    },
    {
      "text": "<p><code>RSAEncryption(19, 37)</code> should return <code>17766</code>.</p>",
      "testString": "assert.strictEqual(RSAEncryption(19, 37), 17766);"
    },
    {
      "text": "<p><code>RSAEncryption(283, 409)</code> should return <code>466196580</code>.</p>",
      "testString": "assert.strictEqual(RSAEncryption(283, 409), 466196580);"
    },
    {
      "text": "<p><code>RSAEncryption(1009, 3643)</code> should return <code>399788195976</code>.</p>",
      "testString": "assert.strictEqual(RSAEncryption(19, 37), 17766);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The RSA encryption is based on the following procedure:</p>\n<p>Generate two distinct primes <code>p</code> and <code>q</code>.\nCompute <code>n=p*q</code> and <code>φ=(p-1)(q-1)</code>.\nFind an integer <code>e</code>, <code>1 &#x3C; e &#x3C; φ</code>, such that <code>gcd(e,φ) = 1</code></p>\n<p>A message in this system is a number in the interval <code>[0,n-1]</code>.\nA text to be encrypted is then somehow converted to messages (numbers in the interval <code>[0,n-1]</code>).\nTo encrypt the text, for each message, <code>m</code>, c=m<sup>e</sup> mod n is calculated.</p>\n<p>To decrypt the text, the following procedure is needed: calculate <code>d</code> such that <code>ed=1 mod φ</code>, then for each encrypted message, <code>c</code>, calculate m=c<sup>d</sup> mod n.</p>\n<p>There exist values of <code>e</code> and <code>m</code> such that m<sup>e</sup> mod n = m.\nWe call messages <code>m</code> for which m<sup>e</sup> mod n=m unconcealed messages.</p>\n<p>An issue when choosing <code>e</code> is that there should not be too many unconcealed messages.\nFor instance, let <code>p=19</code> and <code>q=37</code>.\nThen <code>n=19*37=703</code> and <code>φ=18*36=648</code>.\nIf we choose <code>e=181</code>, then, although <code>gcd(181,648)=1</code> it turns out that all possible messages\nm <code>(0≤m≤n-1)</code> are unconcealed when calculating m<sup>e</sup> mod n.\nFor any valid choice of <code>e</code> there exist some unconcealed messages.\nIt's important that the number of unconcealed messages is at a minimum.</p>\n<p>For any given <code>p</code> and <code>q</code>, find the sum of all values of <code>e</code>, <code>1 &#x3C; e &#x3C; φ(p,q)</code> and <code>gcd(e,φ)=1</code>, so that the number of unconcealed messages for this value of <code>e</code> is at a minimum.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-101-to-200",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 81,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
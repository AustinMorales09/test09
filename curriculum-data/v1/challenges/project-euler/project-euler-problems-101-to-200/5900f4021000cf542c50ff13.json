{
  "id": "5900f4021000cf542c50ff13",
  "title": "Problem 149: Searching for a maximum-sum subsequence",
  "challengeType": 1,
  "forumTopicId": 301778,
  "dashedName": "problem-149-searching-for-a-maximum-sum-subsequence",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function maximumSubSequence() {\n\n  return true;\n}\n\nmaximumSubSequence();",
      "error": null,
      "seed": "function maximumSubSequence() {\n\n  return true;\n}\n\nmaximumSubSequence();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "// solution required",
        "error": null,
        "seed": "// solution required"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>maximumSubSequence()</code> should return <code>52852124</code>.</p>",
      "testString": "assert.strictEqual(maximumSubSequence(), 52852124);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is $16 (= 8 + 7 + 1)$.</p>\n<p>$$\\begin{array}{|r|r|r|r|}\n\\hline\n−2 &#x26;  5 &#x26;  3 &#x26; 2 \\\\ \\hline\n9 &#x26; −6 &#x26;  5 &#x26; 1 \\\\ \\hline\n3 &#x26;  2 &#x26;  7 &#x26; 3 \\\\ \\hline\n−1 &#x26;  8 &#x26; −4 &#x26; 8 \\\\ \\hline\n\\end{array}$$</p>\n<p>Now, let us repeat the search, but on a much larger scale:</p>\n<p>First, generate four million pseudo-random numbers using a specific form of what is known as a \"Lagged Fibonacci Generator\":</p>\n<p>For $1 ≤ k ≤ 55$, $s_k = (100003 − 200003k + 300007{k}^3) \\ (modulo\\ 1000000) − 500000$.</p>\n<p>For $56 ≤ k ≤ 4000000$, $s_k = (s_{k − 24} + s_{k − 55} + 1000000) \\ (modulo\\ 1000000) − 500000$.</p>\n<p>Thus, $s_{10} = −393027$ and $s_{100} = 86613$.</p>\n<p>The terms of $s$ are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on.</p>\n<p>Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal).</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-101-to-200",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 48,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
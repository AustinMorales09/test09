{
  "id": "5900f36e1000cf542c50fe81",
  "title": "Problem 2: Even Fibonacci Numbers",
  "challengeType": 1,
  "forumTopicId": 301838,
  "dashedName": "problem-2-even-fibonacci-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function fiboEvenSum(n) {\n\n  return true;\n}",
      "error": null,
      "seed": "function fiboEvenSum(n) {\n\n  return true;\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const fiboEvenSum = (number) => {\n  if (number <= 1) {\n    return 0;\n  } else {\n    let evenSum = 0,\n      prevFibNum = 1,\n      fibNum = 2; // According to problem description our Fibonacci series starts with 1, 2\n    for (let i = 2; fibNum <= number; i++) {\n      if (fibNum % 2 == 0) {\n        evenSum += fibNum;\n      }\n      [prevFibNum, fibNum] = [fibNum, prevFibNum + fibNum];\n    }\n    return evenSum;\n  }\n};",
        "error": null,
        "seed": "const fiboEvenSum = (number) => {\n  if (number <= 1) {\n    return 0;\n  } else {\n    let evenSum = 0,\n      prevFibNum = 1,\n      fibNum = 2; // According to problem description our Fibonacci series starts with 1, 2\n    for (let i = 2; fibNum <= number; i++) {\n      if (fibNum % 2 == 0) {\n        evenSum += fibNum;\n      }\n      [prevFibNum, fibNum] = [fibNum, prevFibNum + fibNum];\n    }\n    return evenSum;\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>fiboEvenSum(10)</code> should return a number.</p>",
      "testString": "assert(typeof fiboEvenSum(10) === 'number');"
    },
    {
      "text": "<p>Your function should return an even value.</p>",
      "testString": "assert.equal(fiboEvenSum(10) % 2 === 0, true);"
    },
    {
      "text": "<p>Your function should sum the even-valued Fibonacci numbers: <code>fiboEvenSum(8)</code> should return 10.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(8), 10);"
    },
    {
      "text": "<p><code>fiboEvenSum(10)</code> should return 10.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(10), 10);"
    },
    {
      "text": "<p><code>fiboEvenSum(34)</code> should return 44.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(34), 44);"
    },
    {
      "text": "<p><code>fiboEvenSum(60)</code> should return 44.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(60), 44);"
    },
    {
      "text": "<p><code>fiboEvenSum(1000)</code> should return 798.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(1000), 798);"
    },
    {
      "text": "<p><code>fiboEvenSum(100000)</code> should return 60696.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(100000), 60696);"
    },
    {
      "text": "<p><code>fiboEvenSum(4000000)</code> should return 4613732.</p>",
      "testString": "assert.strictEqual(fiboEvenSum(4000000), 4613732);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>\n<div style='text-align: center;'>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</div>\n<p>By considering the terms in the Fibonacci sequence whose values do not exceed <code>n</code>, find the sum of the even-valued terms.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 1,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
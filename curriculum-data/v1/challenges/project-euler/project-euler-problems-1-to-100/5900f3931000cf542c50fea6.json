{
  "id": "5900f3931000cf542c50fea6",
  "title": "Problem 39: Integer right triangles",
  "challengeType": 1,
  "forumTopicId": 302054,
  "dashedName": "problem-39-integer-right-triangles",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function intRightTriangles(n) {\n\n  return n;\n}\n\nintRightTriangles(500);",
      "error": null,
      "seed": "function intRightTriangles(n) {\n\n  return n;\n}\n\nintRightTriangles(500);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "// Original idea for this solution came from\n// https://www.xarg.org/puzzle/project-euler/problem-39/\n\nfunction intRightTriangles(n) {\n  // store the number of triangles with a given perimeter\n  let triangles = {};\n  // a is the shortest side\n  for (let a = 3; a < n / 3; a++)\n  // o is the opposite side and is at least as long as a\n    for (let o = a; o < n / 2; o++) {\n      let h = Math.sqrt(a * a + o * o); // hypotenuse\n      let p = a + o + h;  // perimeter\n      if ((h % 1) === 0 && p <= n) {\n        triangles[p] = (triangles[p] || 0) + 1;\n      }\n    }\n\n  let max = 0, maxp = null;\n  for (let p in triangles) {\n    if (max < triangles[p]) {\n      max = triangles[p];\n      maxp = parseInt(p);\n    }\n  }\n  return maxp;\n}",
        "error": null,
        "seed": "// Original idea for this solution came from\n// https://www.xarg.org/puzzle/project-euler/problem-39/\n\nfunction intRightTriangles(n) {\n  // store the number of triangles with a given perimeter\n  let triangles = {};\n  // a is the shortest side\n  for (let a = 3; a < n / 3; a++)\n  // o is the opposite side and is at least as long as a\n    for (let o = a; o < n / 2; o++) {\n      let h = Math.sqrt(a * a + o * o); // hypotenuse\n      let p = a + o + h;  // perimeter\n      if ((h % 1) === 0 && p <= n) {\n        triangles[p] = (triangles[p] || 0) + 1;\n      }\n    }\n\n  let max = 0, maxp = null;\n  for (let p in triangles) {\n    if (max < triangles[p]) {\n      max = triangles[p];\n      maxp = parseInt(p);\n    }\n  }\n  return maxp;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>intRightTriangles(500)</code> should return a number.</p>",
      "testString": "assert(typeof intRightTriangles(500) === 'number');"
    },
    {
      "text": "<p><code>intRightTriangles(500)</code> should return 420.</p>",
      "testString": "assert(intRightTriangles(500) == 420);"
    },
    {
      "text": "<p><code>intRightTriangles(800)</code> should return 720.</p>",
      "testString": "assert(intRightTriangles(800) == 720);"
    },
    {
      "text": "<p><code>intRightTriangles(900)</code> should return 840.</p>",
      "testString": "assert(intRightTriangles(900) == 840);"
    },
    {
      "text": "<p><code>intRightTriangles(1000)</code> should return 840.</p>",
      "testString": "assert(intRightTriangles(1000) == 840);"
    }
  ],
  "description": "<section id=\"description\">\n<p>If <code>p</code> is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.</p>\n<p>{20,48,52}, {24,45,51}, {30,40,50}</p>\n<p>For which value of <code>p</code> â‰¤ <code>n</code>, is the number of solutions maximized?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 38,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
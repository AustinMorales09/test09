{
  "id": "5900f3781000cf542c50fe8b",
  "title": "Problem 12: Highly divisible triangular number",
  "challengeType": 1,
  "forumTopicId": 301746,
  "dashedName": "problem-12-highly-divisible-triangular-number",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function divisibleTriangleNumber(n) {\n\n  return true;\n}\n\ndivisibleTriangleNumber(500);",
      "error": null,
      "seed": "function divisibleTriangleNumber(n) {\n\n  return true;\n}\n\ndivisibleTriangleNumber(500);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function divisibleTriangleNumber(n) {\n  if (n === 1) return 3;\n  let counter = 1;\n  let triangleNumber = counter++;\n\n\n while (noOfFactors(triangleNumber) < n) {\n   triangleNumber += counter++;\n }\nreturn triangleNumber;\n}\n\nfunction noOfFactors(num) {\n  const primeFactors = getPrimeFactors(num);\n  let prod = 1;\n  for(let p in primeFactors) {\n    prod *= (primeFactors[p] + 1)\n  }\n  return prod;\n}\n\nfunction getPrimeFactors(num) {\n  let n = num;\n  let primes = {};\n\n  let p = 2;\n  let sqrt = Math.sqrt(num);\n\n  function checkAndUpdate(inc) {\n    if (n % p === 0) {\n      const curr = primes[p];\n      if (curr) {\n        primes[p]++\n      } else {\n        primes[p] = 1;\n      }\n      n /= p;\n    } else {\n      p += inc;\n    }\n  }\n\n  while(p === 2 && p <= n) {\n    checkAndUpdate(1);\n  }\n\n  while (p <= n && p <= sqrt) {\n    checkAndUpdate(2);\n  }\n  if(Object.keys(primes).length === 0) {\n    primes[num] = 1;\n  } else if(n !== 1) {\n    primes[n] = 1;\n  }\n  return primes;\n}",
        "error": null,
        "seed": "function divisibleTriangleNumber(n) {\n  if (n === 1) return 3;\n  let counter = 1;\n  let triangleNumber = counter++;\n\n\n while (noOfFactors(triangleNumber) < n) {\n   triangleNumber += counter++;\n }\nreturn triangleNumber;\n}\n\nfunction noOfFactors(num) {\n  const primeFactors = getPrimeFactors(num);\n  let prod = 1;\n  for(let p in primeFactors) {\n    prod *= (primeFactors[p] + 1)\n  }\n  return prod;\n}\n\nfunction getPrimeFactors(num) {\n  let n = num;\n  let primes = {};\n\n  let p = 2;\n  let sqrt = Math.sqrt(num);\n\n  function checkAndUpdate(inc) {\n    if (n % p === 0) {\n      const curr = primes[p];\n      if (curr) {\n        primes[p]++\n      } else {\n        primes[p] = 1;\n      }\n      n /= p;\n    } else {\n      p += inc;\n    }\n  }\n\n  while(p === 2 && p <= n) {\n    checkAndUpdate(1);\n  }\n\n  while (p <= n && p <= sqrt) {\n    checkAndUpdate(2);\n  }\n  if(Object.keys(primes).length === 0) {\n    primes[num] = 1;\n  } else if(n !== 1) {\n    primes[n] = 1;\n  }\n  return primes;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>divisibleTriangleNumber(5)</code> should return a number.</p>",
      "testString": "assert(typeof divisibleTriangleNumber(5) === 'number');"
    },
    {
      "text": "<p><code>divisibleTriangleNumber(5)</code> should return 28.</p>",
      "testString": "assert.strictEqual(divisibleTriangleNumber(5), 28);"
    },
    {
      "text": "<p><code>divisibleTriangleNumber(23)</code> should return 630.</p>",
      "testString": "assert.strictEqual(divisibleTriangleNumber(23), 630);"
    },
    {
      "text": "<p><code>divisibleTriangleNumber(167)</code> should return 1385280.</p>",
      "testString": "assert.strictEqual(divisibleTriangleNumber(167), 1385280);"
    },
    {
      "text": "<p><code>divisibleTriangleNumber(374)</code> should return 17907120.</p>",
      "testString": "assert.strictEqual(divisibleTriangleNumber(374), 17907120);"
    },
    {
      "text": "<p><code>divisibleTriangleNumber(500)</code> should return 76576500.</p>",
      "testString": "assert.strictEqual(divisibleTriangleNumber(500), 76576500);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>\n<div style='text-align: center;'>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</div>\n<p>Let us list the factors of the first seven triangle numbers:</p>\n<div style='padding-left: 4em;'><b>1:</b> 1</div>\n<div style='padding-left: 4em;'><b>3:</b> 1, 3</div>\n<div style='padding-left: 4em;'><b>6:</b> 1, 2, 3, 6</div>\n<div style='padding-left: 4em;'><b>10:</b> 1, 2, 5, 10</div>\n<div style='padding-left: 4em;'><b>15:</b> 1, 3, 5, 15</div>\n<div style='padding-left: 4em;'><b>21:</b> 1, 3, 7, 21</div>\n<div style='padding-left: 4em;'><b>28:</b> 1, 2, 4, 7, 14, 28</div>\n<p>We can see that 28 is the first triangle number to have over five divisors.</p>\n<p>What is the value of the first triangle number to have over <code>n</code> divisors?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 11,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f37d1000cf542c50fe8f",
  "title": "Problem 16: Power digit sum",
  "challengeType": 1,
  "forumTopicId": 301791,
  "dashedName": "problem-16-power-digit-sum",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function powerDigitSum(exponent) {\n\n  return true;\n}\n\npowerDigitSum(15);",
      "error": null,
      "seed": "function powerDigitSum(exponent) {\n\n  return true;\n}\n\npowerDigitSum(15);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function powerDigitSum(exponent) {\n  const bigNum = [1];\n  let sum = 0;\n\n  for (let i = 1; i <= exponent; i++) {\n    let count = bigNum.length + 1;\n    let overflow = 0;\n    for (let j = 0; j < count; j++) {\n      let digit = bigNum[j] || 0;\n      digit = 2 * digit + overflow;\n\n      if (digit > 9) {\n        digit -= 10;\n        overflow = 1;\n      } else {\n        overflow = 0;\n      }\n\n      bigNum[j] = digit;\n    }\n  }\n\n  bigNum.forEach(function(num) {\n    return sum += num;\n  });\n\n  return sum;\n}",
        "error": null,
        "seed": "function powerDigitSum(exponent) {\n  const bigNum = [1];\n  let sum = 0;\n\n  for (let i = 1; i <= exponent; i++) {\n    let count = bigNum.length + 1;\n    let overflow = 0;\n    for (let j = 0; j < count; j++) {\n      let digit = bigNum[j] || 0;\n      digit = 2 * digit + overflow;\n\n      if (digit > 9) {\n        digit -= 10;\n        overflow = 1;\n      } else {\n        overflow = 0;\n      }\n\n      bigNum[j] = digit;\n    }\n  }\n\n  bigNum.forEach(function(num) {\n    return sum += num;\n  });\n\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>powerDigitSum(15)</code> should return a number.</p>",
      "testString": "assert(typeof powerDigitSum(15) === 'number');"
    },
    {
      "text": "<p><code>powerDigitSum(15)</code> should return 26.</p>",
      "testString": "assert.strictEqual(powerDigitSum(15), 26);"
    },
    {
      "text": "<p><code>powerDigitSum(128)</code> should return 166.</p>",
      "testString": "assert.strictEqual(powerDigitSum(128), 166);"
    },
    {
      "text": "<p><code>powerDigitSum(1000)</code> should return 1366.</p>",
      "testString": "assert.strictEqual(powerDigitSum(1000), 1366);"
    }
  ],
  "description": "<section id=\"description\">\n<p>2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.</p>\n<p>What is the sum of the digits of the number 2<sup><code>exponent</code></sup>?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 15,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
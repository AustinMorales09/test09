{
  "id": "5900f3a31000cf542c50feb6",
  "title": "Problem 55: Lychrel numbers",
  "challengeType": 1,
  "forumTopicId": 302166,
  "dashedName": "problem-55-lychrel-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function countLychrelNumbers(num) {\n\n  return true;\n}\n\ncountLychrelNumbers(10000);",
      "error": null,
      "seed": "function countLychrelNumbers(num) {\n\n  return true;\n}\n\ncountLychrelNumbers(10000);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const countLychrelNumbers = (size) => {\n  const numReverse = (num) => {\n    return Number(num.toString().split('').reverse().join(''));\n  };\n  const isPalin = (num) => {\n    if (numReverse(num) === num) {\n      return true;\n    }\n    return false;\n  };\n  let total = 0;\n  for (let i = 1; i < size; i++) {\n    let loopCount = 1;\n    let sum = i;\n    while (loopCount < 50) {\n      sum = sum + numReverse(sum);\n      if (isPalin(sum)) {\n        break;\n      } else {\n        loopCount++;\n      }\n    }\n    if (loopCount === 50) {\n      total++;\n    }\n  }\n  return total;\n}",
        "error": null,
        "seed": "const countLychrelNumbers = (size) => {\n  const numReverse = (num) => {\n    return Number(num.toString().split('').reverse().join(''));\n  };\n  const isPalin = (num) => {\n    if (numReverse(num) === num) {\n      return true;\n    }\n    return false;\n  };\n  let total = 0;\n  for (let i = 1; i < size; i++) {\n    let loopCount = 1;\n    let sum = i;\n    while (loopCount < 50) {\n      sum = sum + numReverse(sum);\n      if (isPalin(sum)) {\n        break;\n      } else {\n        loopCount++;\n      }\n    }\n    if (loopCount === 50) {\n      total++;\n    }\n  }\n  return total;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countLychrelNumbers(1000)</code> should return a number.</p>",
      "testString": "assert(typeof countLychrelNumbers(1000) === 'number');"
    },
    {
      "text": "<p><code>countLychrelNumbers(1000)</code> should return 13.</p>",
      "testString": "assert.strictEqual(countLychrelNumbers(1000), 13);"
    },
    {
      "text": "<p><code>countLychrelNumbers(3243)</code> should return 39.</p>",
      "testString": "assert.strictEqual(countLychrelNumbers(3243), 39);"
    },
    {
      "text": "<p><code>countLychrelNumbers(5000)</code> should return 76.</p>",
      "testString": "assert.strictEqual(countLychrelNumbers(5000), 76);"
    },
    {
      "text": "<p><code>countLychrelNumbers(7654)</code> should return 140.</p>",
      "testString": "assert.strictEqual(countLychrelNumbers(7654), 140);"
    },
    {
      "text": "<p><code>countLychrelNumbers(10000)</code> should return 249.</p>",
      "testString": "assert.strictEqual(countLychrelNumbers(10000), 249);"
    }
  ],
  "description": "<section id=\"description\">\n<p>If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.</p>\n<p>Not all numbers produce palindromes so quickly. For example,</p>\n<div style=\"margin-left: 4em;\">\n  349 + 943 = 1292,<br>\n  1292 + 2921 = 4213<br>\n  4213 + 3124 = 7337<br>\n</div>\n<p>That is, 349 took three iterations to arrive at a palindrome.</p>\n<p>Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).</p>\n<p>Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.</p>\n<p>How many Lychrel numbers are there below <code>num</code>?</p>\n<p><strong>Note:</strong> Wording was modified slightly on 24 April 2007 to emphasize the theoretical nature of Lychrel numbers.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 54,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f37f1000cf542c50fe92",
  "title": "Problem 19: Counting Sundays",
  "challengeType": 1,
  "forumTopicId": 301827,
  "dashedName": "problem-19-counting-sundays",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function countingSundays(firstYear, lastYear) {\n\n  return true;\n}\n\ncountingSundays(1943, 1946);",
      "error": null,
      "seed": "function countingSundays(firstYear, lastYear) {\n\n  return true;\n}\n\ncountingSundays(1943, 1946);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function countingSundays(firstYear, lastYear) {\n  let sundays = 0;\n\n  for (let year = firstYear; year <= lastYear; year++) {\n    for (let month = 0; month <= 11; month++) {\n      const thisDate = new Date(year, month, 1);\n      if (thisDate.getDay() === 0) {\n        sundays++;\n      }\n    }\n  }\n  return sundays;\n}",
        "error": null,
        "seed": "function countingSundays(firstYear, lastYear) {\n  let sundays = 0;\n\n  for (let year = firstYear; year <= lastYear; year++) {\n    for (let month = 0; month <= 11; month++) {\n      const thisDate = new Date(year, month, 1);\n      if (thisDate.getDay() === 0) {\n        sundays++;\n      }\n    }\n  }\n  return sundays;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countingSundays(1943, 1946)</code> should return a number.</p>",
      "testString": "assert(typeof countingSundays(1943, 1946) === 'number');"
    },
    {
      "text": "<p><code>countingSundays(1943, 1946)</code> should return 6.</p>",
      "testString": "assert.strictEqual(countingSundays(1943, 1946), 6);"
    },
    {
      "text": "<p><code>countingSundays(1995, 2000)</code> should return 10.</p>",
      "testString": "assert.strictEqual(countingSundays(1995, 2000), 10);"
    },
    {
      "text": "<p><code>countingSundays(1901, 2000)</code> should return 171.</p>",
      "testString": "assert.strictEqual(countingSundays(1901, 2000), 171);"
    }
  ],
  "description": "<section id=\"description\">\n<p>You are given the following information, but you may prefer to do some research for yourself.</p>\n<ul>\n  <li>1 Jan 1900 was a Monday.</li>\n  <li>Thirty days has September,<br>April, June and November.<br>All the rest have thirty-one,<br>Saving February alone,<br>Which has twenty-eight, rain or shine.<br>And on leap years, twenty-nine.</li>\n  <li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>\n</ul>\n<p>How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 18,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3731000cf542c50fe86",
  "title": "Problem 7: 10001st prime",
  "challengeType": 1,
  "forumTopicId": 302182,
  "dashedName": "problem-7-10001st-prime",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function nthPrime(n) {\n\n  return true;\n}\n\nnthPrime(10001);",
      "error": null,
      "seed": "function nthPrime(n) {\n\n  return true;\n}\n\nnthPrime(10001);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const nthPrime = n => {\n  let pN = 2;\n  let step = 0;\n  while (step < n) {\n    let isPrime = true;\n    let rootN = Math.sqrt(pN);\n    for (let i = 2; i <= rootN; i++) {\n      if (!(pN % i)) {\n        isPrime = false;\n        break;\n      }\n    }\n    isPrime ? step++ : '';\n    pN++;\n  }\n  return pN - 1;\n}",
        "error": null,
        "seed": "const nthPrime = n => {\n  let pN = 2;\n  let step = 0;\n  while (step < n) {\n    let isPrime = true;\n    let rootN = Math.sqrt(pN);\n    for (let i = 2; i <= rootN; i++) {\n      if (!(pN % i)) {\n        isPrime = false;\n        break;\n      }\n    }\n    isPrime ? step++ : '';\n    pN++;\n  }\n  return pN - 1;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>nthPrime(6)</code> should return a number.</p>",
      "testString": "assert(typeof nthPrime(6) === 'number');"
    },
    {
      "text": "<p><code>nthPrime(6)</code> should return 13.</p>",
      "testString": "assert.strictEqual(nthPrime(6), 13);"
    },
    {
      "text": "<p><code>nthPrime(10)</code> should return 29.</p>",
      "testString": "assert.strictEqual(nthPrime(10), 29);"
    },
    {
      "text": "<p><code>nthPrime(100)</code> should return 541.</p>",
      "testString": "assert.strictEqual(nthPrime(100), 541);"
    },
    {
      "text": "<p><code>nthPrime(1000)</code> should return 7919.</p>",
      "testString": "assert.strictEqual(nthPrime(1000), 7919);"
    },
    {
      "text": "<p><code>nthPrime(10001)</code> should return 104743.</p>",
      "testString": "assert.strictEqual(nthPrime(10001), 104743);"
    }
  ],
  "description": "<section id=\"description\">\n<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>\n<p>What is the <code>n</code>th prime number?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 6,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3b81000cf542c50fecb",
  "title": "Problem 76: Counting summations",
  "challengeType": 1,
  "forumTopicId": 302189,
  "dashedName": "problem-76-counting-summations",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function countingSummations(n) {\n\n  return true;\n}\n\ncountingSummations(5);",
      "error": null,
      "seed": "function countingSummations(n) {\n\n  return true;\n}\n\ncountingSummations(5);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function countingSummations(n) {\n  const combinations = new Array(n + 1).fill(0);\n  combinations[0] = 1;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n + 1; j++) {\n      combinations[j] += combinations[j - i];\n    }\n  }\n  return combinations[n];\n}",
        "error": null,
        "seed": "function countingSummations(n) {\n  const combinations = new Array(n + 1).fill(0);\n  combinations[0] = 1;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n + 1; j++) {\n      combinations[j] += combinations[j - i];\n    }\n  }\n  return combinations[n];\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countingSummations(5)</code> should return a number.</p>",
      "testString": "assert(typeof countingSummations(5) === 'number');"
    },
    {
      "text": "<p><code>countingSummations(5)</code> should return <code>6</code>.</p>",
      "testString": "assert.strictEqual(countingSummations(5), 6);"
    },
    {
      "text": "<p><code>countingSummations(20)</code> should return <code>626</code>.</p>",
      "testString": "assert.strictEqual(countingSummations(20), 626);"
    },
    {
      "text": "<p><code>countingSummations(50)</code> should return <code>204225</code>.</p>",
      "testString": "assert.strictEqual(countingSummations(50), 204225);"
    },
    {
      "text": "<p><code>countingSummations(100)</code> should return <code>190569291</code>.</p>",
      "testString": "assert.strictEqual(countingSummations(100), 190569291);"
    }
  ],
  "description": "<section id=\"description\">\n<p>It is possible to write five as a sum in exactly six different ways:</p>\n<div style='margin-left: 4em;'>\n  4 + 1<br>\n  3 + 2<br>\n  3 + 1 + 1<br>\n  2 + 2 + 1<br>\n  2 + 1 + 1 + 1<br>\n  1 + 1 + 1 + 1 + 1<br><br>\n</div>\n<p>How many different ways can <code>n</code> be written as a sum of at least two positive integers?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 75,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3971000cf542c50feaa",
  "title": "Problem 43: Sub-string divisibility",
  "challengeType": 1,
  "forumTopicId": 302100,
  "dashedName": "problem-43-sub-string-divisibility",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function substringDivisibility(n) {\n\n  return true;\n}\n\nsubstringDivisibility(5);",
      "error": null,
      "seed": "function substringDivisibility(n) {\n\n  return true;\n}\n\nsubstringDivisibility(5);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function substringDivisibility(n) {\n  function isSubDivisible(digits) {\n    const factors = [2, 3, 5, 7, 11, 13, 17];\n\n    for (let i = 1; i < digits.length - 2; i++) {\n      const subNumber = digits[i] * 100 + digits[i + 1] * 10 + digits[i + 2];\n      if (subNumber % factors[i - 1] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function heapsPermutations(k, digits, conditionCheck, results) {\n    if (k === 1) {\n      if (conditionCheck(digits)) {\n        const number = parseInt(digits.join(''), 10);\n        results.push(number);\n      }\n      return;\n    }\n\n    heapsPermutations(k - 1, digits, conditionCheck, results);\n\n    for (let i = 0; i < k - 1; i++) {\n      if (k % 2 === 0) {\n        [digits[i], digits[k - 1]] = [digits[k - 1], digits[i]];\n      } else {\n        [digits[0], digits[k - 1]] = [digits[k - 1], digits[0]];\n      }\n      heapsPermutations(k - 1, digits, conditionCheck, results);\n    }\n    return;\n  }\n\n  const allowedDigits = [...new Array(n + 1).keys()];\n  const divisiblePandigitals = [];\n  heapsPermutations(\n    allowedDigits.length,\n    allowedDigits,\n    isSubDivisible,\n    divisiblePandigitals\n  );\n\n  let sum = 0;\n  for (let i = 0; i < divisiblePandigitals.length; i++) {\n    sum += divisiblePandigitals[i];\n  }\n\n  return sum;\n}",
        "error": null,
        "seed": "function substringDivisibility(n) {\n  function isSubDivisible(digits) {\n    const factors = [2, 3, 5, 7, 11, 13, 17];\n\n    for (let i = 1; i < digits.length - 2; i++) {\n      const subNumber = digits[i] * 100 + digits[i + 1] * 10 + digits[i + 2];\n      if (subNumber % factors[i - 1] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function heapsPermutations(k, digits, conditionCheck, results) {\n    if (k === 1) {\n      if (conditionCheck(digits)) {\n        const number = parseInt(digits.join(''), 10);\n        results.push(number);\n      }\n      return;\n    }\n\n    heapsPermutations(k - 1, digits, conditionCheck, results);\n\n    for (let i = 0; i < k - 1; i++) {\n      if (k % 2 === 0) {\n        [digits[i], digits[k - 1]] = [digits[k - 1], digits[i]];\n      } else {\n        [digits[0], digits[k - 1]] = [digits[k - 1], digits[0]];\n      }\n      heapsPermutations(k - 1, digits, conditionCheck, results);\n    }\n    return;\n  }\n\n  const allowedDigits = [...new Array(n + 1).keys()];\n  const divisiblePandigitals = [];\n  heapsPermutations(\n    allowedDigits.length,\n    allowedDigits,\n    isSubDivisible,\n    divisiblePandigitals\n  );\n\n  let sum = 0;\n  for (let i = 0; i < divisiblePandigitals.length; i++) {\n    sum += divisiblePandigitals[i];\n  }\n\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>substringDivisibility(5)</code> should return a number.</p>",
      "testString": "assert(typeof substringDivisibility(5) === 'number');"
    },
    {
      "text": "<p><code>substringDivisibility(5)</code> should return <code>12444480</code>.</p>",
      "testString": "assert.strictEqual(substringDivisibility(5), 12444480)"
    },
    {
      "text": "<p><code>substringDivisibility(7)</code> should return <code>1099210170</code>.</p>",
      "testString": "assert.strictEqual(substringDivisibility(7), 1099210170)"
    },
    {
      "text": "<p><code>substringDivisibility(8)</code> should return <code>1113342912</code>.</p>",
      "testString": "assert.strictEqual(substringDivisibility(8), 1113342912)"
    },
    {
      "text": "<p><code>substringDivisibility(9)</code> should return <code>16695334890</code>.</p>",
      "testString": "assert.strictEqual(substringDivisibility(9), 16695334890)"
    }
  ],
  "description": "<section id=\"description\">\n<p>The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.</p>\n<p>Let $d_1$ be the $1^{st}$ digit, $d_2$ be the $2^{nd}$ digit, and so on. In this way, we note the following:</p>\n<ul>\n<li>${d_2}{d_3}{d_4} = 406$ is divisible by 2</li>\n<li>${d_3}{d_4}{d_5} = 063$ is divisible by 3</li>\n<li>${d_4}{d_5}{d_6} = 635$ is divisible by 5</li>\n<li>${d_5}{d_6}{d_7} = 357$ is divisible by 7</li>\n<li>${d_6}{d_7}{d_8} = 572$ is divisible by 11</li>\n<li>${d_7}{d_8}{d_9} = 728$ is divisible by 13</li>\n<li>${d_8}{d_9}{d_{10}} = 289$ is divisible by 17</li>\n</ul>\n<p>Find the sum of all 0 to <code>n</code> pandigital numbers with sub-strings fulfilling <code>n - 2</code> of these divisibility properties.</p>\n<p><strong>Note:</strong> Pandigital numbers starting with <code>0</code> are to be considered in the result.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 42,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3991000cf542c50feac",
  "title": "Problem 45: Triangular, pentagonal, and hexagonal",
  "challengeType": 1,
  "forumTopicId": 302122,
  "dashedName": "problem-45-triangular-pentagonal-and-hexagonal",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function triPentaHexa(n) {\n\n  return true;\n}\n\ntriPentaHexa(40756);",
      "error": null,
      "seed": "function triPentaHexa(n) {\n\n  return true;\n}\n\ntriPentaHexa(40756);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function triPentaHexa(n) {\n  function triangular(num) {\n  return (num * (num + 1)) / 2;\n}\n\nfunction isPentagonal(num) {\n  // Formula found by completing the square and\n  // solving for n.\n  const n = (Math.sqrt((24 * num) + 1) + 1) / 6;\n  return n % 1 === 0;\n}\n\n  function isHexagonal(num) {\n  // Formula found by completing the square and\n  // solving for n.\n  const n = Math.sqrt(0.5 * (num + (1 / 8))) + 0.25;\n return n % 1 === 0;\n}\n\nlet iTri = n;\nlet tri;\nlet found = false;\nwhile (!found) {\n  iTri++;\n  tri = triangular(iTri);\n  if (isPentagonal(tri) && isHexagonal(tri)) {\n    found = true;\n    }\n  }\n  return tri;\n}",
        "error": null,
        "seed": "function triPentaHexa(n) {\n  function triangular(num) {\n  return (num * (num + 1)) / 2;\n}\n\nfunction isPentagonal(num) {\n  // Formula found by completing the square and\n  // solving for n.\n  const n = (Math.sqrt((24 * num) + 1) + 1) / 6;\n  return n % 1 === 0;\n}\n\n  function isHexagonal(num) {\n  // Formula found by completing the square and\n  // solving for n.\n  const n = Math.sqrt(0.5 * (num + (1 / 8))) + 0.25;\n return n % 1 === 0;\n}\n\nlet iTri = n;\nlet tri;\nlet found = false;\nwhile (!found) {\n  iTri++;\n  tri = triangular(iTri);\n  if (isPentagonal(tri) && isHexagonal(tri)) {\n    found = true;\n    }\n  }\n  return tri;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>triPentaHexa(40756)</code> should return a number.</p>",
      "testString": "assert(typeof triPentaHexa(40756) === 'number');"
    },
    {
      "text": "<p><code>triPentaHexa(40756)</code> should return 1533776805.</p>",
      "testString": "assert.strictEqual(triPentaHexa(40756), 1533776805);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>\n<div style='display: inline-grid; text-align: center; grid-template-columns: 135px 135px 260px; grid-template-rows: auto;'><div>Triangle</div><div>T<sub>n</sub>=<var>n</var>(<var>n</var>+1)/2</div><div>1, 3, 6, 10, 15, ...</div></div>\n<div style='display: inline-grid; text-align: center; grid-template-columns: 135px 135px 260px; grid-template-rows: auto;'><div>Pentagonal</div><div>P<sub>n</sub>=<var>n</var>(3<var>n</var>−1)/2</div><div>1, 5, 12, 22, 35, ...</div></div>\n<div style='display: inline-grid; text-align: center; grid-template-columns: 135px 135px 260px; grid-template-rows: auto;'><div>Hexagonal</div><div>H<sub>n</sub>=<var>n</var>(2<var>n</var>−1)</div><div>1, 6, 15, 28, 45, ...</div></div>\n<p>It can be verified that T<sub>285</sub> = P<sub>165</sub> = H<sub>143</sub> = 40755.</p>\n<p>Find the next triangle number that is also pentagonal and hexagonal.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 44,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
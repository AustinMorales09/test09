{
  "id": "5900f3a51000cf542c50feb8",
  "title": "Problem 57: Square root convergents",
  "challengeType": 1,
  "forumTopicId": 302168,
  "dashedName": "problem-57-square-root-convergents",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function squareRootConvergents(n) {\n\n  return true;\n}\n\nsquareRootConvergents(1000);",
      "error": null,
      "seed": "function squareRootConvergents(n) {\n\n  return true;\n}\n\nsquareRootConvergents(1000);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function squareRootConvergents(n) {\n  function countDigits(number) {\n    let counter = 0;\n    while (number > 0) {\n      counter++;\n      number = number / 10n;\n    }\n    return counter;\n  }\n\n  // Use BigInt as integer won't handle all cases\n  let numerator = 3n;\n  let denominator = 2n;\n  let moreDigitsInNumerator = 0;\n\n  for (let i = 2; i <= n; i++) {\n    [numerator, denominator] = [\n      numerator + 2n * denominator,\n      denominator + numerator\n    ];\n\n    if (countDigits(numerator) > countDigits(denominator)) {\n      moreDigitsInNumerator++;\n    }\n  }\n  return moreDigitsInNumerator;\n}",
        "error": null,
        "seed": "function squareRootConvergents(n) {\n  function countDigits(number) {\n    let counter = 0;\n    while (number > 0) {\n      counter++;\n      number = number / 10n;\n    }\n    return counter;\n  }\n\n  // Use BigInt as integer won't handle all cases\n  let numerator = 3n;\n  let denominator = 2n;\n  let moreDigitsInNumerator = 0;\n\n  for (let i = 2; i <= n; i++) {\n    [numerator, denominator] = [\n      numerator + 2n * denominator,\n      denominator + numerator\n    ];\n\n    if (countDigits(numerator) > countDigits(denominator)) {\n      moreDigitsInNumerator++;\n    }\n  }\n  return moreDigitsInNumerator;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>squareRootConvergents(10)</code> should return a number.</p>",
      "testString": "assert(typeof squareRootConvergents(10) === 'number');"
    },
    {
      "text": "<p><code>squareRootConvergents(10)</code> should return 1.</p>",
      "testString": "assert.strictEqual(squareRootConvergents(10), 1);"
    },
    {
      "text": "<p><code>squareRootConvergents(100)</code> should return 15.</p>",
      "testString": "assert.strictEqual(squareRootConvergents(100), 15);"
    },
    {
      "text": "<p><code>squareRootConvergents(1000)</code> should return 153.</p>",
      "testString": "assert.strictEqual(squareRootConvergents(1000), 153);"
    }
  ],
  "description": "<section id=\"description\">\n<p>It is possible to show that the square root of two can be expressed as an infinite continued fraction.</p>\n<div style='text-align: center;'>$\\sqrt 2 =1+ \\frac 1 {2+ \\frac 1 {2 +\\frac 1 {2+ \\dots}}}$</div>\n<p>By expanding this for the first four iterations, we get:</p>\n<p>$1 + \\frac 1 2 = \\frac 32 = 1.5$</p>\n<p>$1 + \\frac 1 {2 + \\frac 1 2} = \\frac 7 5 = 1.4$</p>\n<p>$1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 2}} = \\frac {17}{12} = 1.41666 \\dots$</p>\n<p>$1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 {2+\\frac 1 2}}} = \\frac {41}{29} = 1.41379 \\dots$</p>\n<p>The next three expansions are $\\frac {99}{70}$, $\\frac {239}{169}$, and $\\frac {577}{408}$, but the eighth expansion, $\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.</p>\n<p>In the first <code>n</code> expansions, how many fractions contain a numerator with more digits than denominator?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 56,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3b61000cf542c50fec9",
  "title": "Problem 74: Digit factorial chains",
  "challengeType": 1,
  "forumTopicId": 302187,
  "dashedName": "problem-74-digit-factorial-chains",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function digitFactorialChains(n) {\n\n  return true;\n}\n\ndigitFactorialChains(2000);",
      "error": null,
      "seed": "function digitFactorialChains(n) {\n\n  return true;\n}\n\ndigitFactorialChains(2000);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function digitFactorialChains(n) {\n  function sumDigitsFactorials(number) {\n    let sum = 0;\n    while (number > 0) {\n      sum += factorials[number % 10];\n      number = Math.floor(number / 10);\n    }\n    return sum;\n  }\n\n  const factorials = [1];\n  for (let i = 1; i < 10; i++) {\n    factorials.push(factorials[factorials.length - 1] * i);\n  }\n\n  const sequences = {\n    169: 3,\n    871: 2,\n    872: 2,\n    1454: 3,\n    45362: 2,\n    45461: 2,\n    3693601: 3\n  };\n  let result = 0;\n\n  for (let i = 2; i < n; i++) {\n    let curNum = i;\n    let chainLength = 0;\n    const curSequence = [];\n    while (curSequence.indexOf(curNum) === -1) {\n      curSequence.push(curNum);\n      curNum = sumDigitsFactorials(curNum);\n      chainLength++;\n      if (sequences.hasOwnProperty(curNum) > 0) {\n        chainLength += sequences[curNum];\n        break;\n      }\n    }\n    if (chainLength === 60) {\n      result++;\n    }\n    for (let j = 1; j < curSequence.length; j++) {\n      sequences[curSequence[j]] = chainLength - j;\n    }\n  }\n  return result;\n}",
        "error": null,
        "seed": "function digitFactorialChains(n) {\n  function sumDigitsFactorials(number) {\n    let sum = 0;\n    while (number > 0) {\n      sum += factorials[number % 10];\n      number = Math.floor(number / 10);\n    }\n    return sum;\n  }\n\n  const factorials = [1];\n  for (let i = 1; i < 10; i++) {\n    factorials.push(factorials[factorials.length - 1] * i);\n  }\n\n  const sequences = {\n    169: 3,\n    871: 2,\n    872: 2,\n    1454: 3,\n    45362: 2,\n    45461: 2,\n    3693601: 3\n  };\n  let result = 0;\n\n  for (let i = 2; i < n; i++) {\n    let curNum = i;\n    let chainLength = 0;\n    const curSequence = [];\n    while (curSequence.indexOf(curNum) === -1) {\n      curSequence.push(curNum);\n      curNum = sumDigitsFactorials(curNum);\n      chainLength++;\n      if (sequences.hasOwnProperty(curNum) > 0) {\n        chainLength += sequences[curNum];\n        break;\n      }\n    }\n    if (chainLength === 60) {\n      result++;\n    }\n    for (let j = 1; j < curSequence.length; j++) {\n      sequences[curSequence[j]] = chainLength - j;\n    }\n  }\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>digitFactorialChains(2000)</code> should return a number.</p>",
      "testString": "assert(typeof digitFactorialChains(2000) === 'number');"
    },
    {
      "text": "<p><code>digitFactorialChains(2000)</code> should return <code>6</code>.</p>",
      "testString": "assert.strictEqual(digitFactorialChains(2000), 6);"
    },
    {
      "text": "<p><code>digitFactorialChains(100000)</code> should return <code>42</code>.</p>",
      "testString": "assert.strictEqual(digitFactorialChains(100000), 42);"
    },
    {
      "text": "<p><code>digitFactorialChains(500000)</code> should return <code>282</code>.</p>",
      "testString": "assert.strictEqual(digitFactorialChains(500000), 282);"
    },
    {
      "text": "<p><code>digitFactorialChains(1000000)</code> should return <code>402</code>.</p>",
      "testString": "assert.strictEqual(digitFactorialChains(1000000), 402);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:</p>\n<p>$$1! + 4! + 5! = 1 + 24 + 120 = 145$$</p>\n<p>Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:</p>\n<p>$$\\begin{align}\n&#x26;169 → 363601 → 1454 → 169\\\\\n&#x26;871 → 45361 → 871\\\\\n&#x26;872 → 45362 → 872\\\\\n\\end{align}$$</p>\n<p>It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,</p>\n<p>$$\\begin{align}\n&#x26;69 → 363600 → 1454 → 169 → 363601\\ (→ 1454)\\\\\n&#x26;78 → 45360 → 871 → 45361\\ (→ 871)\\\\\n&#x26;540 → 145\\ (→ 145)\\\\\n\\end{align}$$</p>\n<p>Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.</p>\n<p>How many chains, with a starting number below <code>n</code>, contain exactly sixty non-repeating terms?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 73,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
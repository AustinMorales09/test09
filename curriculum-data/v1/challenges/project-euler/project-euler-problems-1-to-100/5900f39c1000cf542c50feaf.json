{
  "id": "5900f39c1000cf542c50feaf",
  "title": "Problem 48: Self powers",
  "challengeType": 1,
  "forumTopicId": 302157,
  "dashedName": "problem-48-self-powers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function selfPowers(power, lastDigits) {\n\n  return true;\n}\n\nselfPowers(1000, 10);",
      "error": null,
      "seed": "function selfPowers(power, lastDigits) {\n\n  return true;\n}\n\nselfPowers(1000, 10);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function selfPowers(power, lastDigits) {\n  let sum = 0;\n  const modulo = Math.pow(10, lastDigits);\n\n  for (let i = 1; i <= power; i++) {\n    let temp = i;\n    for (let j = 1; j < i; j++) {\n      temp *= i;\n      temp %= modulo;\n    }\n\n    sum += temp;\n    sum %= modulo;\n  }\n\n  return sum;\n}",
        "error": null,
        "seed": "function selfPowers(power, lastDigits) {\n  let sum = 0;\n  const modulo = Math.pow(10, lastDigits);\n\n  for (let i = 1; i <= power; i++) {\n    let temp = i;\n    for (let j = 1; j < i; j++) {\n      temp *= i;\n      temp %= modulo;\n    }\n\n    sum += temp;\n    sum %= modulo;\n  }\n\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>selfPowers(10, 3)</code> should return a number.</p>",
      "testString": "assert(typeof selfPowers(10, 3) === 'number');"
    },
    {
      "text": "<p><code>selfPowers(10, 3)</code> should return 317.</p>",
      "testString": "assert.strictEqual(selfPowers(10, 3), 317);"
    },
    {
      "text": "<p><code>selfPowers(150, 6)</code> should return 29045.</p>",
      "testString": "assert.strictEqual(selfPowers(150, 6), 29045);"
    },
    {
      "text": "<p><code>selfPowers(673, 7)</code> should return 2473989.</p>",
      "testString": "assert.strictEqual(selfPowers(673, 7), 2473989);"
    },
    {
      "text": "<p><code>selfPowers(1000, 10)</code> should return 9110846700.</p>",
      "testString": "assert.strictEqual(selfPowers(1000, 10), 9110846700);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317.</p>\n<p>Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 47,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
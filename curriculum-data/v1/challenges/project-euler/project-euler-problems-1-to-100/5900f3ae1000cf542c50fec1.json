{
  "id": "5900f3ae1000cf542c50fec1",
  "title": "Problem 66: Diophantine equation",
  "challengeType": 1,
  "forumTopicId": 302178,
  "dashedName": "problem-66-diophantine-equation",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function diophantineEquation(n) {\n\n  return true;\n}\n\ndiophantineEquation(7);",
      "error": null,
      "seed": "function diophantineEquation(n) {\n\n  return true;\n}\n\ndiophantineEquation(7);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function diophantineEquation(n) {\n  // Based on https://www.mathblog.dk/project-euler-66-diophantine-equation/\n  function isSolution(D, numerator, denominator) {\n    return numerator * numerator - BigInt(D) * denominator * denominator === 1n;\n  }\n\n  let result = 0;\n  let biggestX = 0;\n\n  for (let D = 2; D <= n; D++) {\n    let boundary = Math.floor(Math.sqrt(D));\n    if (boundary ** 2 === D) {\n      continue;\n    }\n\n    let m = 0n;\n    let d = 1n;\n    let a = BigInt(boundary);\n\n    let [numerator, prevNumerator] = [a, 1n];\n\n    let [denominator, prevDenominator] = [1n, 0n];\n\n    while (!isSolution(D, numerator, denominator)) {\n      m = d * a - m;\n      d = (BigInt(D) - m * m) / d;\n      a = (BigInt(boundary) + m) / d;\n\n      [numerator, prevNumerator] = [a * numerator + prevNumerator, numerator];\n      [denominator, prevDenominator] = [\n        a * denominator + prevDenominator,\n        denominator\n      ];\n    }\n\n    if (numerator > biggestX) {\n      biggestX = numerator;\n      result = D;\n    }\n  }\n  return result;\n}",
        "error": null,
        "seed": "function diophantineEquation(n) {\n  // Based on https://www.mathblog.dk/project-euler-66-diophantine-equation/\n  function isSolution(D, numerator, denominator) {\n    return numerator * numerator - BigInt(D) * denominator * denominator === 1n;\n  }\n\n  let result = 0;\n  let biggestX = 0;\n\n  for (let D = 2; D <= n; D++) {\n    let boundary = Math.floor(Math.sqrt(D));\n    if (boundary ** 2 === D) {\n      continue;\n    }\n\n    let m = 0n;\n    let d = 1n;\n    let a = BigInt(boundary);\n\n    let [numerator, prevNumerator] = [a, 1n];\n\n    let [denominator, prevDenominator] = [1n, 0n];\n\n    while (!isSolution(D, numerator, denominator)) {\n      m = d * a - m;\n      d = (BigInt(D) - m * m) / d;\n      a = (BigInt(boundary) + m) / d;\n\n      [numerator, prevNumerator] = [a * numerator + prevNumerator, numerator];\n      [denominator, prevDenominator] = [\n        a * denominator + prevDenominator,\n        denominator\n      ];\n    }\n\n    if (numerator > biggestX) {\n      biggestX = numerator;\n      result = D;\n    }\n  }\n  return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>diophantineEquation(7)</code> should return a number.</p>",
      "testString": "assert(typeof diophantineEquation(7) === 'number');"
    },
    {
      "text": "<p><code>diophantineEquation(7)</code> should return <code>5</code>.</p>",
      "testString": "assert.strictEqual(diophantineEquation(7), 5);"
    },
    {
      "text": "<p><code>diophantineEquation(100)</code> should return <code>61</code>.</p>",
      "testString": "assert.strictEqual(diophantineEquation(100), 61);"
    },
    {
      "text": "<p><code>diophantineEquation(409)</code> should return <code>409</code>.</p>",
      "testString": "assert.strictEqual(diophantineEquation(409), 409);"
    },
    {
      "text": "<p><code>diophantineEquation(500)</code> should return <code>421</code>.</p>",
      "testString": "assert.strictEqual(diophantineEquation(500), 421);"
    },
    {
      "text": "<p><code>diophantineEquation(1000)</code> should return <code>661</code>.</p>",
      "testString": "assert.strictEqual(diophantineEquation(1000), 661);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Consider quadratic Diophantine equations of the form:</p>\n<div style='text-align: center;'>x<sup>2</sup> – Dy<sup>2</sup> = 1</div>\n<p>For example, when D=13, the minimal solution in x is 649<sup>2</sup> – 13×180<sup>2</sup> = 1.</p>\n<p>It can be assumed that there are no solutions in positive integers when D is square.</p>\n<p>By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:</p>\n<div style='margin-left: 2em;'>\n  3<sup>2</sup> – 2×2<sup>2</sup> = 1<br>\n  2<sup>2</sup> – 3×1<sup>2</sup> = 1<br>\n  <strong><span style='color: red;'>9</span></strong><sup>2</sup> – 5×4<sup>2</sup> = 1<br>\n  5<sup>2</sup> – 6×2<sup>2</sup> = 1<br>\n  8<sup>2</sup> – 7×3<sup>2</sup> = 1<br>\n</div>\n<p>Hence, by considering minimal solutions in <code>x</code> for D ≤ 7, the largest <code>x</code> is obtained when D=5.</p>\n<p>Find the value of D ≤ <code>n</code> in minimal solutions of <code>x</code> for which the largest value of <code>x</code> is obtained.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 65,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
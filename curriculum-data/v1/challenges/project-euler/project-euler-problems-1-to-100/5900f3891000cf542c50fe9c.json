{
  "id": "5900f3891000cf542c50fe9c",
  "title": "Problem 29: Distinct powers",
  "challengeType": 1,
  "forumTopicId": 301941,
  "dashedName": "problem-29-distinct-powers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function distinctPowers(n) {\n\n  return n;\n}\n\ndistinctPowers(30);",
      "error": null,
      "seed": "function distinctPowers(n) {\n\n  return n;\n}\n\ndistinctPowers(30);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const distinctPowers = (n) => {\n  let list = [];\n  for (let a=2; a<=n; a++) {\n    for (let b=2; b<=n; b++) {\n      let term = Math.pow(a, b);\n      if (list.indexOf(term)===-1) list.push(term);\n    }\n  }\n  return list.length;\n};",
        "error": null,
        "seed": "const distinctPowers = (n) => {\n  let list = [];\n  for (let a=2; a<=n; a++) {\n    for (let b=2; b<=n; b++) {\n      let term = Math.pow(a, b);\n      if (list.indexOf(term)===-1) list.push(term);\n    }\n  }\n  return list.length;\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>distinctPowers(15)</code> should return a number.</p>",
      "testString": "assert(typeof distinctPowers(15) === 'number');"
    },
    {
      "text": "<p><code>distinctPowers(15)</code> should return 177.</p>",
      "testString": "assert.strictEqual(distinctPowers(15), 177);"
    },
    {
      "text": "<p><code>distinctPowers(20)</code> should return 324.</p>",
      "testString": "assert.strictEqual(distinctPowers(20), 324);"
    },
    {
      "text": "<p><code>distinctPowers(25)</code> should return 519.</p>",
      "testString": "assert.strictEqual(distinctPowers(25), 519);"
    },
    {
      "text": "<p><code>distinctPowers(30)</code> should return 755.</p>",
      "testString": "assert.strictEqual(distinctPowers(30), 755);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Consider all integer combinations of $a^b$ for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:</p>\n<div style='padding-left: 4em;'>\n  2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32 <br>\n  3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243 <br>\n  4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024 <br>\n  5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125 <br>\n</div>\n<p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:</p>\n<div style='padding-left: 4em;'>\n  4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n</div>\n<p>How many distinct terms are in the sequence generated by $a^b$ for 2 ≤ <code>a</code> ≤ <code>n</code> and 2 ≤ <code>b</code> ≤ <code>n</code>?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 28,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
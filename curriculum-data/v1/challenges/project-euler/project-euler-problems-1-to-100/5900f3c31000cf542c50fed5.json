{
  "id": "5900f3c31000cf542c50fed5",
  "title": "Problem 86: Cuboid route",
  "challengeType": 1,
  "forumTopicId": 302200,
  "dashedName": "problem-86-cuboid-route",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function cuboidRoute(n) {\n\n  return true;\n}\n\ncuboidRoute(2000);",
      "error": null,
      "seed": "function cuboidRoute(n) {\n\n  return true;\n}\n\ncuboidRoute(2000);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function cuboidRoute(n) {\n  // Based on https://www.mathblog.dk/project-euler-86-shortest-path-cuboid/\n  function getLength(a, b) {\n    return Math.sqrt(a ** 2 + b ** 2);\n  }\n\n  let M = 2;\n  let counter = 0;\n\n  while (counter < n) {\n    M++;\n    for (let baseHeightWidth = 3; baseHeightWidth <= 2 * M; baseHeightWidth++) {\n      const pathLength = getLength(M, baseHeightWidth);\n      if (Number.isInteger(pathLength)) {\n        if (baseHeightWidth <= M) {\n          counter += Math.floor(baseHeightWidth / 2);\n        } else {\n          counter += 1 + M - Math.floor((baseHeightWidth + 1) / 2);\n        }\n      }\n    }\n  }\n\n  return M;\n}",
        "error": null,
        "seed": "function cuboidRoute(n) {\n  // Based on https://www.mathblog.dk/project-euler-86-shortest-path-cuboid/\n  function getLength(a, b) {\n    return Math.sqrt(a ** 2 + b ** 2);\n  }\n\n  let M = 2;\n  let counter = 0;\n\n  while (counter < n) {\n    M++;\n    for (let baseHeightWidth = 3; baseHeightWidth <= 2 * M; baseHeightWidth++) {\n      const pathLength = getLength(M, baseHeightWidth);\n      if (Number.isInteger(pathLength)) {\n        if (baseHeightWidth <= M) {\n          counter += Math.floor(baseHeightWidth / 2);\n        } else {\n          counter += 1 + M - Math.floor((baseHeightWidth + 1) / 2);\n        }\n      }\n    }\n  }\n\n  return M;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>cuboidRoute(2000)</code> should return a number.</p>",
      "testString": "assert(typeof cuboidRoute(2000) === 'number');"
    },
    {
      "text": "<p><code>cuboidRoute(2000)</code> should return <code>100</code>.</p>",
      "testString": "assert.strictEqual(cuboidRoute(2000), 100);"
    },
    {
      "text": "<p><code>cuboidRoute(25000)</code> should return <code>320</code>.</p>",
      "testString": "assert.strictEqual(cuboidRoute(25000), 320);"
    },
    {
      "text": "<p><code>cuboidRoute(500000)</code> should return <code>1309</code>.</p>",
      "testString": "assert.strictEqual(cuboidRoute(500000), 1309);"
    },
    {
      "text": "<p><code>cuboidRoute(1000000)</code> should return <code>1818</code>.</p>",
      "testString": "assert.strictEqual(cuboidRoute(1000000), 1818);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A spider, S, sits in one corner of a cuboid room, measuring 6 by 5 by 3, and a fly, F, sits in the opposite corner. By travelling on the surfaces of the room the shortest \"straight line\" distance from S to F is 10 and the path is shown on the diagram.</p>\n<img class=\"img-responsive center-block\" alt=\"a diagram of a spider and fly's path from one corner of a cuboid room to the opposite corner\" src=\"https://cdn-media-1.freecodecamp.org/project-euler/cuboid-route.png\" style=\"background-color: white; padding: 10px;\">\n<p>However, there are up to three \"shortest\" path candidates for any given cuboid and the shortest route doesn't always have integer length.</p>\n<p>It can be shown that there are exactly <code>2060</code> distinct cuboids, ignoring rotations, with integer dimensions, up to a maximum size of M by M by M, for which the shortest route has integer length when M = 100. This is the least value of M for which the number of solutions first exceeds two thousand; the number of solutions when M = 99 is <code>1975</code>.</p>\n<p>Find the least value of M such that the number of solutions first exceeds <code>n</code>.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 85,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
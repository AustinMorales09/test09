{
  "id": "5900f3931000cf542c50fea5",
  "title": "Problem 38: Pandigital multiples",
  "challengeType": 1,
  "forumTopicId": 302042,
  "dashedName": "problem-38-pandigital-multiples",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function pandigitalMultiples(k) {\n\n  return true;\n}\n\npandigitalMultiples(8);",
      "error": null,
      "seed": "function pandigitalMultiples(k) {\n\n  return true;\n}\n\npandigitalMultiples(8);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function pandigitalMultiples(k) {\n  function getKDigitConcatenatedProduct(num, k) {\n    // returns false if concatenated product is not k digits\n    let concatenatedProduct = num.toString();\n    for (let i = 2; concatenatedProduct.length < k; i++) {\n      concatenatedProduct += num * i;\n    }\n    return concatenatedProduct.length === k ? concatenatedProduct : false;\n  }\n\n  function is1toKPandigital(num, k) {\n    const numStr = num.toString();\n\n    // check if length is not k\n    if (numStr.length !== k) {\n      return false;\n    }\n\n    // check if pandigital\n    for (let i = k; i > 0; i--) {\n      if (numStr.indexOf(i.toString()) === -1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let largestNum = 0;\n  for (let i = 10 ** Math.floor(k / 2) + 1; i >= 1; i--) {\n    const concatenatedProduct = getKDigitConcatenatedProduct(i, k);\n    if (is1toKPandigital(concatenatedProduct, k)) {\n      const number = parseInt(concatenatedProduct, 10);\n      if (number > largestNum) {\n        largestNum = number;\n      }\n    }\n  }\n  return largestNum;\n}",
        "error": null,
        "seed": "function pandigitalMultiples(k) {\n  function getKDigitConcatenatedProduct(num, k) {\n    // returns false if concatenated product is not k digits\n    let concatenatedProduct = num.toString();\n    for (let i = 2; concatenatedProduct.length < k; i++) {\n      concatenatedProduct += num * i;\n    }\n    return concatenatedProduct.length === k ? concatenatedProduct : false;\n  }\n\n  function is1toKPandigital(num, k) {\n    const numStr = num.toString();\n\n    // check if length is not k\n    if (numStr.length !== k) {\n      return false;\n    }\n\n    // check if pandigital\n    for (let i = k; i > 0; i--) {\n      if (numStr.indexOf(i.toString()) === -1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let largestNum = 0;\n  for (let i = 10 ** Math.floor(k / 2) + 1; i >= 1; i--) {\n    const concatenatedProduct = getKDigitConcatenatedProduct(i, k);\n    if (is1toKPandigital(concatenatedProduct, k)) {\n      const number = parseInt(concatenatedProduct, 10);\n      if (number > largestNum) {\n        largestNum = number;\n      }\n    }\n  }\n  return largestNum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>pandigitalMultiples(8)</code> should return a number.</p>",
      "testString": "assert(typeof pandigitalMultiples(8) === 'number');"
    },
    {
      "text": "<p><code>pandigitalMultiples(8)</code> should return <code>78156234</code>.</p>",
      "testString": "assert.strictEqual(pandigitalMultiples(8), 78156234);"
    },
    {
      "text": "<p><code>pandigitalMultiples(9)</code> should return <code>932718654</code>.</p>",
      "testString": "assert.strictEqual(pandigitalMultiples(9), 932718654);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Take the number 192 and multiply it by each of 1, 2, and 3:</p>\n<p>$$\\begin{align}\n192 × 1 = 192\\\\\n192 × 2 = 384\\\\\n192 × 3 = 576\\\\\n\\end{align}$$</p>\n<p>By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1, 2, 3).</p>\n<p>The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1, 2, 3, 4, 5).</p>\n<p>What is the largest 1 to <code>k</code> pandigital <code>k</code>-digit number that can be formed as the concatenated product of an integer with (1, 2, ..., <code>n</code>) where <code>n</code> > 1?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 37,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
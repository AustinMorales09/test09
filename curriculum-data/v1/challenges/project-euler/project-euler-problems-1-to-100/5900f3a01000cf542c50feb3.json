{
  "id": "5900f3a01000cf542c50feb3",
  "title": "Problem 52: Permuted multiples",
  "challengeType": 1,
  "forumTopicId": 302163,
  "dashedName": "problem-52-permuted-multiples",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function permutedMultiples(n) {\n\n  return true;\n}\n\npermutedMultiples(2);",
      "error": null,
      "seed": "function permutedMultiples(n) {\n\n  return true;\n}\n\npermutedMultiples(2);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function permutedMultiples(n) {\n    const isPermutation = (a, b) =>\n        a.length !== b.length\n            ? false\n            : a.split('').sort().join() === b.split('').sort().join();\n\n\n    let start = 1;\n    let found = false;\n    let result = 0;\n\n    while (!found) {\n        start *= 10;\n        for (let i = start; i < start * 10 / n; i++) {\n            found = true;\n            for (let j = 2; j <= n; j++) {\n                if (!isPermutation(i + '', j * i + '')) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                result = i;\n                break;\n            }\n        }\n    }\n\n    return result;\n}",
        "error": null,
        "seed": "function permutedMultiples(n) {\n    const isPermutation = (a, b) =>\n        a.length !== b.length\n            ? false\n            : a.split('').sort().join() === b.split('').sort().join();\n\n\n    let start = 1;\n    let found = false;\n    let result = 0;\n\n    while (!found) {\n        start *= 10;\n        for (let i = start; i < start * 10 / n; i++) {\n            found = true;\n            for (let j = 2; j <= n; j++) {\n                if (!isPermutation(i + '', j * i + '')) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) {\n                result = i;\n                break;\n            }\n        }\n    }\n\n    return result;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>permutedMultiples(2)</code> should return a number.</p>",
      "testString": "assert(typeof permutedMultiples(2) === 'number');"
    },
    {
      "text": "<p><code>permutedMultiples(2)</code> should return <code>125874</code>.</p>",
      "testString": "assert.strictEqual(permutedMultiples(2), 125874);"
    },
    {
      "text": "<p><code>permutedMultiples(6)</code> should return <code>142857</code>.</p>",
      "testString": "assert.strictEqual(permutedMultiples(6), 142857);"
    }
  ],
  "description": "<section id=\"description\">\n<p>It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.</p>\n<p>Find the smallest positive integer, such that multiplied by integers $\\{2, 3, \\ldots, n\\}$, contain the same digits.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 51,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
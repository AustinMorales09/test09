{
  "id": "5900f3b41000cf542c50fec7",
  "title": "Problem 72: Counting fractions",
  "challengeType": 1,
  "forumTopicId": 302185,
  "dashedName": "problem-72-counting-fractions",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function countingFractions(limit) {\n\n  return true;\n}\n\ncountingFractions(8);",
      "error": null,
      "seed": "function countingFractions(limit) {\n\n  return true;\n}\n\ncountingFractions(8);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function countingFractions(limit) {\n  const phi = {};\n  let count = 0;\n\n  for (let i = 2; i <= limit; i++) {\n    if (!phi[i]) {\n      phi[i] = i;\n    }\n    if (phi[i] === i) {\n      for (let j = i; j <= limit; j += i) {\n        if (!phi[j]) {\n          phi[j] = j;\n        }\n        phi[j] = (phi[j] / i) * (i - 1);\n      }\n    }\n    count += phi[i];\n  }\n\n  return count;\n}",
        "error": null,
        "seed": "function countingFractions(limit) {\n  const phi = {};\n  let count = 0;\n\n  for (let i = 2; i <= limit; i++) {\n    if (!phi[i]) {\n      phi[i] = i;\n    }\n    if (phi[i] === i) {\n      for (let j = i; j <= limit; j += i) {\n        if (!phi[j]) {\n          phi[j] = j;\n        }\n        phi[j] = (phi[j] / i) * (i - 1);\n      }\n    }\n    count += phi[i];\n  }\n\n  return count;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countingFractions(8)</code> should return a number.</p>",
      "testString": "assert(typeof countingFractions(8) === 'number');"
    },
    {
      "text": "<p><code>countingFractions(8)</code> should return <code>21</code>.</p>",
      "testString": "assert.strictEqual(countingFractions(8), 21);"
    },
    {
      "text": "<p><code>countingFractions(20000)</code> should return <code>121590395</code>.</p>",
      "testString": "assert.strictEqual(countingFractions(20000), 121590395);"
    },
    {
      "text": "<p><code>countingFractions(500000)</code> should return <code>75991039675</code>.</p>",
      "testString": "assert.strictEqual(countingFractions(500000), 75991039675);"
    },
    {
      "text": "<p><code>countingFractions(1000000)</code> should return <code>303963552391</code>.</p>",
      "testString": "assert.strictEqual(countingFractions(1000000), 303963552391);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Consider the fraction, $\\frac{n}{d}$, where <code>n</code> and <code>d</code> are positive integers. If <code>n</code> &#x3C; <code>d</code> and highest common factor, ${HCF}(n, d) = 1$, it is called a reduced proper fraction.</p>\n<p>If we list the set of reduced proper fractions for <code>d</code> ≤ 8 in ascending order of size, we get:</p>\n<p>$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\frac{3}{8}, \\frac{2}{5}, \\frac{3}{7}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$</p>\n<p>It can be seen that there are <code>21</code> elements in this set.</p>\n<p>How many elements would be contained in the set of reduced proper fractions for <code>d</code> ≤ <code>limit</code>?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 71,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3b21000cf542c50fec5",
  "title": "Problem 70: Totient permutation",
  "challengeType": 1,
  "forumTopicId": 302183,
  "dashedName": "problem-70-totient-permutation",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function totientPermutation(limit) {\n\n  return true;\n}\n\ntotientPermutation(10000);",
      "error": null,
      "seed": "function totientPermutation(limit) {\n\n  return true;\n}\n\ntotientPermutation(10000);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function totientPermutation(limit) {\n  function getSievePrimes(max) {\n    const primes = [];\n    const primesMap = new Array(max).fill(true);\n    primesMap[0] = false;\n    primesMap[1] = false;\n\n    for (let i = 2; i < max; i += 2) {\n      if (primesMap[i]) {\n        primes.push(i);\n        for (let j = i * i; j < max; j += i) {\n          primesMap[j] = false;\n        }\n      }\n      if (i === 2) {\n        i = 1;\n      }\n    }\n    return primes;\n  }\n\n  function sortDigits(number) {\n    return number.toString().split('').sort().join('');\n  }\n\n  function isPermutation(numberA, numberB) {\n    return sortDigits(numberA) === sortDigits(numberB);\n  }\n\n  const MAX_PRIME = 4000;\n  const primes = getSievePrimes(MAX_PRIME);\n\n  let nValue = 1;\n  let minRatio = Infinity;\n\n  for (let i = 1; i < primes.length; i++) {\n    for (let j = i + 1; j < primes.length; j++) {\n      const num = primes[i] * primes[j];\n      if (num > limit) {\n        break;\n      }\n\n      const phi = (primes[i] - 1) * (primes[j] - 1);\n      const ratio = num / phi;\n\n      if (minRatio > ratio && isPermutation(num, phi)) {\n        nValue = num;\n        minRatio = ratio;\n      }\n    }\n  }\n  return nValue;\n}",
        "error": null,
        "seed": "function totientPermutation(limit) {\n  function getSievePrimes(max) {\n    const primes = [];\n    const primesMap = new Array(max).fill(true);\n    primesMap[0] = false;\n    primesMap[1] = false;\n\n    for (let i = 2; i < max; i += 2) {\n      if (primesMap[i]) {\n        primes.push(i);\n        for (let j = i * i; j < max; j += i) {\n          primesMap[j] = false;\n        }\n      }\n      if (i === 2) {\n        i = 1;\n      }\n    }\n    return primes;\n  }\n\n  function sortDigits(number) {\n    return number.toString().split('').sort().join('');\n  }\n\n  function isPermutation(numberA, numberB) {\n    return sortDigits(numberA) === sortDigits(numberB);\n  }\n\n  const MAX_PRIME = 4000;\n  const primes = getSievePrimes(MAX_PRIME);\n\n  let nValue = 1;\n  let minRatio = Infinity;\n\n  for (let i = 1; i < primes.length; i++) {\n    for (let j = i + 1; j < primes.length; j++) {\n      const num = primes[i] * primes[j];\n      if (num > limit) {\n        break;\n      }\n\n      const phi = (primes[i] - 1) * (primes[j] - 1);\n      const ratio = num / phi;\n\n      if (minRatio > ratio && isPermutation(num, phi)) {\n        nValue = num;\n        minRatio = ratio;\n      }\n    }\n  }\n  return nValue;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>totientPermutation(10000)</code> should return a number.</p>",
      "testString": "assert(typeof totientPermutation(10000) === 'number');"
    },
    {
      "text": "<p><code>totientPermutation(10000)</code> should return <code>4435</code>.</p>",
      "testString": "assert.strictEqual(totientPermutation(10000), 4435);"
    },
    {
      "text": "<p><code>totientPermutation(100000)</code> should return <code>75841</code>.</p>",
      "testString": "assert.strictEqual(totientPermutation(100000), 75841);"
    },
    {
      "text": "<p><code>totientPermutation(500000)</code> should return <code>474883</code>.</p>",
      "testString": "assert.strictEqual(totientPermutation(500000), 474883);"
    },
    {
      "text": "<p><code>totientPermutation(10000000)</code> should return <code>8319823</code>.</p>",
      "testString": "assert.strictEqual(totientPermutation(10000000), 8319823);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Euler's Totient function, ${\\phi}(n)$ (sometimes called the phi function), is used to determine the number of positive numbers less than or equal to <code>n</code> which are relatively prime to <code>n</code>. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, ${\\phi}(9) = 6$. The number 1 is considered to be relatively prime to every positive number, so ${\\phi}(1) = 1$.</p>\n<p>Interestingly, ${\\phi}(87109) = 79180$, and it can be seen that 87109 is a permutation of 79180.</p>\n<p>Find the value of <code>n</code>, 1 &#x3C; <code>n</code> &#x3C; <code>limit</code>, for which ${\\phi}(n)$ is a permutation of <code>n</code> and the ratio $\\displaystyle\\frac{n}{{\\phi}(n)}$ produces a minimum.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 69,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3c51000cf542c50fed6",
  "title": "Problem 88: Product-sum numbers",
  "challengeType": 1,
  "forumTopicId": 302203,
  "dashedName": "problem-88-product-sum-numbers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function productSumNumbers(limit) {\n\n  return true;\n}\n\nproductSumNumbers(6);",
      "error": null,
      "seed": "function productSumNumbers(limit) {\n\n  return true;\n}\n\nproductSumNumbers(6);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "function productSumNumbers(limit) {\n  function getProductSums(curProduct, curSum, factorsCount, start) {\n    const k = curProduct - curSum + factorsCount;\n    if (k <= limit) {\n      if (curProduct < minimalProductSums[k]) {\n        minimalProductSums[k] = curProduct;\n      }\n      for (let i = start; i < Math.floor((limit / curProduct) * 2) + 1; i++) {\n        getProductSums(curProduct * i, curSum + i, factorsCount + 1, i);\n      }\n    }\n  }\n\n  const minimalProductSums = new Array(limit + 1).fill(2 * limit);\n  getProductSums(1, 1, 1, 2);\n\n  const uniqueProductSums = [...new Set(minimalProductSums.slice(2))];\n\n  let sum = 0;\n  for (let i = 0; i < uniqueProductSums.length; i++) {\n    sum += uniqueProductSums[i];\n  }\n\n  return sum;\n}",
        "error": null,
        "seed": "function productSumNumbers(limit) {\n  function getProductSums(curProduct, curSum, factorsCount, start) {\n    const k = curProduct - curSum + factorsCount;\n    if (k <= limit) {\n      if (curProduct < minimalProductSums[k]) {\n        minimalProductSums[k] = curProduct;\n      }\n      for (let i = start; i < Math.floor((limit / curProduct) * 2) + 1; i++) {\n        getProductSums(curProduct * i, curSum + i, factorsCount + 1, i);\n      }\n    }\n  }\n\n  const minimalProductSums = new Array(limit + 1).fill(2 * limit);\n  getProductSums(1, 1, 1, 2);\n\n  const uniqueProductSums = [...new Set(minimalProductSums.slice(2))];\n\n  let sum = 0;\n  for (let i = 0; i < uniqueProductSums.length; i++) {\n    sum += uniqueProductSums[i];\n  }\n\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>productSumNumbers(6)</code> should return a number.</p>",
      "testString": "assert(typeof productSumNumbers(6) === 'number');"
    },
    {
      "text": "<p><code>productSumNumbers(6)</code> should return <code>30</code>.</p>",
      "testString": "assert.strictEqual(productSumNumbers(6), 30);"
    },
    {
      "text": "<p><code>productSumNumbers(12)</code> should return <code>61</code>.</p>",
      "testString": "assert.strictEqual(productSumNumbers(12), 61);"
    },
    {
      "text": "<p><code>productSumNumbers(300)</code> should return <code>12686</code>.</p>",
      "testString": "assert.strictEqual(productSumNumbers(300), 12686);"
    },
    {
      "text": "<p><code>productSumNumbers(6000)</code> should return <code>2125990</code>.</p>",
      "testString": "assert.strictEqual(productSumNumbers(6000), 2125990);"
    },
    {
      "text": "<p><code>productSumNumbers(12000)</code> should return <code>7587457</code>.</p>",
      "testString": "assert.strictEqual(productSumNumbers(12000), 7587457);"
    }
  ],
  "description": "<section id=\"description\">\n<p>A natural number, <code>N</code>, that can be written as the sum and product of a given set of at least two natural numbers, $\\{a_1, a_2, \\ldots , a_k\\}$ is called a product-sum number: $N = a_1 + a_2 + \\cdots + a_k = a_1 × a_2 × \\cdots × a_k$.</p>\n<p>For example, 6 = 1 + 2 + 3 = 1 × 2 × 3.</p>\n<p>For a given set of size, <code>k</code>, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, <code>k</code> = 2, 3, 4, 5, and 6 are as follows.</p>\n<div style='margin-left: 4em;'>\n  <var>k</var>=2: 4 = 2 × 2 = 2 + 2<br>\n  <var>k</var>=3: 6 = 1 × 2 × 3 = 1 + 2 + 3<br>\n  <var>k</var>=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4<br>\n  <var>k</var>=5: 8 = 1 × 1 × 2 × 2 × 2  = 1 + 1 + 2 + 2 + 2<br>\n  <var>k</var>=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6\n</div><br>\n<p>Hence for 2 ≤ <code>k</code> ≤ 6, the sum of all the minimal product-sum numbers is 4 + 6 + 8 + 12 = 30; note that <code>8</code> is only counted once in the sum.</p>\n<p>In fact, as the complete set of minimal product-sum numbers for 2 ≤ <code>k</code> ≤ 12 is $\\{4, 6, 8, 12, 15, 16\\}$, the sum is <code>61</code>.</p>\n<p>What is the sum of all the minimal product-sum numbers for 2 ≤ <code>k</code> ≤ <code>limit</code>?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 87,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
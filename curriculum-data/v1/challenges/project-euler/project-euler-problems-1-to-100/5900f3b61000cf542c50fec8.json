{
  "id": "5900f3b61000cf542c50fec8",
  "title": "Problem 73: Counting fractions in a range",
  "challengeType": 1,
  "forumTopicId": 302186,
  "dashedName": "problem-73-counting-fractions-in-a-range",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function countingFractionsInARange(limit) {\n\n  return true;\n}\n\ncountingFractionsInARange(8);",
      "error": null,
      "seed": "function countingFractionsInARange(limit) {\n\n  return true;\n}\n\ncountingFractionsInARange(8);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\nconst primeSeive = new PrimeSeive(12001);\n\nfunction countingFractionsInARange(num) {\n  const moebius = Array(num + 1).fill(1)\n\n  // Generate Moebis function terms\n  for (let i = 2; i <= num; i++) {\n    if (!primeSeive.isPrime(i)) continue;\n    for (let j = i; j <= num; j += i) moebius[j] *= -1;\n    for (let j = i * i; j <= num; j += i * i) moebius[j] = 0;\n  }\n  // Evaluate totient sum\n  let sum = 0;\n  for (let i = 1; i <= num; i++) {\n    const coeff = Math.floor(num / i - 2);\n    sum += moebius[i] * Math.floor(coeff * coeff / 12 + 0.5);\n  }\n  return sum;\n}",
        "error": null,
        "seed": "class PrimeSeive {\n  constructor(num) {\n    const seive = Array(Math.floor((num - 1) / 2)).fill(true);\n    const upper = Math.floor((num - 1) / 2);\n    const sqrtUpper = Math.floor((Math.sqrt(num) - 1) / 2);\n\n    for (let i = 0; i <= sqrtUpper; i++) {\n      if (seive[i]) {\n        // Mark value in seive array\n        const prime = 2 * i + 3;\n        // Mark all multiples of this number as false (not prime)\n        const primeSquaredIndex = 2 * i ** 2 + 6 * i + 3;\n        for (let j = primeSquaredIndex; j < upper; j += prime) {\n          seive[j] = false;\n        }\n      }\n    }\n\n    this._seive = seive;\n  }\n\n  isPrime(num) {\n    return num === 2\n      ? true\n      : num % 2 === 0\n        ? false\n        : this.isOddPrime(num);\n  }\n\n  isOddPrime(num) {\n    return this._seive[(num - 3) / 2];\n  }\n};\nconst primeSeive = new PrimeSeive(12001);\n\nfunction countingFractionsInARange(num) {\n  const moebius = Array(num + 1).fill(1)\n\n  // Generate Moebis function terms\n  for (let i = 2; i <= num; i++) {\n    if (!primeSeive.isPrime(i)) continue;\n    for (let j = i; j <= num; j += i) moebius[j] *= -1;\n    for (let j = i * i; j <= num; j += i * i) moebius[j] = 0;\n  }\n  // Evaluate totient sum\n  let sum = 0;\n  for (let i = 1; i <= num; i++) {\n    const coeff = Math.floor(num / i - 2);\n    sum += moebius[i] * Math.floor(coeff * coeff / 12 + 0.5);\n  }\n  return sum;\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>countingFractionsInARange(8)</code> should return a number.</p>",
      "testString": "assert(typeof countingFractionsInARange(8) === 'number');"
    },
    {
      "text": "<p><code>countingFractionsInARange(8)</code> should return <code>3</code>.</p>",
      "testString": "assert.strictEqual(countingFractionsInARange(8), 3);"
    },
    {
      "text": "<p><code>countingFractionsInARange(1000)</code> should return <code>50695</code>.</p>",
      "testString": "assert.strictEqual(countingFractionsInARange(1000), 50695);"
    },
    {
      "text": "<p><code>countingFractionsInARange(6000)</code> should return <code>1823861</code>.</p>",
      "testString": "assert.strictEqual(countingFractionsInARange(6000), 1823861);"
    },
    {
      "text": "<p><code>countingFractionsInARange(12000)</code> should return <code>7295372</code>.</p>",
      "testString": "assert.strictEqual(countingFractionsInARange(12000), 7295372);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Consider the fraction, $\\frac{n}{d}$, where <code>n</code> and <code>d</code> are positive integers. If <code>n</code> &#x3C; <code>d</code> and highest common factor, ${HCF}(n, d) = 1$, it is called a reduced proper fraction.</p>\n<p>If we list the set of reduced proper fractions for <code>d</code> ≤ 8 in ascending order of size, we get:</p>\n<p>$$\\frac{1}{8}, \\frac{1}{7}, \\frac{1}{6}, \\frac{1}{5}, \\frac{1}{4}, \\frac{2}{7}, \\frac{1}{3}, \\mathbf{\\frac{3}{8}, \\frac{2}{5}, \\frac{3}{7}}, \\frac{1}{2}, \\frac{4}{7}, \\frac{3}{5}, \\frac{5}{8}, \\frac{2}{3}, \\frac{5}{7}, \\frac{3}{4}, \\frac{4}{5}, \\frac{5}{6}, \\frac{6}{7}, \\frac{7}{8}$$</p>\n<p>It can be seen that there are <code>3</code> fractions between $\\frac{1}{3}$ and $\\frac{1}{2}$.</p>\n<p>How many fractions lie between $\\frac{1}{3}$ and $\\frac{1}{2}$ in the sorted set of reduced proper fractions for <code>d</code> ≤ <code>limit</code>?</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 72,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
{
  "id": "5900f3801000cf542c50fe93",
  "title": "Problem 20: Factorial digit sum",
  "challengeType": 1,
  "forumTopicId": 301839,
  "dashedName": "problem-20-factorial-digit-sum",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function sumFactorialDigits(n) {\n\n  return n;\n}\n\nsumFactorialDigits(100);",
      "error": null,
      "seed": "function sumFactorialDigits(n) {\n\n  return n;\n}\n\nsumFactorialDigits(100);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "let factorial = (n) => n <= 1 ? BigInt(n) : BigInt(n) * BigInt(factorial(--n));\n\nlet sumDigits = n => n.toString().split('').map(x => parseInt(x)).reduce((a,b) => a + b);\n\nfunction sumFactorialDigits(n) {\n  return sumDigits(factorial(n));\n}",
        "error": null,
        "seed": "let factorial = (n) => n <= 1 ? BigInt(n) : BigInt(n) * BigInt(factorial(--n));\n\nlet sumDigits = n => n.toString().split('').map(x => parseInt(x)).reduce((a,b) => a + b);\n\nfunction sumFactorialDigits(n) {\n  return sumDigits(factorial(n));\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>sumFactorialDigits(10)</code> should return a number.</p>",
      "testString": "assert(typeof sumFactorialDigits(10) === 'number');"
    },
    {
      "text": "<p><code>sumFactorialDigits(10)</code> should return 27.</p>",
      "testString": "assert.strictEqual(sumFactorialDigits(10), 27);"
    },
    {
      "text": "<p><code>sumFactorialDigits(25)</code> should return 72.</p>",
      "testString": "assert.strictEqual(sumFactorialDigits(25), 72);"
    },
    {
      "text": "<p><code>sumFactorialDigits(50)</code> should return 216.</p>",
      "testString": "assert.strictEqual(sumFactorialDigits(50), 216);"
    },
    {
      "text": "<p><code>sumFactorialDigits(75)</code> should return 432.</p>",
      "testString": "assert.strictEqual(sumFactorialDigits(75), 432);"
    },
    {
      "text": "<p><code>sumFactorialDigits(100)</code> should return 648.</p>",
      "testString": "assert.strictEqual(sumFactorialDigits(100), 648);"
    }
  ],
  "description": "<section id=\"description\">\n<p><code>n</code>! means <code>n</code> × (<code>n</code> − 1) × ... × 3 × 2 × 1</p>\n<p>For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,<br>\nand the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.</p>\n<p>Find the sum of the digits <code>n</code>!</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-1-to-100",
  "hasEditableBoundaries": false,
  "order": 0,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 19,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
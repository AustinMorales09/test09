{
  "id": "5900f4591000cf542c50ff6b",
  "title": "Problem 236: Luxury Hampers",
  "challengeType": 1,
  "forumTopicId": 301881,
  "dashedName": "problem-236-luxury-hampers",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function luxuryHampers() {\n\n  return true;\n}\n\nluxuryHampers();",
      "error": null,
      "seed": "function luxuryHampers() {\n\n  return true;\n}\n\nluxuryHampers();"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "// solution required",
        "error": null,
        "seed": "// solution required"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>luxuryHampers()</code> should return a string.</p>",
      "testString": "assert(typeof luxuryHampers() === 'string');"
    },
    {
      "text": "<p><code>luxuryHampers()</code> should return the string <code>123/59</code>.</p>",
      "testString": "assert.strictEqual(luxuryHampers(), '123/59');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Suppliers 'A' and 'B' provided the following numbers of products for the luxury hamper market:</p>\n<table>\n<thead>\n<tr>\n<th>Product</th>\n<th>'A'</th>\n<th>'B'</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Beluga Caviar</td>\n<td>5248</td>\n<td>640</td>\n</tr>\n<tr>\n<td>Christmas Cake</td>\n<td>1312</td>\n<td>1888</td>\n</tr>\n<tr>\n<td>Gammon Joint</td>\n<td>2624</td>\n<td>3776</td>\n</tr>\n<tr>\n<td>Vintage Port</td>\n<td>5760</td>\n<td>3776</td>\n</tr>\n<tr>\n<td>Champagne Truffles</td>\n<td>3936</td>\n<td>5664</td>\n</tr>\n</tbody>\n</table>\n<p>Although the suppliers try very hard to ship their goods in perfect condition, there is inevitably some spoilage - i.e. products gone bad.</p>\n<p>The suppliers compare their performance using two types of statistic:</p>\n<ul>\n<li>The five per-product spoilage rates for each supplier are equal to the number of products gone bad divided by the number of products supplied, for each of the five products in turn.</li>\n<li>The overall spoilage rate for each supplier is equal to the total number of products gone bad divided by the total number of products provided by that supplier.</li>\n</ul>\n<p>To their surprise, the suppliers found that each of the five per-product spoilage rates was worse (higher) for 'B' than for 'A' by the same factor (ratio of spoilage rates), $m > 1$; and yet, paradoxically, the overall spoilage rate was worse for 'A' than for 'B', also by a factor of $m$.</p>\n<p>There are thirty-five $m > 1$ for which this surprising result could have occurred, the smallest of which is $\\frac{1476}{1475}$.</p>\n<p>What's the largest possible value of $m$? Give your answer as a string with fraction reduced to its lowest terms, in the form <code>u/v</code>.</p>\n</section>",
  "translationPending": false,
  "block": "project-euler-problems-201-to-300",
  "hasEditableBoundaries": false,
  "order": 2,
  "superOrder": 16,
  "certification": "project-euler",
  "superBlock": "project-euler",
  "challengeOrder": 35,
  "required": [],
  "helpCategory": "Euler",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": false
}
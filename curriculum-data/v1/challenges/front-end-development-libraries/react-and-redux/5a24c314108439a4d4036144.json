{
  "id": "5a24c314108439a4d4036144",
  "title": "Use Provider to Connect Redux to React",
  "challengeType": 6,
  "forumTopicId": 301435,
  "dashedName": "use-provider-to-connect-redux-to-react",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<AppWrapper />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\n\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {  \n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // Render the Provider below this line\n\n  // Change code above this line\n};",
      "error": null,
      "seed": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\n\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {  \n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // Render the Provider below this line\n\n  // Change code above this line\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n this.submitMessage = this.submitMessage.bind(this);\n }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };  \n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // Change code below this line\n  render() {\n    return (\n      <Provider store = {store}>\n        <DisplayMessages/>\n      </Provider>\n    );\n  }\n  // Change code above this line\n};",
        "error": null,
        "seed": "// Redux:\nconst ADD = 'ADD';\n\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(messageReducer);\n\n// React:\n\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n this.submitMessage = this.submitMessage.bind(this);\n }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };  \n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};\n\nconst Provider = ReactRedux.Provider;\n\nclass AppWrapper extends React.Component {\n  // Change code below this line\n  render() {\n    return (\n      <Provider store = {store}>\n        <DisplayMessages/>\n      </Provider>\n    );\n  }\n  // Change code above this line\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>AppWrapper</code> should render.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return mockedComponent.find('AppWrapper').length === 1;\n  })()\n);"
    },
    {
      "text": "<p>The <code>Provider</code> wrapper component should have a prop of <code>store</code> passed to it, equal to the Redux store.</p>",
      "testString": "(getUserInput) =>\n  assert(\n    (function () {\n      const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n      return __helpers\n        .removeWhiteSpace(getUserInput('index'))\n        .includes('<Providerstore={store}>');\n    })()\n  );"
    },
    {
      "text": "<p><code>DisplayMessages</code> should render as a child of <code>AppWrapper</code>.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return (\n      mockedComponent.find('AppWrapper').find('DisplayMessages').length === 1\n    );\n  })()\n);"
    },
    {
      "text": "<p>The <code>DisplayMessages</code> component should render an <code>h2</code>, <code>input</code>, <code>button</code>, and <code>ul</code> element.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(AppWrapper));\n    return (\n      mockedComponent.find('div').length === 1 &&\n      mockedComponent.find('h2').length === 1 &&\n      mockedComponent.find('button').length === 1 &&\n      mockedComponent.find('ul').length === 1\n    );\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In the last challenge, you created a Redux store to handle the messages array and created an action for adding new messages. The next step is to provide React access to the Redux store and the actions it needs to dispatch updates. React Redux provides its <code>react-redux</code> package to help accomplish these tasks.</p>\n<p>React Redux provides a small API with two key features: <code>Provider</code> and <code>connect</code>. Another challenge covers <code>connect</code>. The <code>Provider</code> is a wrapper component from React Redux that wraps your React app. This wrapper then allows you to access the Redux <code>store</code> and <code>dispatch</code> functions throughout your component tree. <code>Provider</code> takes two props, the Redux store and the child components of your app. Defining the <code>Provider</code> for an App component might look like this:</p>\n<pre><code class=\"language-jsx\">&#x3C;Provider store={store}>\n  &#x3C;App/>\n&#x3C;/Provider>\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>The code editor now shows all your Redux and React code from the past several challenges. It includes the Redux store, actions, and the <code>DisplayMessages</code> component. The only new piece is the <code>AppWrapper</code> component at the bottom. Use this top level component to render the <code>Provider</code> from <code>ReactRedux</code>, and pass the Redux store as a prop. Then render the <code>DisplayMessages</code> component as a child. Once you are finished, you should see your React component rendered to the page.</p>\n<p><strong>Note:</strong> React Redux is available as a global variable here, so you can access the Provider with dot notation. The code in the editor takes advantage of this and sets it to a constant <code>Provider</code> for you to use in the <code>AppWrapper</code> render method.</p>\n</section>",
  "translationPending": false,
  "block": "react-and-redux",
  "hasEditableBoundaries": false,
  "order": 5,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 3,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    },
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"
    },
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js"
    }
  ],
  "template": "<body><div id='root'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
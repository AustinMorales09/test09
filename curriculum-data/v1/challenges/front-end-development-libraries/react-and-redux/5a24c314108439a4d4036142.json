{
  "id": "5a24c314108439a4d4036142",
  "title": "Manage State Locally First",
  "challengeType": 6,
  "forumTopicId": 301431,
  "dashedName": "manage-state-locally-first",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<DisplayMessages />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n  }\n  // Add handleChange() and submitMessage() methods here\n\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        { /* Render an input, button, and ul below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};",
      "error": null,
      "seed": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n  }\n  // Add handleChange() and submitMessage() methods here\n\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        { /* Render an input, button, and ul below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n   this.submitMessage = this.submitMessage.bind(this);\n }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };  \n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};",
        "error": null,
        "seed": "class DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      messages: []\n    }\n this.handleChange = this.handleChange.bind(this);\n   this.submitMessage = this.submitMessage.bind(this);\n }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState((state) => {\n      const currentMessage = state.input;\n      return {\n        input: '',\n        messages: state.messages.concat(currentMessage)\n      };  \n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input\n          value={this.state.input}\n          onChange={this.handleChange}/><br/>\n        <button onClick={this.submitMessage}>Submit</button>\n        <ul>\n          {this.state.messages.map( (message, idx) => {\n              return (\n                 <li key={idx}>{message}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    );\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>DisplayMessages</code> component should initialize with a state equal to <code>{ input: \"\", messages: [] }</code>.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n    const initialState = mockedComponent.state();\n    return (\n      typeof initialState === 'object' &&\n      initialState.input === '' &&\n      initialState.messages.length === 0\n    );\n  })()\n);"
    },
    {
      "text": "<p>The <code>DisplayMessages</code> component should render a <code>div</code> containing an <code>h2</code> element, a <code>button</code> element, a <code>ul</code> element, and <code>li</code> elements as children.</p>",
      "testString": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const state = () => {\n    mockedComponent.setState({ messages: ['__TEST__MESSAGE'] });\n    return mockedComponent;\n  };\n  const updated = state();\n  assert(\n    updated.find('div').length === 1 &&\n      updated.find('h2').length === 1 &&\n      updated.find('button').length === 1 &&\n      updated.find('ul').length === 1 &&\n      updated.find('li').length > 0\n  );\n};"
    },
    {
      "text": "<p><code>.map</code> should be used on the <code>messages</code> array.</p>",
      "testString": "assert(code.match(/this\\.state\\.messages\\.map/g));"
    },
    {
      "text": "<p>The <code>input</code> element should render the value of <code>input</code> in local state.</p>",
      "testString": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const testValue = '__TEST__EVENT__INPUT';\n  const changed = () => {\n    causeChange(mockedComponent, testValue);\n    return mockedComponent;\n  };\n  const updated = changed();\n  assert(updated.find('input').props().value === testValue);\n};"
    },
    {
      "text": "<p>Calling the method <code>handleChange</code> should update the <code>input</code> value in state to the current input.</p>",
      "testString": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const initialState = mockedComponent.state();\n  const testMessage = '__TEST__EVENT__MESSAGE__';\n  const changed = () => {\n    causeChange(mockedComponent, testMessage);\n    return mockedComponent;\n  };\n  const afterInput = changed();\n  assert(\n    initialState.input === '' &&\n      afterInput.state().input === '__TEST__EVENT__MESSAGE__'\n  );\n};"
    },
    {
      "text": "<p>Clicking the <code>Add message</code> button should call the method <code>submitMessage</code> which should add the current <code>input</code> to the <code>messages</code> array in state.</p>",
      "testString": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const initialState = mockedComponent.state();\n  const testMessage_1 = '__FIRST__MESSAGE__';\n  const firstChange = () => {\n    causeChange(mockedComponent, testMessage_1);\n    return mockedComponent;\n  };\n  const firstResult = firstChange();\n  const firstSubmit = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent;\n  };\n  const afterSubmit_1 = firstSubmit();\n  const submitState_1 = afterSubmit_1.state();\n  const testMessage_2 = '__SECOND__MESSAGE__';\n  const secondChange = () => {\n    causeChange(mockedComponent, testMessage_2);\n    return mockedComponent;\n  };\n  const secondResult = secondChange();\n  const secondSubmit = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent;\n  };\n  const afterSubmit_2 = secondSubmit();\n  const submitState_2 = afterSubmit_2.state();\n  assert(\n    initialState.messages.length === 0 &&\n      submitState_1.messages.length === 1 &&\n      submitState_2.messages.length === 2 &&\n      submitState_2.messages[1] === testMessage_2\n  );\n};"
    },
    {
      "text": "<p>The <code>submitMessage</code> method should clear the current input.</p>",
      "testString": "() => {\n  const mockedComponent = Enzyme.mount(React.createElement(DisplayMessages));\n  const causeChange = (c, v) =>\n    c.find('input').simulate('change', { target: { value: v } });\n  const initialState = mockedComponent.state();\n  const testMessage = '__FIRST__MESSAGE__';\n  const firstChange = () => {\n    causeChange(mockedComponent, testMessage);\n    return mockedComponent;\n  };\n  const firstResult = firstChange();\n  const firstState = firstResult.state();\n  const firstSubmit = () => {\n    mockedComponent.find('button').simulate('click');\n    return mockedComponent;\n  };\n  const afterSubmit = firstSubmit();\n  const submitState = afterSubmit.state();\n  assert(firstState.input === testMessage && submitState.input === '');\n};"
    }
  ],
  "description": "<section id=\"description\">\n<p>Here you'll finish creating the <code>DisplayMessages</code> component.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>First, in the <code>render()</code> method, have the component render an <code>input</code> element, <code>button</code> element, and <code>ul</code> element. When the <code>input</code> element changes, it should trigger a <code>handleChange()</code> method. Also, the <code>input</code> element should render the value of <code>input</code> that's in the component's state. The <code>button</code> element should trigger a <code>submitMessage()</code> method when it's clicked.</p>\n<p>Second, write these two methods. The <code>handleChange()</code> method should update the <code>input</code> with what the user is typing. The <code>submitMessage()</code> method should concatenate the current message (stored in <code>input</code>) to the <code>messages</code> array in local state, and clear the value of the <code>input</code>.</p>\n<p>Finally, use the <code>ul</code> to map over the array of <code>messages</code> and render it to the screen as a list of <code>li</code> elements.</p>\n</section>",
  "translationPending": false,
  "block": "react-and-redux",
  "hasEditableBoundaries": false,
  "order": 5,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 1,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    },
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"
    },
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/react-redux/5.0.7/react-redux.min.js"
    }
  ],
  "template": "<body><div id='root'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
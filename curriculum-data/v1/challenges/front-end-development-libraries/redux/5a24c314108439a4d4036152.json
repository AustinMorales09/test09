{
  "id": "5a24c314108439a4d4036152",
  "title": "Use const for Action Types",
  "challengeType": 6,
  "forumTopicId": 301450,
  "dashedName": "use-const-for-action-types",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n    case 'LOGIN': \n      return {\n        authenticated: true\n      }\n    case 'LOGOUT': \n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};",
      "error": null,
      "seed": "\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n    case 'LOGIN': \n      return {\n        authenticated: true\n      }\n    case 'LOGOUT': \n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: LOGIN\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: LOGOUT\n  }\n};",
        "error": null,
        "seed": "const LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n\n  switch (action.type) {\n\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n\n    default:\n      return state;\n\n  }\n\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: LOGIN\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: LOGOUT\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Calling the function <code>loginUser</code> should return an object with <code>type</code> property set to the string <code>LOGIN</code>.</p>",
      "testString": "assert(loginUser().type === 'LOGIN');"
    },
    {
      "text": "<p>Calling the function <code>logoutUser</code> should return an object with <code>type</code> property set to the string <code>LOGOUT</code>.</p>",
      "testString": "assert(logoutUser().type === 'LOGOUT');"
    },
    {
      "text": "<p>The store should be initialized with an object with property <code>login</code> set to <code>false</code>.</p>",
      "testString": "assert(store.getState().authenticated === false);"
    },
    {
      "text": "<p>Dispatching <code>loginUser</code> should update the <code>login</code> property in the store state to <code>true</code>.</p>",
      "testString": "assert(\n  (function () {\n    const initialState = store.getState();\n    store.dispatch(loginUser());\n    const afterLogin = store.getState();\n    return (\n      initialState.authenticated === false && afterLogin.authenticated === true\n    );\n  })()\n);"
    },
    {
      "text": "<p>Dispatching <code>logoutUser</code> should update the <code>login</code> property in the store state to <code>false</code>.</p>",
      "testString": "assert(\n  (function () {\n    store.dispatch(loginUser());\n    const loggedIn = store.getState();\n    store.dispatch(logoutUser());\n    const afterLogout = store.getState();\n    return (\n      loggedIn.authenticated === true && afterLogout.authenticated === false\n    );\n  })()\n);"
    },
    {
      "text": "<p>The <code>authReducer</code> function should handle multiple action types with a switch statement.</p>",
      "testString": "(getUserInput) =>\n  assert(\n    (function () {\n      return (\n        typeof authReducer === 'function' &&\n        getUserInput('index').toString().includes('switch') &&\n        getUserInput('index').toString().includes('case') &&\n        getUserInput('index').toString().includes('default')\n      );\n    })()\n  );"
    },
    {
      "text": "<p><code>LOGIN</code> and <code>LOGOUT</code> should be declared as <code>const</code> values and should be assigned strings of <code>LOGIN</code>and <code>LOGOUT</code>.</p>",
      "testString": "const noWhiteSpace = __helpers.removeWhiteSpace(code);\nassert(LOGIN === 'LOGIN' && LOGOUT === 'LOGOUT')\nassert(noWhiteSpace.includes('const'))"
    },
    {
      "text": "<p>The action creators and the reducer should reference the <code>LOGIN</code> and <code>LOGOUT</code> constants.</p>",
      "testString": "(getUserInput) =>\n  assert(\n    (function () {\n      const noWhiteSpace = __helpers.removeWhiteSpace(\n        getUserInput('index').toString()\n      );\n      return (\n        noWhiteSpace.includes('caseLOGIN:') &&\n        noWhiteSpace.includes('caseLOGOUT:') &&\n        noWhiteSpace.includes('type:LOGIN') &&\n        noWhiteSpace.includes('type:LOGOUT')\n      );\n    })()\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as <code>const</code> declarations.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Declare <code>LOGIN</code> and <code>LOGOUT</code> as <code>const</code> values and assign them to the strings <code>'LOGIN'</code> and <code>'LOGOUT'</code>, respectively. Then, edit the <code>authReducer()</code> and the action creators to reference these constants instead of string values.</p>\n<p><strong>Note:</strong> It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well.</p>\n</section>",
  "translationPending": false,
  "block": "redux",
  "hasEditableBoundaries": false,
  "order": 4,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 7,
  "required": [
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"
    },
    {
      "src": "https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"
    }
  ],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "5a24c314108439a4d4036166",
  "title": "Compose React Components",
  "challengeType": 6,
  "forumTopicId": 301381,
  "dashedName": "compose-react-components",
  "challengeFiles": [
    {
      "head": "class NonCitrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Non-Citrus:</h4>\n        <ul>\n          <li>Apples</li>\n          <li>Blueberries</li>\n          <li>Strawberries</li>\n          <li>Bananas</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Citrus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h4>Citrus:</h4>\n        <ul>\n          <li>Lemon</li>\n          <li>Lime</li>\n          <li>Orange</li>\n          <li>Grapefruit</li>\n        </ul>\n      </div>\n    );\n  }\n};\nclass Vegetables extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>Vegetables:</h2>\n        <ul>\n          <li>Brussel Sprouts</li>\n          <li>Broccoli</li>\n          <li>Squash</li>\n        </ul>\n      </div>\n    );\n     }\n};",
      "tail": "ReactDOM.render(<TypesOfFood />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};",
      "error": null,
      "seed": "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n        <NonCitrus />\n        <Citrus />\n        { /* Change code above this line */ }\n      </div>\n    )\n  }\n}\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n    render() {\n      return (\n        <div>\n        <h1>Types of Food:</h1>\n          { /* Change code below this line */ }\n          <Fruits />\n          { /* Change code above this line */ }\n          <Vegetables />\n        </div>\n      );\n    }\n};",
        "error": null,
        "seed": "class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n        <NonCitrus />\n        <Citrus />\n        { /* Change code above this line */ }\n      </div>\n    )\n  }\n}\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n    render() {\n      return (\n        <div>\n        <h1>Types of Food:</h1>\n          { /* Change code below this line */ }\n          <Fruits />\n          { /* Change code above this line */ }\n          <Vegetables />\n        </div>\n      );\n    }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>TypesOfFood</code> component should return a single <code>div</code> element.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().type() === 'div';\n  })()\n);"
    },
    {
      "text": "<p>The <code>TypesOfFood</code> component should return the <code>Fruits</code> component.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(1).name() === 'Fruits';\n  })()\n);"
    },
    {
      "text": "<p>The <code>Fruits</code> component should return the <code>NonCitrus</code> component and the <code>Citrus</code> component.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return (\n      mockedComponent.find('Fruits').children().find('NonCitrus').length ===\n        1 &&\n      mockedComponent.find('Fruits').children().find('Citrus').length === 1\n    );\n  })()\n);"
    },
    {
      "text": "<p>The <code>TypesOfFood</code> component should return the <code>Vegetables</code> component below the <code>Fruits</code> component.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(TypesOfFood));\n    return mockedComponent.children().childAt(2).name() === 'Vegetables';\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>As the challenges continue to use more complex compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges. You can render JSX elements, stateless functional components, and ES6 class components within other components.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>In the code editor, the <code>TypesOfFood</code> component is already rendering a component called <code>Vegetables</code>. Also, there is the <code>Fruits</code> component from the last challenge.</p>\n<p>Nest two components inside of <code>Fruits</code> â€” first <code>NonCitrus</code>, and then <code>Citrus</code>. Both of these components are provided for you behind the scenes. Next, nest the <code>Fruits</code> class component into the <code>TypesOfFood</code> component, below the <code>h1</code> heading element and above <code>Vegetables</code>. The result should be a series of nested components, which uses two different component types.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 10,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
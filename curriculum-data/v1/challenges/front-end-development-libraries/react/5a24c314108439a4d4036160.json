{
  "id": "5a24c314108439a4d4036160",
  "title": "Define an HTML Class in JSX",
  "challengeType": 6,
  "forumTopicId": 301393,
  "dashedName": "define-an-html-class-in-jsx",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(JSX, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);",
      "error": null,
      "seed": "const JSX = (\n  <div>\n    <h1>Add a class to this div</h1>\n  </div>\n);"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "const JSX = (\n<div className = 'myDiv'>\n  <h1>Add a class to this div</h1>\n</div>);",
        "error": null,
        "seed": "const JSX = (\n<div className = 'myDiv'>\n  <h1>Add a class to this div</h1>\n</div>);"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The constant <code>JSX</code> should return a <code>div</code> element.</p>",
      "testString": "assert.strictEqual(JSX.type, 'div');"
    },
    {
      "text": "<p>The <code>div</code> should have a class of <code>myDiv</code>.</p>",
      "testString": "assert.strictEqual(JSX.props.className, 'myDiv');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.</p>\n<p>So far, it may seem that HTML and JSX are exactly the same.</p>\n<p>One key difference in JSX is that you can no longer use the word <code>class</code> to define HTML classes. This is because <code>class</code> is a reserved word in JavaScript. Instead, JSX uses <code>className</code>.</p>\n<p>In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is <code>onClick</code>, instead of <code>onclick</code>. Likewise, <code>onchange</code> becomes <code>onChange</code>. While this is a subtle difference, it is an important one to keep in mind moving forward.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Apply a class of <code>myDiv</code> to the <code>div</code> provided in the JSX code.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 4,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
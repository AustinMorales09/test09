{
  "id": "5a24c314108439a4d403616c",
  "title": "Override Default Props",
  "challengeType": 6,
  "forumTopicId": 301399,
  "dashedName": "override-default-props",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<ShoppingCart />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items />\n    { /* Change code above this line */ }\n  }\n};",
      "error": null,
      "seed": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items />\n    { /* Change code above this line */ }\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items quantity = {10} />\n    { /* Change code above this line */ }\n  }\n};",
        "error": null,
        "seed": "const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    { /* Change code below this line */ }\n    return <Items quantity = {10} />\n    { /* Change code above this line */ }\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The component <code>ShoppingCart</code> should render.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('ShoppingCart').length === 1;\n  })()\n);"
    },
    {
      "text": "<p>The component <code>Items</code> should render.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n    return mockedComponent.find('Items').length === 1;\n  })()\n);"
    },
    {
      "text": "<p>The <code>Items</code> component should have a prop of <code>{ quantity: 10 }</code> passed from the <code>ShoppingCart</code> component.</p>",
      "testString": "(getUserInput) =>\n  assert(\n    (function () {\n      const mockedComponent = Enzyme.mount(React.createElement(ShoppingCart));\n      return (\n        mockedComponent.find('Items').props().quantity == 10 &&\n        getUserInput('index')\n          .replace(/ /g, '')\n          .includes('<Itemsquantity={10}/>')\n      );\n    })()\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>The <code>ShoppingCart</code> component now renders a child component <code>Items</code>. This <code>Items</code> component has a default prop <code>quantity</code> set to the integer <code>0</code>. Override the default prop by passing in a value of <code>10</code> for <code>quantity</code>.</p>\n<p><strong>Note:</strong> Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for <code>quantity</code> is an integer, it won't go in quotes but it should be wrapped in curly braces. For example, <code>{100}</code>. This syntax tells JSX to interpret the value within the braces directly as JavaScript.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 16,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
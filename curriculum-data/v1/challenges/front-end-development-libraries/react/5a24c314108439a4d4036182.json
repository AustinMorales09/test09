{
  "id": "5a24c314108439a4d4036182",
  "title": "Add Inline Styles in React",
  "challengeType": 6,
  "forumTopicId": 301378,
  "dashedName": "add-inline-styles-in-react",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<Colorful />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={{color: \"yellow\", fontSize: 24}}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};",
      "error": null,
      "seed": "// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={{color: \"yellow\", fontSize: 24}}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "const styles = {\n  color: \"purple\",\n  fontSize: 40,\n  border: \"2px solid purple\"\n};\n// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={styles}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};",
        "error": null,
        "seed": "const styles = {\n  color: \"purple\",\n  fontSize: 40,\n  border: \"2px solid purple\"\n};\n// Change code above this line\nclass Colorful extends React.Component {\n  render() {\n    // Change code below this line\n    return (\n      <div style={styles}>Style Me!</div>\n    );\n    // Change code above this line\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>styles</code> variable should be an <code>object</code> with three properties.</p>",
      "testString": "assert(Object.keys(styles).length === 3);"
    },
    {
      "text": "<p>The <code>styles</code> variable should have a <code>color</code> property set to a value of <code>purple</code>.</p>",
      "testString": "assert(styles.color === 'purple');"
    },
    {
      "text": "<p>The <code>styles</code> variable should have a <code>fontSize</code> property set to a value of <code>40</code>.</p>",
      "testString": "assert(styles.fontSize == 40);"
    },
    {
      "text": "<p>The <code>styles</code> variable should have a <code>border</code> property set to a value of <code>2px solid purple</code>.</p>",
      "testString": "assert(styles.border === '2px solid purple');"
    },
    {
      "text": "<p>The component should render a <code>div</code> element.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.shallow(React.createElement(Colorful));\n    return mockedComponent.type() === 'div';\n  })()\n);"
    },
    {
      "text": "<p>The <code>div</code> element should have its styles defined by the <code>styles</code> object.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.shallow(React.createElement(Colorful));\n    return (\n      mockedComponent.props().style.color === 'purple' &&\n      mockedComponent.props().style.fontSize == 40 &&\n      mockedComponent.props().style.border === '2px solid purple'\n    );\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the <code>style</code> attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge set the size of the font with <code>fontSize</code> instead of <code>font-size</code>. Hyphenated words like <code>font-size</code> are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.</p>\n<p>All property value length units (like <code>height</code>, <code>width</code>, and <code>fontSize</code>) are assumed to be in <code>px</code> unless otherwise specified. If you want to use <code>em</code>, for example, you wrap the value and the units in quotes, like <code>{fontSize: \"4em\"}</code>. Other than the length values that default to <code>px</code>, all other property values should be wrapped in quotes.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>If you have a large set of styles, you can assign a style <code>object</code> to a constant to keep your code organized. Declare your styles constant as a global variable at the top of the file. Initialize <code>styles</code> constant and assign an <code>object</code> with three style properties and their values to it. Give the <code>div</code> a color of <code>purple</code>, a font-size of <code>40</code>, and a border of <code>2px solid purple</code>. Then set the <code>style</code> attribute equal to the <code>styles</code> constant.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 36,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
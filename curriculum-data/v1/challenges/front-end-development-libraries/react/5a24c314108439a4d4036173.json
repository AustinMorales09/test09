{
  "id": "5a24c314108439a4d4036173",
  "title": "Set State with this.setState",
  "challengeType": 6,
  "forumTopicId": 301412,
  "dashedName": "set-state-with-this-setstate",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<MyComponent />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};",
      "error": null,
      "seed": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n     // Change code below this line\n    this.setState({\n      name: 'React Rocks!'\n    });\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};",
        "error": null,
        "seed": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n     // Change code below this line\n    this.setState({\n      name: 'React Rocks!'\n    });\n    // Change code above this line\n  }\n  render() {\n    return (\n      <div>\n        <button onClick = {this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The state of <code>MyComponent</code> should initialize with the key value pair <code>{ name: Initial State }</code>.</p>",
      "testString": "assert(\n  Enzyme.mount(React.createElement(MyComponent)).state('name') ===\n    'Initial State'\n);"
    },
    {
      "text": "<p><code>MyComponent</code> should render an <code>h1</code> heading element.</p>",
      "testString": "assert(Enzyme.mount(React.createElement(MyComponent)).find('h1').length === 1);"
    },
    {
      "text": "<p>The rendered <code>h1</code> heading element should contain text rendered from the component's state.</p>",
      "testString": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'TestName' });\n    return waitForIt(() => mockedComponent.html());\n  };\n  const firstValue = await first();\n  assert(/<h1>TestName<\\/h1>/.test(firstValue));\n};"
    },
    {
      "text": "<p>Calling the <code>handleClick</code> method on <code>MyComponent</code> should set the name property in state to equal <code>React Rocks!</code>.</p>",
      "testString": "async () => {\n  const waitForIt = (fn) =>\n    new Promise((resolve, reject) => setTimeout(() => resolve(fn()), 250));\n  const mockedComponent = Enzyme.mount(React.createElement(MyComponent));\n  const first = () => {\n    mockedComponent.setState({ name: 'Before' });\n    return waitForIt(() => mockedComponent.state('name'));\n  };\n  const second = () => {\n    mockedComponent.instance().handleClick();\n    return waitForIt(() => mockedComponent.state('name'));\n  };\n  const firstValue = await first();\n  const secondValue = await second();\n  assert(firstValue === 'Before' && secondValue === 'React Rocks!');\n};"
    }
  ],
  "description": "<section id=\"description\">\n<p>The previous challenges covered component <code>state</code> and how to initialize state in the <code>constructor</code>. There is also a way to change the component's <code>state</code>. React provides a method for updating component <code>state</code> called <code>setState</code>. You call the <code>setState</code> method within your component class like so: <code>this.setState()</code>, passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a <code>username</code> in state and wanted to update it, it would look like this:</p>\n<pre><code class=\"language-jsx\">this.setState({\n  username: 'Lewis'\n});\n</code></pre>\n<p>React expects you to never modify <code>state</code> directly, instead always use <code>this.setState()</code> when state changes occur. Also, you should note that React may batch multiple state updates in order to improve performance. What this means is that state updates through the <code>setState</code> method can be asynchronous. There is an alternative syntax for the <code>setState</code> method which provides a way around this problem. This is rarely needed but it's good to keep it in mind! Please consult our <a href=\"https://www.freecodecamp.org/news/what-is-state-in-react-explained-with-examples/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">React article</a> for further details.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>There is a <code>button</code> element in the code editor which has an <code>onClick()</code> handler. This handler is triggered when the <code>button</code> receives a click event in the browser, and runs the <code>handleClick</code> method defined on <code>MyComponent</code>. Within the <code>handleClick</code> method, update the component <code>state</code> using <code>this.setState()</code>. Set the <code>name</code> property in <code>state</code> to equal the string <code>React Rocks!</code>.</p>\n<p>Click the button and watch the rendered state update. Don't worry if you don't fully understand how the click handler code works at this point. It's covered in upcoming challenges.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 23,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
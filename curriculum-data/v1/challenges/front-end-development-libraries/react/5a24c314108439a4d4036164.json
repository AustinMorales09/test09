{
  "id": "5a24c314108439a4d4036164",
  "title": "Create a Component with Composition",
  "challengeType": 6,
  "forumTopicId": 301383,
  "dashedName": "create-a-component-with-composition",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<ParentComponent />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};",
      "error": null,
      "seed": "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n        <ChildComponent />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};",
        "error": null,
        "seed": "const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        { /* Change code below this line */ }\n        <ChildComponent />\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The React component should return a single <code>div</code> element.</p>",
      "testString": "assert(\n  (function () {\n    var shallowRender = Enzyme.shallow(React.createElement(ParentComponent));\n    return shallowRender.type() === 'div';\n  })()\n);"
    },
    {
      "text": "<p>The component should return two nested elements.</p>",
      "testString": "assert(\n  (function () {\n    var shallowRender = Enzyme.shallow(React.createElement(ParentComponent));\n    return shallowRender.children().length === 2;\n  })()\n);"
    },
    {
      "text": "<p>The component should return the <code>ChildComponent</code> as its second child.</p>",
      "testString": "assert(\n  (function () {\n    const mockedComponent = Enzyme.mount(React.createElement(ParentComponent));\n    return (\n      mockedComponent.find('ParentComponent').find('ChildComponent').length ===\n      1\n    );\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now we will look at how we can compose multiple React components together. Imagine you are building an app and have created three components: a <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.</p>\n<p>To compose these components together, you could create an <code>App</code> <em>parent</em> component which renders each of these three components as <em>children</em>. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example, in the <code>render</code> method you could write:</p>\n<pre><code class=\"language-jsx\">return (\n &#x3C;App>\n  &#x3C;Navbar />\n  &#x3C;Dashboard />\n  &#x3C;Footer />\n &#x3C;/App>\n)\n</code></pre>\n<p>When React encounters a custom HTML tag that references another component (a component name wrapped in <code>&#x3C; /></code> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the <code>App</code> component and the <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>In the code editor, there is a simple functional component called <code>ChildComponent</code> and a class component called <code>ParentComponent</code>. Compose the two together by rendering the <code>ChildComponent</code> within the <code>ParentComponent</code>. Make sure to close the <code>ChildComponent</code> tag with a forward slash.</p>\n<p><strong>Note:</strong> <code>ChildComponent</code> is defined with an ES6 arrow function because this is a very common practice when using React.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 8,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "5a24c314108439a4d403618c",
  "title": "Use Array.filter() to Dynamically Filter an Array",
  "challengeType": 6,
  "forumTopicId": 301416,
  "dashedName": "use-array-filter-to-dynamically-filter-an-array",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<MyComponent />, document.getElementById('root'));",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = null; // Change this line\n    const renderOnline = null; // Change this line\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}",
      "error": null,
      "seed": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = null; // Change this line\n    const renderOnline = null; // Change this line\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = this.state.users.filter(user => {\n      return user.online;\n    });\n    const renderOnline = usersOnline.map(user => {\n      return <li key={user.username}>{user.username}</li>;\n    });\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}",
        "error": null,
        "seed": "class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = this.state.users.filter(user => {\n      return user.online;\n    });\n    const renderOnline = usersOnline.map(user => {\n      return <li key={user.username}>{user.username}</li>;\n    });\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p><code>MyComponent</code> should exist and render to the page.</p>",
      "testString": "assert.strictEqual(\n  Enzyme.mount(React.createElement(MyComponent)).find('MyComponent').length,\n  1\n);"
    },
    {
      "text": "<p><code>MyComponent</code>'s state should be initialized to an array of six users.</p>",
      "testString": "assert(\n  Array.isArray(\n    Enzyme.mount(React.createElement(MyComponent)).state('users')\n  ) === true &&\n    Enzyme.mount(React.createElement(MyComponent)).state('users').length === 6\n);"
    },
    {
      "text": "<p><code>MyComponent</code> should return a <code>div</code>, an <code>h1</code>, and then an unordered list containing <code>li</code> elements for every user whose online status is set to <code>true</code>.</p>",
      "testString": "(() => {\n  const comp = Enzyme.mount(React.createElement(MyComponent));\n  const users = (bool) => ({\n    users: [\n      { username: 'Jeff', online: bool },\n      { username: 'Alan', online: bool },\n      { username: 'Mary', online: bool },\n      { username: 'Jim', online: bool },\n      { username: 'Laura', online: bool }\n    ]\n  });\n  const result = () => comp.find('li').length;\n  const _1 = result();\n  const _2 = () => {\n    comp.setState(users(true));\n    return result();\n  };\n  const _3 = () => {\n    comp.setState(users(false));\n    return result();\n  };\n  const _4 = () => {\n    comp.setState({ users: [] });\n    return result();\n  };\n  const _2_val = _2();\n  const _3_val = _3();\n  const _4_val = _4();\n  assert(\n    comp.find('div').length === 1 &&\n      comp.find('h1').length === 1 &&\n      comp.find('ul').length === 1 &&\n      _1 === 4 &&\n      _2_val === 5 &&\n      _3_val === 0 &&\n      _4_val === 0\n  );\n})();"
    },
    {
      "text": "<p><code>MyComponent</code> should render <code>li</code> elements that contain the <code>username</code> of each online user.</p>",
      "testString": "(() => {\n  const comp = Enzyme.mount(React.createElement(MyComponent));\n  const users = (bool) => ({\n    users: [\n      { username: 'Jeff', online: bool },\n      { username: 'Alan', online: bool },\n      { username: 'Mary', online: bool },\n      { username: 'Jim', online: bool },\n      { username: 'Laura', online: bool }\n    ]\n  });\n  const ul = () => {\n    comp.setState(users(true));\n    return comp.find('ul').html();\n  };\n  const html = ul();\n  assert(\n    html ===\n      '<ul><li>Jeff</li><li>Alan</li><li>Mary</li><li>Jim</li><li>Laura</li></ul>'\n  );\n})();"
    },
    {
      "text": "<p>Each list item element should have a unique <code>key</code> attribute.</p>",
      "testString": "assert(\n  (() => {\n    const ul = Enzyme.mount(React.createElement(MyComponent)).find('ul');\n    console.log(ul.debug());\n    const keys = new Set([\n      ul.childAt(0).key(),\n      ul.childAt(1).key(),\n      ul.childAt(2).key(),\n      ul.childAt(3).key()\n    ]);\n    return keys.size === 4;\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The <code>map</code> array method is a powerful tool that you will use often when working with React. Another method related to <code>map</code> is <code>filter</code>, which filters the contents of an array based on a condition, then returns a new array. For example, if you have an array of users that all have a property <code>online</code> which can be set to <code>true</code> or <code>false</code>, you can filter only those users that are online by writing:</p>\n<pre><code class=\"language-js\">let onlineUsers = users.filter(user => user.online);\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>In the code editor, <code>MyComponent</code>'s <code>state</code> is initialized with an array of users. Some users are online and some aren't. Filter the array so you see only the users who are online. To do this, first use <code>filter</code> to return a new array containing only the users whose <code>online</code> property is <code>true</code>. Then, in the <code>renderOnline</code> variable, map over the filtered array, and return a <code>li</code> element for each user that contains the text of their <code>username</code>. Be sure to include a unique <code>key</code> as well, like in the last challenges.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 45,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
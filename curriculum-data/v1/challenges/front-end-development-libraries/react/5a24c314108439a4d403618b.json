{
  "id": "5a24c314108439a4d403618b",
  "title": "Give Sibling Elements a Unique Key Attribute",
  "challengeType": 6,
  "forumTopicId": 301394,
  "dashedName": "give-sibling-elements-a-unique-key-attribute",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<Frameworks />, document.getElementById('root'))",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = null; // Change this line\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};",
      "error": null,
      "seed": "const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = null; // Change this line\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = frontEndFrameworks.map((fw, i) => <li key={i}>{fw}</li>);\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};",
        "error": null,
        "seed": "const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = frontEndFrameworks.map((fw, i) => <li key={i}>{fw}</li>);\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>Frameworks</code> component should exist and render to the page.</p>",
      "testString": "assert(\n  Enzyme.mount(React.createElement(Frameworks)).find('Frameworks').length === 1\n);"
    },
    {
      "text": "<p><code>Frameworks</code> should render an <code>h1</code> element.</p>",
      "testString": "assert(Enzyme.mount(React.createElement(Frameworks)).find('h1').length === 1);"
    },
    {
      "text": "<p><code>Frameworks</code> should render a <code>ul</code> element.</p>",
      "testString": "assert(Enzyme.mount(React.createElement(Frameworks)).find('ul').length === 1);"
    },
    {
      "text": "<p>The <code>ul</code> tag should render 6 child <code>li</code> elements.</p>",
      "testString": "assert(\n  Enzyme.mount(React.createElement(Frameworks)).find('ul').children().length ===\n    6 &&\n    Enzyme.mount(React.createElement(Frameworks))\n      .find('ul')\n      .childAt(0)\n      .name() === 'li' &&\n    Enzyme.mount(React.createElement(Frameworks)).find('li').length === 6\n);"
    },
    {
      "text": "<p>Each list item element should have a unique <code>key</code> attribute.</p>",
      "testString": "assert(\n  (() => {\n    const ul = Enzyme.mount(React.createElement(Frameworks)).find('ul');\n    const keys = new Set([\n      ul.childAt(0).key(),\n      ul.childAt(1).key(),\n      ul.childAt(2).key(),\n      ul.childAt(3).key(),\n      ul.childAt(4).key(),\n      ul.childAt(5).key()\n    ]);\n    return keys.size === 6;\n  })()\n);"
    },
    {
      "text": "<p>Each list item element should contain text from <code>frontEndFrameworks</code>.</p>",
      "testString": "assert(\n  (() => {\n    const li = Enzyme.mount(React.createElement(Frameworks))\n      .find('ul')\n      .children();\n    return [...Array(5)].every((_, i) =>\n      frontEndFrameworks.includes(li.at(i).text())\n    );\n  })()\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The last challenge showed how the <code>map</code> method is used to dynamically render a number of elements based on user input. However, there was an important piece missing from that example. When you create an array of elements, each one needs a <code>key</code> attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way.</p>\n<p><strong>Note:</strong> Keys only need to be unique between sibling elements, they don't need to be globally unique in your application.</p>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>The code editor has an array with some front end frameworks and a stateless functional component named <code>Frameworks()</code>. <code>Frameworks()</code> needs to map the array to an unordered list, much like in the last challenge. Finish writing the <code>map</code> callback to return an <code>li</code> element for each framework in the <code>frontEndFrameworks</code> array. This time, make sure to give each <code>li</code> a <code>key</code> attribute, set to a unique value. The <code>li</code> elements should also contain text from <code>frontEndFrameworks</code>.</p>\n<p>Normally, you want to make the key something that uniquely identifies the element being rendered. As a last resort the array index may be used, but typically you should try to use a unique identification.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 44,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "5a24c314108439a4d4036187",
  "title": "Use a Ternary Expression for Conditional Rendering",
  "challengeType": 6,
  "forumTopicId": 301414,
  "dashedName": "use-a-ternary-expression-for-conditional-rendering",
  "challengeFiles": [
    {
      "head": "",
      "tail": "ReactDOM.render(<CheckUserAge />, document.getElementById('root'));",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.jsx"
      ],
      "name": "index",
      "ext": "jsx",
      "path": "index.jsx",
      "fileKey": "indexjsx",
      "contents": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}",
      "error": null,
      "seed": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n\n    // Change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}"
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.jsx"
        ],
        "name": "index",
        "ext": "jsx",
        "path": "index.jsx",
        "fileKey": "indexjsx",
        "contents": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    };\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {this.state.userAge === ''\n          ? buttonOne\n          : this.state.userAge >= 18\n          ? buttonTwo\n          : buttonThree}\n      </div>\n    );\n  }\n}",
        "error": null,
        "seed": "const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    };\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {this.state.userAge === ''\n          ? buttonOne\n          : this.state.userAge >= 18\n          ? buttonTwo\n          : buttonThree}\n      </div>\n    );\n  }\n}"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>The <code>CheckUserAge</code> component should render with a single <code>input</code> element and a single <code>button</code> element.</p>",
      "testString": "assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('input')\n    .length === 1 &&\n    Enzyme.mount(React.createElement(CheckUserAge)).find('div').find('button')\n      .length === 1\n);"
    },
    {
      "text": "<p>The <code>CheckUserAge</code> component's state should be initialized with a property of <code>userAge</code> and a property of <code>input</code>, both set to a value of an empty string.</p>",
      "testString": "assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).state().input === '' &&\n    Enzyme.mount(React.createElement(CheckUserAge)).state().userAge === ''\n);"
    },
    {
      "text": "<p>When the <code>CheckUserAge</code> component is first rendered to the DOM, the <code>button</code>'s inner text should be Submit.</p>",
      "testString": "assert(\n  Enzyme.mount(React.createElement(CheckUserAge)).find('button').text() ===\n    'Submit'\n);"
    },
    {
      "text": "<p>When a number of less than 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>'s inner text should read <code>You Shall Not Pass</code>.</p>",
      "testString": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const initialButton = mockedComponent.find('button').text();\n  const enter3AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '3' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter17AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '17' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge3 = enter3AndClickButton();\n  const userAge17 = enter17AndClickButton();\n  assert(\n    initialButton === 'Submit' &&\n      userAge3 === 'You Shall Not Pass' &&\n      userAge17 === 'You Shall Not Pass'\n  );\n})();"
    },
    {
      "text": "<p>When a number greater than or equal to 18 is entered into the <code>input</code> element and the <code>button</code> is clicked, the <code>button</code>'s inner text should read <code>You May Enter</code>.</p>",
      "testString": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const initialButton = mockedComponent.find('button').text();\n  const enter18AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '18' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter35AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '35' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge18 = enter18AndClickButton();\n  const userAge35 = enter35AndClickButton();\n  assert(\n    initialButton === 'Submit' &&\n      userAge18 === 'You May Enter' &&\n      userAge35 === 'You May Enter'\n  );\n})();"
    },
    {
      "text": "<p>Once a number has been submitted, and the value of the <code>input</code> is once again changed, the <code>button</code> should return to reading <code>Submit</code>.</p>",
      "testString": "(() => {\n  const mockedComponent = Enzyme.mount(React.createElement(CheckUserAge));\n  const enter18AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '18' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const changeInputDontClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '5' } });\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const enter10AndClickButton = () => {\n    mockedComponent\n      .find('input')\n      .simulate('change', { target: { value: '10' } });\n    mockedComponent.find('button').simulate('click');\n    mockedComponent.update();\n    return mockedComponent.find('button').text();\n  };\n  const userAge18 = enter18AndClickButton();\n  const changeInput1 = changeInputDontClickButton();\n  const userAge10 = enter10AndClickButton();\n  const changeInput2 = changeInputDontClickButton();\n  assert(\n    userAge18 === 'You May Enter' &&\n      changeInput1 === 'Submit' &&\n      userAge10 === 'You Shall Not Pass' &&\n      changeInput2 === 'Submit'\n  );\n})();"
    },
    {
      "text": "<p>Your code should not contain any <code>if/else</code> statements.</p>",
      "testString": "assert(\n  new RegExp(/(\\s|;)if(\\s|\\()/).test(\n    code\n  ) === false\n);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Before moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the <dfn>ternary operator</dfn>. The ternary operator is often utilized as a shortcut for <code>if/else</code> statements in JavaScript. They're not quite as robust as traditional <code>if/else</code> statements, but they are very popular among React developers. One reason for this is because of how JSX is compiled, <code>if/else</code> statements can't be inserted directly into JSX code. You might have noticed this a couple challenges ago — when an <code>if/else</code> statement was required, it was always <em>outside</em> the <code>return</code> statement. Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX. Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here's the basic syntax:</p>\n<pre><code class=\"language-jsx\">condition ? expressionIfTrue : expressionIfFalse;\n</code></pre>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>The code editor has three constants defined within the <code>CheckUserAge</code> component's <code>render()</code> method. They are called <code>buttonOne</code>, <code>buttonTwo</code>, and <code>buttonThree</code>. Each of these is assigned a simple JSX expression representing a button element. First, initialize the state of <code>CheckUserAge</code> with <code>input</code> and <code>userAge</code> both set to values of an empty string.</p>\n<p>Once the component is rendering information to the page, users should have a way to interact with it. Within the component's <code>return</code> statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, <code>buttonOne</code>, to the page. Then, when a user enters their age and clicks the button, render a different button based on the age. If a user enters a number less than <code>18</code>, render <code>buttonThree</code>. If a user enters a number greater than or equal to <code>18</code>, render <code>buttonTwo</code>.</p>\n</section>",
  "translationPending": false,
  "block": "react",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 2,
  "certification": "front-end-development-libraries",
  "superBlock": "front-end-development-libraries",
  "challengeOrder": 40,
  "required": [
    {
      "src": "https://unpkg.com/react@16.4.0/umd/react.production.min.js"
    },
    {
      "src": "https://unpkg.com/react-dom@16.4.0/umd/react-dom.production.min.js"
    }
  ],
  "template": "<body><div id='root'></div><div id='challenge-node'></div>${ source || '' }</body>",
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
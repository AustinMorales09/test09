{
  "id": "bd7158d8c443edefaeb5bdef",
  "title": "Timestamp Microservice",
  "challengeType": 4,
  "forumTopicId": 301508,
  "dashedName": "timestamp-microservice",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should provide your own project, not the example URL.</p>",
      "testString": "(getUserInput) => {\n  assert(\n    !/.*\\/timestamp-microservice\\.freecodecamp\\.rocks/.test(getUserInput('url'))\n  );\n};"
    },
    {
      "text": "<p>A request to <code>/api/:date?</code> with a valid date should return a JSON object with a <code>unix</code> key that is a Unix timestamp of the input date in milliseconds (as type Number)</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api/2016-12-25').then(\n    (data) => {\n      assert.equal(\n        data.unix,\n        1482624000000,\n        'Should be a valid unix timestamp'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>A request to <code>/api/:date?</code> with a valid date should return a JSON object with a <code>utc</code> key that is a string of the input date in the format: <code>Thu, 01 Jan 1970 00:00:00 GMT</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api/2016-12-25').then(\n    (data) => {\n      assert.equal(\n        data.utc,\n        'Sun, 25 Dec 2016 00:00:00 GMT',\n        'Should be a valid UTC date string'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>A request to <code>/api/1451001600000</code> should return <code>{ unix: 1451001600000, utc: \"Fri, 25 Dec 2015 00:00:00 GMT\" }</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api/1451001600000').then(\n    (data) => {\n      assert(\n        data.unix === 1451001600000 &&\n          data.utc === 'Fri, 25 Dec 2015 00:00:00 GMT'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>Your project can handle dates that can be successfully parsed by <code>new Date(date_string)</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api/05 October 2011, GMT').then(\n    (data) => {\n      assert(\n        data.unix === 1317772800000 &&\n          data.utc === 'Wed, 05 Oct 2011 00:00:00 GMT'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>If the input date string is invalid, the API returns an object having the structure <code>{ error : \"Invalid Date\" }</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api/this-is-not-a-date').then(\n    (data) => {\n      assert.equal(data.error.toLowerCase(), 'invalid date');\n    },\n    (xhr) => {\n      assert(xhr.responseJSON.error.toLowerCase() === 'invalid date');\n    }\n  );"
    },
    {
      "text": "<p>An empty date parameter should return the current time in a JSON object with a <code>unix</code> key</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api').then(\n    (data) => {\n      var now = Date.now();\n      assert.approximately(data.unix, now, 20000);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>An empty date parameter should return the current time in a JSON object with a <code>utc</code> key</p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/api').then(\n    (data) => {\n      var now = Date.now();\n      var serverTime = new Date(data.utc).getTime();\n      assert.approximately(serverTime, now, 20000);\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>Build a full stack JavaScript app that is functionally similar to this: <a href=\"https://timestamp-microservice.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://timestamp-microservice.freecodecamp.rocks</a>. Working on this project will involve you writing your code using one of the following methods:</p>\n<ul>\n<li>Clone <a href=\"https://github.com/freeCodeCamp/boilerplate-project-timestamp/\"  target=\"_blank\" rel=\"noopener noreferrer nofollow\">this GitHub repo</a> and complete your project locally.</li>\n<li>Use <a href=\"https://gitpod.io/?autostart=true#https://github.com/freeCodeCamp/boilerplate-project-timestamp/\"  target=\"_blank\" rel=\"noopener noreferrer nofollow\">our Gitpod starter project</a> to complete your project.</li>\n<li>Use a site builder of your choice to complete the project. Be sure to incorporate all the files from our GitHub repo.</li>\n</ul>\n<p><strong>Note:</strong> Time zones conversion is not a purpose of this project, so assume all sent valid dates will be parsed with <code>new Date()</code> as GMT dates.</p>\n</section>",
  "translationPending": false,
  "block": "back-end-development-and-apis-projects",
  "hasEditableBoundaries": false,
  "order": 3,
  "superOrder": 5,
  "certification": "back-end-development-and-apis",
  "superBlock": "back-end-development-and-apis",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
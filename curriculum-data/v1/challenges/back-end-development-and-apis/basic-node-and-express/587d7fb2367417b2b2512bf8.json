{
  "id": "587d7fb2367417b2b2512bf8",
  "title": "Get Data from POST Requests",
  "challengeType": 2,
  "forumTopicId": 301511,
  "dashedName": "get-data-from-post-requests",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Test 1 : Your API endpoint should respond with the correct name</p>",
      "testString": "(getUserInput) =>\n  $.post(getUserInput('url') + '/name', { first: 'Mick', last: 'Jagger' }).then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Mick Jagger',\n        'Test 1: \"POST /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>Test 2 : Your API endpoint should respond with the correct name</p>",
      "testString": "(getUserInput) =>\n  $.post(getUserInput('url') + '/name', {\n    first: 'Keith',\n    last: 'Richards'\n  }).then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Keith Richards',\n        'Test 2: \"POST /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>Mount a POST handler at the path <code>/name</code>. Itâ€™s the same path as before. We have prepared a form in the html frontpage. It will submit the same data of exercise 10 (Query string). If the body-parser is configured correctly, you should find the parameters in the object <code>req.body</code>. Have a look at the usual library example:</p>\n<blockquote>route: POST '/library'<br>urlencoded_body: userId=546&#x26;bookId=6754 <br>req.body: {userId: '546', bookId: '6754'}</blockquote>\n<p>Respond with the same JSON object as before: <code>{name: 'firstname lastname'}</code>. Test if your endpoint works using the html form we provided in the app frontpage.</p>\n<p>Tip: There are several other http methods other than GET and POST. And by convention there is a correspondence between the http verb, and the operation you are going to execute on the server. The conventional mapping is:</p>\n<p>POST (sometimes PUT) - Create a new resource using the information sent with the request,</p>\n<p>GET - Read an existing resource without modifying it,</p>\n<p>PUT or PATCH (sometimes POST) - Update a resource using the data sent,</p>\n<p>DELETE - Delete a resource.</p>\n<p>There are also a couple of other methods which are used to negotiate a connection with the server. Except from GET, all the other methods listed above can have a payload (i.e. the data into the request body). The body-parser middleware works with these methods as well.</p>\n</section>",
  "translationPending": false,
  "block": "basic-node-and-express",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 5,
  "certification": "back-end-development-and-apis",
  "superBlock": "back-end-development-and-apis",
  "challengeOrder": 11,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "587d7fb2367417b2b2512bf6",
  "title": "Get Query Parameter Input from the Client",
  "challengeType": 2,
  "forumTopicId": 301512,
  "dashedName": "get-query-parameter-input-from-the-client",
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Test 1 : Your API endpoint should respond with <code>{ \"name\": \"Mick Jagger\" }</code> when the <code>/name</code> endpoint is called with <code>?first=Mick&#x26;last=Jagger</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/name?first=Mick&last=Jagger').then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Mick Jagger',\n        'Test 1: \"GET /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    },
    {
      "text": "<p>Test 2 : Your API endpoint should respond with <code>{ \"name\": \"Keith Richards\" }</code> when the <code>/name</code> endpoint is called with <code>?first=Keith&#x26;last=Richards</code></p>",
      "testString": "(getUserInput) =>\n  $.get(getUserInput('url') + '/name?last=Richards&first=Keith').then(\n    (data) => {\n      assert.equal(\n        data.name,\n        'Keith Richards',\n        'Test 2: \"GET /name\" route does not behave as expected'\n      );\n    },\n    (xhr) => {\n      throw new Error(xhr.responseText);\n    }\n  );"
    }
  ],
  "description": "<section id=\"description\">\n<p>Another common way to get input from the client is by encoding the data after the route path, using a query string. The query string is delimited by a question mark (?), and includes field=value couples. Each couple is separated by an ampersand (&#x26;). Express can parse the data from the query string, and populate the object <code>req.query</code>. Some characters, like the percent (%), cannot be in URLs and have to be encoded in a different format before you can send them. If you use the API from JavaScript, you can use specific methods to encode/decode these characters.</p>\n<blockquote>route_path: '/library'<br>actual_request_URL: '/library?userId=546&#x26;bookId=6754' <br>req.query: {userId: '546', bookId: '6754'}</blockquote>\n</section>",
  "instructions": "<section id=\"instructions\">\n<p>Build an API endpoint, mounted at <code>GET /name</code>. Respond with a JSON document, taking the structure <code>{ name: 'firstname lastname'}</code>. The first and last name parameters should be encoded in a query string e.g. <code>?first=firstname&#x26;last=lastname</code>.</p>\n<p><strong>Note:</strong> In the following exercise you are going to receive data from a POST request, at the same <code>/name</code> route path. If you want, you can use the method <code>app.route(path).get(handler).post(handler)</code>. This syntax allows you to chain different verb handlers on the same path route. You can save a bit of typing, and have cleaner code.</p>\n</section>",
  "translationPending": false,
  "block": "basic-node-and-express",
  "hasEditableBoundaries": false,
  "order": 1,
  "superOrder": 5,
  "certification": "back-end-development-and-apis",
  "superBlock": "back-end-development-and-apis",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
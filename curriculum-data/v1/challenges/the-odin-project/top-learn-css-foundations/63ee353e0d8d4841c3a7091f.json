{
  "id": "63ee353e0d8d4841c3a7091f",
  "videoId": "LGQuIIv2RVA",
  "title": "CSS Foundations Question F",
  "challengeType": 15,
  "dashedName": "css-foundations-question-f",
  "solutions": [],
  "question": {
    "text": "<p>Which of the following best describes the purpose of the <code>rel</code> attribute in the <code>&#x3C;link></code> element when linking an external CSS file to an HTML file?</p>",
    "answers": [
      {
        "answer": "<p>It specifies the location of the CSS file relative to the location of the HTML file.</p>",
        "feedback": null
      },
      {
        "answer": "<p>It specifies the relationship between the HTML file and the linked file.</p>",
        "feedback": null
      },
      {
        "answer": "<p>It specifies the type of file being linked (e.g. \"stylesheet\").</p>",
        "feedback": null
      }
    ],
    "solution": 2
  },
  "assignments": [],
  "tests": [],
  "description": "<section id=\"description\">\n<p>Okay, you went over quite a bit so far. The only thing left for now is to go over how to add all this CSS to your HTML. There are three methods to do so.</p>\n<p>External CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML’s opening and closing <code>&#x3C;head></code> tags with a self-closing <code>&#x3C;link></code> element:</p>\n<p>First, you add a self-closing <code>&#x3C;link></code> element inside of the opening and closing <code>&#x3C;head></code> tags of the HTML file. The <code>href</code> attribute is the location of the CSS file, either an absolute URL or, what you’ll be utilizing, a URL relative to the location of the HTML file. In the example above, you are assuming both files are located in the same directory. The <code>rel</code> attribute is required, and it specifies the relationship between the HTML file and the linked file.</p>\n<p>Then inside of the newly created <code>styles.css</code> file, you have the selector (the <code>div</code> and <code>p</code>), followed by a pair of opening and closing curly braces, which create a “declaration block”. Finally, you place any declarations inside of the declaration block. <code>color: white; </code> is one declaration, with <code>color</code> being the property and <code>white</code> being the value, and <code>background-color: black;</code> is another declaration.</p>\n<p>A note on file names: <code>styles.css</code> is just what you went with as the file name here. You can name the file whatever you want as long as the file type is <code>.css</code>, though “style” or “styles” is most commonly used.</p>\n<p>A couple of the pros to this method are:</p>\n<ol>\n<li>It keeps your HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner.</li>\n<li>You only need to edit the CSS in one place, which is especially handy for websites with many pages that all share similar styles.</li>\n</ol>\n</section>",
  "translationPending": false,
  "block": "top-learn-css-foundations",
  "hasEditableBoundaries": false,
  "order": 4,
  "superOrder": 14,
  "certification": "the-odin-project",
  "superBlock": "the-odin-project",
  "challengeOrder": 5,
  "required": [],
  "helpCategory": "Odin",
  "usesMultifileEditor": false,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
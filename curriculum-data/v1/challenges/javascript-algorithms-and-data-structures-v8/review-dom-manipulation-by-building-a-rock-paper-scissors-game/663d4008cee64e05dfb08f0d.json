{
  "id": "663d4008cee64e05dfb08f0d",
  "title": "Step 4",
  "challengeType": 0,
  "dashedName": "step-4",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n",
      "error": null,
      "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Rock, Paper, Scissors game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <h1>Let's play Rock, Paper, Scissors!</h1>\n    <main>\n      <details class=\"rules-container\">\n        <summary>Rules to the game</summary>\n\n        <p>You will be playing against the computer.</p>\n        <p>You can choose between Rock, Paper, and Scissors.</p>\n        <p>The first one to three points wins.</p>\n\n        <p>Here are the rules to getting a point in the game:</p>\n        <ul>\n          <li>Rock beats Scissors</li>\n          <li>Scissors beats Paper</li>\n          <li>Paper beats Rock</li>\n        </ul>\n        <p>\n          If the player and computer choose the same option (Ex. Paper and\n          Paper), then no one gets the point.\n        </p>\n      </details>\n\n      <div class=\"score-container\">\n        <strong\n          >Player Score: <span class=\"score\" id=\"player-score\">0</span></strong\n        >\n        <strong\n          >Computer Score:\n          <span class=\"score\" id=\"computer-score\">0</span></strong\n        >\n      </div>\n\n      <section class=\"options-container\">\n        <h2>Choose an option:</h2>\n        <div class=\"btn-container\">\n          <button id=\"rock-btn\" class=\"btn\">Rock</button>\n          <button id=\"paper-btn\" class=\"btn\">Paper</button>\n          <button id=\"scissors-btn\" class=\"btn\">Scissors</button>\n        </div>\n      </section>\n\n      <div class=\"results-container\">\n        <p id=\"results-msg\"></p>\n        <p id=\"winner-msg\"></p>\n        <button class=\"btn\" id=\"reset-game-btn\">Play again?</button>\n      </div>\n    </main>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}\n",
      "error": null,
      "seed": "*,\n*::before,\n*::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --very-dark-blue: #0a0a23;\n  --white: #ffffff;\n  --yellow: #f1be32;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--very-dark-blue);\n  text-align: center;\n  color: var(--white);\n}\n\nh1 {\n  margin: 15px 0 20px;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: var(--very-dark-blue);\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.rules-container {\n  padding: 10px 0;\n  margin: auto;\n  border-radius: 15px;\n  border: 5px solid var(--yellow);\n  background-color: var(--white);\n  color: var(--very-dark-blue);\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.rules-container p {\n  margin: 10px 0;\n}\n\n@media (min-width: 760px) {\n  .rules-container {\n    width: 60%;\n  }\n}\n\n.score-container {\n  display: flex;\n  justify-content: space-around;\n  margin: 30px 0;\n  font-size: 1.2rem;\n}\n\n.score {\n  font-weight: 500;\n}\n\n.results-container {\n  font-size: 1.3rem;\n  margin: 15px 0;\n}\n\n#winner-msg {\n  margin-top: 25px;\n}\n\n#reset-game-btn {\n  display: none;\n  margin: 20px auto;\n}\n"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        31,
        41
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n\n  if (hasPlayerWonTheRound(userOption, computerResult)) {\n    playerScore++;\n    return `Player wins! ${userOption} beats ${computerResult}`;\n  } else if (computerResult === userOption) {\n    return `It's a tie! Both chose ${userOption}`;\n  } else {\n    computerScore++;\n    return `Computer wins! ${computerResult} beats ${userOption}`;\n  }\n}\n\nconst playerScoreSpanElement = document.getElementById(\"player-score\");\nconst computerScoreSpanElement = document.getElementById(\"computer-score\");\nconst roundResultsMsg = document.getElementById(\"results-msg\");\n\nfunction showResults(userOption) {\n\n};\n\nshowResults(\"Rock\");",
      "error": null,
      "seed": "function getRandomComputerResult() {\n  const options = [\"Rock\", \"Paper\", \"Scissors\"];\n  const randomIndex = Math.floor(Math.random() * options.length);\n  return options[randomIndex];\n}\n\nfunction hasPlayerWonTheRound(player, computer) {\n  return (\n    (player === \"Rock\" && computer === \"Scissors\") ||\n    (player === \"Scissors\" && computer === \"Paper\") ||\n    (player === \"Paper\" && computer === \"Rock\")\n  );\n}\n\nlet playerScore = 0;\nlet computerScore = 0;\n\nfunction getRoundResults(userOption) {\n  const computerResult = getRandomComputerResult();\n\n  if (hasPlayerWonTheRound(userOption, computerResult)) {\n    playerScore++;\n    return `Player wins! ${userOption} beats ${computerResult}`;\n  } else if (computerResult === userOption) {\n    return `It's a tie! Both chose ${userOption}`;\n  } else {\n    computerScore++;\n    return `Computer wins! ${computerResult} beats ${userOption}`;\n  }\n}\n\nconst playerScoreSpanElement = document.getElementById(\"player-score\");\nconst computerScoreSpanElement = document.getElementById(\"computer-score\");\nconst roundResultsMsg = document.getElementById(\"results-msg\");\n\nfunction showResults(userOption) {\n\n};\n\nshowResults(\"Rock\");"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>showResults</code> function should update the <code>roundResultsMsg</code> with the result of the round.</p>",
      "testString": "const possibleResults = [\n  \"Player wins! Rock beats Scissors\",\n  \"Player wins! Scissors beats Paper\",\n  \"Player wins! Paper beats Rock\", \n  \"Computer wins! Paper beats Rock\",\n  \"Computer wins! Scissors beats Paper\",\n  \"Computer wins! Rock beats Scissors\",\n  \"It's a tie! Both chose Rock\",\n  \"It's a tie! Both chose Scissors\",\n  \"It's a tie! Both chose Paper\"\n];\nshowResults(\"Rock\");\nassert.include(possibleResults, roundResultsMsg.innerText.replace(/\\//g, \"'\"));"
    },
    {
      "text": "<p>Your <code>showResults</code> function should update the <code>computerScoreSpanElement</code> to show the updated score of the computer.</p>",
      "testString": "assert.equal(computerScoreSpanElement.innerText, computerScore);"
    },
    {
      "text": "<p>Your <code>showResults</code> function should update the <code>playerScoreSpanElement</code> to show the updated score of the player.</p>",
      "testString": "assert.equal(playerScoreSpanElement.innerText, playerScore);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now it is time to update the scores and the round results message.</p>\n<p>Complete the <code>showResults</code> function. The <code>playerScoreSpanElement</code> and <code>computerScoreSpanElement</code> should be updated to show the updated scores of the player and computer.</p>\n<p>The <code>roundResultsMsg</code> should also be updated with the result of the round.</p>\n<p><strong>Tips</strong></p>\n<ul>\n<li>Remember that you learned how to work with the <code>innerText</code> property to update the text content of an element.</li>\n<li>You can use the <code>getRoundResults</code> function to get the result of the round.</li>\n</ul>\n</section>",
  "translationPending": false,
  "block": "review-dom-manipulation-by-building-a-rock-paper-scissors-game",
  "hasEditableBoundaries": true,
  "order": 5,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 3,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
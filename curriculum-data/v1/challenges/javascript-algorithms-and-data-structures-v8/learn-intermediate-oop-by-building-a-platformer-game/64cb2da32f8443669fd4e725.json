{
  "id": "64cb2da32f8443669fd4e725",
  "title": "Step 96",
  "challengeType": 0,
  "dashedName": "step-96",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n",
      "error": null,
      "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Learn Intermediate OOP by Building a Platformer Game</title>\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n  </head>\n  <body>\n    <div class=\"start-screen\">\n      <h1 class=\"main-title\">freeCodeCamp Code Warrior</h1>\n      <p class=\"instructions\">\n        Help the main player navigate to the yellow checkpoints.\n      </p>\n      <p class=\"instructions\">\n        Use the keyboard arrows to move the player around.\n      </p>\n      <p class=\"instructions\">You can also use the spacebar to jump.</p>\n\n      <div class=\"btn-container\">\n        <button class=\"btn\" id=\"start-btn\">Start Game</button>\n      </div>\n    </div>\n\n    <div class=\"checkpoint-screen\">\n      <h2>Congrats!</h2>\n      <p>You reached the last checkpoint.</p>\n    </div>\n\n    <canvas id=\"canvas\"></canvas>\n\n    <script src=\"./script.js\"></script>\n  </body>\n</html>\n"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}\n",
      "error": null,
      "seed": "* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --main-bg-color: #0a0a23;\n  --section-bg-color: #ffffff;\n  --golden-yellow: #feac32;\n}\n\nbody {\n  background-color: var(--main-bg-color);\n}\n\n.start-screen {\n  background-color: var(--section-bg-color);\n  width: 100%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  border-radius: 30px;\n  padding: 20px;\n  padding-bottom: 5px;\n}\n\n.main-title {\n  text-align: center;\n}\n\n.instructions {\n  text-align: center;\n  font-size: 1.2rem;\n  margin: 15px;\n  line-height: 2rem;\n}\n\n.btn {\n  cursor: pointer;\n  width: 100px;\n  margin: 10px;\n  color: #0a0a23;\n  font-size: 18px;\n  background-color: var(--golden-yellow);\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border-color: var(--golden-yellow);\n  border-width: 3px;\n}\n\n.btn:hover {\n  background-image: linear-gradient(#ffcc4c, #f89808);\n}\n\n.btn-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.checkpoint-screen {\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  text-align: center;\n  background-color: var(--section-bg-color);\n  border-radius: 20px;\n  padding: 10px;\n  display: none;\n}\n\n#canvas {\n  display: none;\n}\n\n@media (min-width: 768px) {\n  .start-screen {\n    width: 60%;\n    max-width: 700px;\n  }\n\n  .checkpoint-screen {\n    max-width: 300px;\n  }\n}\n"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        73,
        85
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - 2 * this.width) {\n      this.position.x = canvas.width - 2 * this.width;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n\n  };\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});\n",
      "error": null,
      "seed": "const startBtn = document.getElementById(\"start-btn\");\nconst canvas = document.getElementById(\"canvas\");\nconst startScreen = document.querySelector(\".start-screen\");\nconst checkpointScreen = document.querySelector(\".checkpoint-screen\");\nconst checkpointMessage = document.querySelector(\".checkpoint-screen > p\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst gravity = 0.5;\nlet isCheckpointCollisionDetectionActive = true;\n\nconst proportionalSize = (size) => {\n  return innerHeight < 500 ? Math.ceil((size / 500) * innerHeight) : size;\n}\n\nclass Player {\n  constructor() {\n    this.position = {\n      x: proportionalSize(10),\n      y: proportionalSize(400),\n    };\n    this.velocity = {\n      x: 0,\n      y: 0,\n    };\n    this.width = proportionalSize(40);\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#99c9ff\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n  \n  update() {\n    this.draw();\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (this.position.y + this.height + this.velocity.y <= canvas.height) {\n      if (this.position.y < 0) {\n        this.position.y = 0;\n        this.velocity.y = gravity;\n      }\n      this.velocity.y += gravity;\n    } else {\n      this.velocity.y = 0;\n    }\n\n    if (this.position.x < this.width) {\n      this.position.x = this.width;\n    }\n\n    if (this.position.x >= canvas.width - 2 * this.width) {\n      this.position.x = canvas.width - 2 * this.width;\n    }\n  }\n}\n\nclass Platform {\n  constructor(x, y) {\n    this.position = {\n      x,\n      y,\n    };\n    this.width = 200;\n    this.height = proportionalSize(40);\n  }\n  draw() {\n    ctx.fillStyle = \"#acd157\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n\n\nclass CheckPoint {\n  constructor(x, y, z) {\n    this.position = {\n      x,\n      y,\n    };\n\n  };\n};\n\n\nconst player = new Player();\n\nconst platformPositions = [\n  { x: 500, y: proportionalSize(450) },\n  { x: 700, y: proportionalSize(400) },\n  { x: 850, y: proportionalSize(350) },\n  { x: 900, y: proportionalSize(350) },\n  { x: 1050, y: proportionalSize(150) },\n  { x: 2500, y: proportionalSize(450) },\n  { x: 2900, y: proportionalSize(400) },\n  { x: 3150, y: proportionalSize(350) },\n  { x: 3900, y: proportionalSize(450) },\n  { x: 4200, y: proportionalSize(400) },\n  { x: 4400, y: proportionalSize(200) },\n  { x: 4700, y: proportionalSize(150) },\n];\n\nconst platforms = platformPositions.map(\n  (platform) => new Platform(platform.x, platform.y)\n);\n\nconst animate = () => {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  platforms.forEach((platform) => {\n    platform.draw();\n  });\n\n  player.update();\n\n  if (keys.rightKey.pressed && player.position.x < proportionalSize(400)) {\n    player.velocity.x = 5;\n  } else if (keys.leftKey.pressed && player.position.x > proportionalSize(100)) {\n    player.velocity.x = -5;\n  } else {\n    player.velocity.x = 0;\n\n    if (keys.rightKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x -= 5;\n      });\n    } else if (keys.leftKey.pressed && isCheckpointCollisionDetectionActive) {\n      platforms.forEach((platform) => {\n        platform.position.x += 5;\n      });\n    }\n  }\n\n  platforms.forEach((platform) => {\n    const collisionDetectionRules = [\n      player.position.y + player.height <= platform.position.y,\n      player.position.y + player.height + player.velocity.y >= platform.position.y,\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n    ];\n\n    if (collisionDetectionRules.every((rule) => rule)) {\n      player.velocity.y = 0;\n      return;\n    }\n\n    const platformDetectionRules = [\n      player.position.x >= platform.position.x - player.width / 2,\n      player.position.x <=\n        platform.position.x + platform.width - player.width / 3,\n      player.position.y + player.height >= platform.position.y,\n      player.position.y <= platform.position.y + platform.height,\n    ];\n\n    if (platformDetectionRules.every(rule => rule)) {\n      player.position.y = platform.position.y + player.height;\n      player.velocity.y = gravity;\n    };\n  });\n}\n\n\nconst keys = {\n  rightKey: {\n    pressed: false\n  },\n  leftKey: {\n    pressed: false\n  }\n};\n\nconst movePlayer = (key, xVelocity, isPressed) => {\n  if (!isCheckpointCollisionDetectionActive) {\n    player.velocity.x = 0;\n    player.velocity.y = 0;\n    return;\n  }\n\n  switch (key) {\n    case \"ArrowLeft\":\n      keys.leftKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x -= xVelocity;\n      break;\n    case \"ArrowUp\":\n    case \" \":\n    case \"Spacebar\":\n      player.velocity.y -= 8;\n      break;\n    case \"ArrowRight\":\n      keys.rightKey.pressed = isPressed;\n      if (xVelocity === 0) {\n        player.velocity.x = xVelocity;\n      }\n      player.velocity.x += xVelocity;\n  }\n}\n\nconst startGame = () => {\n  canvas.style.display = \"block\";\n  startScreen.style.display = \"none\";\n  animate();\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n\nwindow.addEventListener(\"keydown\", ({ key }) => {\n  movePlayer(key, 8, true);\n});\n\nwindow.addEventListener(\"keyup\", ({ key }) => {\n  movePlayer(key, 0, false);\n});\n"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have a <code>width</code> property inside the <code>CheckPoint</code> class.</p>",
      "testString": "const splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.width\\s*;?/);"
    },
    {
      "text": "<p>You should have a <code>height</code> property inside the <code>CheckPoint</code> class.</p>",
      "testString": "const splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.height\\s*;?/);"
    },
    {
      "text": "<p>You should assign the <code>width</code> property to <code>proportionalSize(40)</code>.</p>",
      "testString": "const splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.width\\s*=\\s*proportionalSize\\(\\s*40\\s*\\)\\s*;?/);"
    },
    {
      "text": "<p>You should assign the <code>height</code> property to <code>proportionalSize(70)</code>.</p>",
      "testString": "const splitter = code.split(\"ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\")\nassert.match(splitter[2], /this\\.height\\s*=\\s*proportionalSize\\(\\s*70\\s*\\)\\s*;?/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>The next step is to add the <code>width</code> and <code>height</code> to the <code>CheckPoint</code> class.</p>\n<p>The <code>width</code> and <code>height</code> should be <code>proportionalSize(40)</code> and <code>proportionalSize(70)</code> respectively.</p>\n</section>",
  "translationPending": false,
  "block": "learn-intermediate-oop-by-building-a-platformer-game",
  "hasEditableBoundaries": true,
  "order": 19,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 95,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": true,
  "disableLoopProtectPreview": true
}
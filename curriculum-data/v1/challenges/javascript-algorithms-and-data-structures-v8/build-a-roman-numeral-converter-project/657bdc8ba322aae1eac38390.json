{
  "id": "657bdc8ba322aae1eac38390",
  "title": "Build a Roman Numeral Converter",
  "challengeType": 14,
  "forumTopicId": 16044,
  "dashedName": "build-a-roman-numeral-converter",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "",
      "error": null,
      "seed": ""
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "",
      "error": null,
      "seed": ""
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "",
      "error": null,
      "seed": ""
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.html"
        ],
        "name": "index",
        "ext": "html",
        "path": "index.html",
        "fileKey": "indexhtml",
        "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Castoro+Titling&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n    <link\n      rel=\"icon\"\n      type=\"image/png\"\n      href=\"https://cdn.freecodecamp.org/universal/favicons/favicon.ico\"\n    />\n    <title>Roman Numeral Converter</title>\n  </head>\n  <body>\n    <main>\n      <img\n        class=\"freecodecamp-logo\"\n        src=\"https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg\"\n        alt=\"freeCodeCamp Logo\"\n      />\n      <h1>Roman Numeral Converter</h1>\n      <form id=\"form\" class=\"form\">\n        <fieldset>\n          <label for=\"number\">Enter a Number:</label><br />\n          <input type=\"number\" id=\"number\" required />\n          <button type=\"button\" id=\"convert-btn\">Convert</button>\n        </fieldset>\n      </form>\n      <div id=\"output\" class=\"output hidden\"></div>\n    </main>\n    <script src=\"script.js\"></script>\n  </body>\n</html>",
        "error": null,
        "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Castoro+Titling&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n    <link\n      rel=\"icon\"\n      type=\"image/png\"\n      href=\"https://cdn.freecodecamp.org/universal/favicons/favicon.ico\"\n    />\n    <title>Roman Numeral Converter</title>\n  </head>\n  <body>\n    <main>\n      <img\n        class=\"freecodecamp-logo\"\n        src=\"https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg\"\n        alt=\"freeCodeCamp Logo\"\n      />\n      <h1>Roman Numeral Converter</h1>\n      <form id=\"form\" class=\"form\">\n        <fieldset>\n          <label for=\"number\">Enter a Number:</label><br />\n          <input type=\"number\" id=\"number\" required />\n          <button type=\"button\" id=\"convert-btn\">Convert</button>\n        </fieldset>\n      </form>\n      <div id=\"output\" class=\"output hidden\"></div>\n    </main>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
      },
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "styles.css"
        ],
        "name": "styles",
        "ext": "css",
        "path": "styles.css",
        "fileKey": "stylescss",
        "contents": ":root {\n  --gray-00: #ffffff;\n  --gray-05: #f5f6f7;\n  --gray-15: #d0d0d5;\n  --gray-75: #3b3b4f;\n  --gray-85: #1b1b32;\n  --gray-90: #0a0a23;\n  --blue-50: #198eee;\n  --error: #a94442;\n  --danger-color: #850000;\n  --danger-background: #ffadad;\n}\n\n*,\n::before,\n::after {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  min-height: 100vh;\n  padding: 50px 20px;\n  font-family: 'Lato', Helvetica, Arial, sans-serif;\n  font-size: 18px;\n  background-color: var(--gray-85);\n  color: var(--gray-05);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.freecodecamp-logo {\n  height: 30px;\n  margin-bottom: 20px;\n}\n\nh1 {\n  text-align: center;\n  margin: 20px auto;\n  max-width: 350px;\n  font-family: 'Castoro Titling', cursive;\n}\n\nform {\n  color: var(--gray-05);\n  margin: auto 25px;\n  padding: 15px auto;\n  border: 3px solid var(--gray-05);\n  text-align: center;\n  width: 90%;\n  max-width: 500px;\n  background-color: var(--gray-75);\n}\n\nfieldset {\n  border: 0 none;\n  height: 100%;\n  padding: 25px;\n  margin: 10px 20px;\n}\n\nlabel {\n  display: inline-block;\n  font-size: 1.5rem;\n  margin-bottom: 10px;\n  font-weight: bold;\n}\n\ninput:focus-visible,\nbutton:focus-visible {\n  outline: 3px solid var(--blue-50);\n}\n\ninput {\n  display: block;\n  font-size: 2.5rem;\n  width: 100%;\n  height: 60px;\n  padding: 6px 12px;\n  margin: 10px 0;\n  line-height: 1.4;\n  color: white;\n  background-color: var(--gray-90);\n  border: 1px solid var(--gray-05);\n}\n\nbutton {\n  cursor: pointer;\n  margin-top: 15px;\n  text-decoration: none;\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border: 3px solid #feac32;\n  padding: 10px 16px;\n  font-size: 23px;\n  width: 100%;\n}\n\n.output {\n  color: white;\n  background-color: var(--gray-75);\n  border: 3px solid var(--gray-05);\n  font-size: 2.5rem;\n  width: 90%;\n  max-width: 500px;\n  min-height: 55px;\n  margin-top: 25px;\n  padding: 15px;\n  overflow-wrap: break-word;\n  text-align: center;\n}\n\n.alert {\n  font-size: 2rem;\n  background-color: var(--danger-background);\n  border: 3px solid var(--danger-color);\n  color: var(--danger-color);\n}\n\n.hidden {\n  display: none;\n}",
        "error": null,
        "seed": ":root {\n  --gray-00: #ffffff;\n  --gray-05: #f5f6f7;\n  --gray-15: #d0d0d5;\n  --gray-75: #3b3b4f;\n  --gray-85: #1b1b32;\n  --gray-90: #0a0a23;\n  --blue-50: #198eee;\n  --error: #a94442;\n  --danger-color: #850000;\n  --danger-background: #ffadad;\n}\n\n*,\n::before,\n::after {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  min-height: 100vh;\n  padding: 50px 20px;\n  font-family: 'Lato', Helvetica, Arial, sans-serif;\n  font-size: 18px;\n  background-color: var(--gray-85);\n  color: var(--gray-05);\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.freecodecamp-logo {\n  height: 30px;\n  margin-bottom: 20px;\n}\n\nh1 {\n  text-align: center;\n  margin: 20px auto;\n  max-width: 350px;\n  font-family: 'Castoro Titling', cursive;\n}\n\nform {\n  color: var(--gray-05);\n  margin: auto 25px;\n  padding: 15px auto;\n  border: 3px solid var(--gray-05);\n  text-align: center;\n  width: 90%;\n  max-width: 500px;\n  background-color: var(--gray-75);\n}\n\nfieldset {\n  border: 0 none;\n  height: 100%;\n  padding: 25px;\n  margin: 10px 20px;\n}\n\nlabel {\n  display: inline-block;\n  font-size: 1.5rem;\n  margin-bottom: 10px;\n  font-weight: bold;\n}\n\ninput:focus-visible,\nbutton:focus-visible {\n  outline: 3px solid var(--blue-50);\n}\n\ninput {\n  display: block;\n  font-size: 2.5rem;\n  width: 100%;\n  height: 60px;\n  padding: 6px 12px;\n  margin: 10px 0;\n  line-height: 1.4;\n  color: white;\n  background-color: var(--gray-90);\n  border: 1px solid var(--gray-05);\n}\n\nbutton {\n  cursor: pointer;\n  margin-top: 15px;\n  text-decoration: none;\n  background-image: linear-gradient(#fecc4c, #ffac33);\n  border: 3px solid #feac32;\n  padding: 10px 16px;\n  font-size: 23px;\n  width: 100%;\n}\n\n.output {\n  color: white;\n  background-color: var(--gray-75);\n  border: 3px solid var(--gray-05);\n  font-size: 2.5rem;\n  width: 90%;\n  max-width: 500px;\n  min-height: 55px;\n  margin-top: 25px;\n  padding: 15px;\n  overflow-wrap: break-word;\n  text-align: center;\n}\n\n.alert {\n  font-size: 2rem;\n  background-color: var(--danger-background);\n  border: 3px solid var(--danger-color);\n  color: var(--danger-color);\n}\n\n.hidden {\n  display: none;\n}"
      },
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const form = document.getElementById(\"form\");\nconst convertButton = document.getElementById(\"convert-btn\");\nconst output = document.getElementById(\"output\");\n\nconst convertToRoman = (num) => {\n  const ref = [\n    [\"M\", 1000],\n    [\"CM\", 900],\n    [\"D\", 500],\n    [\"CD\", 400],\n    [\"C\", 100],\n    [\"XC\", 90],\n    [\"L\", 50],\n    [\"XL\", 40],\n    [\"X\", 10],\n    [\"IX\", 9],\n    [\"V\", 5],\n    [\"IV\", 4],\n    [\"I\", 1],\n  ];\n  const res = [];\n\n  ref.forEach(function (arr) {\n    while (num >= arr[1]) {\n      res.push(arr[0]);\n      num -= arr[1];\n    }\n  });\n\n  return res.join(\"\");\n};\n\nconst isValid = (str, int) => {\n  let errText = \"\";\n\n  if (!str || str.match(/[e.]/g)) {\n    errText = \"Please enter a valid number.\";\n  } else if (int < 1) {\n    errText = \"Please enter a number greater than or equal to 1.\";\n  } else if (int > 3999) {\n    errText = \"Please enter a number less than or equal to 3999.\";\n  } else {\n    // No errors detected\n    return true;\n  }\n\n  // Handle error text and output styling\n  output.innerText = errText;\n  output.classList.add(\"alert\");\n\n  return false;\n};\n\nconst clearOutput = () => {\n  output.innerText = \"\";\n  output.classList.remove(\"alert\");\n};\n\nform.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  updateUI();\n});\n\nconvertButton.addEventListener(\"click\", () => {\n  updateUI();\n});\n\nconst updateUI = () => {\n  const numStr = document.getElementById(\"number\").value;\n  const int = parseInt(numStr, 10);\n\n  output.classList.remove(\"hidden\");\n\n  clearOutput();\n\n  if (isValid(numStr, int)) {\n    output.innerText = convertToRoman(int);\n  }\n};",
        "error": null,
        "seed": "const form = document.getElementById(\"form\");\nconst convertButton = document.getElementById(\"convert-btn\");\nconst output = document.getElementById(\"output\");\n\nconst convertToRoman = (num) => {\n  const ref = [\n    [\"M\", 1000],\n    [\"CM\", 900],\n    [\"D\", 500],\n    [\"CD\", 400],\n    [\"C\", 100],\n    [\"XC\", 90],\n    [\"L\", 50],\n    [\"XL\", 40],\n    [\"X\", 10],\n    [\"IX\", 9],\n    [\"V\", 5],\n    [\"IV\", 4],\n    [\"I\", 1],\n  ];\n  const res = [];\n\n  ref.forEach(function (arr) {\n    while (num >= arr[1]) {\n      res.push(arr[0]);\n      num -= arr[1];\n    }\n  });\n\n  return res.join(\"\");\n};\n\nconst isValid = (str, int) => {\n  let errText = \"\";\n\n  if (!str || str.match(/[e.]/g)) {\n    errText = \"Please enter a valid number.\";\n  } else if (int < 1) {\n    errText = \"Please enter a number greater than or equal to 1.\";\n  } else if (int > 3999) {\n    errText = \"Please enter a number less than or equal to 3999.\";\n  } else {\n    // No errors detected\n    return true;\n  }\n\n  // Handle error text and output styling\n  output.innerText = errText;\n  output.classList.add(\"alert\");\n\n  return false;\n};\n\nconst clearOutput = () => {\n  output.innerText = \"\";\n  output.classList.remove(\"alert\");\n};\n\nform.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  updateUI();\n});\n\nconvertButton.addEventListener(\"click\", () => {\n  updateUI();\n});\n\nconst updateUI = () => {\n  const numStr = document.getElementById(\"number\").value;\n  const int = parseInt(numStr, 10);\n\n  output.classList.remove(\"hidden\");\n\n  clearOutput();\n\n  if (isValid(numStr, int)) {\n    output.innerText = convertToRoman(int);\n  }\n};"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have an <code>input</code> element with an <code>id</code> of <code>\"number\"</code>.</p>",
      "testString": "const el = document.getElementById('number');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'input');"
    },
    {
      "text": "<p>You should have a <code>button</code> element with an <code>id</code> of <code>\"convert-btn\"</code>.</p>",
      "testString": "const el = document.getElementById('convert-btn');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'button');"
    },
    {
      "text": "<p>You should have a <code>div</code>, <code>span</code>, or <code>p</code> element with an <code>id</code> of <code>\"output\"</code>.</p>",
      "testString": "const el = document.getElementById('output');\nassert(['div', 'span', 'p'].includes(el?.nodeName?.toLowerCase()));"
    },
    {
      "text": "<p>When you click on the <code>#convert-btn</code> element without entering a value into the <code>#number</code> element, the <code>#output</code> element should contain the text <code>\"Please enter a valid number\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '';\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'please enter a valid number');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>-1</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"Please enter a number greater than or equal to 1\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '-1';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'please enter a number greater than or equal to 1');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>4000</code> or greater and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"Please enter a number less than or equal to 3999\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '4000';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'please enter a number less than or equal to 3999');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>9</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"IX\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '9';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim(), 'IX');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>16</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"XVI\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '16';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim(), 'XVI');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>649</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"DCXLIX\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '649';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim(), 'DCXLIX');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>1023</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"MXXIII\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '1023';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim(), 'MXXIII');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains the number <code>3999</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"MMMCMXCIX\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nnumberInputEl.value = '3999';\nnumberInputEl.dispatchEvent(new Event('change'));\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim(), 'MMMCMXCIX');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains a random negative number and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"Please enter a number greater than or equal to 1\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nconst randomNegativeNumber = Math.floor(Math.random() * -4000) - 2; \n\nnumberInputEl.value = randomNegativeNumber;\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'please enter a number greater than or equal to 1');"
    },
    {
      "text": "<p>When the <code>#number</code> element contains a number greater than 4000 and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"Please enter a number less than or equal to 3999\"</code>.</p>",
      "testString": "const numberInputEl = document.getElementById('number');\nconst convertBtnEl = document.getElementById('convert-btn');\nconst outputEl = document.getElementById('output');\n\nconst randomBigNumber = Math.floor(Math.random() * (1000000)) + 4000; \n\nnumberInputEl.value =  randomBigNumber;\nconvertBtnEl.click();\nassert.strictEqual(outputEl.innerText.trim().replace(/[.,?!]+$/g, '').toLowerCase(), 'please enter a number less than or equal to 3999');"
    }
  ],
  "description": "<section id=\"description\">\n<p>Roman numerals are based on seven symbols and can be written using various combinations to represent Arabic numerals. For example:</p>\n<table>\n<thead>\n<tr>\n<th>Roman numerals</th>\n<th>Arabic numerals</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>CM</td>\n<td>900</td>\n</tr>\n<tr>\n<td>D</td>\n<td>500</td>\n</tr>\n<tr>\n<td>CD</td>\n<td>400</td>\n</tr>\n<tr>\n<td>C</td>\n<td>100</td>\n</tr>\n<tr>\n<td>XC</td>\n<td>90</td>\n</tr>\n<tr>\n<td>L</td>\n<td>50</td>\n</tr>\n<tr>\n<td>XL</td>\n<td>40</td>\n</tr>\n<tr>\n<td>X</td>\n<td>10</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>9</td>\n</tr>\n<tr>\n<td>V</td>\n<td>5</td>\n</tr>\n<tr>\n<td>IV</td>\n<td>4</td>\n</tr>\n<tr>\n<td>I</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Objective:</strong> Build an app that is functionally similar to <a href=\"https://roman-numeral-converter.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://roman-numeral-converter.freecodecamp.rocks</a></p>\n<p><strong>User Stories:</strong></p>\n<ol>\n<li>You should have an <code>input</code> element with an <code>id</code> of <code>\"number\"</code></li>\n<li>You should have a <code>button</code> element with an <code>id</code> of <code>\"convert-btn\"</code></li>\n<li>You should have a <code>div</code>, <code>span</code> or <code>p</code> element with an <code>id</code> of <code>output</code></li>\n<li>When you click on the <code>#convert-btn</code> element without entering a value into the <code>#number</code> element, the <code>#output</code> element should contain the text <code>\"Please enter a valid number\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>-1</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"Please enter a number greater than or equal to 1\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>4000</code> or greater and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"Please enter a number less than or equal to 3999\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>9</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"IX\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>16</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"XVI\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>649</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"DCXLIX\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>1023</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"MXXIII\"</code></li>\n<li>When the <code>#number</code> element contains the number <code>3999</code> and the <code>#convert-btn</code> element is clicked, the <code>#output</code> element should contain the text <code>\"MMMCMXCIX\"</code></li>\n</ol>\n<p>Fulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!</p>\n</section>",
  "translationPending": false,
  "block": "build-a-roman-numeral-converter-project",
  "hasEditableBoundaries": false,
  "order": 12,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "635085f80bd9b5429faa40c4",
  "title": "Step 15",
  "challengeType": 0,
  "dashedName": "step-15",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>",
      "error": null,
      "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <script src=\"./script.js\"></script>\n    <title>Statistics Calculator</title>\n  </head>\n  <body>\n    <h1>Statistics Calculator</h1>\n    <p>Enter a list of comma-separated numbers.</p>\n\n    <form onsubmit=\"calculate();\">\n      <label for=\"numbers\">Numbers:</label>\n      <input type=\"text\" name=\"numbers\" id=\"numbers\" />\n      <button type=\"submit\">Calculate</button>\n    </form>\n    <div class=\"results\">\n      <p>\n        The <dfn>mean</dfn> of a list of numbers is the average, calculated by\n        taking the sum of all numbers and dividing that by the count of numbers.\n      </p>\n      <p class=\"bold\">Mean: <span id=\"mean\"></span></p>\n      <p>\n        The <dfn>median</dfn> of a list of numbers is the number that appears in\n        the middle of the list, when sorted from least to greatest.\n      </p>\n      <p class=\"bold\">Median: <span id=\"median\"></span></p>\n      <p>\n        The <dfn>mode</dfn> of a list of numbers is the number that appears most\n        often in the list.\n      </p>\n      <p class=\"bold\">Mode: <span id=\"mode\"></span></p>\n      <p>\n        The <dfn>range</dfn> of a list of numbers is the difference between the\n        largest and smallest numbers in the list.\n      </p>\n      <p class=\"bold\">Range: <span id=\"range\"></span></p>\n      <p>\n        The <dfn>variance</dfn> of a list of numbers measures how far the values\n        are from the mean, on average.\n      </p>\n      <p class=\"bold\">Variance: <span id=\"variance\"></span></p>\n      <p>\n        The <dfn>standard deviation</dfn> of a list of numbers is the square\n        root of the variance.\n      </p>\n      <p class=\"bold\">\n        Standard Deviation: <span id=\"standardDeviation\"></span>\n      </p>\n    </div>\n  </body>\n</html>"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}",
      "error": null,
      "seed": "body {\n  margin: 0;\n  background-color: rgb(27, 27, 50);\n  text-align: center;\n  color: #fff;\n}\n\nbutton {\n  cursor: pointer;\n  background-color: rgb(59, 59, 79);\n  border: 3px solid white;\n  color: white;\n}\n\ninput {\n  background-color: rgb(10, 10, 35);\n  color: white;\n  border: 1px solid rgb(59, 59, 79);\n}\n\n.bold {\n  font-weight: bold;\n}"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        0,
        6
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const getMean = (array) => {\n  const sum = array.reduce((acc, el) => acc + el, 0);\n  const mean = sum / array.length;\n  return mean;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}",
      "error": null,
      "seed": "const getMean = (array) => {\n  const sum = array.reduce((acc, el) => acc + el, 0);\n  const mean = sum / array.length;\n  return mean;\n}\n\nconst calculate = () => {\n  const value = document.querySelector(\"#numbers\").value;\n  const array = value.split(/,\\s*/g);\n  const numbers = array.map(el => Number(el)).filter(el => !isNaN(el));\n}"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should remove the <code>sum</code> variable declaration.</p>",
      "testString": "assert.notMatch(getMean.toString(), /sum\\s*=/);"
    },
    {
      "text": "<p>You should remove the <code>mean</code> variable declaration.</p>",
      "testString": "assert.notMatch(getMean.toString(), /mean\\s*=/);"
    },
    {
      "text": "<p>You should not change the logic within the <code>reduce</code> method.</p>",
      "testString": "assert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*acc\\s*\\+\\s*el\\s*;?\\s*\\}?\\s*,\\s*0\\s*\\)/)"
    },
    {
      "text": "<p>You should divide the result of the <code>reduce</code> method by the length of the array.</p>",
      "testString": "assert.match(getMean.toString(), /(array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>|array\\.reduce\\(\\s*function\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*\\{)\\s*(return\\s+)?\\s*acc\\s*\\+\\s*el\\s*;?\\s*\\}?\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\.length/)"
    },
    {
      "text": "<p>You should use implicit return syntax to directly return the result of <code>reduce</code> divided by the array length.</p>",
      "testString": "assert.match(code, /const\\s+getMean\\s*=\\s*(\\(\\s*array\\s*\\)|array)\\s*=>\\s*array\\.reduce\\(\\s*\\(\\s*acc\\s*,\\s*el\\s*\\)\\s*=>\\s*acc\\s*\\+\\s*el\\s*,\\s*0\\s*\\)\\s*\\/\\s*array\\.length/)"
    }
  ],
  "description": "<section id=\"description\">\n<p>You can actually clean this logic up a bit. Using the implicit return of an arrow function, you can directly return the value of the <code>.reduce()</code> method divided by the length of the array, without having to assign any variables.</p>\n<p>Update your <code>getMean</code> function as described above.</p>\n</section>",
  "translationPending": false,
  "block": "learn-advanced-array-methods-by-building-a-statistics-calculator",
  "hasEditableBoundaries": true,
  "order": 15,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 14,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
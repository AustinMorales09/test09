{
  "id": "6555c1d3e11a1574434cf8b5",
  "title": "Build a Pokémon Search App",
  "challengeType": 14,
  "forumTopicId": 16003,
  "dashedName": "build-a-pokemon-search-app",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "",
      "error": null,
      "seed": ""
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "",
      "error": null,
      "seed": ""
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "",
      "error": null,
      "seed": ""
    }
  ],
  "solutions": [
    [
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "index.html"
        ],
        "name": "index",
        "ext": "html",
        "path": "index.html",
        "fileKey": "indexhtml",
        "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      rel=\"icon\"\n      type=\"image/png\"\n      href=\"https://cdn.freecodecamp.org/universal/favicons/favicon.ico\"\n    />\n    <title>Pokémon Search App</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <main>\n      <img\n        class=\"freecodecamp-logo\"\n        src=\"https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg\"\n        alt=\"freeCodeCamp Logo\"\n      />\n      <h1>Pokémon Search App</h1>\n      <div class=\"container\">\n        <form role=\"search\" id=\"search-form\">\n          <label for=\"search-input\">Search for Pokémon Name or ID:</label>\n          <input type=\"text\" name=\"pokemon\" id=\"search-input\" required />\n          <button id=\"search-button\">Search</button>\n        </form>\n        <div class=\"output\">\n          <div class=\"top-container\">\n            <div class=\"name-and-id\">\n              <span id=\"pokemon-name\"></span>\n              <span id=\"pokemon-id\"></span>\n            </div>\n            <div class=\"size\">\n              <span id=\"weight\"></span>\n              <span id=\"height\"></span>\n            </div>\n            <div id=\"sprite-container\" class=\"sprite-container\"></div>\n            <div id=\"types\"></div>\n          </div>\n          <div class=\"bottom-container\">\n            <table>\n              <tr>\n                <th>Base</th>\n                <th>Stats</th>\n              </tr>\n              <tr>\n                <td>HP:</td>\n                <td id=\"hp\"></td>\n              </tr>\n              <tr>\n                <td>Attack:</td>\n                <td id=\"attack\"></td>\n              </tr>\n              <tr>\n                <td>Defense:</td>\n                <td id=\"defense\"></td>\n              </tr>\n              <tr>\n                <td>Sp. Attack:</td>\n                <td id=\"special-attack\"></td>\n              </tr>\n              <tr>\n                <td>Sp. Defense:</td>\n                <td id=\"special-defense\"></td>\n              </tr>\n              <tr>\n                <td>Speed:</td>\n                <td id=\"speed\" class=\"speed\"></td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n      <script src=\"./script.js\"></script>\n    </main>\n  </body>\n</html>",
        "error": null,
        "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      rel=\"icon\"\n      type=\"image/png\"\n      href=\"https://cdn.freecodecamp.org/universal/favicons/favicon.ico\"\n    />\n    <title>Pokémon Search App</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n    <main>\n      <img\n        class=\"freecodecamp-logo\"\n        src=\"https://cdn.freecodecamp.org/platform/universal/fcc_primary.svg\"\n        alt=\"freeCodeCamp Logo\"\n      />\n      <h1>Pokémon Search App</h1>\n      <div class=\"container\">\n        <form role=\"search\" id=\"search-form\">\n          <label for=\"search-input\">Search for Pokémon Name or ID:</label>\n          <input type=\"text\" name=\"pokemon\" id=\"search-input\" required />\n          <button id=\"search-button\">Search</button>\n        </form>\n        <div class=\"output\">\n          <div class=\"top-container\">\n            <div class=\"name-and-id\">\n              <span id=\"pokemon-name\"></span>\n              <span id=\"pokemon-id\"></span>\n            </div>\n            <div class=\"size\">\n              <span id=\"weight\"></span>\n              <span id=\"height\"></span>\n            </div>\n            <div id=\"sprite-container\" class=\"sprite-container\"></div>\n            <div id=\"types\"></div>\n          </div>\n          <div class=\"bottom-container\">\n            <table>\n              <tr>\n                <th>Base</th>\n                <th>Stats</th>\n              </tr>\n              <tr>\n                <td>HP:</td>\n                <td id=\"hp\"></td>\n              </tr>\n              <tr>\n                <td>Attack:</td>\n                <td id=\"attack\"></td>\n              </tr>\n              <tr>\n                <td>Defense:</td>\n                <td id=\"defense\"></td>\n              </tr>\n              <tr>\n                <td>Sp. Attack:</td>\n                <td id=\"special-attack\"></td>\n              </tr>\n              <tr>\n                <td>Sp. Defense:</td>\n                <td id=\"special-defense\"></td>\n              </tr>\n              <tr>\n                <td>Speed:</td>\n                <td id=\"speed\" class=\"speed\"></td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </div>\n      <script src=\"./script.js\"></script>\n    </main>\n  </body>\n</html>"
      },
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "styles.css"
        ],
        "name": "styles",
        "ext": "css",
        "path": "styles.css",
        "fileKey": "stylescss",
        "contents": "/* CSS reset */\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\nbody {\n  line-height: 1.5;\n}\n\nimg {\n  display: block;\n}\n\n/* Project styling */\n\nbody {\n  height: 100vh;\n  font-family: sans-serif;\n  background-color: #1b1b32;\n  color: #0a0a23;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.freecodecamp-logo {\n  height: 30px;\n  margin: 25px 0;\n}\n\nh1 {\n  color: #f5f6f7;\n  font-size: 1.7em;\n  text-align: center;\n}\n\n.container {\n  width: 325px;\n  margin: 25px 0;\n  background-color: #f5f6f7;\n  border: 1px solid #f5f6f7;\n  border-radius: 15px;\n  box-shadow: 10px 10px 0px 0px rgba(223, 220, 220, 0.75);\n}\n\n.output,\n#search-form {\n  display: flex;\n  justify-content: center;\n}\n\n#search-form {\n  flex-wrap: wrap;\n  margin: 10px 0;\n  padding: 5px;\n  border-radius: 8px 8px 0 0;\n  gap: 10px;\n}\n\nlabel {\n  align-self: center;\n}\n\n#search-input:focus-visible,\n#search-button:focus-visible {\n  outline: 3px solid #198eee;\n}\n\n#search-input {\n  height: 40px;\n  padding-left: 10px;\n  width: 200px;\n}\n\n#search-button {\n  padding: 14px 0;\n  width: 80px;\n  border-radius: 20px;\n  text-align: center;\n  background-color: #7f21ab;\n  color: #f5f6f7;\n  border: none;\n}\n\n.output {\n  margin: 10px 0;\n  padding: 5px;\n  flex-direction: column;\n  align-items: center;\n}\n\n.top-container,\n.bottom-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 325px;\n}\n\n.top-container {\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f0f1f7;\n}\n\n.name-and-id {\n  height: 28px;\n  font-size: 1.1em;\n  text-transform: capitalize;\n  margin-bottom: 5px;\n}\n\n.size {\n  height: 22px;\n  font-size: 0.85rem;\n}\n\n.sprite-container {\n  flex-grow: 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#sprite {\n  width: 180px;\n}\n\n#types {\n  min-height: 30px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  gap: 5px;\n}\n\n.type {\n  width: 66px;\n  padding: 5px;\n  font-size: 0.7rem;\n  text-align: center;\n  border-radius: 5px;\n  background-color: red;\n  text-transform: uppercase;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n  width: 100%;\n  font-size: 1 rem;\n  color: #f5f6f7;\n  background-color: #7f21ab;\n}\n\nth:nth-child(even),\ntd:nth-child(even) {\n  border-left: 5px solid #f5f6f7;\n}\n\ntr {\n  border-bottom: 5px solid #f5f6f7;\n}\n\ntd,\nth {\n  text-align: center;\n  padding: 8px;\n}\n\n/* Special styling for Pokémon types */\n\n.normal {\n  background-color: #b7b7aa;\n}\n\n.fire {\n  background-color: #ff6f52;\n}\n\n.water {\n  background-color: #42a1ff;\n}\n\n.electric {\n  background-color: #fecc33;\n}\n\n.grass {\n  background-color: #78cc55;\n}\n\n.ice {\n  background-color: #66ccfe;\n}\n\n.fighting {\n  background-color: #d3887e;\n}\n\n.poison {\n  background-color: #c68bb7;\n}\n\n.ground {\n  background-color: #dfba52;\n}\n\n.flying {\n  background-color: #8899ff;\n}\n\n.psychic {\n  background-color: #ff66a3;\n}\n\n.bug {\n  background-color: #aabb23;\n}\n\n.rock {\n  background-color: #baaa66;\n}\n\n.ghost {\n  background-color: #9995d0;\n}\n\n.dragon {\n  background-color: #9e93f1;\n}\n\n.dark {\n  background-color: #b59682;\n}\n\n.steel {\n  background-color: #abaabb;\n}\n\n.fairy {\n  background-color: #ed99ed;\n}\n\n@media screen and (min-width: 550px) {\n  h1 {\n    font-size: 2em;\n  }\n\n  .container {\n    width: 450px;\n  }\n\n  #search-form,\n  .top-container,\n  .bottom-container {\n    width: 95%;\n  }\n\n  .type {\n    width: 75px;\n  }\n}",
        "error": null,
        "seed": "/* CSS reset */\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n* {\n  margin: 0;\n}\n\nbody {\n  line-height: 1.5;\n}\n\nimg {\n  display: block;\n}\n\n/* Project styling */\n\nbody {\n  height: 100vh;\n  font-family: sans-serif;\n  background-color: #1b1b32;\n  color: #0a0a23;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n}\n\nmain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.freecodecamp-logo {\n  height: 30px;\n  margin: 25px 0;\n}\n\nh1 {\n  color: #f5f6f7;\n  font-size: 1.7em;\n  text-align: center;\n}\n\n.container {\n  width: 325px;\n  margin: 25px 0;\n  background-color: #f5f6f7;\n  border: 1px solid #f5f6f7;\n  border-radius: 15px;\n  box-shadow: 10px 10px 0px 0px rgba(223, 220, 220, 0.75);\n}\n\n.output,\n#search-form {\n  display: flex;\n  justify-content: center;\n}\n\n#search-form {\n  flex-wrap: wrap;\n  margin: 10px 0;\n  padding: 5px;\n  border-radius: 8px 8px 0 0;\n  gap: 10px;\n}\n\nlabel {\n  align-self: center;\n}\n\n#search-input:focus-visible,\n#search-button:focus-visible {\n  outline: 3px solid #198eee;\n}\n\n#search-input {\n  height: 40px;\n  padding-left: 10px;\n  width: 200px;\n}\n\n#search-button {\n  padding: 14px 0;\n  width: 80px;\n  border-radius: 20px;\n  text-align: center;\n  background-color: #7f21ab;\n  color: #f5f6f7;\n  border: none;\n}\n\n.output {\n  margin: 10px 0;\n  padding: 5px;\n  flex-direction: column;\n  align-items: center;\n}\n\n.top-container,\n.bottom-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 325px;\n}\n\n.top-container {\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f0f1f7;\n}\n\n.name-and-id {\n  height: 28px;\n  font-size: 1.1em;\n  text-transform: capitalize;\n  margin-bottom: 5px;\n}\n\n.size {\n  height: 22px;\n  font-size: 0.85rem;\n}\n\n.sprite-container {\n  flex-grow: 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#sprite {\n  width: 180px;\n}\n\n#types {\n  min-height: 30px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  gap: 5px;\n}\n\n.type {\n  width: 66px;\n  padding: 5px;\n  font-size: 0.7rem;\n  text-align: center;\n  border-radius: 5px;\n  background-color: red;\n  text-transform: uppercase;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n  width: 100%;\n  font-size: 1 rem;\n  color: #f5f6f7;\n  background-color: #7f21ab;\n}\n\nth:nth-child(even),\ntd:nth-child(even) {\n  border-left: 5px solid #f5f6f7;\n}\n\ntr {\n  border-bottom: 5px solid #f5f6f7;\n}\n\ntd,\nth {\n  text-align: center;\n  padding: 8px;\n}\n\n/* Special styling for Pokémon types */\n\n.normal {\n  background-color: #b7b7aa;\n}\n\n.fire {\n  background-color: #ff6f52;\n}\n\n.water {\n  background-color: #42a1ff;\n}\n\n.electric {\n  background-color: #fecc33;\n}\n\n.grass {\n  background-color: #78cc55;\n}\n\n.ice {\n  background-color: #66ccfe;\n}\n\n.fighting {\n  background-color: #d3887e;\n}\n\n.poison {\n  background-color: #c68bb7;\n}\n\n.ground {\n  background-color: #dfba52;\n}\n\n.flying {\n  background-color: #8899ff;\n}\n\n.psychic {\n  background-color: #ff66a3;\n}\n\n.bug {\n  background-color: #aabb23;\n}\n\n.rock {\n  background-color: #baaa66;\n}\n\n.ghost {\n  background-color: #9995d0;\n}\n\n.dragon {\n  background-color: #9e93f1;\n}\n\n.dark {\n  background-color: #b59682;\n}\n\n.steel {\n  background-color: #abaabb;\n}\n\n.fairy {\n  background-color: #ed99ed;\n}\n\n@media screen and (min-width: 550px) {\n  h1 {\n    font-size: 2em;\n  }\n\n  .container {\n    width: 450px;\n  }\n\n  #search-form,\n  .top-container,\n  .bottom-container {\n    width: 95%;\n  }\n\n  .type {\n    width: 75px;\n  }\n}"
      },
      {
        "head": "",
        "tail": "",
        "id": "",
        "history": [
          "script.js"
        ],
        "name": "script",
        "ext": "js",
        "path": "script.js",
        "fileKey": "scriptjs",
        "contents": "const pokemonID = document.getElementById(\"pokemon-id\");\nconst pokemonName = document.getElementById(\"pokemon-name\");\nconst spriteContainer = document.getElementById(\"sprite-container\");\nconst types = document.getElementById(\"types\");\nconst height = document.getElementById(\"height\");\nconst weight = document.getElementById(\"weight\");\nconst hp = document.getElementById(\"hp\");\nconst attack = document.getElementById(\"attack\");\nconst defense = document.getElementById(\"defense\");\nconst specialAttack = document.getElementById(\"special-attack\");\nconst specialDefense = document.getElementById(\"special-defense\");\nconst speed = document.getElementById(\"speed\");\nconst searchForm = document.getElementById(\"search-form\");\nconst searchInput = document.getElementById(\"search-input\");\n\nconst getPokemon = async () => {\n  try {\n    const pokemonNameOrId = searchInput.value.toLowerCase();\n    const response = await fetch(\n      `https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/${pokemonNameOrId}`,\n    );\n    const data = await response.json();\n\n    // Set Pokémon info\n    pokemonName.textContent = `${data.name.toUpperCase()}`;\n    pokemonID.textContent = `#${data.id}`;\n    weight.textContent = `Weight: ${data.weight}`;\n    height.textContent = `Height: ${data.height}`;\n    spriteContainer.innerHTML = `\n      <img id=\"sprite\" src=\"${data.sprites.front_default}\" alt=\"${data.name} front default sprite\">\n    `;\n\n    // Set stats\n    hp.textContent = data.stats[0].base_stat;\n    attack.textContent = data.stats[1].base_stat;\n    defense.textContent = data.stats[2].base_stat;\n    specialAttack.textContent = data.stats[3].base_stat;\n    specialDefense.textContent = data.stats[4].base_stat;\n    speed.textContent = data.stats[5].base_stat;\n\n    // Set types\n    types.innerHTML = data.types\n      .map(\n        (obj) => `<span class=\"type ${obj.type.name}\">${obj.type.name}</span>`,\n      )\n      .join(\"\");\n  } catch (err) {\n    resetDisplay();\n    alert(\"Pokémon not found\");\n    console.log(`Pokémon not found: ${err}`);\n  }\n};\n\nconst resetDisplay = () => {\n  const sprite = document.getElementById(\"sprite\");\n  if (sprite) sprite.remove();\n\n  // reset stats\n  pokemonName.textContent = \"\";\n  pokemonID.textContent = \"\";\n  types.innerHTML = \"\";\n  height.textContent = \"\";\n  weight.textContent = \"\";\n  hp.textContent = \"\";\n  attack.textContent = \"\";\n  defense.textContent = \"\";\n  specialAttack.textContent = \"\";\n  specialDefense.textContent = \"\";\n  speed.textContent = \"\";\n};\n\nsearchForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  getPokemon();\n});",
        "error": null,
        "seed": "const pokemonID = document.getElementById(\"pokemon-id\");\nconst pokemonName = document.getElementById(\"pokemon-name\");\nconst spriteContainer = document.getElementById(\"sprite-container\");\nconst types = document.getElementById(\"types\");\nconst height = document.getElementById(\"height\");\nconst weight = document.getElementById(\"weight\");\nconst hp = document.getElementById(\"hp\");\nconst attack = document.getElementById(\"attack\");\nconst defense = document.getElementById(\"defense\");\nconst specialAttack = document.getElementById(\"special-attack\");\nconst specialDefense = document.getElementById(\"special-defense\");\nconst speed = document.getElementById(\"speed\");\nconst searchForm = document.getElementById(\"search-form\");\nconst searchInput = document.getElementById(\"search-input\");\n\nconst getPokemon = async () => {\n  try {\n    const pokemonNameOrId = searchInput.value.toLowerCase();\n    const response = await fetch(\n      `https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/${pokemonNameOrId}`,\n    );\n    const data = await response.json();\n\n    // Set Pokémon info\n    pokemonName.textContent = `${data.name.toUpperCase()}`;\n    pokemonID.textContent = `#${data.id}`;\n    weight.textContent = `Weight: ${data.weight}`;\n    height.textContent = `Height: ${data.height}`;\n    spriteContainer.innerHTML = `\n      <img id=\"sprite\" src=\"${data.sprites.front_default}\" alt=\"${data.name} front default sprite\">\n    `;\n\n    // Set stats\n    hp.textContent = data.stats[0].base_stat;\n    attack.textContent = data.stats[1].base_stat;\n    defense.textContent = data.stats[2].base_stat;\n    specialAttack.textContent = data.stats[3].base_stat;\n    specialDefense.textContent = data.stats[4].base_stat;\n    speed.textContent = data.stats[5].base_stat;\n\n    // Set types\n    types.innerHTML = data.types\n      .map(\n        (obj) => `<span class=\"type ${obj.type.name}\">${obj.type.name}</span>`,\n      )\n      .join(\"\");\n  } catch (err) {\n    resetDisplay();\n    alert(\"Pokémon not found\");\n    console.log(`Pokémon not found: ${err}`);\n  }\n};\n\nconst resetDisplay = () => {\n  const sprite = document.getElementById(\"sprite\");\n  if (sprite) sprite.remove();\n\n  // reset stats\n  pokemonName.textContent = \"\";\n  pokemonID.textContent = \"\";\n  types.innerHTML = \"\";\n  height.textContent = \"\";\n  weight.textContent = \"\";\n  hp.textContent = \"\";\n  attack.textContent = \"\";\n  defense.textContent = \"\";\n  specialAttack.textContent = \"\";\n  specialDefense.textContent = \"\";\n  speed.textContent = \"\";\n};\n\nsearchForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  getPokemon();\n});"
      }
    ]
  ],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have an <code>input</code> element with an <code>id</code> of <code>\"search-input\"</code> and is <strong>required</strong>.</p>",
      "testString": "const el = document.getElementById('search-input');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'input');\nassert.isTrue(el?.required);"
    },
    {
      "text": "<p>You should have a <code>button</code> element with an <code>id</code> of <code>\"search-button\"</code>.</p>",
      "testString": "const el = document.getElementById('search-button');\nassert.strictEqual(el?.nodeName?.toLowerCase(), 'button');"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"pokemon-name\"</code>.</p>",
      "testString": "const el = document.getElementById('pokemon-name');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"pokemon-id\"</code>.</p>",
      "testString": "const el = document.getElementById('pokemon-id');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"weight\"</code>.</p>",
      "testString": "const el = document.getElementById('weight');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"height\"</code>.</p>",
      "testString": "const el = document.getElementById('height');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"types\"</code>.</p>",
      "testString": "const el = document.getElementById('types');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"hp\"</code>.</p>",
      "testString": "const el = document.getElementById('hp');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"attack\"</code>.</p>",
      "testString": "const el = document.getElementById('attack');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"defense\"</code>.</p>",
      "testString": "const el = document.getElementById('defense');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"special-attack\"</code>.</p>",
      "testString": "const el = document.getElementById('special-attack');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"special-defense\"</code>.</p>",
      "testString": "const el = document.getElementById('special-defense');\nassert.exists(el);"
    },
    {
      "text": "<p>You should have an element with an <code>id</code> of <code>\"speed\"</code>.</p>",
      "testString": "const el = document.getElementById('speed');\nassert.exists(el);"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>Red</code> and the <code>#search-button</code> element is clicked, an alert should appear with the text <code>\"Pokémon not found\"</code>.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    let alertMessage;\n    window.alert = (message) => alertMessage = message; // Override alert and store message\n    searchInput.value = 'Red';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/red'); // Fetch from proxy to simulate network delay\n\n    if (!res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow the alert to trigger\n\n      assert.include(['pokémon not found', 'pokemon not found'], alertMessage.trim().replace(/[.,?!]+$/g, '').toLowerCase());\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>Pikachu</code> and the <code>#search-button</code> element is clicked, the values in the <code>#pokemon-name</code>, <code>#pokemon-id</code>, <code>#weight</code>, <code>#height</code>, <code>#hp</code>, <code>#attack</code>, <code>#defense</code>, <code>#special-attack</code>, <code>#special-defense</code>, and <code>#speed</code> elements should be <code>PIKACHU</code>, <code>#25</code> or <code>25</code>, <code>Weight: 60</code> or <code>60</code>, <code>Height: 4</code> or <code>4</code>, <code>35</code>, <code>55</code>, <code>40</code>, <code>50</code>, <code>50</code>, and <code>90</code>, respectively.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = 'Pikachu';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/pikachu'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const pokemonName = document.getElementById('pokemon-name');\n      const pokemonID = document.getElementById('pokemon-id');\n      const weight = document.getElementById('weight');\n      const height = document.getElementById('height');\n      const hp = document.getElementById('hp');\n      const attack = document.getElementById('attack');\n      const defense = document.getElementById('defense');\n      const specialAttack = document.getElementById('special-attack');\n      const specialDefense = document.getElementById('special-defense');\n      const speed = document.getElementById('speed');\n\n      assert.strictEqual(pokemonName.innerText.trim().toLowerCase(), 'pikachu');\n      assert.include(['#25', '25'], pokemonID.innerText.trim());\n      assert.include(['weight: 60', '60'], weight.innerText.trim().toLowerCase());\n      assert.include(['height: 4', '4'], height.innerText.trim().toLowerCase());\n      assert.strictEqual(hp.innerText.trim(), '35');\n      assert.strictEqual(attack.innerText.trim(), '55');\n      assert.strictEqual(defense.innerText.trim(), '40');\n      assert.strictEqual(specialAttack.innerText.trim(), '50');\n      assert.strictEqual(specialDefense.innerText.trim(), '50');\n      assert.strictEqual(speed.innerText.trim(), '90');\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>Pikachu</code> and the <code>#search-button</code> element is clicked, you should add an <code>img</code> element with the <code>id</code> of <code>\"sprite\"</code> and the <code>src</code> set to the Pokémon's <code>front_default</code> sprite to the page.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = 'Pikachu';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/pikachu'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const sprite = document.getElementById('sprite');\n      assert.isTrue(sprite.src.endsWith('sprites/pokemon/25.png'));\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>Pikachu</code> and the <code>#search-button</code> element is clicked, the <code>#types</code> element should contain a single inner element with the value <code>ELECTRIC</code>. Make sure the <code>#type</code> element content is cleared between searches.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = 'Pikachu';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/pikachu'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const typesEl = document.getElementById('types');\n\n      assert.lengthOf(typesEl.children, 1);\n      assert.strictEqual(typesEl?.children[0]?.innerText.trim().toLowerCase(), 'electric');\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>94</code> and the <code>#search-button</code> element is clicked, the values in the <code>#pokemon-name</code>, <code>#pokemon-id</code>, <code>#weight</code>, <code>#height</code>, <code>#hp</code>, <code>#attack</code>, <code>#defense</code>, <code>#special-attack</code>, <code>#special-defense</code>, and <code>#speed</code> elements should be <code>GENGAR</code>, <code>#94</code> or <code>94</code>, <code>Weight: 405</code> or <code>405</code>, <code>Height: 15</code> or <code>15</code>, <code>60</code>, <code>65</code>, <code>60</code>, <code>130</code>, <code>75</code>, and <code>110</code>, respectively.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = '94';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/94'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const pokemonName = document.getElementById('pokemon-name');\n      const pokemonID = document.getElementById('pokemon-id');\n      const weight = document.getElementById('weight');\n      const height = document.getElementById('height');\n      const hp = document.getElementById('hp');\n      const attack = document.getElementById('attack');\n      const defense = document.getElementById('defense');\n      const specialAttack = document.getElementById('special-attack');\n      const specialDefense = document.getElementById('special-defense');\n      const speed = document.getElementById('speed');\n\n      assert.strictEqual(pokemonName.innerText.trim().toLowerCase(), 'gengar');\n      assert.include(['#94', '94'], pokemonID.innerText.trim());\n      assert.include(['weight: 405', '405'], weight.innerText.trim().toLowerCase());\n      assert.include(['height: 15', '15'], height.innerText.trim().toLowerCase());\n      assert.strictEqual(hp.innerText.trim(), '60');\n      assert.strictEqual(attack.innerText.trim(), '65');\n      assert.strictEqual(defense.innerText.trim(), '60');\n      assert.strictEqual(specialAttack.innerText.trim(), '130');\n      assert.strictEqual(specialDefense.innerText.trim(), '75');\n      assert.strictEqual(speed.innerText.trim(), '110');\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>94</code> and the <code>#search-button</code> element is clicked, you should add an <code>img</code> element with the <code>id</code> of <code>\"sprite\"</code> and the <code>src</code> set to the Pokémon's <code>front_default</code> sprite to the page.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = '94';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/94'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n\n      const sprite = document.getElementById('sprite');\n      assert.isTrue(sprite.src.endsWith('sprites/pokemon/94.png'));\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains the value <code>94</code> and the <code>#search-button</code> element is clicked, the <code>#types</code> element should contain two inner elements with the text values <code>GHOST</code> and <code>POISON</code>, respectively. Make sure the <code>#type</code> element content is cleared between searches.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    searchInput.value = '94';\n    searchInput.dispatchEvent(new Event('change'));\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/94'); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n      const targetTypes = ['ghost', 'poison'];\n\n      const typesEl = document.getElementById('types');\n\n      assert.lengthOf(typesEl.children, 2);\n      assert.sameMembers(['ghost', 'poison'], [...typesEl.children].map(el => el.innerText.trim().toLowerCase()));\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains an invalid Pokemon name and the <code>#search-button</code> element is clicked, an alert should appear with the text <code>\"Pokémon not found\"</code>.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    let alertMessage;\n    window.alert = (message) => alertMessage = message; // Override alert and store message\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    const numbers = '0123456789';\n    const charactersLength = letters.length;\n    const numbersLength = numbers.length; \n\n\n    const firstLetter = letters.charAt(Math.floor(Math.random() * charactersLength));\n    const secondLetter = letters.charAt(Math.floor(Math.random() * charactersLength));\n    const thirdLetter = letters.charAt(Math.floor(Math.random() * charactersLength));\n    const fourthLetter = letters.charAt(Math.floor(Math.random() * charactersLength));\n    const randomNumber1 = numbers.charAt(Math.floor(Math.random() * numbersLength));\n    const randomNumber2 = numbers.charAt(Math.floor(Math.random() * numbersLength));\n    \n    const badName = firstLetter + secondLetter + thirdLetter + fourthLetter + randomNumber1 + randomNumber2; \n\n    const randomInvalidPokeId = badName; \n    searchInput.value = randomInvalidPokeId;\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/' + randomInvalidPokeId.toString()); // Fetch from proxy to simulate network delay\n\n    if (!res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow the alert to trigger\n\n      assert.include(['pokémon not found', 'pokemon not found'], alertMessage.trim().replace(/[.,?!]+$/g, '').toLowerCase());\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    },
    {
      "text": "<p>When the <code>#search-input</code> element contains a valid Pokemon id and the <code>#search-button</code> element is clicked, the UI should be filled with the correct data.</p>",
      "testString": "async () => {\n  try {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n    let alertMessage;\n    window.alert = (message) => alertMessage = message; // Override alert and store message\n\n    const randomValidPokeId = Math.floor(Math.random() * 1025) + 1; \n    searchInput.value = randomValidPokeId;\n    searchButton.click();\n\n    const res = await fetch('https://pokeapi-proxy.freecodecamp.rocks/api/pokemon/' +  randomValidPokeId.toString()); // Fetch from proxy to simulate network delay\n\n    if (res.ok) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Additional delay to allow UI to update\n     \n      const data = await res.json(); \n\n      const typesEl = document.getElementById('types');      \n      \n      const actualTypes = data.types.map(typeSlot => typeSlot.type.name); \n\n      assert.lengthOf(typesEl.children, actualTypes.length);\n\n      assert.sameMembers(actualTypes, [...typesEl.children].map(el => el.innerText.trim().toLowerCase()));\n    }\n  } catch (err) {\n    throw new Error(err);\n  }\n};"
    }
  ],
  "description": "<section id=\"description\">\n<p>In this project, you'll build an app that will search for Pokémon by name or ID and display the results to the user. To retrieve the Pokémon data and images, you'll use freeCodeCamp's <a href=\"https://pokeapi-proxy.freecodecamp.rocks/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">PokéAPI Proxy</a>.</p>\n<p><strong>Objective:</strong> Build an app that is functionally similar to <a href=\"https://pokemon-search-app.freecodecamp.rocks\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">https://pokemon-search-app.freecodecamp.rocks</a></p>\n<p><strong>User Stories:</strong></p>\n<ol>\n<li>You should have an <code>input</code> element with an <code>id</code> of <code>\"search-input\"</code></li>\n<li>You should have a <code>button</code> element with an <code>id</code> of <code>\"search-button</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"pokemon-name\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"pokemon-id\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"weight\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"height\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"types\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"hp\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"attack\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"defense\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"special-attack\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"special-defense\"</code></li>\n<li>You should have an element with an <code>id</code> of <code>\"speed\"</code></li>\n<li>When the <code>#search-input</code> element contains the value <code>Red</code> and the <code>#search-button</code> element is clicked, an alert should appear with the text <code>\"Pokémon not found\"</code></li>\n<li>When the <code>#search-input</code> element contains the value <code>Pikachu</code> and the <code>#search-button</code> element is clicked, the values in the <code>#pokemon-name</code>, <code>#pokemon-id</code>, <code>#weight</code>, <code>#height</code>, <code>#hp</code>, <code>#attack</code>, <code>#defense</code>, <code>#special-attack</code>, <code>#special-defense</code>, and <code>#speed</code> elements should be <code>PIKACHU</code>, <code>#25</code> or <code>25</code>, <code>Weight: 60</code> or <code>60</code>, <code>Height: 4</code> or <code>4</code>, <code>35</code>, <code>55</code>, <code>40</code>, <code>50</code>, <code>50</code>, and <code>90</code>, respectively</li>\n<li>When the <code>#search-input</code> element contains the value <code>Pikachu</code> and the <code>#search-button</code> element is clicked, you should add an <code>img</code> element with the <code>id</code> of <code>\"sprite\"</code> and the <code>src</code> set to the Pokémon's <code>front_default</code> sprite to the page</li>\n<li>When the <code>#search-input</code> element contains the value <code>Pikachu</code> and the <code>#search-button</code> element is clicked, the <code>#types</code> element should contain a single inner element with the value <code>ELECTRIC</code>. The <code>#types</code> element content should be cleared between searches</li>\n<li>When the <code>#search-input</code> element contains the value <code>94</code> and the <code>#search-button</code> element is clicked, the values in the <code>#pokemon-name</code>, <code>#pokemon-id</code>, <code>#weight</code>, <code>#height</code>, <code>#hp</code>, <code>#attack</code>, <code>#defense</code>, <code>#special-attack</code>, <code>#special-defense</code>, and <code>#speed</code>elements should be <code>GENGAR</code>, <code>#94</code> or <code>94</code>, <code>Weight: 405</code> or <code>405</code>, <code>Height: 15</code> or <code>15</code>, <code>60</code>, <code>65</code>, <code>60</code>, <code>130</code>, <code>75</code>, and <code>110</code>, respectively</li>\n<li>When the <code>#search-input</code> element contains the value <code>94</code> and the <code>#search-button</code> element is clicked, you should add an <code>img</code> element with the <code>id</code> of <code>sprite</code> and the <code>src</code> set to the Pokémon's <code>front_default</code> sprite to the page</li>\n<li>When the <code>#search-input</code> element contains the value <code>94</code> and the <code>#search-button</code> element is clicked, the <code>#types</code> element should contain two inner elements with the text values <code>GHOST</code> and <code>POISON</code>, respectively. The <code>#types</code> element content should be cleared between searches</li>\n</ol>\n<p>Fulfill the user stories and pass all the tests below to complete this project. Give it your own personal style. Happy Coding!</p>\n<p><strong>Note:</strong> When running the tests there will be a slight delay. Please wait a few seconds to allow the tests to finish. Do not refresh the page before they are done.</p>\n</section>",
  "translationPending": false,
  "block": "build-a-pokemon-search-app-project",
  "hasEditableBoundaries": false,
  "order": 24,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 0,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "657e180ad0a77c79d8b4b82e",
  "title": "Step 74",
  "challengeType": 0,
  "dashedName": "step-74",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>",
      "error": null,
      "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Advanced Dice Game</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n\n<body>\n  <header>\n    <h1>Advanced Dice Game</h1>\n    <button class=\"btn\" id=\"rules-btn\" type=\"button\">Show rules</button>\n    <div class=\"rules-container\">\n      <h2>Rules</h2>\n      <ul>\n        <li>There are total of six rounds</li>\n        <li>You can only roll the dice three times per round</li>\n        <li>To start the game, roll the dice</li>\n        <li>\n          Then, choose from one of the selected scores or roll the dice again\n        </li>\n        <li>\n          If you choose a selected score, then you will move to the next round\n        </li>\n        <li>\n          If you decline to choose a selected score, then you can roll the\n          dice again two more times\n        </li>\n      </ul>\n      <h2 class=\"points\">Points</h2>\n      <ul>\n        <li>Three of a kind: Sum of all five dice</li>\n        <li>Four of a kind: Sum of all five dice</li>\n        <li>Full house: Three of a kind and a pair - 25 points</li>\n        <li>\n          Small straight: Four of the dice have consecutive values - 30 points\n        </li>\n        <li>\n          Large straight: All five dice have consecutive values - 40 points\n        </li>\n      </ul>\n    </div>\n  </header>\n\n  <main>\n    <form id=\"game\">\n      <div id=\"dice\">\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n        <div class=\"die\"></div>\n      </div>\n\n      <p class=\"rounds-text\">\n        <strong>Rolls:</strong> <span id=\"current-round-rolls\">0</span> |\n        <strong>Round:</strong> <span id=\"current-round\">1</span>\n      </p>\n\n      <div id=\"score-options\">\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"three-of-a-kind\" value=\"three-of-a-kind\" disabled />\n          <label for=\"three-of-a-kind\">Three of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"four-of-a-kind\" value=\"four-of-a-kind\" disabled />\n          <label for=\"four-of-a-kind\">Four of a kind<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"full-house\" value=\"full-house\" disabled />\n          <label for=\"full-house\">Full house<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"small-straight\" value=\"small-straight\" disabled />\n          <label for=\"small-straight\">Small straight<span></span></label>\n        </div>\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"large-straight\" value=\"large-straight\" disabled />\n          <label for=\"large-straight\">Large straight<span></span></label>\n        </div>\n\n        <div>\n          <input type=\"radio\" name=\"score-options\" id=\"none\" value=\"none\" disabled />\n          <label for=\"none\">None of the above<span></span></label>\n        </div>\n      </div>\n\n      <button class=\"btn\" id=\"keep-score-btn\" type=\"button\">\n        Keep the above selected score\n      </button>\n      <button class=\"btn\" id=\"roll-dice-btn\" type=\"button\">\n        Roll the dice\n      </button>\n    </form>\n\n    <div id=\"scores\">\n      <h3>Score history (Total score: <span id=\"total-score\">0</span>)</h3>\n      <ol id=\"score-history\"></ol>\n    </div>\n  </main>\n  <script src=\"./script.js\"></script>\n</body>\n\n</html>"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}\n",
      "error": null,
      "seed": "*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\n:root {\n  --dark-grey: #1b1b32;\n  --light-grey: #f5f6f7;\n  --black: #000;\n  --white: #fff;\n  --grey: #3b3b4f;\n  --golden-yellow: #fecc4c;\n  --yellow: #ffcc4c;\n  --gold: #feac32;\n  --orange: #ffac33;\n  --dark-orange: #f89808;\n}\n\nbody {\n  background-color: var(--dark-grey);\n}\n\nheader {\n  color: var(--light-grey);\n  text-align: center;\n}\n\nh1 {\n  font-size: 2.5rem;\n  margin: 25px 0;\n}\n\n.rules-container {\n  display: none;\n  background-color: var(--light-grey);\n  color: var(--black);\n  width: 50%;\n  margin: 20px auto;\n  height: 300px;\n  border-radius: 10px;\n  overflow-y: scroll;\n}\n\n.rules-container ul {\n  list-style-type: none;\n}\n\n.points {\n  margin-top: 15px;\n}\n\nmain {\n  background-color: var(--light-grey);\n  padding: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n  gap: 1rem;\n  margin: auto;\n  justify-items: center;\n  width: 50%;\n  border-radius: 10px;\n}\n\n#dice {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 15px;\n}\n\n.die {\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-right: 15px;\n  border: 4px solid var(--black);\n  padding: 10px;\n}\n\n.rounds-text {\n  text-align: center;\n}\n\ninput[type=\"radio\"]:disabled + label {\n  color: var(--grey);\n}\n\n#score-history {\n  margin-top: 15px;\n  text-align: center;\n  list-style-position: inside;\n}\n\n.btn {\n  cursor: pointer;\n  width: 200px;\n  margin: 10px 0 10px 0.5rem;\n  color: var(--black);\n  background-color: var(--gold);\n  background-image: linear-gradient(var(--golden-yellow), var(--orange));\n  border-color: var(--gold);\n  border-width: 3px;\n}\n\n.btn:hover:enabled {\n  background-image: linear-gradient(var(--yellow), var(--dark-orange));\n}\n\n@media (max-width: 992px) {\n  main {\n    width: 100%;\n  }\n}\n\n@media (max-width: 500px) {\n  .btn {\n    width: 120px;\n  }\n}\n"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        95,
        97
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst currentRoundText = document.getElementById(\"current-round\");\nconst currentRoundRollsText = document.getElementById(\"current-round-rolls\");\nconst totalScoreText = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet totalScore = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  currentRoundRollsText.textContent = rolls;\n  currentRoundText.textContent = round;\n};\n\nconst updateRadioOption = (optionNode, score) => {\n  scoreInputs[optionNode].disabled = false;\n  scoreInputs[optionNode].value = score;\n  scoreSpans[optionNode].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  totalScore += parseInt(selectedValue);\n  totalScoreText.textContent = totalScore;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = diceValuesArr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst detectFullHouse = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n\n  const hasThreeOfAKind = Object.values(counts).includes(3);\n\n\n};\n\nconst resetRadioOption = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nconst resetGame = () => {\n  diceValuesArr = [0, 0, 0, 0, 0];\n  score = 0;\n  totalScore = 0;\n  round = 1;\n  rolls = 0;\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n\n  totalScoreText.textContent = totalScore;\n  scoreHistory.innerHTML = \"\";\n\n  currentRoundRollsText.textContent = rolls;\n  currentRoundText.textContent = round;\n\n  resetRadioOption();\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOption();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide Rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show Rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOption();\n    updateScore(selectedValue, achieved);\n    if (round > 6) {\n      setTimeout(() => {\n        alert(`Game Over! Your total score is ${totalScore}`);\n        resetGame();\n      }, 500);\n    }\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});",
      "error": null,
      "seed": "const listOfAllDice = document.querySelectorAll(\".die\");\nconst scoreInputs = document.querySelectorAll(\"#score-options input\");\nconst scoreSpans = document.querySelectorAll(\"#score-options span\");\nconst currentRoundText = document.getElementById(\"current-round\");\nconst currentRoundRollsText = document.getElementById(\"current-round-rolls\");\nconst totalScoreText = document.getElementById(\"total-score\");\nconst scoreHistory = document.getElementById(\"score-history\");\nconst rollDiceBtn = document.getElementById(\"roll-dice-btn\");\nconst keepScoreBtn = document.getElementById(\"keep-score-btn\");\nconst rulesContainer = document.querySelector(\".rules-container\");\nconst rulesBtn = document.getElementById(\"rules-btn\");\n\nlet diceValuesArr = [];\nlet isModalShowing = false;\nlet score = 0;\nlet totalScore = 0;\nlet round = 1; \nlet rolls = 0; \n\nconst rollDice = () => {\n  diceValuesArr = [];\n\n  for (let i = 0; i < 5; i++) {\n    const randomDice = Math.floor(Math.random() * 6) + 1;\n    diceValuesArr.push(randomDice);\n  };\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n};\n\nconst updateStats = () => {\n  currentRoundRollsText.textContent = rolls;\n  currentRoundText.textContent = round;\n};\n\nconst updateRadioOption = (optionNode, score) => {\n  scoreInputs[optionNode].disabled = false;\n  scoreInputs[optionNode].value = score;\n  scoreSpans[optionNode].textContent = `, score = ${score}`;\n};\n\nconst updateScore = (selectedValue, achieved) => {\n  totalScore += parseInt(selectedValue);\n  totalScoreText.textContent = totalScore;\n\n  scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;\n};\n\nconst getHighestDuplicates = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    if (counts[num]) {\n      counts[num]++;\n    } else {\n      counts[num] = 1;\n    }\n  }\n\n  let highestCount = 0;\n\n  for (const num of arr) {\n    const count = counts[num];\n    if (count >= 3 && count > highestCount) {\n      highestCount = count;\n    }\n    if (count >= 4 && count > highestCount) {\n      highestCount = count;\n    }\n  }\n\n  const sumOfAllDice = diceValuesArr.reduce((a, b) => a + b, 0);\n\n  if (highestCount >= 4) {\n    updateRadioOption(1, sumOfAllDice);\n  }\n\n  if (highestCount >= 3) {\n    updateRadioOption(0, sumOfAllDice);\n  }\n\n  updateRadioOption(5, 0);\n};\n\nconst detectFullHouse = (arr) => {\n  const counts = {};\n\n  for (const num of arr) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n\n  const hasThreeOfAKind = Object.values(counts).includes(3);\n\n\n};\n\nconst resetRadioOption = () => {\n  scoreInputs.forEach((input) => {\n    input.disabled = true;\n    input.checked = false;\n  });\n\n  scoreSpans.forEach((span) => {\n    span.textContent = \"\";\n  });\n};\n\nconst resetGame = () => {\n  diceValuesArr = [0, 0, 0, 0, 0];\n  score = 0;\n  totalScore = 0;\n  round = 1;\n  rolls = 0;\n\n  listOfAllDice.forEach((dice, index) => {\n    dice.textContent = diceValuesArr[index];\n  });\n\n  totalScoreText.textContent = totalScore;\n  scoreHistory.innerHTML = \"\";\n\n  currentRoundRollsText.textContent = rolls;\n  currentRoundText.textContent = round;\n\n  resetRadioOption();\n};\n\nrollDiceBtn.addEventListener(\"click\", () => {\n  if (rolls === 3) {\n    alert(\"You have made three rolls this round. Please select a score.\");\n  } else {\n    rolls++;\n    resetRadioOption();\n    rollDice();\n    updateStats();\n    getHighestDuplicates(diceValuesArr);\n  }\n});\n\nrulesBtn.addEventListener(\"click\", () => {\n  isModalShowing = !isModalShowing;\n\n  if (isModalShowing) {\n    rulesBtn.textContent = \"Hide Rules\";\n    rulesContainer.style.display = \"block\";\n  } else {\n    rulesBtn.textContent = \"Show Rules\";\n    rulesContainer.style.display = \"none\";\n  }\n});\n\nkeepScoreBtn.addEventListener(\"click\", () => {\n  let selectedValue;\n  let achieved;\n\n  for (const radioButton of scoreInputs) {\n    if (radioButton.checked) {\n      selectedValue = radioButton.value;\n      achieved = radioButton.id;\n      break;\n    }\n  }\n\n  if (selectedValue) {\n    rolls = 0;\n    round++;\n    updateStats();\n    resetRadioOption();\n    updateScore(selectedValue, achieved);\n    if (round > 6) {\n      setTimeout(() => {\n        alert(`Game Over! Your total score is ${totalScore}`);\n        resetGame();\n      }, 500);\n    }\n  } else {\n    alert(\"Please select an option or roll the dice\");\n  }\n});"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should have a <code>const</code> variable called <code>hasPair</code>.</p>",
      "testString": "assert.match(code, /const\\s+hasPair\\s*=/);"
    },
    {
      "text": "<p>You should assign <code>Object.values(counts)</code> to your <code>hasPair</code> variable.</p>",
      "testString": "assert.match(code, /const\\s+hasPair\\s*=\\s*Object\\.values\\(\\s*counts\\s*\\).*/);"
    },
    {
      "text": "<p>You should chain <code>.includes(2)</code> to your <code>Object.values(counts)</code>.</p>",
      "testString": "assert.match(code, /const\\s+hasPair\\s*=\\s*Object\\.values\\(\\s*counts\\s*\\)\\.includes\\(\\s*2\\s*\\)\\s*;?/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>If the <code>counts</code> object has a value of the number <code>2</code>, then that means the user has rolled a pair.</p>\n<p>Start by using the <code>Object.values()</code> method and pass in <code>counts</code> for the argument.</p>\n<p>Then chain the <code>includes</code> method and pass in the number <code>2</code>. This will check if <code>2</code> is inside this new array.</p>\n<p>Lastly, assign that result to a <code>const</code> variable called <code>hasPair</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-intermediate-algorithmic-thinking-by-building-a-dice-game",
  "hasEditableBoundaries": true,
  "order": 20,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 73,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "660f4b33e2a3364094ecb540",
  "title": "Step 99",
  "challengeType": 1,
  "dashedName": "step-99",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        17,
        21
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\n/*while (rows.length < count) {\n  rows.push(padRow(rows.length + 1, count));\n}*/\n\nfor (let i = count; i > 0; i = i - 1) {\n\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\n/*while (rows.length < count) {\n  rows.push(padRow(rows.length + 1, count));\n}*/\n\nfor (let i = count; i > 0; i = i - 1) {\n\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>for</code> loop should call <code>rows.push()</code>.</p>",
      "testString": "assert.match(code, /for\\s*\\(\\s*let\\s*i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\.push\\(/);"
    },
    {
      "text": "<p>You should call <code>padRow()</code> in your <code>.push()</code> call.</p>",
      "testString": "assert.match(code, /for\\s*\\(\\s*let\\s*i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\.push\\(\\s*padRow\\s*\\(/);"
    },
    {
      "text": "<p>You should pass <code>i</code> as the first argument to your <code>padRow()</code> call.</p>",
      "testString": "assert.match(code, /for\\s*\\(\\s*let\\s*i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\.push\\(\\s*padRow\\s*\\(\\s*i/);"
    },
    {
      "text": "<p>You should pass <code>count</code> as the second argument to your <code>padRow()</code> call.</p>",
      "testString": "assert.match(code, /for\\s*\\(\\s*let\\s*i\\s*=\\s*count\\s*;\\s*i\\s*>\\s*0\\s*;\\s*i\\s*=\\s*i\\s*-\\s*1\\s*\\)\\s*\\{\\s*rows\\.push\\(\\s*padRow\\s*\\(\\s*i\\s*,\\s*count\\s*\\)\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Again, push the result of calling <code>padRow</code> with your <code>i</code> and <code>count</code> variables to your <code>rows</code> array.</p>\n<p>Open up the console to see the upside-down pyramid.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 98,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
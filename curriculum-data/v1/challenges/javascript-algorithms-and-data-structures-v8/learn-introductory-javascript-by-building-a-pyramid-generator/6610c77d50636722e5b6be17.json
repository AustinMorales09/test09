{
  "id": "6610c77d50636722e5b6be17",
  "title": "Step 57",
  "challengeType": 1,
  "dashedName": "step-57",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        12
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  const test = \"Testing\";\n  \n  return test;\n\n}\n\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  const test = \"Testing\";\n  \n  return test;\n\n}\n\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>padRow</code> function should return the <code>test</code> variable.</p>",
      "testString": "assert.equal(padRow(\"Naomi\"), \"Testing\");"
    },
    {
      "text": "<p>Your first <code>console.log</code> should come after your <code>return</code> keyword.</p>",
      "testString": "assert.match(padRow.toString(), /return\\s+test;\\s+console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);/);"
    },
    {
      "text": "<p>Your second <code>console.log</code> should come before your <code>return</code> keyword.</p>",
      "testString": "assert.match(padRow.toString(), /console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);\\s+return\\s+test;/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Below the <code>return</code> statement, log the string <code>\"This works!\"</code> to the console.</p>\n<p>After doing that, you will see that the string <code>\"This works!\"</code> does not display in the console, and the <code>console.log(\"This works!\")</code> line is greyed out.</p>\n<p>Copy the console log and paste it above the <code>return</code> statement. Now, the string <code>\"This works!\"</code> should appear in the console.</p>\n<p>An important thing to know about the <code>return</code> keyword is that it does not just define a value to be returned from your function, it also stops the execution of your code inside a function or a block statement. This means any code after a <code>return</code> statement will not run.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 56,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "661483051820c3c1ab4595e0",
  "title": "Step 93",
  "challengeType": 1,
  "dashedName": "step-93",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        20
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\nlet done = 0;\n\nwhile (rows.length <= count) {\n  done++;\n  rows.push(padRow(done, count));\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\nlet done = 0;\n\nwhile (rows.length <= count) {\n  done++;\n  rows.push(padRow(done, count));\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should pass <code>rows.length + 1</code> as the first argument to your <code>padRow</code> call.</p>",
      "testString": "assert.match(code, /rows\\.push\\(padRow\\s*\\(\\s*rows\\.length\\s*\\+\\s*1/);"
    },
    {
      "text": "<p>Your <code>while</code> loop should run while <code>rows.length</code> is less than <code>count</code>.</p>",
      "testString": "assert.match(code, /while\\s*\\(\\s*rows\\.length\\s*<\\s*count\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>You can also replace the <code>done</code> reference in your <code>padRow</code> call.</p>\n<p>Note that <code>rows.length</code> here would give you an off-by-one error, because <code>done</code> is incremented <em>before</em> the call.</p>\n<p>So you'll need to replace <code>done</code> here with <code>rows.length + 1</code>. When you do this, you may see a <code>Range Error</code>, because we've created another off-by-one error.</p>\n<p>You'll need to change the <code>while</code> condition to use the less than operator, instead of the less than or equal operator.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 92,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "6610c83b52583e245a079217",
  "title": "Step 58",
  "challengeType": 1,
  "dashedName": "step-58",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        13
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  const test = \"Testing\";\n  console.log(\"This works!\");\n  return test;\n  console.log(\"This works!\");\n}\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  const test = \"Testing\";\n  console.log(\"This works!\");\n  return test;\n  console.log(\"This works!\");\n}\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>padRow</code> function should not have a <code>name</code> parameter.</p>",
      "testString": "assert.notMatch(padRow.toString(), /name/);"
    },
    {
      "text": "<p>You should not pass <code>\"CamperChan\"</code> to your <code>padRow</code> call.</p>",
      "testString": "assert.notMatch(code, /CamperChan/);"
    },
    {
      "text": "<p>You should still call your <code>padRow</code> function.</p>",
      "testString": "assert.lengthOf(code.match(/padRow\\(\\)/g), 2);"
    },
    {
      "text": "<p>You should not have a <code>console.log</code> before your <code>return</code> keyword.</p>",
      "testString": "assert.notMatch(padRow.toString(), /console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);\\s+return\\s+test;/);"
    },
    {
      "text": "<p>You should not have a <code>console.log</code> after your <code>return</code> keyword.</p>",
      "testString": "assert.notMatch(padRow.toString(), /return\\s+test;\\s+console.log\\s*\\(\\s*('|\"|`)This\\s+works!\\1\\);/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now your <code>call</code> variable has the value <code>\"Testing\"</code>. But your function is no longer using the <code>name</code> parameter.</p>\n<p>Remove the <code>name</code> parameter from your function declaration, then remove your <code>\"CamperChan\"</code> string from the <code>padRow</code> call.</p>\n<p>Also, remove both <code>console.log</code> from the <code>padRow</code> function.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 57,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
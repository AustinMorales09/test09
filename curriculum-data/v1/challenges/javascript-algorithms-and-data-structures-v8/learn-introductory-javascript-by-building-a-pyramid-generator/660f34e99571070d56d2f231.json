{
  "id": "660f34e99571070d56d2f231",
  "title": "Step 64",
  "challengeType": 1,
  "dashedName": "step-64",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        9,
        13
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return character.repeat(rowNumber);\n}\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(padRow())\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return character.repeat(rowNumber);\n}\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(padRow())\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should pass <code>i + 1</code> to your <code>padRow()</code> call.</p>",
      "testString": "assert.match(code, /push\\(\\s*padRow\\(\\s*i\\s*\\+\\s*1/);"
    },
    {
      "text": "<p>You should have a comma after your <code>i + 1</code> argument.</p>",
      "testString": "assert.match(code, /push\\(\\s*padRow\\(\\s*i\\s*\\+\\s*1\\s*,\\s*/);"
    },
    {
      "text": "<p>You should pass <code>count</code> as your second argument.</p>",
      "testString": "assert.match(code, /push\\(\\s*padRow\\(\\s*i\\s*\\+\\s*1\\s*,\\s*count\\s*\\)\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Your <code>padRow</code> function has two parameters which you defined. Values are provided to those parameters when a function is called.</p>\n<p>The values you provide to a function call are referred to as <dfn>arguments</dfn>, and you <dfn>pass</dfn> arguments to a function call. Here's a function call with <code>\"Hello\"</code> passed as an argument:</p>\n<pre><code class=\"language-js\">test(\"Hello\");\n</code></pre>\n<p>Pass <code>i + 1</code> and <code>count</code> as the arguments to your <code>padRow</code> call. Like parameters, arguments are separated by a comma.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 63,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
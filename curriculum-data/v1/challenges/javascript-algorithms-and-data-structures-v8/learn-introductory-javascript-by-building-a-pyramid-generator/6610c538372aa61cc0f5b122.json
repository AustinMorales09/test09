{
  "id": "6610c538372aa61cc0f5b122",
  "title": "Step 54",
  "challengeType": 1,
  "dashedName": "step-54",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        8
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  return name;\n}\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(name) {\n  return name;\n}\nconst call = padRow(\"CamperChan\");\nconsole.log(call);\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>Your <code>padRow</code> function should concatenate <code>character</code> to the beginning of <code>name</code>.</p>",
      "testString": "assert.match(padRow.toString(), /character\\s*\\+\\s*name/);"
    },
    {
      "text": "<p>Your <code>padRow</code> function should return the result of <code>character + name</code>.</p>",
      "testString": "assert.equal(padRow(\"Naomi\"), \"#Naomi\");"
    }
  ],
  "description": "<section id=\"description\">\n<p>Variables in JavaScript are available in a specific <dfn>scope</dfn>. In other words, where a variable is declared determines where in your code it can be used.</p>\n<p>The first scope is the global scope. Variables that are declared outside of any \"block\" like a function or <code>for</code> loop are in the <dfn>global scope</dfn>. Your <code>character</code>, <code>count</code>, and <code>rows</code> variables are all in the global scope.</p>\n<p>When a variable is in the global scope, a function can access it in its definition. Here is an example of a function using a global <code>title</code> variable:</p>\n<pre><code class=\"language-js\">const title = \"Professor \";\nfunction demo(name) {\n  return title + name;\n}\ndemo(\"Naomi\")\n</code></pre>\n<p>This example would return <code>\"Professor Naomi\"</code>. Update your <code>padRow</code> function to return the value of concatenating your <code>character</code> variable to the beginning of the <code>name</code> parameter.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 53,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{
  "id": "660f1b6e60bd9edf902c81fd",
  "title": "Step 35",
  "challengeType": 1,
  "dashedName": "step-35",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        8
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfor (let i = 0; i < count; \"iteration\") {\n\n}",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfor (let i = 0; i < count; \"iteration\") {\n\n}"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should add one to your <code>i</code> variable.</p>",
      "testString": "assert.match(code, /i\\s*\\+\\s*1/);"
    },
    {
      "text": "<p>You should assign <code>i + 1</code> back to your <code>i</code> variable.</p>",
      "testString": "assert.match(code, /i\\s*=\\s*i\\s*\\+\\s*1/);"
    },
    {
      "text": "<p>Your <code>for</code> loop should increase <code>i</code> by <code>1</code> on each iteration.</p>",
      "testString": "assert.match(code, /for\\s*\\(\\s*let\\s+i\\s*=\\s*0;\\s*i\\s*<\\s*count;\\s*i\\s*=\\s*i\\s*\\+\\s*1\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Your <dfn>iteration</dfn> statement will tell your loop what to do with the iterator after each run.</p>\n<p>When you reassign a variable, you can use the variable to reference the previous value before the reassignment. This allows you to do things like add three to an existing number. For example, <code>bees = bees + 3;</code> would increase the value of <code>bees</code> by three.</p>\n<p>Use that syntax to replace your <code>\"iteration\"</code> string with a reassignment statement that increases <code>i</code> by one.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 34,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
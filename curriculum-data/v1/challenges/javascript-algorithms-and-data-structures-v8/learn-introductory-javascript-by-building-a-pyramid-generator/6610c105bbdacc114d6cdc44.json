{
  "id": "6610c105bbdacc114d6cdc44",
  "title": "Step 47",
  "challengeType": 1,
  "dashedName": "step-47",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        9
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow() {\n\n}\n\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow() {\n\n}\n\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should call the <code>padRow</code> function.</p>",
      "testString": "assert.lengthOf(code.match(/padRow\\(\\)/g), 2);"
    },
    {
      "text": "<p>Your <code>padRow</code> function body should be empty.</p>",
      "testString": "assert.match(padRow.toString(), /\\{\\s*\\}/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>In order to use a function, you need to call it. A <dfn>function call</dfn> tells your application to run the code from the function wherever you choose to call it. The syntax for a function call is the function name followed by parentheses. For example, this code defines and calls a <code>test</code> function.</p>\n<pre><code class=\"language-js\">function test() {\n\n}\ntest();\n</code></pre>\n<p>Call your <code>padRow</code> function.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 46,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
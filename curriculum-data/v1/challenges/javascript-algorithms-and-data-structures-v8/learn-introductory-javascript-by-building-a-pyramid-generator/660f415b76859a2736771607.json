{
  "id": "660f415b76859a2736771607",
  "title": "Step 75",
  "challengeType": 1,
  "dashedName": "step-75",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        13,
        15
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\n\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n  return \" \".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + \" \".repeat(rowCount - rowNumber);\n}\n\n// TODO: use a different type of loop\n/*for (let i = 1; i <= count; i++) {\n  rows.push(padRow(i, count));\n}*/\n\n\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should create an <code>if</code> statement.</p>",
      "testString": "assert.match(code, /if/);"
    },
    {
      "text": "<p>Your <code>if</code> statement should have <code>true</code> as the condition.</p>",
      "testString": "assert.match(code, /if\\s*\\(\\s*true\\s*\\)/);"
    },
    {
      "text": "<p>Your <code>if</code> body should log <code>\"Condition is true\"</code>.</p>",
      "testString": "assert.match(code, /if\\s*\\(\\s*true\\s*\\)\\s*\\{\\s*console\\.log\\(\\s*(\"|')Condition is true\\1\\s*\\);?/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Your pyramid has disappeared again. That's okay - that is to be expected.</p>\n<p>Before you create your new loop, you need to learn about <code>if</code> statements. An <dfn><code>if</code> statement</dfn> allows you to run a block of code only when a condition is met. They use the following syntax:</p>\n<pre><code class=\"language-js\">if (condition) {\n  logic\n}\n</code></pre>\n<p>Create an <code>if</code> statement with the boolean <code>true</code> as the condition. In the body, print the string <code>\"Condition is true\"</code>.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 74,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
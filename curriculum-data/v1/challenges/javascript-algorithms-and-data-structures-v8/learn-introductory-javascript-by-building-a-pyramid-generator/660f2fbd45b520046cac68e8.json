{
  "id": "660f2fbd45b520046cac68e8",
  "title": "Step 62",
  "challengeType": 1,
  "dashedName": "step-62",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        4,
        8
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n\n}\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);",
      "error": null,
      "seed": "const character = \"#\";\nconst count = 8;\nconst rows = [];\n\nfunction padRow(rowNumber, rowCount) {\n\n}\n\n\nfor (let i = 0; i < count; i = i + 1) {\n  rows.push(character.repeat(i + 1))\n}\n\nlet result = \"\"\n\nfor (const row of rows) {\n  result = result + \"\\n\" + row;\n}\n\nconsole.log(result);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should use the <code>.repeat()</code> method.</p>",
      "testString": "assert.lengthOf(code.match(/\\.repeat\\(/g), 2);"
    },
    {
      "text": "<p>You should use the <code>.repeat()</code> method on your <code>character</code> variable.</p>",
      "testString": "assert.lengthOf(code.match(/character\\.repeat\\(/g), 2);"
    },
    {
      "text": "<p>You should pass <code>rowNumber</code> to your <code>.repeat()</code> call.</p>",
      "testString": "assert.match(code, /character\\.repeat\\(\\s*rowNumber\\s*\\)/);"
    },
    {
      "text": "<p>You should use the <code>return</code> keyword.</p>",
      "testString": "assert.match(code, /return/);"
    },
    {
      "text": "<p>You should return the result of your <code>.repeat()</code> call.</p>",
      "testString": "assert.equal(padRow(3), \"###\");"
    }
  ],
  "description": "<section id=\"description\">\n<p>Remember in an earlier step, you learned about return values. A function can <dfn>return</dfn> a value for your application to consume separately.</p>\n<p>In a function, the <code>return</code> keyword is used to specify a return value. For example, this function would return the value given to the first parameter:</p>\n<pre><code class=\"language-js\">function name(parameter) {\n  return parameter;\n}\n</code></pre>\n<p>Use the <code>return</code> keyword to return the value of the <code>character</code> variable, repeated <code>rowNumber</code> times.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 61,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
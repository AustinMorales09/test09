{
  "id": "660f0c34aad72dc712b97624",
  "title": "Step 26",
  "challengeType": 1,
  "dashedName": "step-26",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        2,
        7
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "let character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nrows.push(\"freeCodeCamp\");\n\nconsole.log(rows);",
      "error": null,
      "seed": "let character = 'Hello';\nlet count = 8;\nlet rows = [\"Naomi\", \"Quincy\", \"CamperChan\"];\nrows.push(\"freeCodeCamp\");\n\nconsole.log(rows);"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a variable called <code>popped</code>.</p>",
      "testString": "assert.match(code, /popped/);"
    },
    {
      "text": "<p>You should use <code>let</code> to declare your variable called <code>popped</code>.</p>",
      "testString": "assert.match(code, /let\\s+popped/);"
    },
    {
      "text": "<p>You should call the <code>.pop()</code> method.</p>",
      "testString": "assert.match(code, /\\.pop\\(\\s*\\)/);"
    },
    {
      "text": "<p>You should call the <code>.pop()</code> method on your <code>rows</code> array.</p>",
      "testString": "assert.match(code, /rows\\.pop\\(\\s*\\)/);"
    },
    {
      "text": "<p>You should log your <code>popped</code> variable.</p>",
      "testString": "assert.match(code, /console\\.log\\(\\s*popped\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Another method essential for this project is the <code>.pop()</code> method. It removes the last element from an array and <dfn>returns</dfn> that element.</p>\n<p>When a method returns a value, you can think of it as giving the value back to you, making it available for use in other parts of your code.</p>\n<p>Create a new variable called <code>popped</code> and assign it the result of <code>rows.pop()</code>. Then, log <code>popped</code> to the console.</p>\n</section>",
  "translationPending": false,
  "block": "learn-introductory-javascript-by-building-a-pyramid-generator",
  "hasEditableBoundaries": true,
  "order": 0,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 25,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
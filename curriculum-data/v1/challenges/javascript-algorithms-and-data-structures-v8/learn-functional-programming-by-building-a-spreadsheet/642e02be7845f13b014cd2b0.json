{
  "id": "642e02be7845f13b014cd2b0",
  "title": "Step 10",
  "challengeType": 0,
  "dashedName": "step-10",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <title>Functional Programming Spreadsheet</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <div></div>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
      "error": null,
      "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <title>Functional Programming Spreadsheet</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <div></div>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "#container {\n  display: grid;\n  grid-template-columns: 50px repeat(10, 200px);\n  grid-template-rows: repeat(11, 30px);\n}\n\n.label {\n  background-color: lightgray;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 30px;\n}",
      "error": null,
      "seed": "#container {\n  display: grid;\n  grid-template-columns: 50px repeat(10, 200px);\n  grid-template-rows: repeat(11, 30px);\n}\n\n.label {\n  background-color: lightgray;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 30px;\n}"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        1,
        3
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\n\n\nwindow.onload = () => {\n  const container = document.getElementById(\"container\");\n  const createLabel = (name) => {\n    const label = document.createElement(\"div\");\n    label.className = \"label\";\n    label.textContent = name;\n    container.appendChild(label);\n  }\n}",
      "error": null,
      "seed": "const range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\n\n\nwindow.onload = () => {\n  const container = document.getElementById(\"container\");\n  const createLabel = (name) => {\n    const label = document.createElement(\"div\");\n    label.className = \"label\";\n    label.textContent = name;\n    container.appendChild(label);\n  }\n}"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should declare a <code>charRange</code> variable.</p>",
      "testString": "assert.match(code, /(?:let|const|var)\\s+charRange/);"
    },
    {
      "text": "<p>Your <code>charRange</code> variable should be declared with <code>const</code>.</p>",
      "testString": "assert.match(code, /const\\s+charRange/);"
    },
    {
      "text": "<p>Your <code>charRange</code> variable should be a function.</p>",
      "testString": "assert.isFunction(charRange);"
    },
    {
      "text": "<p>Your <code>charRange</code> function should use arrow syntax.</p>",
      "testString": "assert.match(code, /const\\s+charRange\\s*=\\s*\\(.*\\)\\s*=>/);"
    },
    {
      "text": "<p>Your <code>charRange</code> function should take <code>start</code> as the first parameter.</p>",
      "testString": "assert.match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start/);"
    },
    {
      "text": "<p>Your <code>charRange</code> function should take <code>end</code> as the second parameter.</p>",
      "testString": "assert.match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)/);"
    },
    {
      "text": "<p>Your <code>charRange</code> function should use an implicit return.</p>",
      "testString": "assert.notMatch(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*{/);"
    },
    {
      "text": "<p>Your <code>charRange</code> function should call your <code>range</code> function.</p>",
      "testString": "assert.match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(/);"
    },
    {
      "text": "<p>You should pass <code>start</code> and <code>end</code> as the arguments to your <code>range</code> call.</p>",
      "testString": "assert.match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\s*,\\s*end\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Now that you have a <code>range</code> function, you can use it to create a range of letters as well.</p>\n<p>Declare a <code>charRange</code> function using <code>const</code> and arrow syntax. It should take a <code>start</code> and <code>end</code> parameter. The function should implicitly return the result of calling <code>range()</code> with <code>start</code> and <code>end</code> as the arguments.</p>\n</section>",
  "translationPending": false,
  "block": "learn-functional-programming-by-building-a-spreadsheet",
  "hasEditableBoundaries": true,
  "order": 16,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 9,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
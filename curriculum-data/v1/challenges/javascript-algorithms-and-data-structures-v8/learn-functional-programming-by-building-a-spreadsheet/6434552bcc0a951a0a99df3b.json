{
  "id": "6434552bcc0a951a0a99df3b",
  "title": "Step 11",
  "challengeType": 0,
  "dashedName": "step-11",
  "challengeFiles": [
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "index.html"
      ],
      "name": "index",
      "ext": "html",
      "path": "index.html",
      "fileKey": "indexhtml",
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <title>Functional Programming Spreadsheet</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <div></div>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
      "error": null,
      "seed": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"./styles.css\" />\n    <title>Functional Programming Spreadsheet</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <div></div>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [],
      "history": [
        "styles.css"
      ],
      "name": "styles",
      "ext": "css",
      "path": "styles.css",
      "fileKey": "stylescss",
      "contents": "#container {\n  display: grid;\n  grid-template-columns: 50px repeat(10, 200px);\n  grid-template-rows: repeat(11, 30px);\n}\n\n.label {\n  background-color: lightgray;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 30px;\n}",
      "error": null,
      "seed": "#container {\n  display: grid;\n  grid-template-columns: 50px repeat(10, 200px);\n  grid-template-rows: repeat(11, 30px);\n}\n\n.label {\n  background-color: lightgray;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 30px;\n}"
    },
    {
      "head": "",
      "tail": "",
      "id": "",
      "editableRegionBoundaries": [
        1,
        3
      ],
      "history": [
        "script.js"
      ],
      "name": "script",
      "ext": "js",
      "path": "script.js",
      "fileKey": "scriptjs",
      "contents": "const range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\nconst charRange = (start, end) => range(start, end);\n\nwindow.onload = () => {\n  const container = document.getElementById(\"container\");\n  const createLabel = (name) => {\n    const label = document.createElement(\"div\");\n    label.className = \"label\";\n    label.textContent = name;\n    container.appendChild(label);\n  }\n}",
      "error": null,
      "seed": "const range = (start, end) => Array(end - start + 1).fill(start).map((element, index) => element + index);\nconst charRange = (start, end) => range(start, end);\n\nwindow.onload = () => {\n  const container = document.getElementById(\"container\");\n  const createLabel = (name) => {\n    const label = document.createElement(\"div\");\n    label.className = \"label\";\n    label.textContent = name;\n    container.appendChild(label);\n  }\n}"
    }
  ],
  "solutions": [],
  "assignments": [],
  "tests": [
    {
      "text": "<p>You should use the <code>.charCodeAt()</code> method.</p>",
      "testString": "assert.match(code, /\\.charCodeAt\\(/);"
    },
    {
      "text": "<p>You should call the <code>.charCodeAt()</code> method on <code>start</code>.</p>",
      "testString": "assert.match(code, /start\\.charCodeAt\\(/);"
    },
    {
      "text": "<p>You should pass <code>0</code> to the <code>.charCodeAt()</code> method of <code>start</code>.</p>",
      "testString": "assert.match(code, /start\\.charCodeAt\\(\\s*0\\s*\\)/);"
    },
    {
      "text": "<p>You should call the <code>.charCodeAt()</code> method on <code>end</code>.</p>",
      "testString": "assert.match(code, /end\\.charCodeAt\\(/);"
    },
    {
      "text": "<p>You should pass <code>0</code> to the <code>.charCodeAt()</code> method of <code>end</code>.</p>",
      "testString": "assert.match(code, /end\\.charCodeAt\\(\\s*0\\s*\\)/);"
    },
    {
      "text": "<p>You should use the <code>.charCodeAt()</code> methods directly in your <code>range</code> call.</p>",
      "testString": "assert.match(code, /const\\s+charRange\\s*=\\s*\\(\\s*start\\s*,\\s*end\\s*\\)\\s*=>\\s*range\\(\\s*start\\.charCodeAt\\(\\s*0\\s*\\)\\s*,\\s*end\\.charCodeAt\\(\\s*0\\s*\\)\\s*\\)/);"
    }
  ],
  "description": "<section id=\"description\">\n<p>Your <code>range</code> function expects numbers, but your <code>start</code> and <code>end</code> values will be strings (specifically, they will be single characters such as <code>A</code>).</p>\n<p>Convert your <code>start</code> and <code>end</code> values in your <code>range()</code> call to numbers by using the <code>.charCodeAt()</code> method on them, passing the number <code>0</code> as the argument to that method.</p>\n</section>",
  "translationPending": false,
  "block": "learn-functional-programming-by-building-a-spreadsheet",
  "hasEditableBoundaries": true,
  "order": 16,
  "superOrder": 1,
  "certification": "javascript-algorithms-and-data-structures-v8",
  "superBlock": "javascript-algorithms-and-data-structures-v8",
  "challengeOrder": 10,
  "required": [],
  "helpCategory": "JavaScript",
  "usesMultifileEditor": true,
  "disableLoopProtectTests": false,
  "disableLoopProtectPreview": false
}
{"version":3,"file":"component---src-pages-update-stripe-card-tsx-76bc8d02030a700bcba2.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/components/landing/components/big-call-to-action.tsx","webpack://@freecodecamp/client/./src/components/Donation/card-update-alert-handler.tsx","webpack://@freecodecamp/client/./src/pages/update-stripe-card.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Login from '../../Header/components/login';\n\nconst BigCallToAction = ({ text }: { text?: string }): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <Login\n      block={true}\n      data-test-label='landing-big-cta'\n      data-playwright-test-label='landing-big-cta'\n    >\n      {text ? text : t('buttons.logged-in-cta-btn')}\n    </Login>\n  );\n};\n\nBigCallToAction.displayName = 'BigCallToAction';\nexport default BigCallToAction;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Spinner from 'react-spinkit';\nimport { Alert } from '@freecodecamp/ui';\n\ntype CardUpdateAlertHandlerProps = {\n  error: string | null;\n  redirecting: boolean;\n  reset: () => void;\n  success: boolean;\n};\n\nfunction CardUpdateAlertHandler({\n  reset,\n  success,\n  redirecting,\n  error = null\n}: CardUpdateAlertHandlerProps): JSX.Element {\n  const { t } = useTranslation();\n  const style = redirecting ? 'info' : success ? 'success' : 'danger';\n\n  const message = redirecting\n    ? `${t('donate.redirecting')}`\n    : success\n      ? `${t('donate.success-card-update')}`\n      : `${t('donate.error-card-update')}`;\n\n  return (\n    <Alert variant={style} className='donation-completion'>\n      <p>{message}</p>\n      <div className='donation-completion-body'>\n        {redirecting && (\n          <Spinner\n            className='user-state-spinner'\n            color='#0a0a23'\n            fadeIn='none'\n            name='line-scale'\n          />\n        )}\n        {error && <p>{error}</p>}\n      </div>\n      <div className='donation-completion-buttons'>\n        {error && (\n          <div>\n            <button type='button' className='try-again-button' onClick={reset}>\n              {t('buttons.try-again')}\n            </button>\n          </div>\n        )}\n      </div>\n    </Alert>\n  );\n}\n\nCardUpdateAlertHandler.displayName = 'CardUpdateAlertHandler';\n\nexport default CardUpdateAlertHandler;\n","import { useLocation } from '@reach/router';\n\nimport React, { type FormEvent, useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Container, Row, Col, Button } from '@freecodecamp/ui';\nimport BigCallToAction from '../components/landing/components/big-call-to-action';\n\nimport { Spacer } from '../components/helpers';\nimport './update-email.css';\nimport {\n  isSignedInSelector,\n  isDonatingSelector,\n  updateCardStateSelector\n} from '../redux/selectors';\nimport { updateCard, updateCardComplete } from '../redux/actions';\nimport { UpdateCardState } from '../redux/types';\nimport CardUpdateAlertHandler from '../components/Donation/card-update-alert-handler';\n\ninterface UpdateStripeCardProps {\n  isNewEmail: boolean;\n  resetDonationFormState: () => void;\n  isSignedIn: boolean;\n  isDonating: boolean;\n  updateCardState: UpdateCardState;\n  updateCard: () => void;\n  updateCardComplete: () => void;\n}\n\nconst mapStateToProps = createSelector(\n  isSignedInSelector,\n  isDonatingSelector,\n  updateCardStateSelector,\n  (\n    isSignedIn: boolean,\n    isDonating: boolean,\n    updateCardState: UpdateCardState\n  ) => ({\n    isSignedIn,\n    isDonating,\n    updateCardState\n  })\n);\n\nconst mapDispatchToProps = { updateCard, updateCardComplete };\n\nfunction ConditionalContent({\n  isSignedIn,\n  isDonating,\n  handleClick,\n  updateCardState\n}: {\n  isSignedIn: boolean;\n  isDonating: boolean;\n  handleClick: (e?: FormEvent) => void;\n  updateCardState: UpdateCardState;\n}) {\n  const { t } = useTranslation();\n\n  if (isSignedIn && !isDonating) {\n    return (\n      <>\n        <h1 className='text-center'>{t('learn.donation-record-not-found')}</h1>\n        <Spacer size='medium' />\n        <p className='text-center'>{t('learn.contact-support-mistake')}</p>\n      </>\n    );\n  } else if (isSignedIn && isDonating) {\n    const { success, error, redirecting } = updateCardState;\n    if (redirecting || error || success) {\n      return (\n        <CardUpdateAlertHandler\n          success={success}\n          error={error}\n          redirecting={redirecting}\n          reset={handleClick}\n        />\n      );\n    } else\n      return (\n        <>\n          <Spacer size='medium' />\n          <Button block={true} onClick={handleClick}>\n            {t('buttons.update-card')}\n          </Button>\n        </>\n      );\n  } else\n    return (\n      <>\n        <h1 className='text-center'>{t('learn.sign-in-card-update')}</h1>\n        <Spacer size='medium' />\n        <BigCallToAction text={t('buttons.sign-in')} />\n      </>\n    );\n}\n\nfunction UpdateStripeCard({\n  isSignedIn,\n  isDonating,\n  updateCardState,\n  updateCard,\n  updateCardComplete\n}: UpdateStripeCardProps) {\n  function handleClick(event?: FormEvent) {\n    updateCard();\n    if (event) event.preventDefault();\n  }\n  const { t } = useTranslation();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const isUpdateSuccessful = searchParams.get('session_id') !== null;\n\n  useEffect(() => {\n    if (isUpdateSuccessful) {\n      updateCardComplete();\n    }\n  }, [isUpdateSuccessful, updateCardComplete]);\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('misc.update-your-card')} | freeCodeCamp.org</title>\n      </Helmet>\n      <Container className='page-wrapper-80'>\n        <Row>\n          <Col sm={6} smOffset={3}>\n            <Spacer size='large' />\n            <ConditionalContent\n              isSignedIn={isSignedIn}\n              isDonating={isDonating}\n              handleClick={handleClick}\n              updateCardState={updateCardState}\n            />\n            <Spacer size='large' />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nUpdateStripeCard.displayName = 'Update-Stripe-Card';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateStripeCard);\n"],"names":["BigCallToAction","_ref","text","t","useTranslation","React","Login","block","displayName","CardUpdateAlertHandler","reset","success","redirecting","error","style","message","Alert","variant","className","Spinner","color","fadeIn","name","type","onClick","mapStateToProps","createSelector","isSignedInSelector","isDonatingSelector","updateCardStateSelector","isSignedIn","isDonating","updateCardState","mapDispatchToProps","updateCard","updateCardComplete","ConditionalContent","handleClick","Spacer","size","Button","UpdateStripeCard","_ref2","location","useLocation","isUpdateSuccessful","URLSearchParams","search","get","useEffect","Helmet","Container","Row","Col","sm","smOffset","event","preventDefault","connect"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-introduction-super-block-intro-tsx-3957f8775e1c7ed99bbd.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/components/Progress/progress-bar.tsx","webpack://@freecodecamp/client/./src/components/growth-book/codeally-down.tsx","webpack://@freecodecamp/client/../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/uniq.js","webpack://@freecodecamp/client/./src/assets/icons/dropdown.tsx","webpack://@freecodecamp/client/./src/assets/icons/green-not-completed.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/challenges.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/block.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/cert-challenge.tsx","webpack://@freecodecamp/client/./src/components/growth-book/gitpod-note.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/legacy-links.tsx","webpack://@freecodecamp/client/./src/utils/is-a-cert.ts","webpack://@freecodecamp/client/./src/templates/Introduction/components/help-translate.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/components/super-block-intro.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/super-block-intro.tsx","webpack://@freecodecamp/client/../shared/utils/is-audited.js"],"sourcesContent":["import React from 'react';\n\nexport function ProgressBar({ now }: { now: number }) {\n  return (\n    <>\n      <div className='progress-bar-background'></div>\n      <div\n        className='progress-bar-percent'\n        data-testid='fcc-progress-bar-percent'\n        style={{ width: `${now}%` }}\n      ></div>\n    </>\n  );\n}\n","import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\nimport { useFeature } from '@growthbook/growthbook-react';\nimport Spacer from '../../components/helpers/spacer';\n\nconst Down = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant='danger'>\n      <p>\n        <Trans i18nKey='intro:misc-text.course-maintenance'>\n          <a\n            href='https://www.freecodecamp.org/news/how-to-run-freecodecamps-relational-databases-curriculum-using-docker-vscode-and-coderoad'\n            rel='noreferrer'\n            target='_blank'\n          >\n            placeholder\n          </a>\n        </Trans>\n      </p>\n      <Spacer size='small' />\n      <p>{t('intro:misc-text.progress-wont-save')}</p>\n    </Alert>\n  );\n};\n\nconst Disabled = () => {\n  const { t } = useTranslation();\n  return (\n    <Alert variant='danger'>\n      <p>\n        <Trans i18nKey='intro:misc-text.course-disabled'>\n          <a\n            href='https://www.freecodecamp.org/news/how-to-run-freecodecamps-relational-databases-curriculum-using-docker-vscode-and-coderoad'\n            rel='noreferrer'\n            target='_blank'\n          >\n            placeholder\n          </a>\n        </Trans>\n      </p>\n      <Spacer size='small' />\n      <p>{t('intro:misc-text.progress-wont-save')}</p>\n    </Alert>\n  );\n};\n\nexport function CodeAllyDown(): JSX.Element | null {\n  const codeAllyDownFeature = useFeature('codeally_down');\n  const codeAllyDisabledFeature = useFeature('codeally_disabled');\n\n  return codeAllyDisabledFeature.on ? (\n    <Disabled />\n  ) : codeAllyDownFeature.on ? (\n    <Down />\n  ) : null;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return array && array.length ? baseUniq(array) : [];\n}\nexport default uniq;","import React from 'react';\n\nfunction DropDown(): JSX.Element {\n  return (\n    <svg\n      aria-hidden='true'\n      xmlns='http://www.w3.org/2000/svg'\n      width='10'\n      height='10'\n      viewBox='0 0 389 254'\n      fill='none'\n    >\n      <path\n        d='M194.5 0L388.5 254H307.5L194.5 99L78.5 254H0.5L194.5 0Z'\n        style={{\n          stroke: 'var(--primary-color)',\n          fill: 'var(--primary-color)',\n          strokeWidth: '1px'\n        }}\n      />\n    </svg>\n  );\n}\n\nDropDown.displayName = 'DropDown';\n\nexport default DropDown;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface GreenNotCompletedProps\n  extends JSX.IntrinsicAttributes,\n    React.SVGProps<SVGSVGElement> {\n  hushScreenReaderText?: boolean;\n}\n\nfunction GreenNotCompleted(props: GreenNotCompletedProps): JSX.Element {\n  const { t } = useTranslation();\n  const { hushScreenReaderText = false, ...rest } = props;\n  return (\n    <>\n      {!hushScreenReaderText && (\n        <span className='sr-only'>{t('icons.not-passed')}</span>\n      )}\n      <svg\n        aria-hidden='true'\n        height='15'\n        viewBox='0 0 200 200'\n        width='15'\n        xmlns='http://www.w3.org/2000/svg'\n        {...rest}\n      >\n        <g>\n          <title>{t('icons.not-passed')}</title>\n          <circle\n            cx='100'\n            cy='99'\n            fill='var(--primary-background)'\n            r='95'\n            stroke='var(--primary-color)'\n            strokeDasharray='null'\n            strokeWidth='10'\n          />\n        </g>\n      </svg>\n    </>\n  );\n}\n\nGreenNotCompleted.displayName = 'GreenNotCompleted';\n\nexport default GreenNotCompleted;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport { withTranslation, useTranslation } from 'react-i18next';\n\nimport { Button } from '@freecodecamp/ui';\n\nimport GreenNotCompleted from '../../../assets/icons/green-not-completed';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { ChallengeWithCompletedNode } from '../../../redux/prop-types';\nimport { SuperBlocks } from '../../../../../shared/config/superblocks';\nimport { challengeTypes } from '../../../../../shared/config/challenge-types';\n\nconst getStepNumber = (dashedName: string) => {\n  // dashedName should be in the format 'step-1' or 'task-1'\n  const match = dashedName.match(/-(\\d+)/);\n  return match ? match[1] : '';\n};\n\ninterface Challenges {\n  challengesWithCompleted: ChallengeWithCompletedNode[];\n  isProjectBlock: boolean;\n  isGridMap?: boolean;\n  blockTitle?: string | null;\n}\n\nconst CheckMark = ({ isCompleted }: { isCompleted: boolean }) =>\n  isCompleted ? <GreenPass /> : <GreenNotCompleted />;\n\nconst Challenge = ({\n  challenge\n}: {\n  challenge: ChallengeWithCompletedNode;\n}) => (\n  <Link to={challenge.fields.slug}>\n    <span className='map-badge'>\n      <CheckMark isCompleted={challenge.isCompleted} />\n    </span>\n    {challenge.title}\n  </Link>\n);\n\nconst Project = ({ challenge }: { challenge: ChallengeWithCompletedNode }) => (\n  <Link to={challenge.fields.slug}>\n    {challenge.title}\n    <span className='map-badge map-project-checkmark'>\n      <CheckMark isCompleted={challenge.isCompleted} />\n    </span>\n  </Link>\n);\n\nfunction Challenges({\n  challengesWithCompleted,\n  isProjectBlock,\n  isGridMap = false,\n  blockTitle\n}: Challenges): JSX.Element {\n  const { t } = useTranslation();\n\n  const firstIncompleteChallenge = challengesWithCompleted.find(\n    challenge => !challenge.isCompleted\n  );\n\n  const isChallengeStarted = !!challengesWithCompleted.find(\n    challenge => challenge.isCompleted\n  );\n\n  return isGridMap ? (\n    <>\n      {firstIncompleteChallenge && (\n        <div className='challenge-jump-link'>\n          <Button size='small' href={firstIncompleteChallenge.fields.slug}>\n            {!isChallengeStarted\n              ? t('buttons.start-project')\n              : t('buttons.resume-project')}{' '}\n            {blockTitle && <span className='sr-only'>{blockTitle}</span>}\n          </Button>\n        </div>\n      )}\n      <nav\n        aria-label={\n          blockTitle\n            ? challengesWithCompleted[0].superBlock === SuperBlocks.A2English\n              ? t('aria.dialogues-and-tasks-for', { blockTitle })\n              : t('aria.steps-for', { blockTitle })\n            : t('aria.steps')\n        }\n      >\n        <ul className={`map-challenges-ul map-challenges-grid `}>\n          {challengesWithCompleted.map(challenge => (\n            <li\n              className={`map-challenge-title map-challenge-title-grid ${\n                isProjectBlock\n                  ? 'map-project-wrap'\n                  : challenge.challengeType === challengeTypes.dialogue\n                    ? 'map-dialogue-wrap'\n                    : 'map-challenge-wrap'\n              }`}\n              id={challenge.dashedName}\n              key={`map-challenge ${challenge.fields.slug}`}\n            >\n              {!isProjectBlock &&\n              challenge.challengeType !== challengeTypes.dialogue ? (\n                // Step or Task challenge\n                <Link\n                  to={challenge.fields.slug}\n                  className={`map-grid-item ${\n                    +challenge.isCompleted ? 'challenge-completed' : ''\n                  }`}\n                >\n                  <span className='sr-only'>\n                    {challenge.superBlock === SuperBlocks.A2English\n                      ? t('aria.task')\n                      : t('aria.step')}\n                  </span>\n                  <span>{getStepNumber(challenge.dashedName)}</span>\n                  <span className='sr-only'>\n                    {challenge.isCompleted\n                      ? t('icons.passed')\n                      : t('icons.not-passed')}\n                  </span>\n                </Link>\n              ) : challenge.challengeType === challengeTypes.dialogue ? (\n                <Challenge challenge={challenge} />\n              ) : (\n                <Project challenge={challenge} />\n              )}\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </>\n  ) : (\n    <ul className={`map-challenges-ul`}>\n      {challengesWithCompleted.map(challenge => (\n        <li\n          className={`map-challenge-title ${\n            isProjectBlock ? 'map-project-wrap' : 'map-challenge-wrap'\n          }`}\n          id={challenge.dashedName}\n          key={'map-challenge' + challenge.fields.slug}\n        >\n          {!isProjectBlock ? (\n            <Challenge challenge={challenge} />\n          ) : (\n            <Project challenge={challenge} />\n          )}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nChallenges.displayName = 'Challenges';\n\nexport default withTranslation()(Challenges);\n","import React, { Component } from 'react';\nimport type { DefaultTFuncReturn, TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport ScrollableAnchor from 'react-scrollable-anchor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport { SuperBlocks } from '../../../../../shared/config/superblocks';\nimport envData from '../../../../config/env.json';\nimport { isAuditedSuperBlock } from '../../../../../shared/utils/is-audited';\nimport Caret from '../../../assets/icons/caret';\nimport DropDown from '../../../assets/icons/dropdown';\nimport GreenNotCompleted from '../../../assets/icons/green-not-completed';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { ProgressBar } from '../../../components/Progress/progress-bar';\nimport { Link, Spacer } from '../../../components/helpers';\nimport { completedChallengesSelector } from '../../../redux/selectors';\nimport { ChallengeNode, CompletedChallenge } from '../../../redux/prop-types';\nimport { playTone } from '../../../utils/tone';\nimport { makeExpandedBlockSelector, toggleBlock } from '../redux';\nimport { isGridBased, isProjectBased } from '../../../utils/curriculum-layout';\nimport Challenges from './challenges';\n\nimport '../intro.css';\n\nconst { curriculumLocale, showUpcomingChanges, showNewCurriculum } = envData;\n\nconst mapStateToProps = (\n  state: unknown,\n  ownProps: { blockDashedName: string }\n) => {\n  const expandedSelector = makeExpandedBlockSelector(ownProps.blockDashedName);\n\n  return createSelector(\n    expandedSelector,\n    completedChallengesSelector,\n    (isExpanded: boolean, completedChallenges: CompletedChallenge[]) => ({\n      isExpanded,\n      completedChallengeIds: completedChallenges.map(({ id }) => id)\n    })\n  )(state as Record<string, unknown>);\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ toggleBlock }, dispatch);\n\ninterface BlockProps {\n  blockDashedName: string;\n  challenges: ChallengeNode[];\n  completedChallengeIds: string[];\n  isExpanded: boolean;\n  superBlock: SuperBlocks;\n  t: TFunction;\n  toggleBlock: typeof toggleBlock;\n}\n\nexport const BlockIntros = ({ intros }: { intros: string[] }): JSX.Element => {\n  return (\n    <div className='block-description'>\n      {intros.map((title, i) => (\n        <p dangerouslySetInnerHTML={{ __html: title }} key={i} />\n      ))}\n    </div>\n  );\n};\n\nfunction CheckMark({ isCompleted }: { isCompleted: boolean }): JSX.Element {\n  return isCompleted ? (\n    <GreenPass hushScreenReaderText />\n  ) : (\n    <GreenNotCompleted hushScreenReaderText />\n  );\n}\n\nclass Block extends Component<BlockProps> {\n  static displayName: string;\n  constructor(props: BlockProps) {\n    super(props);\n\n    this.handleBlockClick = this.handleBlockClick.bind(this);\n  }\n\n  handleBlockClick(): void {\n    const { blockDashedName, toggleBlock } = this.props;\n    void playTone('block-toggle');\n    toggleBlock(blockDashedName);\n  }\n\n  render(): JSX.Element {\n    const {\n      blockDashedName,\n      completedChallengeIds,\n      challenges,\n      isExpanded,\n      superBlock,\n      t\n    } = this.props;\n\n    let completedCount = 0;\n\n    const challengesWithCompleted = challenges.map(({ challenge }) => {\n      const { id } = challenge;\n      const isCompleted = completedChallengeIds.some(\n        (completedChallengeId: string) => completedChallengeId === id\n      );\n      if (isCompleted) {\n        completedCount++;\n      }\n      return { ...challenge, isCompleted };\n    });\n\n    const isProjectBlock = challenges.some(({ challenge }) => {\n      return isProjectBased(challenge.challengeType, blockDashedName);\n    });\n\n    const isGridBlock = challenges.some(({ challenge }) => {\n      return isGridBased(superBlock, challenge.challengeType);\n    });\n\n    const isAudited = isAuditedSuperBlock(curriculumLocale, superBlock, {\n      showNewCurriculum,\n      showUpcomingChanges\n    });\n\n    const blockTitle = t(`intro:${superBlock}.blocks.${blockDashedName}.title`);\n    // the real type of TFunction is the type below, because intro can be an array of strings\n    // type RealTypeOFTFunction = TFunction & ((key: string) => string[]);\n    // But changing the type will require refactoring that isn't worth it for a wrong type.\n    const blockIntroArr = t<string, DefaultTFuncReturn & string[]>(\n      `intro:${superBlock}.blocks.${blockDashedName}.intro`\n    );\n    const expandText = t('intro:misc-text.expand');\n    const collapseText = t('intro:misc-text.collapse');\n\n    const isBlockCompleted = completedCount === challengesWithCompleted.length;\n\n    const percentageCompleted = Math.floor(\n      (completedCount / challengesWithCompleted.length) * 100\n    );\n\n    const progressBarRender = (\n      <div aria-hidden='true' className='progress-wrapper'>\n        <div>\n          <ProgressBar now={percentageCompleted} />\n        </div>\n        <span>{`${percentageCompleted}%`}</span>\n      </div>\n    );\n\n    const Block = (\n      <>\n        {' '}\n        <ScrollableAnchor id={blockDashedName}>\n          <div className={`block ${isExpanded ? 'open' : ''}`}>\n            <div className='block-header'>\n              <h3 className='big-block-title'>{blockTitle}</h3>\n              {!isAudited && (\n                <div className='block-cta-wrapper'>\n                  <Link\n                    className='block-title-translation-cta'\n                    to={t('links:help-translate-link-url')}\n                  >\n                    {t('misc.translation-pending')}\n                  </Link>\n                </div>\n              )}\n            </div>\n            <BlockIntros intros={blockIntroArr} />\n            <button\n              aria-expanded={isExpanded}\n              className='map-title'\n              onClick={() => {\n                this.handleBlockClick();\n              }}\n            >\n              <Caret />\n              <div className='course-title'>\n                {`${isExpanded ? collapseText : expandText}`}{' '}\n                <span className='sr-only'>{blockTitle}</span>\n              </div>\n              <div className='map-title-completed course-title'>\n                <CheckMark isCompleted={isBlockCompleted} />\n                <span\n                  aria-hidden='true'\n                  className='map-completed-count'\n                >{`${completedCount}/${challengesWithCompleted.length}`}</span>\n                <span className='sr-only'>\n                  ,{' '}\n                  {t('learn.challenges-completed', {\n                    completedCount,\n                    totalChallenges: challengesWithCompleted.length\n                  })}\n                </span>\n              </div>\n            </button>\n            {isExpanded && (\n              <Challenges\n                challengesWithCompleted={challengesWithCompleted}\n                isProjectBlock={isProjectBlock}\n              />\n            )}\n          </div>\n        </ScrollableAnchor>\n      </>\n    );\n\n    const ProjectBlock = (\n      <>\n        <ScrollableAnchor id={blockDashedName}>\n          <div className='block'>\n            <div className='block-header'>\n              <h3 className='big-block-title'>{blockTitle}</h3>\n              {!isAudited && (\n                <div className='block-cta-wrapper'>\n                  <Link\n                    className='block-title-translation-cta'\n                    to={t('links:help-translate-link-url')}\n                  >\n                    {t('misc.translation-pending')}\n                  </Link>\n                </div>\n              )}\n            </div>\n            <BlockIntros intros={blockIntroArr} />\n            <Challenges\n              challengesWithCompleted={challengesWithCompleted}\n              isProjectBlock={isProjectBlock}\n            />\n          </div>\n        </ScrollableAnchor>\n      </>\n    );\n\n    const courseCompletionStatus = () => {\n      if (completedCount === 0) {\n        return t('learn.not-started');\n      }\n      if (completedCount === challengesWithCompleted.length) {\n        return t('learn.completed');\n      }\n      return `${percentageCompleted}% ${t('learn.completed')}`;\n    };\n\n    const GridBlock = (\n      <>\n        {' '}\n        <ScrollableAnchor id={blockDashedName}>\n          <div className={`block block-grid ${isExpanded ? 'open' : ''}`}>\n            <h3 className='block-grid-title'>\n              <button\n                aria-expanded={isExpanded ? 'true' : 'false'}\n                className='block-header'\n                data-cy={challengesWithCompleted[0].block}\n                onClick={() => {\n                  this.handleBlockClick();\n                }}\n              >\n                <span className='block-header-button-text map-title'>\n                  <CheckMark isCompleted={isBlockCompleted} />\n                  <span>\n                    {blockTitle}\n                    <span className='sr-only'>\n                      , {courseCompletionStatus()}\n                    </span>\n                  </span>\n                  <DropDown />\n                </span>\n                {!isExpanded &&\n                  !isBlockCompleted &&\n                  completedCount > 0 &&\n                  progressBarRender}\n              </button>\n            </h3>\n            <div className='tags-wrapper'>\n              {!isAudited && (\n                <Link\n                  className='cert-tag'\n                  to={t('links:help-translate-link-url')}\n                >\n                  {t('misc.translation-pending')}\n                </Link>\n              )}\n            </div>\n            {isExpanded && <BlockIntros intros={blockIntroArr} />}\n            {isExpanded && (\n              <Challenges\n                challengesWithCompleted={challengesWithCompleted}\n                isProjectBlock={isProjectBlock}\n                isGridMap={true}\n                blockTitle={blockTitle}\n              />\n            )}\n          </div>\n        </ScrollableAnchor>\n      </>\n    );\n\n    const GridProjectBlock = (\n      <ScrollableAnchor id={blockDashedName}>\n        <div className='block block-grid grid-project-block'>\n          <div className='tags-wrapper'>\n            <span className='cert-tag' aria-hidden='true'>\n              {t('misc.certification-project')}\n            </span>\n            {!isAudited && (\n              <Link\n                className='cert-tag'\n                to={t('links:help-translate-link-url')}\n              >\n                {t('misc.translation-pending')}{' '}\n                <span className='sr-only'>\n                  {blockTitle} {t('misc.certification-project')}\n                </span>\n              </Link>\n            )}\n          </div>\n          <div className='title-wrapper map-title'>\n            <h3 className='block-grid-title'>\n              <Link\n                className='block-header'\n                onClick={() => {\n                  this.handleBlockClick();\n                }}\n                to={challengesWithCompleted[0].fields.slug}\n              >\n                <CheckMark isCompleted={isBlockCompleted} />\n                {blockTitle}{' '}\n                <span className='sr-only'>\n                  {t('misc.certification-project')}\n                </span>\n              </Link>\n            </h3>\n          </div>\n          <BlockIntros intros={blockIntroArr} />\n        </div>\n      </ScrollableAnchor>\n    );\n\n    const blockrenderer = () => {\n      if (isProjectBlock) return isGridBlock ? GridProjectBlock : ProjectBlock;\n      return isGridBlock ? GridBlock : Block;\n    };\n\n    return (\n      <>\n        {blockrenderer()}\n        {isGridBlock && !isProjectBlock ? null : <Spacer size='medium' />}\n      </>\n    );\n  }\n}\n\nBlock.displayName = 'Block';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(Block));\n","import { navigate } from 'gatsby-link';\nimport React, { useState, useEffect, MouseEvent } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Button } from '@freecodecamp/ui';\n\nimport {\n  certSlugTypeMap,\n  superBlockCertTypeMap\n} from '../../../../../shared/config/certification-settings';\nimport { SuperBlocks } from '../../../../../shared/config/superblocks';\n\nimport { createFlashMessage } from '../../../components/Flash/redux';\nimport { FlashMessages } from '../../../components/Flash/redux/flash-messages';\nimport {\n  isSignedInSelector,\n  userFetchStateSelector,\n  currentCertsSelector\n} from '../../../redux/selectors';\nimport { User, Steps } from '../../../redux/prop-types';\nimport { verifyCert } from '../../../redux/settings/actions';\nimport {\n  type CertTitle,\n  liveCerts\n} from '../../../../config/cert-and-project-map';\n\ninterface CertChallengeProps {\n  // TODO: create enum/reuse SuperBlocks enum somehow\n  certification: string;\n  createFlashMessage: typeof createFlashMessage;\n  fetchState: {\n    pending: boolean;\n    complete: boolean;\n    errored: boolean;\n    error: null | string;\n  };\n  isSignedIn: boolean;\n  currentCerts: Steps['currentCerts'];\n  superBlock: SuperBlocks;\n  title: CertTitle;\n  user: User;\n  verifyCert: typeof verifyCert;\n}\n\nconst honestyInfoMessage = {\n  type: 'info',\n  message: FlashMessages.HonestFirst\n};\n\nconst mapStateToProps = (state: unknown) => {\n  return createSelector(\n    currentCertsSelector,\n    userFetchStateSelector,\n    isSignedInSelector,\n    (\n      currentCerts,\n      fetchState: CertChallengeProps['fetchState'],\n      isSignedIn\n    ) => ({\n      currentCerts,\n      fetchState,\n      isSignedIn\n    })\n  )(state as Record<string, unknown>);\n};\n\nconst mapDispatchToProps = {\n  createFlashMessage,\n  verifyCert\n};\n\nconst CertChallenge = ({\n  createFlashMessage,\n  currentCerts,\n  superBlock,\n  verifyCert,\n  title,\n  fetchState,\n  isSignedIn,\n  user: { isHonest, username }\n}: CertChallengeProps): JSX.Element => {\n  const { t } = useTranslation();\n  const [isCertified, setIsCertified] = useState(false);\n  const [userLoaded, setUserLoaded] = useState(false);\n\n  const cert = liveCerts.find(x => x.title === title);\n  if (!cert) throw Error(`Certification ${title} not found`);\n  const certSlug = cert.certSlug;\n\n  useEffect(() => {\n    const { pending, complete } = fetchState;\n\n    if (complete && !pending) {\n      setUserLoaded(true);\n    }\n  }, [fetchState]);\n\n  const certSlugTypeMapTyped: { [key: string]: string } = certSlugTypeMap;\n  const superBlockCertTypeMapTyped: { [key: string]: string } =\n    superBlockCertTypeMap;\n\n  useEffect(() => {\n    setIsCertified(\n      currentCerts?.find(\n        (cert: { certSlug: string }) =>\n          certSlugTypeMapTyped[cert.certSlug] ===\n          superBlockCertTypeMapTyped[superBlock]\n      )?.show ?? false\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentCerts]);\n\n  const certLocation = `/certification/${username}/${certSlug}`;\n\n  const createClickHandler =\n    (certSlug: string | undefined) => (e: MouseEvent<HTMLAnchorElement>) => {\n      e.preventDefault();\n      if (isCertified) {\n        return navigate(certLocation);\n      }\n      return isHonest\n        ? verifyCert(certSlug)\n        : createFlashMessage(honestyInfoMessage);\n    };\n  return (\n    <div>\n      {isSignedIn && (\n        <Button\n          block={true}\n          variant='primary'\n          href={isCertified ? certLocation : `/settings#cert-${certSlug}`}\n          onClick={() => (isCertified ? createClickHandler(certSlug) : false)}\n        >\n          {isCertified && userLoaded\n            ? t('buttons.show-cert')\n            : t('buttons.go-to-settings')}{' '}\n          <span className='sr-only'>{title}</span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nCertChallenge.displayName = 'CertChallenge';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(CertChallenge));\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\nimport { useFeatureValue } from '@growthbook/growthbook-react';\nimport { SuperBlocks } from '../../../../shared/config/superblocks';\nimport { Link } from '../helpers';\n\ntype GitpodNoteProps = {\n  superBlock: SuperBlocks;\n};\n\nexport function GitpodNote({\n  superBlock\n}: GitpodNoteProps): JSX.Element | null {\n  const gitpodNoteFeature = useFeatureValue<{\n    superblocks: string[];\n  }>('gitpod-note', { superblocks: [] });\n  const { t } = useTranslation();\n\n  return gitpodNoteFeature.superblocks.includes(superBlock) ? (\n    <Alert variant='info'>\n      <p>\n        <Link\n          external={true}\n          sameTab={false}\n          to='https://forum.freecodecamp.org/t/using-gitpod-in-the-curriculum/668669'\n        >\n          {t('intro:misc-text.read-database-cert-article')}\n        </Link>\n      </p>\n    </Alert>\n  ) : null;\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\nimport { SuperBlocks } from '../../../../../shared/config/superblocks';\nimport {\n  isOldRespCert,\n  isRelationalDbCert,\n  isExamCert\n} from '../../../utils/is-a-cert';\nimport { Link } from '../../../components/helpers';\nimport { CodeAllyDown } from '../../../components/growth-book/codeally-down';\n\nimport envData from '../../../../config/env.json';\nimport { GitpodNote } from '../../../components/growth-book/gitpod-note';\n\nconst { clientLocale } = envData;\n\ninterface LegacyLinksProps {\n  superBlock: SuperBlocks;\n}\n\nfunction LegacyLinks({ superBlock }: LegacyLinksProps): JSX.Element {\n  const { t } = useTranslation();\n\n  if (isOldRespCert(superBlock)) {\n    return (\n      <>\n        <Alert variant='info'>\n          <p>\n            {t('intro:misc-text.legacy-desc')}{' '}\n            <Link sameTab={false} to={`/learn/2022/responsive-web-design`}>\n              {t('intro:misc-text.legacy-go-back')}\n            </Link>\n          </p>\n        </Alert>\n      </>\n    );\n  } else if (isRelationalDbCert(superBlock)) {\n    return (\n      <>\n        <CodeAllyDown />\n        {clientLocale != 'english' && (\n          <Alert variant='info'>\n            <p>{t('intro:misc-text.english-only')}</p>\n          </Alert>\n        )}\n      </>\n    );\n  } else if (isExamCert(superBlock) && clientLocale != 'english') {\n    return (\n      <Alert variant='info'>\n        <p>{t('intro:misc-text.exam-english-only')}</p>\n      </Alert>\n    );\n  } else {\n    return (\n      <>\n        <GitpodNote superBlock={superBlock} />\n      </>\n    );\n  }\n}\n\nexport default LegacyLinks;\n","import { SuperBlocks } from '../../../shared/config/superblocks';\n\nexport function isOldRespCert(superBlock: string): boolean {\n  return superBlock === String(SuperBlocks.RespWebDesign);\n}\n\nexport function isRelationalDbCert(superBlock: string): boolean {\n  return superBlock === String(SuperBlocks.RelationalDb);\n}\n\nexport function isExamCert(superBlock: string): boolean {\n  return superBlock === String(SuperBlocks.FoundationalCSharp);\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SuperBlocks } from '../../../../../shared/config/superblocks';\nimport { isAuditedSuperBlock } from '../../../../../shared/utils/is-audited';\nimport { Link, Spacer } from '../../../components/helpers';\n\nimport envData from '../../../../config/env.json';\n\nconst { clientLocale, showUpcomingChanges, showNewCurriculum } = envData;\n\ninterface HelpTranslateProps {\n  superBlock: SuperBlocks;\n}\n\nfunction HelpTranslate({ superBlock }: HelpTranslateProps): JSX.Element | null {\n  const { t } = useTranslation();\n\n  if (\n    isAuditedSuperBlock(clientLocale, superBlock, {\n      showNewCurriculum,\n      showUpcomingChanges\n    })\n  ) {\n    return null;\n  }\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <Spacer size='medium' />\n      <p style={{ marginBottom: 0 }}>{t('learn.help-translate')} </p>\n      <Link\n        external={true}\n        sameTab={false}\n        to={t('links:help-translate-link-url')}\n      >\n        {t('learn.help-translate-link')}\n      </Link>\n    </div>\n  );\n}\n\nexport default HelpTranslate;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Alert } from '@freecodecamp/ui';\nimport { SuperBlocks } from '../../../../../shared/config/superblocks';\nimport { SuperBlockIcon } from '../../../assets/icons/superblock-icon';\nimport { Spacer, Link } from '../../../components/helpers';\n\ninterface SuperBlockIntroProps {\n  superBlock: SuperBlocks;\n  onCertificationDonationAlertClick: () => void;\n  isDonating: boolean;\n}\n\nexport const ConditionalDonationAlert = ({\n  superBlock,\n  onCertificationDonationAlertClick,\n  isDonating\n}: SuperBlockIntroProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  const betaCertifications = [\n    SuperBlocks.JsAlgoDataStructNew,\n    SuperBlocks.A2English,\n    SuperBlocks.UpcomingPython,\n    SuperBlocks.SciCompPy\n  ];\n\n  if (!isDonating && betaCertifications.includes(superBlock))\n    return (\n      <Alert variant='info' className='annual-donation-alert'>\n        <p>{t('donate.beta-certification')}</p>\n        <hr />\n        <p className={'text-center'}>\n          <Link\n            className='btn'\n            key='donate'\n            sameTab={false}\n            to='/donate'\n            onClick={onCertificationDonationAlertClick}\n          >\n            {t('buttons.donate-now')}\n          </Link>\n        </p>\n      </Alert>\n    );\n  return <></>;\n};\n\nfunction SuperBlockIntro(props: SuperBlockIntroProps): JSX.Element {\n  const { t } = useTranslation();\n  const { superBlock, onCertificationDonationAlertClick, isDonating } = props;\n\n  const superBlockIntroObj: {\n    title: string;\n    intro: string[];\n    note: string;\n  } = t<\n    string,\n    string & {\n      title: string;\n      intro: string[];\n      note: string;\n    }\n  >(`intro:${superBlock}`);\n  const {\n    title: i18nSuperBlock,\n    intro: superBlockIntroText,\n    note: superBlockNoteText\n  } = superBlockIntroObj;\n\n  return (\n    <>\n      <h1 id='content-start' className='text-center big-heading'>\n        {i18nSuperBlock}\n      </h1>\n      <Spacer size='medium' />\n      <SuperBlockIcon className='cert-header-icon' superBlock={superBlock} />\n      <Spacer size='medium' />\n      {superBlockIntroText.map((str, i) => (\n        <p dangerouslySetInnerHTML={{ __html: str }} key={i} />\n      ))}\n      {superBlockNoteText && (\n        <div className='alert alert-info' style={{ marginTop: '2rem' }}>\n          {superBlockNoteText}\n        </div>\n      )}\n      <ConditionalDonationAlert\n        superBlock={superBlock}\n        onCertificationDonationAlertClick={onCertificationDonationAlertClick}\n        isDonating={isDonating}\n      />\n    </>\n  );\n}\n\nSuperBlockIntro.displayName = 'SuperBlockIntro';\n\nexport default SuperBlockIntro;\n","import { WindowLocation } from '@reach/router';\nimport { graphql } from 'gatsby';\nimport { uniq } from 'lodash-es';\nimport React, { Fragment, useEffect, memo } from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { configureAnchors } from 'react-scrollable-anchor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row } from '@freecodecamp/ui';\n\nimport { SuperBlocks } from '../../../../shared/config/superblocks';\nimport { getSuperBlockTitleForMap } from '../../utils/superblock-map-titles';\nimport DonateModal from '../../components/Donation/donation-modal';\nimport Login from '../../components/Header/components/login';\nimport Map from '../../components/Map';\nimport { Spacer } from '../../components/helpers';\nimport callGA from '../../analytics/call-ga';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport {\n  isSignedInSelector,\n  userSelector,\n  currentChallengeIdSelector,\n  userFetchStateSelector,\n  signInLoadingSelector\n} from '../../redux/selectors';\nimport { MarkdownRemark, AllChallengeNode, User } from '../../redux/prop-types';\nimport Block from './components/block';\nimport CertChallenge from './components/cert-challenge';\nimport LegacyLinks from './components/legacy-links';\nimport HelpTranslate from './components/help-translate';\nimport SuperBlockIntro from './components/super-block-intro';\nimport { resetExpansion, toggleBlock } from './redux';\n\nimport './intro.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};\n\ntype SuperBlockProp = {\n  currentChallengeId: string;\n  data: {\n    markdownRemark: MarkdownRemark;\n    allChallengeNode: AllChallengeNode;\n  };\n  expandedState: {\n    [key: string]: boolean;\n  };\n  fetchState: FetchState;\n  isSignedIn: boolean;\n  signInLoading: boolean;\n  location: WindowLocation<{ breadcrumbBlockClick: string }>;\n  resetExpansion: () => void;\n  toggleBlock: (arg0: string) => void;\n  tryToShowDonationModal: () => void;\n  user: User;\n};\n\nconfigureAnchors({ offset: -40, scrollDuration: 0 });\n\nconst mapStateToProps = (state: Record<string, unknown>) => {\n  return createSelector(\n    currentChallengeIdSelector,\n    isSignedInSelector,\n    signInLoadingSelector,\n    userFetchStateSelector,\n    userSelector,\n    (\n      currentChallengeId: string,\n      isSignedIn,\n      signInLoading: boolean,\n      fetchState: FetchState,\n      user: User\n    ) => ({\n      currentChallengeId,\n      isSignedIn,\n      signInLoading,\n      fetchState,\n      user\n    })\n  )(state);\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      tryToShowDonationModal,\n      resetExpansion,\n      toggleBlock: b => toggleBlock(b)\n    },\n    dispatch\n  );\n\nconst SuperBlockIntroductionPage = (props: SuperBlockProp) => {\n  const { t } = useTranslation();\n  useEffect(() => {\n    initializeExpandedState();\n    props.tryToShowDonationModal();\n\n    setTimeout(() => {\n      configureAnchors({ offset: -40, scrollDuration: 400 });\n    }, 0);\n\n    return () => {\n      configureAnchors({ offset: -40, scrollDuration: 0 });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getChosenBlock = (): string => {\n    const {\n      data: {\n        allChallengeNode: { edges }\n      },\n      isSignedIn,\n      currentChallengeId,\n      location\n    }: SuperBlockProp = props;\n\n    // if coming from breadcrumb click\n    if (\n      location.state &&\n      typeof location.state === 'object' &&\n      Object.prototype.hasOwnProperty.call(\n        location.state,\n        'breadcrumbBlockClick'\n      )\n    ) {\n      return location.state.breadcrumbBlockClick;\n    }\n\n    // if the URL includes a hash\n    if (location.hash) {\n      const dashedBlock = location.hash.replace('#', '').replace('/', '');\n      return dashedBlock;\n    }\n\n    const edge = edges[0];\n\n    if (isSignedIn) {\n      // see if currentChallenge is in this superBlock\n      const currentChallengeEdge = edges.find(\n        edge => edge.node.challenge.id === currentChallengeId\n      );\n\n      return currentChallengeEdge\n        ? currentChallengeEdge.node.challenge.block\n        : edge.node.challenge.block;\n    }\n\n    return edge.node.challenge.block;\n  };\n\n  const initializeExpandedState = () => {\n    const { resetExpansion, toggleBlock } = props;\n\n    resetExpansion();\n    return toggleBlock(getChosenBlock());\n  };\n\n  const {\n    data: {\n      markdownRemark: {\n        frontmatter: { superBlock, title, certification }\n      },\n      allChallengeNode: { edges }\n    },\n    isSignedIn,\n    signInLoading,\n    user\n  } = props;\n\n  const nodesForSuperBlock = edges.map(({ node }) => node);\n  const blockDashedNames = uniq(\n    nodesForSuperBlock.map(({ challenge: { block } }) => block)\n  );\n\n  const i18nTitle = getSuperBlockTitleForMap(superBlock);\n  const defaultCurriculumNames = blockDashedNames;\n\n  const superblockWithoutCert = [\n    SuperBlocks.RespWebDesign,\n    SuperBlocks.CodingInterviewPrep,\n    SuperBlocks.TheOdinProject,\n    SuperBlocks.ProjectEuler,\n    SuperBlocks.A2English,\n    SuperBlocks.RosettaCode,\n    SuperBlocks.PythonForEverybody\n  ];\n\n  const onCertificationDonationAlertClick = () => {\n    callGA({\n      event: 'donation_related',\n      action: `Certification Donation Alert Click`\n    });\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{i18nTitle} | freeCodeCamp.org</title>\n      </Helmet>\n      <Container>\n        <main>\n          <Row className='super-block-intro-page'>\n            <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n              <Spacer size='large' />\n              <LegacyLinks superBlock={superBlock} />\n              <SuperBlockIntro\n                superBlock={superBlock}\n                onCertificationDonationAlertClick={\n                  onCertificationDonationAlertClick\n                }\n                isDonating={user.isDonating}\n              />\n              <HelpTranslate superBlock={superBlock} />\n              <Spacer size='large' />\n              <h2 className='text-center big-subheading'>\n                {t(`intro:misc-text.courses`)}\n              </h2>\n              <Spacer size='medium' />\n              <div className='block-ui'>\n                {defaultCurriculumNames.map(blockDashedName => (\n                  <Block\n                    key={blockDashedName}\n                    blockDashedName={blockDashedName}\n                    challenges={nodesForSuperBlock.filter(\n                      node => node.challenge.block === blockDashedName\n                    )}\n                    superBlock={superBlock}\n                  />\n                ))}\n                {!superblockWithoutCert.includes(superBlock) && (\n                  <CertChallenge\n                    certification={certification}\n                    superBlock={superBlock}\n                    title={title}\n                    user={user}\n                  />\n                )}\n              </div>\n              {!isSignedIn && !signInLoading && (\n                <>\n                  <Spacer size='large' />\n                  <Login block={true}>{t('buttons.logged-out-cta-btn')}</Login>\n                </>\n              )}\n              <Spacer size='large' />\n              <h3\n                className='text-center big-block-title'\n                style={{ whiteSpace: 'pre-line' }}\n              >\n                {t(`intro:misc-text.browse-other`)}\n              </h3>\n              <Spacer size='medium' />\n              <Map />\n              <Spacer size='large' />\n            </Col>\n          </Row>\n        </main>\n      </Container>\n      <DonateModal location={props.location} />\n    </>\n  );\n};\n\nSuperBlockIntroductionPage.displayName = 'SuperBlockIntroductionPage';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(memo(SuperBlockIntroductionPage)));\n\nexport const query = graphql`\n  query SuperBlockIntroPageBySlug($slug: String!, $superBlock: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      frontmatter {\n        certification\n        superBlock\n        title\n      }\n    }\n    allChallengeNode(\n      sort: {\n        fields: [\n          challenge___superOrder\n          challenge___order\n          challenge___challengeOrder\n        ]\n      }\n      filter: { challenge: { superBlock: { eq: $superBlock } } }\n    ) {\n      edges {\n        node {\n          challenge {\n            fields {\n              slug\n              blockName\n            }\n            id\n            block\n            challengeType\n            title\n            order\n            superBlock\n            dashedName\n          }\n        }\n      }\n    }\n  }\n`;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAuditedSuperBlock = void 0;\nconst superblocks_1 = require(\"../../shared/config/superblocks\");\nfunction isAuditedSuperBlock(language, superblock, { showNewCurriculum, showUpcomingChanges }) {\n    // TODO: when all the consumers of this function use TypeScript we can remove\n    // this check\n    if (!language || !superblock)\n        throw Error('Both arguments must be provided for auditing');\n    const auditedSuperBlocks = (0, superblocks_1.getAuditedSuperBlocks)({\n        showNewCurriculum,\n        showUpcomingChanges,\n        language\n    });\n    return auditedSuperBlocks.includes(superblock);\n}\nexports.isAuditedSuperBlock = isAuditedSuperBlock;\n"],"names":["ProgressBar","_ref","now","React","className","style","width","Down","t","useTranslation","Alert","variant","Trans","i18nKey","href","rel","target","Spacer","size","Disabled","CodeAllyDown","codeAllyDownFeature","useFeature","on","array","length","DropDown","xmlns","height","viewBox","fill","d","stroke","strokeWidth","displayName","GreenNotCompleted","props","hushScreenReaderText","rest","Object","assign","cx","cy","r","strokeDasharray","CheckMark","isCompleted","GreenPass","Challenge","_ref2","challenge","Link","to","fields","slug","title","Project","_ref3","Challenges","_ref4","challengesWithCompleted","isProjectBlock","isGridMap","blockTitle","firstIncompleteChallenge","find","isChallengeStarted","Button","superBlock","SuperBlocks","A2English","map","challengeType","challengeTypes","dialogue","id","dashedName","key","match","getStepNumber","withTranslation","curriculumLocale","showUpcomingChanges","showNewCurriculum","envData","BlockIntros","intros","i","dangerouslySetInnerHTML","__html","Block","Component","constructor","super","this","handleBlockClick","bind","blockDashedName","toggleBlock","playTone","render","completedChallengeIds","challenges","isExpanded","completedCount","some","completedChallengeId","_ref5","isProjectBased","isGridBlock","_ref6","isGridBased","isAudited","isAuditedSuperBlock","blockIntroArr","expandText","collapseText","isBlockCompleted","percentageCompleted","Math","floor","progressBarRender","ScrollableAnchor","onClick","Caret","totalChallenges","ProjectBlock","GridBlock","block","GridProjectBlock","connect","mapStateToProps","state","ownProps","expandedSelector","makeExpandedBlockSelector","createSelector","completedChallengesSelector","completedChallenges","dispatch","bindActionCreators","honestyInfoMessage","type","message","FlashMessages","HonestFirst","mapDispatchToProps","createFlashMessage","verifyCert","CertChallenge","currentCerts","fetchState","isSignedIn","user","isHonest","username","isCertified","setIsCertified","useState","userLoaded","setUserLoaded","cert","liveCerts","x","Error","certSlug","useEffect","pending","complete","certSlugTypeMapTyped","certSlugTypeMap","superBlockCertTypeMapTyped","superBlockCertTypeMap","_currentCerts$find$sh","_currentCerts$find","show","certLocation","e","preventDefault","navigate","createClickHandler","currentCertsSelector","userFetchStateSelector","isSignedInSelector","GitpodNote","gitpodNoteFeature","useFeatureValue","superblocks","includes","external","sameTab","clientLocale","String","RespWebDesign","isOldRespCert","RelationalDb","isRelationalDbCert","FoundationalCSharp","isExamCert","textAlign","marginBottom","ConditionalDonationAlert","onCertificationDonationAlertClick","isDonating","betaCertifications","JsAlgoDataStructNew","UpcomingPython","SciCompPy","SuperBlockIntro","superBlockIntroObj","i18nSuperBlock","intro","superBlockIntroText","note","superBlockNoteText","SuperBlockIcon","str","marginTop","configureAnchors","offset","scrollDuration","SuperBlockIntroductionPage","initializeExpandedState","tryToShowDonationModal","setTimeout","resetExpansion","getChosenBlock","data","allChallengeNode","edges","currentChallengeId","location","prototype","hasOwnProperty","call","breadcrumbBlockClick","hash","replace","edge","currentChallengeEdge","node","markdownRemark","frontmatter","certification","signInLoading","nodesForSuperBlock","blockDashedNames","_uniq","i18nTitle","getSuperBlockTitleForMap","defaultCurriculumNames","superblockWithoutCert","CodingInterviewPrep","TheOdinProject","ProjectEuler","RosettaCode","PythonForEverybody","Helmet","Container","Row","Col","md","mdOffset","sm","smOffset","xs","LegacyLinks","callGA","event","action","HelpTranslate","filter","Login","whiteSpace","Map","DonateModal","currentChallengeIdSelector","signInLoadingSelector","userSelector","b","memo","exports","superblocks_1","require","language","superblock","getAuditedSuperBlocks"],"sourceRoot":""}
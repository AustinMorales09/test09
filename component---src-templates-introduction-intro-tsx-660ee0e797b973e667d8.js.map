{"version":3,"file":"component---src-templates-introduction-intro-tsx-660ee0e797b973e667d8.js","mappings":"8NAoBA,MAAMA,GAAkBC,EAAAA,EAAAA,IACtBC,EAAAA,IACCC,IAAsB,CACrBA,iBAIEC,EAAqB,CACzBC,uBACF,MAiDA,KAAeC,EAAAA,EAAAA,IAAQN,EAAiBI,EAAxC,EAxCA,SAAoBG,GAKe,IALd,WACnBJ,EAAU,uBACVE,EAAsB,SACtBG,EAAQ,sBACRC,GACiBF,EAejB,OAdAG,EAAAA,EAAAA,YAAU,KACRL,GAAwB,GAEvB,KAEHK,EAAAA,EAAAA,YAAU,IACD,KACL,MAAMC,EAAUC,SAASC,cAAc,uBACnCF,GACFA,EAAQG,QACV,GAED,IAECX,EAAWY,UAAYZ,EAAWa,SAC7BC,EAAAA,cAACC,EAAAA,GAAM,CAACC,YAAY,IAI3BF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACG,EAAAA,EAAM,KACLH,EAAAA,cAAA,QAAMI,QAAQ,UAAUC,KAAK,YAE/BL,EAAAA,cAAA,OAAAM,OAAAC,OAAA,CACEC,GAAG,qBACEhB,GAAyB,CAAE,gCAAgC,IAE/DD,GAEHS,EAAAA,cAACS,EAAAA,EAAW,MAGlB,G,yHC/DA,SAASC,EAAUpB,GAA4D,IAA3D,eAAEqB,GAAsDrB,EAC1E,OACEU,EAAAA,cAAA,MAAIY,UAAU,aACXD,EAAeE,MACbC,KAAIC,IAAA,IAAGC,MAAM,UAAEC,IAAaF,EAAA,OAAKE,CAAS,IAC1CH,KAAII,IAAA,IAAC,MAAEC,EAAOC,QAAQ,KAAEC,IAAQH,EAAA,OAC/BlB,EAAAA,cAAA,MAAIsB,IAAK,SAAWD,GAClBrB,EAAAA,cAACuB,EAAAA,KAAI,CAACC,GAAIH,GAAOF,GACd,IAIf,CAEA,SAASM,EAAgBC,GAO+B,IANtDC,MAAM,eAAEC,EAAc,iBAAEC,IAMzBH,EACC,MAAM,EAAEI,IAAMC,EAAAA,EAAAA,OACR,KACJC,EACAC,aAAa,MAAEC,EAAK,WAAEC,IACpBP,EACEQ,EACJP,GAAoBA,EAAiBhB,MAAM,GAAGG,KAAKC,UAC/CoB,EAAkBD,EACpBA,EAAYhB,OAAOC,KACnB,iBACEiB,EACJR,EAAE,SAASK,EAAU,WAAWD,EAAK,UAAY,sBACnD,OACElC,EAAAA,cAACuC,EAAAA,EAAW,KACVvC,EAAAA,cAACG,EAAAA,EAAM,KACLH,EAAAA,cAAA,aAAQsC,IAEVtC,EAAAA,cAACwC,EAAAA,GAAS,CAAC5B,UAAU,0BACnBZ,EAAAA,cAACyC,EAAAA,EAAY,KACXzC,EAAAA,cAAA,OACEY,UAAU,eACV8B,wBAAyB,CAAEC,OAAQX,MAGvChC,EAAAA,cAACyC,EAAAA,EAAY,KACXzC,EAAAA,cAAC4C,EAAAA,GAAM,CAACV,OAAK,EAACW,KAAK,QAAQC,KAAMT,GAC9BP,EAAE,yBAEL9B,EAAAA,cAAC+C,EAAAA,EAAM,CAACF,KAAK,UACb7C,EAAAA,cAAC4C,EAAAA,GAAM,CAACV,OAAK,EAACW,KAAK,QAAQC,KAAK,UAC7BhB,EAAE,4BAEL9B,EAAAA,cAAC+C,EAAAA,EAAM,CAACF,KAAK,UACb7C,EAAAA,cAAA,YAEFA,EAAAA,cAACyC,EAAAA,EAAY,KACXzC,EAAAA,cAAA,MAAIY,UAAU,mBAAmBkB,EAAE,2BAClCD,EACC7B,EAAAA,cAACU,EAAU,CAACC,eAAgBkB,IAC1B,OAKd,CAEAJ,EAAiBuB,YAAc,mBAE/B,W","sources":["webpack://@freecodecamp/client/./src/components/layouts/learn.tsx","webpack://@freecodecamp/client/./src/templates/Introduction/intro.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Loader } from '../../components/helpers';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport { userFetchStateSelector } from '../../redux/selectors';\nimport DonateModal from '../Donation/donation-modal';\n\nimport './prism.css';\nimport './prism-night.css';\nimport 'react-reflex/styles.css';\nimport './learn.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};\n\nconst mapStateToProps = createSelector(\n  userFetchStateSelector,\n  (fetchState: FetchState) => ({\n    fetchState\n  })\n);\n\nconst mapDispatchToProps = {\n  tryToShowDonationModal\n};\n\ntype LearnLayoutProps = {\n  fetchState: FetchState;\n  tryToShowDonationModal: () => void;\n  children?: React.ReactNode;\n  hasEditableBoundaries?: boolean;\n};\n\nfunction LearnLayout({\n  fetchState,\n  tryToShowDonationModal,\n  children,\n  hasEditableBoundaries\n}: LearnLayoutProps): JSX.Element {\n  useEffect(() => {\n    tryToShowDonationModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      const metaTag = document.querySelector(`meta[name=\"robots\"]`);\n      if (metaTag) {\n        metaTag.remove();\n      }\n    };\n  }, []);\n\n  if (fetchState.pending && !fetchState.complete) {\n    return <Loader fullScreen={true} />;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <meta content='noindex' name='robots' />\n      </Helmet>\n      <main\n        id='learn-app-wrapper'\n        {...(hasEditableBoundaries && { 'data-has-editable-boundaries': true })}\n      >\n        {children}\n      </main>\n      <DonateModal />\n    </>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LearnLayout);\n","import { Link, graphql } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\n\nimport { Container, Button } from '@freecodecamp/ui';\nimport Spacer from '../../components/helpers/spacer';\nimport FullWidthRow from '../../components/helpers/full-width-row';\nimport LearnLayout from '../../components/layouts/learn';\nimport type { MarkdownRemark, AllChallengeNode } from '../../redux/prop-types';\n\nimport './intro.css';\n\nfunction Challenges({ challengeNodes }: { challengeNodes: AllChallengeNode }) {\n  return (\n    <ul className='intro-toc'>\n      {challengeNodes.edges\n        .map(({ node: { challenge } }) => challenge)\n        .map(({ title, fields: { slug } }) => (\n          <li key={'intro-' + slug}>\n            <Link to={slug}>{title}</Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nfunction IntroductionPage({\n  data: { markdownRemark, allChallengeNode }\n}: {\n  data: {\n    markdownRemark: MarkdownRemark;\n    allChallengeNode: AllChallengeNode;\n  };\n}): React.FunctionComponentElement<typeof LearnLayout> {\n  const { t } = useTranslation();\n  const {\n    html,\n    frontmatter: { block, superBlock }\n  } = markdownRemark;\n  const firstLesson =\n    allChallengeNode && allChallengeNode.edges[0].node.challenge;\n  const firstLessonPath = firstLesson\n    ? firstLesson.fields.slug\n    : '/strange-place';\n  const blockTitle =\n    t(`intro:${superBlock}.blocks.${block}.title`) + ' | freeCodeCamp.org';\n  return (\n    <LearnLayout>\n      <Helmet>\n        <title>{blockTitle}</title>\n      </Helmet>\n      <Container className='intro-layout-container'>\n        <FullWidthRow>\n          <div\n            className='intro-layout'\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </FullWidthRow>\n        <FullWidthRow>\n          <Button block size='large' href={firstLessonPath}>\n            {t('buttons.first-lesson')}\n          </Button>\n          <Spacer size='small' />\n          <Button block size='large' href='/learn'>\n            {t('buttons.view-curriculum')}\n          </Button>\n          <Spacer size='small' />\n          <hr />\n        </FullWidthRow>\n        <FullWidthRow>\n          <h2 className='intro-toc-title'>{t('learn.upcoming-lessons')}</h2>\n          {allChallengeNode ? (\n            <Challenges challengeNodes={allChallengeNode} />\n          ) : null}\n        </FullWidthRow>\n      </Container>\n    </LearnLayout>\n  );\n}\n\nIntroductionPage.displayName = 'IntroductionPage';\n\nexport default IntroductionPage;\n\nexport const query = graphql`\n  query IntroPageBySlug($slug: String!, $block: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      frontmatter {\n        block\n        superBlock\n      }\n      html\n    }\n    allChallengeNode(\n      filter: { challenge: { block: { eq: $block } } }\n      sort: {\n        fields: [\n          challenge___superOrder\n          challenge___order\n          challenge___challengeOrder\n        ]\n      }\n    ) {\n      edges {\n        node {\n          challenge {\n            fields {\n              slug\n            }\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["mapStateToProps","createSelector","userFetchStateSelector","fetchState","mapDispatchToProps","tryToShowDonationModal","connect","_ref","children","hasEditableBoundaries","useEffect","metaTag","document","querySelector","remove","pending","complete","React","Loader","fullScreen","Helmet","content","name","Object","assign","id","DonateModal","Challenges","challengeNodes","className","edges","map","_ref2","node","challenge","_ref3","title","fields","slug","key","Link","to","IntroductionPage","_ref4","data","markdownRemark","allChallengeNode","t","useTranslation","html","frontmatter","block","superBlock","firstLesson","firstLessonPath","blockTitle","LearnLayout","Container","FullWidthRow","dangerouslySetInnerHTML","__html","Button","size","href","Spacer","displayName"],"sourceRoot":""}
{"version":3,"file":"64c5dbcb1c3ab114aa414d9005db1f138ba6e550-77302acdea7b27059b05.js","mappings":"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","sources":["webpack://@freecodecamp/client/../node_modules/.pnpm/bezier-easing@2.1.0/node_modules/bezier-easing/src/index.js","webpack://@freecodecamp/client/./src/components/Progress/progress-inner.tsx","webpack://@freecodecamp/client/./src/components/Progress/progress.tsx","webpack://@freecodecamp/client/./src/components/Progress/progress-bar.tsx","webpack://@freecodecamp/client/./src/components/layouts/learn.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-title.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/completion-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/help-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/hotkeys.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/prism-formatted.tsx"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX,\n    currentT,\n    i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\nfunction LinearEasing(x) {\n  return x;\n}\nmodule.exports = function bezier(mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return function BezierEasing(x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};","import React, { useState, useEffect, useRef, useMemo } from 'react';\n\nimport BezierEasing from 'bezier-easing';\nimport { ProgressBar } from './progress-bar';\n\ninterface ProgressInnerProps {\n  completedPercent: number;\n  title: string;\n  meta: string;\n}\n\nconst easing = BezierEasing(0.2, 0.5, 0.4, 1);\nconst intervalLength = 10;\nlet percent = 0;\n\nfunction useIsInViewport(ref: React.RefObject<HTMLDivElement>) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  const observer = useMemo(\n    () =>\n      new IntersectionObserver(([entry]) =>\n        setIsIntersecting(entry.isIntersecting)\n      ),\n    []\n  );\n\n  useEffect(() => {\n    ref.current && observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [ref, observer]);\n\n  return isIntersecting;\n}\nfunction ProgressInner({\n  completedPercent,\n  title,\n  meta\n}: ProgressInnerProps): JSX.Element {\n  const [shownPercent, setShownPercent] = useState(0);\n  const [lastShopwnPercent, setLastShownPercent] = useState(0);\n  const progressInnerWrap = useRef<HTMLDivElement>(null);\n  const isProgressInViewport = useIsInViewport(progressInnerWrap);\n\n  const animateProgressInner = (completedPercent: number) => {\n    if (completedPercent > 100) completedPercent = 100;\n    if (completedPercent < 0) completedPercent = 0;\n\n    const transitionLength = completedPercent * 10 + 750;\n    const intervalsToFinish = transitionLength / intervalLength;\n    const amountPerInterval = completedPercent / intervalsToFinish;\n\n    const myInterval = window.setInterval(() => {\n      percent += amountPerInterval;\n\n      if (percent > completedPercent) percent = completedPercent;\n\n      setShownPercent(\n        Math.round(completedPercent * easing(percent / completedPercent))\n      );\n      if (percent >= completedPercent) {\n        percent = 0;\n        clearInterval(myInterval);\n      }\n    }, intervalLength);\n  };\n  useEffect(() => {\n    if (lastShopwnPercent !== completedPercent && isProgressInViewport) {\n      setLastShownPercent(completedPercent);\n      animateProgressInner(completedPercent);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isProgressInViewport]);\n\n  return (\n    <>\n      <div className='completion-block-name'>{title}</div>\n      <div\n        className='progress-bar-wrap'\n        aria-hidden='true'\n        ref={progressInnerWrap}\n      >\n        <ProgressBar now={shownPercent} />\n      </div>\n      <div className='completion-block-meta'>{meta}</div>\n    </>\n  );\n}\n\nProgressInner.displayName = 'ProgressInner';\n\nexport default ProgressInner;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport {\n  challengeMetaSelector,\n  currentBlockIdsSelector,\n  completedChallengesInBlockSelector,\n  completedPercentageSelector\n} from '../../templates/Challenges/redux/selectors';\nimport { liveCerts } from '../../../config/cert-and-project-map';\nimport ProgressInner from './progress-inner';\n\nconst mapStateToProps = createSelector(\n  currentBlockIdsSelector,\n  challengeMetaSelector,\n  completedChallengesInBlockSelector,\n  completedPercentageSelector,\n  (\n    currentBlockIds: string[],\n    {\n      id,\n      block,\n      superBlock\n    }: {\n      id: string;\n      block: string;\n      superBlock: string;\n    },\n    completedChallengesInBlock: number,\n    completedPercent: number\n  ) => ({\n    currentBlockIds,\n    id,\n    block,\n    superBlock,\n    completedChallengesInBlock,\n    completedPercent\n  })\n);\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\ninterface ProgressProps extends StateProps {\n  t: TFunction;\n}\nfunction Progress({\n  currentBlockIds,\n  block,\n  id,\n  superBlock,\n  completedChallengesInBlock,\n  completedPercent,\n  t\n}: ProgressProps): JSX.Element {\n  const blockTitle = t(`intro:${superBlock}.blocks.${block}.title`);\n  // Always false for legacy full stack, since it has no projects.\n  const isCertificationProject = liveCerts.some(cert =>\n    cert.projects?.some((project: { id: string }) => project.id === id)\n  );\n\n  const totalChallengesInBlock = currentBlockIds?.length ?? 0;\n  const meta =\n    isCertificationProject && totalChallengesInBlock > 0\n      ? t('learn.project-complete', {\n          completedChallengesInBlock,\n          totalChallengesInBlock\n        })\n      : t('learn.percent-complete', {\n          percent: completedPercent\n        });\n  return (\n    <div\n      className='progress-bar-container'\n      data-playwright-test-label='progress-bar-container'\n    >\n      <ProgressInner\n        title={blockTitle}\n        meta={meta}\n        completedPercent={completedPercent}\n      />\n    </div>\n  );\n}\n\nProgress.displayName = 'Progress';\n\nexport default connect(mapStateToProps)(withTranslation()(Progress));\n","import React from 'react';\n\nexport function ProgressBar({ now }: { now: number }) {\n  return (\n    <>\n      <div className='progress-bar-background'></div>\n      <div\n        className='progress-bar-percent'\n        data-testid='fcc-progress-bar-percent'\n        style={{ width: `${now}%` }}\n      ></div>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Loader } from '../../components/helpers';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport { userFetchStateSelector } from '../../redux/selectors';\nimport DonateModal from '../Donation/donation-modal';\n\nimport './prism.css';\nimport './prism-night.css';\nimport 'react-reflex/styles.css';\nimport './learn.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};\n\nconst mapStateToProps = createSelector(\n  userFetchStateSelector,\n  (fetchState: FetchState) => ({\n    fetchState\n  })\n);\n\nconst mapDispatchToProps = {\n  tryToShowDonationModal\n};\n\ntype LearnLayoutProps = {\n  fetchState: FetchState;\n  tryToShowDonationModal: () => void;\n  children?: React.ReactNode;\n  hasEditableBoundaries?: boolean;\n};\n\nfunction LearnLayout({\n  fetchState,\n  tryToShowDonationModal,\n  children,\n  hasEditableBoundaries\n}: LearnLayoutProps): JSX.Element {\n  useEffect(() => {\n    tryToShowDonationModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      const metaTag = document.querySelector(`meta[name=\"robots\"]`);\n      if (metaTag) {\n        metaTag.remove();\n      }\n    };\n  }, []);\n\n  if (fetchState.pending && !fetchState.complete) {\n    return <Loader fullScreen={true} />;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <meta content='noindex' name='robots' />\n      </Helmet>\n      <main\n        id='learn-app-wrapper'\n        {...(hasEditableBoundaries && { 'data-has-editable-boundaries': true })}\n      >\n        {children}\n      </main>\n      <DonateModal />\n    </>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LearnLayout);\n","import i18next from 'i18next';\nimport React from 'react';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { Link } from '../../../components/helpers/index';\n\nimport './challenge-title.css';\n\ninterface ChallengeTitleProps {\n  children: string;\n  isCompleted: boolean;\n  translationPending: boolean;\n}\n\nfunction ChallengeTitle({\n  children,\n  isCompleted,\n  translationPending\n}: ChallengeTitleProps): JSX.Element {\n  return (\n    <div className='challenge-title-wrap'>\n      {translationPending && (\n        <>\n          <Link\n            className='title-translation-cta'\n            to={i18next.t('links:help-translate-link-url')}\n          >\n            {i18next.t('misc.translation-pending')}\n          </Link>\n        </>\n      )}\n      <div className='challenge-title'>\n        <h1 id='content-start' data-playwright-test-label='challenge-title'>\n          {children}\n        </h1>\n        {isCompleted && <GreenPass />}\n      </div>\n    </div>\n  );\n}\n\nChallengeTitle.displayName = 'ChallengeTitle';\n\nexport default ChallengeTitle;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport React, { Component } from 'react';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal } from '@freecodecamp/ui';\n\nimport Login from '../../../components/Header/components/login';\nimport {\n  isSignedInSelector,\n  allChallengesInfoSelector\n} from '../../../redux/selectors';\nimport { AllChallengesInfo, ChallengeFiles } from '../../../redux/prop-types';\nimport { closeModal, submitChallenge } from '../redux/actions';\nimport {\n  completedChallengesIdsSelector,\n  isCompletionModalOpenSelector,\n  successMessageSelector,\n  challengeFilesSelector,\n  challengeMetaSelector,\n  isSubmittingSelector\n} from '../redux/selectors';\nimport Progress from '../../../components/Progress';\nimport GreenPass from '../../../assets/icons/green-pass';\nimport { Spacer } from '../../../components/helpers';\nimport { MAX_MOBILE_WIDTH } from '../../../../config/misc';\nimport './completion-modal.css';\nimport callGA from '../../../analytics/call-ga';\n\nconst mapStateToProps = createSelector(\n  challengeFilesSelector,\n  challengeMetaSelector,\n  completedChallengesIdsSelector,\n  isCompletionModalOpenSelector,\n  isSignedInSelector,\n  allChallengesInfoSelector,\n  successMessageSelector,\n  isSubmittingSelector,\n  (\n    challengeFiles: ChallengeFiles,\n    { dashedName, id }: { dashedName: string; id: string },\n    completedChallengesIds: string[],\n    isOpen: boolean,\n    isSignedIn: boolean,\n    allChallengesInfo: AllChallengesInfo,\n    message: string,\n    isSubmitting: boolean\n  ) => ({\n    challengeFiles,\n    id,\n    dashedName,\n    completedChallengesIds,\n    isOpen,\n    isSignedIn,\n    allChallengesInfo,\n    message,\n    isSubmitting\n  })\n);\n\nconst mapDispatchToProps = {\n  close: () => closeModal('completion'),\n  submitChallenge\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\ninterface CompletionModalsProps extends StateProps {\n  close: () => void;\n  submitChallenge: () => void;\n  t: TFunction;\n}\n\ninterface CompletionModalState {\n  downloadURL: null | string;\n}\n\nclass CompletionModal extends Component<\n  CompletionModalsProps,\n  CompletionModalState\n> {\n  static displayName: string;\n  constructor(props: CompletionModalsProps) {\n    super(props);\n    this.handleKeypress = this.handleKeypress.bind(this);\n    this.state = {\n      downloadURL: null\n    };\n  }\n\n  static getDerivedStateFromProps(\n    props: Readonly<CompletionModalsProps>,\n    state: CompletionModalState\n  ): CompletionModalState {\n    const { challengeFiles, isOpen } = props;\n    if (!isOpen) {\n      return {\n        downloadURL: null\n      };\n    }\n    const { downloadURL } = state;\n    if (downloadURL) {\n      URL.revokeObjectURL(downloadURL);\n    }\n    let newURL = null;\n    if (challengeFiles?.length) {\n      const filesForDownload = challengeFiles\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .reduce<string>((allFiles, currentFile: any) => {\n          const beforeText = `** start of ${currentFile.path} **\\n\\n`;\n          const afterText = `\\n\\n** end of ${currentFile.path} **\\n\\n`;\n          allFiles +=\n            challengeFiles.length > 1\n              ? `${beforeText}${currentFile.contents}${afterText}`\n              : currentFile.contents;\n          return allFiles;\n        }, '');\n      const blob = new Blob([filesForDownload], {\n        type: 'text/json'\n      });\n      newURL = URL.createObjectURL(blob);\n    }\n    return {\n      downloadURL: newURL\n    };\n  }\n\n  handleKeypress(e: React.KeyboardEvent): void {\n    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n      e.preventDefault();\n      // Since Hotkeys also listens to Ctrl + Enter we have to stop this event\n      // getting to it.\n      e.stopPropagation();\n      this.props.submitChallenge();\n    }\n  }\n\n  componentWillUnmount(): void {\n    if (this.state.downloadURL) {\n      URL.revokeObjectURL(this.state.downloadURL);\n    }\n    this.props.close();\n  }\n\n  componentDidUpdate(prevProps: CompletionModalsProps): void {\n    const { isOpen: prevIsOpen } = prevProps;\n    const { isOpen } = this.props;\n    if (!prevIsOpen && isOpen) {\n      callGA({ event: 'pageview', pagePath: '/completion-modal' });\n    }\n  }\n\n  render(): JSX.Element {\n    const {\n      close,\n      isOpen,\n      isSignedIn,\n      isSubmitting,\n      message,\n      t,\n      dashedName,\n      submitChallenge\n    } = this.props;\n\n    const isMacOS = navigator.userAgent.includes('Mac OS');\n\n    const isDesktop = window.innerWidth > MAX_MOBILE_WIDTH;\n\n    let buttonText;\n    if (isDesktop) {\n      if (isMacOS) {\n        buttonText = isSignedIn\n          ? t('buttons.submit-and-go-3')\n          : t('buttons.go-to-next-3');\n      } else {\n        buttonText = isSignedIn\n          ? t('buttons.submit-and-go-2')\n          : t('buttons.go-to-next-2');\n      }\n    } else {\n      buttonText = isSignedIn\n        ? t('buttons.submit-and-go')\n        : t('buttons.go-to-next');\n    }\n\n    return (\n      <Modal\n        onClose={close}\n        open={!!isOpen}\n        size='large'\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        onKeyDown={isOpen ? this.handleKeypress : undefined}\n      >\n        <Modal.Header closeButtonClassNames='close'>{message}</Modal.Header>\n        <Modal.Body>\n          <GreenPass\n            className='completion-success-icon'\n            data-testid='fcc-completion-success-icon'\n            data-playwright-test-label='completion-success-icon'\n          />\n          <div className='completion-block-details'>\n            <Progress />\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          {isSignedIn ? null : (\n            <div className='completion-modal-login-btn'>\n              <Login block={true}>{t('learn.sign-in-save')}</Login>\n              <Spacer size='xxSmall' />\n            </div>\n          )}\n          <Button\n            block={true}\n            size='large'\n            variant='primary'\n            disabled={isSubmitting}\n            data-cy='submit-challenge'\n            onClick={() => submitChallenge()}\n          >\n            {buttonText}\n          </Button>\n          <Spacer size='xxSmall' />\n          {this.state.downloadURL ? (\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              download={`${dashedName}.txt`}\n              href={this.state.downloadURL}\n            >\n              {t('learn.download-solution')}\n            </Button>\n          ) : null}\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nCompletionModal.displayName = 'CompletionModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(CompletionModal));\n","import React, { useMemo, useState, useRef, useEffect } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { Button, FormControl, Modal } from '@freecodecamp/ui';\n\nimport envData from '../../../../config/env.json';\nimport { Spacer } from '../../../components/helpers';\nimport { createQuestion, closeModal } from '../redux/actions';\nimport { isHelpModalOpenSelector } from '../redux/selectors';\n\nimport './help-modal.css';\nimport callGA from '../../../analytics/call-ga';\n\ninterface HelpModalProps {\n  closeHelpModal: () => void;\n  createQuestion: (description: string) => void;\n  isOpen?: boolean;\n  challengeTitle: string;\n  challengeBlock: string;\n}\n\nconst { forumLocation } = envData;\nconst DESCRIPTION_MIN_CHARS = 50;\nconst DESCRIPTION_MAX_CHARS = 500;\nconst RSA = forumLocation + '/t/19514';\n\nconst mapStateToProps = (state: unknown) => ({\n  isOpen: isHelpModalOpenSelector(state) as boolean\n});\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    { createQuestion, closeHelpModal: () => closeModal('help') },\n    dispatch\n  );\n\nexport const generateSearchLink = (title: string, block: string) => {\n  const blockWithoutHyphens = block.replace(/-/g, ' ');\n\n  const query = /^(step|task)\\s*\\d*$/i.test(title)\n    ? encodeURIComponent(`${blockWithoutHyphens} - ${title}`)\n    : encodeURIComponent(title);\n  const search = `${forumLocation}/search?q=${query}`;\n  return search;\n};\n\ninterface CheckboxProps {\n  name: string;\n  i18nKey: string;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  value: boolean;\n  href: string;\n  label: string;\n}\n\nfunction Checkbox({\n  name,\n  i18nKey,\n  onChange,\n  value,\n  href,\n  label\n}: CheckboxProps) {\n  const { t } = useTranslation();\n\n  return (\n    <div className='checkbox-container'>\n      <input\n        id={name}\n        name={name}\n        type='checkbox'\n        onChange={onChange}\n        checked={value}\n        required\n        // Instead of reusing the `i18nKey`, use a plain text version for label\n        // as input label should not contain interactive elements\n        aria-label={t(label)}\n      />\n\n      <span>\n        <Trans i18nKey={i18nKey}>\n          <a href={href} rel='noopener noreferrer' target='_blank'>\n            placeholder\n            <span className='sr-only'>{t('aria.opens-new-window')}</span>\n          </a>\n        </Trans>\n      </span>\n    </div>\n  );\n}\n\nfunction HelpModal({\n  closeHelpModal,\n  createQuestion,\n  isOpen,\n  challengeBlock,\n  challengeTitle\n}: HelpModalProps): JSX.Element {\n  const { t } = useTranslation();\n  const [showHelpForm, setShowHelpForm] = useState(false);\n  const [description, setDescription] = useState('');\n  const [readSearchCheckbox, setReadSearchCheckbox] = useState(false);\n  const [similarQuestionsCheckbox, setSimilarQuestionsCheckbox] =\n    useState(false);\n\n  const formRef = useRef<HTMLFormElement>(null);\n\n  useEffect(() => {\n    if (showHelpForm) {\n      formRef.current?.querySelector('input')?.focus();\n    }\n  }, [showHelpForm]);\n\n  const canSubmitForm = useMemo(() => {\n    return (\n      description.length >= DESCRIPTION_MIN_CHARS &&\n      readSearchCheckbox &&\n      similarQuestionsCheckbox\n    );\n  }, [description, readSearchCheckbox, similarQuestionsCheckbox]);\n\n  const resetFormValues = () => {\n    setDescription('');\n    setReadSearchCheckbox(false);\n    setSimilarQuestionsCheckbox(false);\n  };\n\n  const handleClose = () => {\n    closeHelpModal();\n    setShowHelpForm(false);\n    resetFormValues();\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!canSubmitForm) {\n      return;\n    }\n\n    setShowHelpForm(false);\n    resetFormValues();\n    createQuestion(description);\n    closeHelpModal();\n  };\n\n  if (isOpen) {\n    callGA({ event: 'pageview', pagePath: '/help-modal' });\n  }\n  return (\n    <Modal onClose={handleClose} open={!!isOpen}>\n      <Modal.Header closeButtonClassNames='close'>\n        {t('buttons.ask-for-help')}\n      </Modal.Header>\n      <Modal.Body>\n        {showHelpForm ? (\n          <form onSubmit={handleSubmit} ref={formRef}>\n            <fieldset>\n              <legend className='help-form-legend'>\n                {t('learn.must-confirm-statements')}\n              </legend>\n\n              <Checkbox\n                name='read-search-ask-checkbox'\n                i18nKey='learn.read-search-ask-checkbox'\n                label='aria.rsa-checkbox'\n                onChange={event => setReadSearchCheckbox(event.target.checked)}\n                value={readSearchCheckbox}\n                href={RSA}\n              />\n\n              <Spacer size='small' />\n\n              <Checkbox\n                name='similar-questions-checkbox'\n                i18nKey='learn.similar-questions-checkbox'\n                label='aria.similar-questions-checkbox'\n                onChange={event =>\n                  setSimilarQuestionsCheckbox(event.target.checked)\n                }\n                value={similarQuestionsCheckbox}\n                href={generateSearchLink(challengeTitle, challengeBlock)}\n              />\n            </fieldset>\n\n            <Spacer size='xSmall' />\n\n            <label htmlFor='help-modal-form-description'>\n              {t('forum-help.whats-happening')}\n              <span className='sr-only'>{t('learn.min-50-max-500')}</span>\n            </label>\n\n            <FormControl\n              id='help-modal-form-description'\n              name='description'\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setDescription(event.target.value);\n              }}\n              componentClass='textarea'\n              rows={5}\n              value={description}\n              placeholder={t('forum-help.describe')}\n              minLength={DESCRIPTION_MIN_CHARS}\n              maxLength={DESCRIPTION_MAX_CHARS}\n              required\n            />\n\n            <Spacer size='xSmall' />\n\n            {description.length < DESCRIPTION_MIN_CHARS ? (\n              <p>\n                {t('learn.minimum-characters', {\n                  characters: DESCRIPTION_MIN_CHARS - description.length\n                })}\n              </p>\n            ) : (\n              <p>\n                {t('learn.characters-left', {\n                  characters: DESCRIPTION_MAX_CHARS - description.length\n                })}\n              </p>\n            )}\n\n            <Spacer size='xxSmall' />\n\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              type='submit'\n              disabled={!canSubmitForm}\n            >\n              {t('buttons.submit')}\n            </Button>\n            <Spacer size='xxSmall' />\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              onClick={handleClose}\n            >\n              {t('buttons.cancel')}\n            </Button>\n          </form>\n        ) : (\n          <>\n            <div className='alert'>\n              <div className='help-text-warning'>\n                <p>\n                  <Trans i18nKey='learn.tried-rsa'>\n                    <a href={RSA} rel='noopener noreferrer' target='_blank'>\n                      placeholder\n                    </a>\n                  </Trans>\n                </p>\n                <p>\n                  <Trans i18nKey='learn.rsa-forum'>\n                    <a\n                      href={generateSearchLink(challengeTitle, challengeBlock)}\n                      rel='noopener noreferrer'\n                      target='_blank'\n                    >\n                      placeholder\n                    </a>\n                    placeholder\n                  </Trans>\n                </p>\n              </div>\n            </div>\n\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              onClick={() => setShowHelpForm(true)}\n            >\n              {t('buttons.create-post')}\n            </Button>\n            <Spacer size='xxSmall' />\n            <Button\n              block={true}\n              size='large'\n              variant='primary'\n              onClick={closeHelpModal}\n            >\n              {t('buttons.cancel')}\n            </Button>\n          </>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nHelpModal.displayName = 'HelpModal';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HelpModal);\n","import { navigate } from 'gatsby';\nimport React from 'react';\nimport { HotKeys, GlobalHotKeys } from 'react-hotkeys';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport type {\n  ChallengeFiles,\n  Test,\n  User,\n  ChallengeMeta\n} from '../../../redux/prop-types';\n\nimport { userSelector } from '../../../redux/selectors';\nimport {\n  setEditorFocusability,\n  submitChallenge,\n  openModal,\n  setIsAdvancing\n} from '../redux/actions';\nimport {\n  canFocusEditorSelector,\n  challengeFilesSelector,\n  challengeTestsSelector,\n  isHelpModalOpenSelector,\n  isProjectPreviewModalOpenSelector,\n  isResetModalOpenSelector,\n  isShortcutsModalOpenSelector\n} from '../redux/selectors';\nimport './hotkeys.css';\nimport { isProjectBased } from '../../../utils/curriculum-layout';\nimport type { EditorProps } from '../classic/editor';\n\nconst mapStateToProps = createSelector(\n  isHelpModalOpenSelector,\n  isResetModalOpenSelector,\n  isShortcutsModalOpenSelector,\n  isProjectPreviewModalOpenSelector,\n  canFocusEditorSelector,\n  challengeFilesSelector,\n  challengeTestsSelector,\n  userSelector,\n  (\n    isHelpModalOpen: boolean,\n    isResetModalOpen: boolean,\n    isShortcutsModalOpen: boolean,\n    isProjectPreviewModalOpen: boolean,\n    canFocusEditor: boolean,\n    challengeFiles: ChallengeFiles,\n    tests: Test[],\n    user: User\n  ) => ({\n    isHelpModalOpen,\n    isResetModalOpen,\n    isShortcutsModalOpen,\n    isProjectPreviewModalOpen,\n    canFocusEditor,\n    challengeFiles,\n    tests,\n    user\n  })\n);\n\nconst mapDispatchToProps = {\n  setEditorFocusability,\n  submitChallenge,\n  openShortcutsModal: () => openModal('shortcuts'),\n  setIsAdvancing\n};\n\nexport type HotkeysProps = Pick<\n  ChallengeMeta,\n  'nextChallengePath' | 'prevChallengePath'\n> &\n  Partial<\n    Pick<\n      EditorProps,\n      'usesMultifileEditor' | 'editorRef' | 'challengeType' | 'executeChallenge'\n    >\n  > &\n  Pick<\n    EditorProps,\n    | 'containerRef'\n    | 'tests'\n    | 'challengeFiles'\n    | 'submitChallenge'\n    | 'setEditorFocusability'\n  > & {\n    isHelpModalOpen?: boolean;\n    isResetModalOpen?: boolean;\n    isShortcutsModalOpen?: boolean;\n    isProjectPreviewModalOpen?: boolean;\n    canFocusEditor: boolean;\n    children: React.ReactElement;\n    instructionsPanelRef?: React.RefObject<HTMLElement>;\n    setEditorFocusability: (arg0: boolean) => void;\n    setIsAdvancing: (arg0: boolean) => void;\n    openShortcutsModal: () => void;\n    playScene?: () => void;\n    user: User;\n  };\n\nfunction Hotkeys({\n  canFocusEditor,\n  challengeType,\n  children,\n  instructionsPanelRef,\n  editorRef,\n  executeChallenge,\n  containerRef,\n  nextChallengePath,\n  prevChallengePath,\n  setEditorFocusability,\n  setIsAdvancing,\n  submitChallenge,\n  tests,\n  usesMultifileEditor,\n  openShortcutsModal,\n  playScene,\n  user: { keyboardShortcuts },\n  isHelpModalOpen,\n  isResetModalOpen,\n  isShortcutsModalOpen,\n  isProjectPreviewModalOpen\n}: HotkeysProps): JSX.Element {\n  const isModalOpen = [\n    isHelpModalOpen,\n    isResetModalOpen,\n    isShortcutsModalOpen,\n    isProjectPreviewModalOpen\n  ].some(Boolean);\n\n  const keyMap = {\n    // The Modal component needs to listen to the 'Escape' keypress event\n    // in order to close itself when the key is press.\n    // Therefore, we don't want HotKeys to hijack the 'escape' event when a modal is open.\n    navigationMode: isModalOpen ? '' : 'escape',\n    executeChallenge: ['ctrl+enter', 'command+enter'],\n    focusEditor: 'e',\n    focusInstructionsPanel: 'r',\n    navigatePrev: ['p'],\n    navigateNext: ['n'],\n    showShortcuts: 'shift+/',\n    playScene: ['ctrl+space']\n  };\n\n  const handlers = {\n    executeChallenge: (keyEvent?: KeyboardEvent) => {\n      // the 'enter' part of 'ctrl+enter' stops HotKeys from listening, so it\n      // needs to be prevented.\n      // TODO: 'enter' on its own also disables HotKeys, but default behaviour\n      // should not be prevented in that case.\n      keyEvent?.preventDefault();\n\n      if (!executeChallenge) return;\n\n      const testsArePassing = tests.every(test => test.pass && !test.err);\n\n      if (\n        usesMultifileEditor &&\n        typeof challengeType == 'number' &&\n        !isProjectBased(challengeType)\n      ) {\n        if (testsArePassing) {\n          submitChallenge();\n        } else {\n          executeChallenge();\n        }\n      } else {\n        executeChallenge({ showCompletionModal: true });\n      }\n    },\n    ...(keyboardShortcuts\n      ? {\n          showShortcuts: (keyEvent?: KeyboardEvent) => {\n            if (keyEvent?.key === '?') {\n              openShortcutsModal();\n            }\n          },\n          focusEditor: (keyEvent?: KeyboardEvent) => {\n            keyEvent?.preventDefault();\n            if (editorRef && editorRef.current) {\n              editorRef.current.focus();\n            }\n          },\n          focusInstructionsPanel: () => {\n            if (instructionsPanelRef && instructionsPanelRef.current) {\n              instructionsPanelRef.current.focus();\n            }\n          },\n          navigationMode: () => setEditorFocusability(false),\n          navigatePrev: () => {\n            if (!canFocusEditor) {\n              if (prevChallengePath) {\n                setIsAdvancing(true);\n                void navigate(prevChallengePath);\n              } else {\n                void navigate('/learn');\n              }\n            }\n          },\n          navigateNext: () => {\n            if (!canFocusEditor) {\n              if (nextChallengePath) {\n                setIsAdvancing(true);\n                void navigate(nextChallengePath);\n              } else {\n                void navigate('/learn');\n              }\n            }\n          },\n          playScene: () => {\n            if (!playScene) return;\n            playScene();\n          }\n        }\n      : {})\n  };\n  // GlobalHotKeys is always mounted and tracks all keypresses. Without it,\n  // keyup events can be missed and react-hotkeys assumes that that key is still\n  // being pressed.\n  // allowChanges is necessary if the handlers depend on props (in this case\n  // canFocusEditor)\n  return (\n    <>\n      <HotKeys\n        id='editor-layout'\n        allowChanges={true}\n        handlers={handlers}\n        innerRef={containerRef}\n        keyMap={keyMap}\n      >\n        {children}\n        <GlobalHotKeys />\n      </HotKeys>\n    </>\n  );\n}\n\nHotkeys.displayName = 'Hotkeys';\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Hotkeys);\n","import Prism from 'prismjs';\nimport React, { useRef, useEffect } from 'react';\nimport { enhancePrismAccessibility } from '../utils';\n\ninterface PrismFormattedProps {\n  className?: string;\n  text: string;\n  useSpan?: boolean;\n  noAria?: boolean;\n}\n\nfunction PrismFormatted({\n  className,\n  text,\n  useSpan,\n  noAria\n}: PrismFormattedProps): JSX.Element {\n  const instructionsRef = useRef<HTMLDivElement>(null);\n  const ElementName = useSpan ? 'span' : 'div';\n\n  if (noAria) {\n    text = text.replace(/<pre( [^>]+)?>/, '<pre$1 data-no-aria=\"true\">');\n  }\n\n  useEffect(() => {\n    // Just in case 'current' has not been created, though it should have been.\n    if (instructionsRef.current) {\n      Prism.hooks.add('complete', enhancePrismAccessibility);\n      Prism.highlightAllUnder(instructionsRef.current);\n    }\n  }, []);\n\n  return (\n    <ElementName\n      className={className}\n      dangerouslySetInnerHTML={{ __html: text }}\n      ref={instructionsRef}\n    />\n  );\n}\n\nPrismFormatted.displayName = 'PrismFormatted';\n\nexport default PrismFormatted;\n"],"names":["kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","LinearEasing","x","module","exports","mX1","mY1","mX2","mY2","Error","sampleValues","Array","i","getTForX","aX","intervalStart","currentSample","kSplineTableSize","guessForT","initialSlope","aGuessT","currentSlope","newtonRaphsonIterate","aA","aB","currentX","currentT","Math","abs","binarySubdivide","easing","BezierEasing","percent","ProgressInner","_ref2","completedPercent","title","meta","shownPercent","setShownPercent","useState","lastShopwnPercent","setLastShownPercent","progressInnerWrap","useRef","isProgressInViewport","ref","isIntersecting","setIsIntersecting","observer","useMemo","IntersectionObserver","_ref","entry","useEffect","current","observe","disconnect","useIsInViewport","amountPerInterval","myInterval","window","setInterval","round","clearInterval","animateProgressInner","React","className","ProgressBar","now","displayName","mapStateToProps","createSelector","currentBlockIdsSelector","challengeMetaSelector","completedChallengesInBlockSelector","completedPercentageSelector","currentBlockIds","completedChallengesInBlock","id","block","superBlock","Progress","_currentBlockIds$leng","t","blockTitle","isCertificationProject","liveCerts","some","cert","_cert$projects","projects","project","totalChallengesInBlock","length","connect","withTranslation","style","width","userFetchStateSelector","fetchState","mapDispatchToProps","tryToShowDonationModal","children","hasEditableBoundaries","metaTag","document","querySelector","remove","pending","complete","Loader","fullScreen","Helmet","content","name","Object","assign","DonateModal","ChallengeTitle","isCompleted","translationPending","Link","to","i18next","GreenPass","challengeFilesSelector","completedChallengesIdsSelector","isCompletionModalOpenSelector","isSignedInSelector","allChallengesInfoSelector","successMessageSelector","isSubmittingSelector","challengeFiles","completedChallengesIds","isOpen","isSignedIn","allChallengesInfo","message","isSubmitting","dashedName","close","closeModal","submitChallenge","CompletionModal","Component","constructor","props","super","this","handleKeypress","bind","state","downloadURL","getDerivedStateFromProps","URL","revokeObjectURL","newURL","filesForDownload","reduce","allFiles","currentFile","beforeText","path","afterText","contents","blob","Blob","type","createObjectURL","e","key","ctrlKey","metaKey","preventDefault","stopPropagation","componentWillUnmount","componentDidUpdate","prevProps","prevIsOpen","callGA","event","pagePath","render","isMacOS","navigator","userAgent","includes","buttonText","innerWidth","MAX_MOBILE_WIDTH","Modal","onClose","open","size","onKeyDown","undefined","Header","closeButtonClassNames","Body","Footer","Login","Spacer","Button","variant","disabled","onClick","download","href","forumLocation","envData","RSA","generateSearchLink","blockWithoutHyphens","replace","query","test","encodeURIComponent","Checkbox","i18nKey","onChange","value","label","useTranslation","checked","required","Trans","rel","target","HelpModal","closeHelpModal","createQuestion","challengeBlock","challengeTitle","showHelpForm","setShowHelpForm","description","setDescription","readSearchCheckbox","setReadSearchCheckbox","similarQuestionsCheckbox","setSimilarQuestionsCheckbox","formRef","_formRef$current","_formRef$current$quer","focus","canSubmitForm","resetFormValues","handleClose","onSubmit","htmlFor","FormControl","componentClass","rows","placeholder","minLength","maxLength","characters","isHelpModalOpenSelector","dispatch","bindActionCreators","isResetModalOpenSelector","isShortcutsModalOpenSelector","isProjectPreviewModalOpenSelector","canFocusEditorSelector","challengeTestsSelector","userSelector","isHelpModalOpen","isResetModalOpen","isShortcutsModalOpen","isProjectPreviewModalOpen","canFocusEditor","tests","user","setEditorFocusability","openShortcutsModal","openModal","setIsAdvancing","Hotkeys","challengeType","instructionsPanelRef","editorRef","executeChallenge","containerRef","nextChallengePath","prevChallengePath","usesMultifileEditor","playScene","keyboardShortcuts","keyMap","navigationMode","Boolean","focusEditor","focusInstructionsPanel","navigatePrev","navigateNext","showShortcuts","handlers","keyEvent","testsArePassing","every","pass","err","isProjectBased","showCompletionModal","navigate","HotKeys","allowChanges","innerRef","GlobalHotKeys","PrismFormatted","text","useSpan","noAria","instructionsRef","ElementName","Prism","add","enhancePrismAccessibility","dangerouslySetInnerHTML","__html"],"sourceRoot":""}
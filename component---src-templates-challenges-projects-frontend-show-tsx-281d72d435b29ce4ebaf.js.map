{"version":3,"file":"component---src-templates-challenges-projects-frontend-show-tsx-281d72d435b29ce4ebaf.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-description.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/projects/frontend/show.tsx"],"sourcesContent":["import React from 'react';\n\nimport PrismFormatted from './prism-formatted';\nimport './challenge-description.css';\n\ntype Challenge = {\n  block?: string;\n  description?: string;\n  instructions?: string;\n  superBlock?: string;\n};\n\nfunction ChallengeDescription(challenge: Challenge): JSX.Element {\n  const sbClass = challenge.superBlock ? challenge.superBlock : '';\n  const bClass = challenge.block ? challenge.block : '';\n\n  return (\n    <div\n      className={`challenge-instructions ${sbClass} ${bClass}`}\n      data-playwright-test-label='challenge-description'\n    >\n      {challenge.description && <PrismFormatted text={challenge.description} />}\n      {challenge.instructions && (\n        <>\n          <hr />\n          <PrismFormatted text={challenge.instructions} />\n        </>\n      )}\n      <hr />\n    </div>\n  );\n}\n\nChallengeDescription.displayName = 'ChallengeDescription';\n\nexport default ChallengeDescription;\n","import { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row } from '@freecodecamp/ui';\n\nimport Spacer from '../../../../components/helpers/spacer';\nimport LearnLayout from '../../../../components/layouts/learn';\nimport {\n  ChallengeNode,\n  ChallengeMeta,\n  Test\n} from '../../../../redux/prop-types';\nimport ChallengeDescription from '../../components/challenge-description';\nimport Hotkeys from '../../components/hotkeys';\nimport ChallengeTitle from '../../components/challenge-title';\nimport CompletionModal from '../../components/completion-modal';\nimport HelpModal from '../../components/help-modal';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  initTests\n} from '../../redux/actions';\nimport { isChallengeCompletedSelector } from '../../redux/selectors';\nimport { getGuideUrl } from '../../utils';\nimport SolutionForm from '../solution-form';\nimport ProjectToolPanel from '../tool-panel';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion')\n    },\n    dispatch\n  );\n\n// Types\ninterface ProjectProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  openCompletionModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n  updateSolutionFormValues: () => void;\n}\n\n// Component\nclass Project extends Component<ProjectProps> {\n  static displayName: string;\n  private container: React.RefObject<HTMLElement> = React.createRef();\n\n  constructor(props: ProjectProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = this.props;\n    initTests(tests);\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n    this.container.current?.focus();\n  }\n\n  componentDidUpdate(prevProps: ProjectProps): void {\n    const {\n      data: {\n        challengeNode: {\n          challenge: { title: prevTitle }\n        }\n      }\n    } = prevProps;\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { title: currentTitle, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    if (prevTitle !== currentTitle) {\n      updateChallengeMeta({\n        ...challengeMeta,\n        title: currentTitle,\n        challengeType,\n        helpCategory\n      });\n      challengeMounted(challengeMeta.id);\n    }\n  }\n\n  handleSubmit({\n    showCompletionModal\n  }: {\n    showCompletionModal: boolean;\n  }): void {\n    if (showCompletionModal) {\n      this.props.openCompletionModal();\n    }\n  }\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            challengeType,\n            fields: { blockName },\n            forumTopicId,\n            title,\n            description,\n            instructions,\n            superBlock,\n            block,\n            translationPending\n          }\n        }\n      },\n      isChallengeCompleted,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      t,\n      updateSolutionFormValues\n    } = this.props;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )} - ${title}`;\n\n    return (\n      <Hotkeys\n        containerRef={this.container}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet\n            title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n          />\n          <Container>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer size='medium' />\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <ChallengeDescription\n                  description={description}\n                  instructions={instructions}\n                />\n                <SolutionForm\n                  challengeType={challengeType}\n                  description={description}\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  onSubmit={this.handleSubmit}\n                  updateSolutionForm={updateSolutionFormValues}\n                />\n                <ProjectToolPanel\n                  guideUrl={getGuideUrl({ forumTopicId, title })}\n                />\n                <br />\n                <Spacer size='medium' />\n              </Col>\n              <CompletionModal />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Container>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nProject.displayName = 'Project';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(Project));\n\nexport const query = graphql`\n  query ProjectChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        forumTopicId\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        superBlock\n        block\n        translationPending\n        fields {\n          blockName\n          slug\n          tests {\n            text\n            testString\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["ChallengeDescription","challenge","sbClass","superBlock","bClass","block","React","className","description","PrismFormatted","text","instructions","displayName","mapStateToProps","createSelector","isChallengeCompletedSelector","isChallengeCompleted","Project","Component","constructor","props","super","container","this","handleSubmit","bind","componentDidMount","_this$container$curre","challengeMounted","data","challengeNode","fields","tests","title","challengeType","helpCategory","pageContext","challengeMeta","initTests","updateChallengeMeta","id","current","focus","componentDidUpdate","prevProps","prevTitle","currentTitle","_ref","showCompletionModal","openCompletionModal","render","blockName","forumTopicId","translationPending","nextChallengePath","prevChallengePath","t","updateSolutionFormValues","blockNameTitle","Hotkeys","containerRef","LearnLayout","Helmet","Container","Row","Col","md","mdOffset","sm","smOffset","xs","Spacer","size","ChallengeTitle","isCompleted","SolutionForm","onSubmit","updateSolutionForm","ProjectToolPanel","guideUrl","getGuideUrl","CompletionModal","HelpModal","challengeTitle","challengeBlock","connect","dispatch","bindActionCreators","openModal","withTranslation"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-user-tsx-043051a24d2246d72143.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/components/create-redirect.ts","webpack://@freecodecamp/client/./src/components/redirect-home.ts","webpack://@freecodecamp/client/./src/client-only-routes/show-user.tsx","webpack://@freecodecamp/client/./src/pages/user.tsx"],"sourcesContent":["import { navigate } from 'gatsby';\nimport type { RouteComponentProps } from '@reach/router';\n\nconst createRedirect =\n  (to = '/'): ((_props: RouteComponentProps) => JSX.Element | null) =>\n  () => {\n    if (typeof window !== 'undefined') {\n      void navigate(to);\n    }\n    return null;\n  };\n\nexport default createRedirect;\n","import { withPrefix } from 'gatsby';\nimport createRedirect from './create-redirect';\n\nexport default createRedirect(withPrefix('/'));\n","import React, { useState } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { Trans, withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport {\n  FormGroup,\n  FormControl,\n  ControlLabel,\n  Panel,\n  Col,\n  Row,\n  Button\n} from '@freecodecamp/ui';\n\nimport Login from '../components/Header/components/login';\nimport { Spacer, Loader, FullWidthRow } from '../components/helpers';\nimport { reportUser } from '../redux/actions';\nimport {\n  userFetchStateSelector,\n  isSignedInSelector,\n  userSelector\n} from '../redux/selectors';\nimport { UserFetchState } from '../redux/prop-types';\n\ninterface ShowUserProps {\n  email: string;\n  isSignedIn: boolean;\n  reportUser: (payload: {\n    username: string;\n    reportDescription: string;\n  }) => void;\n  t: TFunction;\n  userFetchState: UserFetchState;\n  username: string;\n}\n\nconst mapStateToProps = createSelector(\n  isSignedInSelector,\n  userFetchStateSelector,\n  userSelector,\n  (\n    isSignedIn,\n    userFetchState: UserFetchState,\n    { email }: { email: string }\n  ) => ({\n    isSignedIn,\n    userFetchState,\n    email\n  })\n);\n\nconst mapDispatchToProps = {\n  reportUser\n};\n\nfunction ShowUser({\n  email,\n  isSignedIn,\n  reportUser,\n  t,\n  userFetchState,\n  username\n}: ShowUserProps) {\n  const [textarea, setTextarea] = useState('');\n\n  function handleChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    setTextarea(e.target.value.slice());\n  }\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    reportUser({ username, reportDescription: textarea });\n  }\n\n  const { pending, complete, errored } = userFetchState;\n  if (pending && !complete) {\n    return <Loader fullScreen={true} />;\n  }\n\n  if ((complete || errored) && !isSignedIn) {\n    return (\n      <main>\n        <FullWidthRow>\n          <Spacer size='large' />\n          <Panel variant='primary' className='text-center'>\n            <Panel.Heading>\n              <Panel.Title>{t('report.sign-in')}</Panel.Title>\n            </Panel.Heading>\n            <Panel.Body className='text-center'>\n              <Spacer size='large' />\n              <Col md={6} mdOffset={3} sm={8} smOffset={2} xs={12}>\n                <Login block={true}>{t('buttons.click-here')}</Login>\n              </Col>\n              <Spacer size='exLarge' />\n            </Panel.Body>\n          </Panel>\n        </FullWidthRow>\n      </main>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('report.portfolio')} | freeCodeCamp.org</title>\n      </Helmet>\n      <Spacer size='large' />\n      <Row className='text-center overflow-fix'>\n        <Col sm={8} smOffset={2} xs={12}>\n          <h2>{t('report.portfolio-2', { username: username })}</h2>\n        </Col>\n      </Row>\n      <Row className='overflow-fix'>\n        <Col sm={6} smOffset={3} xs={12}>\n          <p>\n            <Trans i18nKey='report.notify-1'>\n              <strong>{{ email }}</strong>\n            </Trans>\n          </p>\n          <p>{t('report.notify-2')}</p>\n          <form onSubmit={handleSubmit}>\n            <FormGroup controlId='report-user-textarea'>\n              <ControlLabel>{t('report.what')}</ControlLabel>\n              <FormControl\n                componentClass='textarea'\n                onChange={handleChange}\n                placeholder={t('report.details')}\n                value={textarea}\n              />\n            </FormGroup>\n            <Button block={true} variant='primary' type='submit'>\n              {t('report.submit')}\n            </Button>\n            <Spacer size='medium' />\n          </form>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nShowUser.displayName = 'ShowUser';\n\nexport default withTranslation()(\n  connect(mapStateToProps, mapDispatchToProps)(ShowUser)\n);\n","import { Router } from '@reach/router';\nimport { withPrefix } from 'gatsby';\nimport React from 'react';\n\nimport ShowUser from '../client-only-routes/show-user';\nimport RedirectHome from '../components/redirect-home';\n\nfunction User(): JSX.Element {\n  return (\n    <Router>\n      {/* @ts-expect-error Adding path property breaks username typing */}\n      <ShowUser path={withPrefix('/user/:username/report-user')} />\n\n      <RedirectHome default />\n    </Router>\n  );\n}\n\nUser.displayName = 'User';\n\nexport default User;\n"],"names":["to","window","navigate","createRedirect","withPrefix","mapStateToProps","createSelector","isSignedInSelector","userFetchStateSelector","userSelector","isSignedIn","userFetchState","_ref","email","mapDispatchToProps","reportUser","ShowUser","_ref2","t","username","textarea","setTextarea","useState","pending","complete","errored","React","Loader","fullScreen","Helmet","Spacer","size","Row","className","Col","sm","smOffset","xs","Trans","i18nKey","onSubmit","e","preventDefault","reportDescription","FormGroup","controlId","ControlLabel","FormControl","componentClass","onChange","target","value","slice","placeholder","Button","block","variant","type","FullWidthRow","Panel","Heading","Title","Body","md","mdOffset","Login","displayName","withTranslation","connect","User","Router","path","RedirectHome","default"],"sourceRoot":""}
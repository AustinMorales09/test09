{"version":3,"file":"component---src-templates-challenges-ms-trophy-show-tsx-e0708595c4356c119d25.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-description.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-heading.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/ms-trophy/link-ms-user.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/ms-trophy/show.tsx","webpack://@freecodecamp/client/../shared/utils/validate.js"],"sourcesContent":["import React from 'react';\n\nimport PrismFormatted from './prism-formatted';\nimport './challenge-description.css';\n\ntype Challenge = {\n  block?: string;\n  description?: string;\n  instructions?: string;\n  superBlock?: string;\n};\n\nfunction ChallengeDescription(challenge: Challenge): JSX.Element {\n  const sbClass = challenge.superBlock ? challenge.superBlock : '';\n  const bClass = challenge.block ? challenge.block : '';\n\n  return (\n    <div\n      className={`challenge-instructions ${sbClass} ${bClass}`}\n      data-playwright-test-label='challenge-description'\n    >\n      {challenge.description && <PrismFormatted text={challenge.description} />}\n      {challenge.instructions && (\n        <>\n          <hr />\n          <PrismFormatted text={challenge.instructions} />\n        </>\n      )}\n      <hr />\n    </div>\n  );\n}\n\nChallengeDescription.displayName = 'ChallengeDescription';\n\nexport default ChallengeDescription;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GreenPass from '../../../assets/icons/green-pass';\n\nimport './challenge-heading.css';\n\ninterface ChallengeHeadingProps {\n  heading: string;\n  isCompleted?: boolean;\n}\n\nfunction ChallengeHeading({\n  heading,\n  isCompleted = false\n}: ChallengeHeadingProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <div className='challenge-heading-wrap'>\n      <h2 className='challenge-heading'>{t(heading)}</h2>\n      {isCompleted && <GreenPass />}\n    </div>\n  );\n}\n\nChallengeHeading.displayName = 'ChallengeHeading';\n\nexport default ChallengeHeading;\n","import React, { useState } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  HelpBlock,\n  Button\n} from '@freecodecamp/ui';\n\nimport { Spacer } from '../../../components/helpers';\nimport { isMicrosoftTranscriptLink } from '../../../../../shared/utils/validate';\nimport {\n  linkMsUsername,\n  unlinkMsUsername,\n  setIsProcessing\n} from '../../../redux/actions';\nimport {\n  isSignedInSelector,\n  msUsernameSelector,\n  isProcessingSelector\n} from '../../../redux/selectors';\nimport Login from '../../../components/Header/components/login';\nimport ChallengeHeading from '../components/challenge-heading';\n\nimport './link-ms-user.css';\n\nconst mapState = createSelector(\n  isSignedInSelector,\n  msUsernameSelector,\n  isProcessingSelector,\n  (\n    isSignedIn: boolean,\n    msUsername: string | undefined | null,\n    isProcessing: boolean\n  ) => ({\n    isSignedIn,\n    msUsername,\n    isProcessing\n  })\n);\n\nconst mapDispatch = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      linkMsUsername,\n      unlinkMsUsername,\n      setIsProcessing\n    },\n    dispatch\n  );\n\nconst connector = connect(mapState, mapDispatch);\n\ntype Props = ConnectedProps<typeof connector>;\n\nfunction LinkMsUser({\n  isSignedIn,\n  msUsername,\n  linkMsUsername,\n  unlinkMsUsername,\n  isProcessing,\n  setIsProcessing\n}: Props): JSX.Element {\n  const { t } = useTranslation();\n  const [msTranscriptUrl, setMsTranscriptUrl] = useState('');\n\n  function handleLinkUsername(e: React.FormEvent) {\n    e.preventDefault();\n    setIsProcessing(true);\n    linkMsUsername({ msTranscriptUrl });\n  }\n\n  function handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    setMsTranscriptUrl(e.target.value);\n  }\n\n  const isValid = isMicrosoftTranscriptLink(msTranscriptUrl);\n  const isPristine = msTranscriptUrl === '';\n  const isDisabled = isProcessing || !isValid;\n  const showWarning = !isPristine && !isValid;\n\n  return !isSignedIn ? (\n    <>\n      <ChallengeHeading heading={t('learn.ms.link-header')} />\n      <Spacer size='small' />\n\n      <p>{t('learn.ms.link-signin')}</p>\n      <Login />\n    </>\n  ) : (\n    <>\n      {msUsername ? (\n        <>\n          <p>{t('learn.ms.linked', { msUsername })}</p>\n          <Button\n            block={true}\n            variant='primary'\n            disabled={isProcessing}\n            onClick={unlinkMsUsername}\n          >\n            {t('buttons.unlink-account')}\n          </Button>\n        </>\n      ) : (\n        <div>\n          <ChallengeHeading heading={'learn.ms.link-header'} />\n          <Spacer size='small' />\n\n          <p>{t('learn.ms.unlinked')}</p>\n          <ol className='link-ms-user-ol'>\n            <li>\n              <Trans i18nKey='learn.ms.link-li-1'>\n                <a\n                  href='https://learn.microsoft.com/users/me/transcript'\n                  rel='noreferrer'\n                  target='_blank'\n                >\n                  placeholder\n                </a>\n              </Trans>\n            </li>\n            <li>{t('learn.ms.link-li-2')}</li>\n            <li>{t('learn.ms.link-li-3')}</li>\n            <li>{t('learn.ms.link-li-4')}</li>\n            <li>\n              <Trans i18nKey='learn.ms.link-li-5'>\n                <pre className='language-html'>placeholder</pre>\n              </Trans>\n            </li>\n            <li>{t('learn.ms.link-li-6')}</li>\n          </ol>\n\n          <Spacer size='medium' />\n          <form onSubmit={handleLinkUsername}>\n            <FormGroup validationState={isValid ? 'success' : 'error'}>\n              <ControlLabel htmlFor='transcript-link'>\n                <strong>{t('learn.ms.transcript-label')}</strong>\n              </ControlLabel>\n              <FormControl\n                id='transcript-link'\n                type='url'\n                onChange={handleInputChange}\n                placeholder='https://learn.microsoft.com/en-us/users/username/transcript/transcriptId'\n              />\n            </FormGroup>\n            <Button\n              disabled={isDisabled}\n              block={true}\n              variant='primary'\n              onClick={handleLinkUsername}\n            >\n              {t('buttons.link-account')}\n            </Button>\n            {showWarning && (\n              <HelpBlock>\n                <Trans i18nKey='learn.ms.invalid-transcript'>\n                  placeholder <code>placeholder</code> placeholder\n                </Trans>\n              </HelpBlock>\n            )}\n          </form>\n        </div>\n      )}\n    </>\n  );\n}\n\nLinkMsUser.displayName = 'LinkMsUser';\n\nexport default connector(LinkMsUser);\n","import { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\n\nimport { Container, Col, Row, Button } from '@freecodecamp/ui';\nimport Spacer from '../../../components/helpers/spacer';\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport ChallengeDescription from '../components/challenge-description';\nimport Hotkeys from '../components/hotkeys';\nimport ChallengeTitle from '../components/challenge-title';\nimport CompletionModal from '../components/completion-modal';\nimport HelpModal from '../components/help-modal';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  updateSolutionFormValues,\n  submitChallenge,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport { setIsProcessing } from '../../../redux/actions';\nimport {\n  isProcessingSelector,\n  msUsernameSelector\n} from '../../../redux/selectors';\nimport LinkMsUser from './link-ms-user';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  isProcessingSelector,\n  msUsernameSelector,\n  (\n    isChallengeCompleted: boolean,\n    isProcessing: boolean,\n    msUsername: string | undefined | null\n  ) => ({\n    isChallengeCompleted,\n    isProcessing,\n    msUsername\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      updateSolutionFormValues,\n      openCompletionModal: () => openModal('completion'),\n      openHelpModal: () => openModal('help'),\n      setIsProcessing,\n      submitChallenge\n    },\n    dispatch\n  );\n\n// Types\ninterface MsTrophyProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  isProcessing: boolean;\n  setIsProcessing: (arg0: boolean) => void;\n  msUsername: string | undefined | null;\n  openCompletionModal: () => void;\n  openHelpModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  submitChallenge: () => void;\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n}\n\n// Component\nclass MsTrophy extends Component<MsTrophyProps> {\n  static displayName: string;\n  private container: React.RefObject<HTMLElement> = React.createRef();\n\n  constructor(props: MsTrophyProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = this.props;\n    initTests(tests);\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n    this.container.current?.focus();\n  }\n\n  componentDidUpdate(prevProps: MsTrophyProps): void {\n    const {\n      data: {\n        challengeNode: {\n          challenge: { title: prevTitle }\n        }\n      }\n    } = prevProps;\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { title: currentTitle, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    if (prevTitle !== currentTitle) {\n      updateChallengeMeta({\n        ...challengeMeta,\n        title: currentTitle,\n        challengeType,\n        helpCategory\n      });\n      challengeMounted(challengeMeta.id);\n    }\n  }\n\n  handleSubmit = (): void => {\n    const { setIsProcessing, submitChallenge } = this.props;\n\n    setIsProcessing(true);\n    submitChallenge();\n  };\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            title,\n            description,\n            instructions,\n            superBlock,\n            block,\n            translationPending,\n            fields: { blockName }\n          }\n        }\n      },\n      isChallengeCompleted,\n      isProcessing,\n      msUsername,\n      openHelpModal,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      t\n    } = this.props;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )} - ${title}`;\n\n    return (\n      <Hotkeys\n        containerRef={this.container}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n      >\n        <LearnLayout>\n          <Helmet\n            title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n          />\n          <Container>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer size='medium' />\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <ChallengeDescription\n                  description={description}\n                  instructions={instructions}\n                />\n                <LinkMsUser />\n                <hr />\n                <Button\n                  block={true}\n                  variant='primary'\n                  data-playwright-test-label='verify-trophy-button'\n                  disabled={!msUsername || isProcessing}\n                  onClick={this.handleSubmit}\n                >\n                  {t('buttons.verify-trophy')}\n                </Button>\n                <Spacer size='xxSmall' />\n                <Button\n                  block={true}\n                  variant='primary'\n                  data-playwright-test-label='ask-for-help-button'\n                  onClick={openHelpModal}\n                >\n                  {t('buttons.ask-for-help')}\n                </Button>\n                <br />\n                <Spacer size='medium' />\n              </Col>\n              <CompletionModal />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Container>\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nMsTrophy.displayName = 'MsTrophy';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(MsTrophy));\n\nexport const query = graphql`\n  query MsTrophyChallenge($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        title\n        description\n        instructions\n        challengeType\n        helpCategory\n        superBlock\n        block\n        translationPending\n        fields {\n          blockName\n          tests {\n            text\n            testString\n          }\n        }\n      }\n    }\n  }\n`;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isMicrosoftTranscriptLink = exports.isValidUsername = exports.isHttpStatusCode = exports.usernameIsHttpStatusCode = exports.usernameTooShort = exports.validationSuccess = exports.invalidCharError = void 0;\nexports.invalidCharError = {\n    valid: false,\n    error: 'contains invalid characters'\n};\nexports.validationSuccess = { valid: true, error: null };\nexports.usernameTooShort = {\n    valid: false,\n    error: 'is too short'\n};\nexports.usernameIsHttpStatusCode = {\n    valid: false,\n    error: 'is a reserved error code'\n};\nconst validCharsRE = /^[a-zA-Z0-9\\-_+]*$/;\nconst isHttpStatusCode = (str) => {\n    const output = parseInt(str, 10);\n    return !isNaN(output) && output >= 100 && output <= 599;\n};\nexports.isHttpStatusCode = isHttpStatusCode;\nconst isValidUsername = (str) => {\n    if (!validCharsRE.test(str))\n        return exports.invalidCharError;\n    if (str.length < 3)\n        return exports.usernameTooShort;\n    if ((0, exports.isHttpStatusCode)(str))\n        return exports.usernameIsHttpStatusCode;\n    return exports.validationSuccess;\n};\nexports.isValidUsername = isValidUsername;\n// link template:\n// https://learn.microsoft.com/LOCALE/users/USERNAME/transcript/ID\nconst isMicrosoftTranscriptLink = (value) => {\n    let url;\n    try {\n        url = new URL(value);\n    }\n    catch {\n        return false;\n    }\n    const correctDomain = url.hostname === 'learn.microsoft.com';\n    const correctPath = !!url.pathname.match(/^\\/[^/]+\\/users\\/[^/]+\\/transcript\\/[^/]+$/);\n    const notPlaceholder = !url.pathname.match('/LOCALE/users/USERNAME/transcript/ID');\n    return correctDomain && correctPath && notPlaceholder;\n};\nexports.isMicrosoftTranscriptLink = isMicrosoftTranscriptLink;\n"],"names":["ChallengeDescription","challenge","sbClass","superBlock","bClass","block","React","className","description","PrismFormatted","text","instructions","displayName","ChallengeHeading","_ref","heading","isCompleted","t","useTranslation","GreenPass","mapState","createSelector","isSignedInSelector","msUsernameSelector","isProcessingSelector","isSignedIn","msUsername","isProcessing","connector","connect","dispatch","bindActionCreators","linkMsUsername","unlinkMsUsername","setIsProcessing","LinkMsUser","msTranscriptUrl","setMsTranscriptUrl","useState","handleLinkUsername","e","preventDefault","isValid","isMicrosoftTranscriptLink","isDisabled","showWarning","Button","variant","disabled","onClick","Spacer","size","Trans","i18nKey","href","rel","target","onSubmit","FormGroup","validationState","ControlLabel","htmlFor","FormControl","id","type","onChange","value","placeholder","HelpBlock","Login","mapStateToProps","isChallengeCompletedSelector","isChallengeCompleted","MsTrophy","Component","constructor","props","super","container","handleSubmit","submitChallenge","this","bind","componentDidMount","_this$container$curre","challengeMounted","data","challengeNode","fields","tests","title","challengeType","helpCategory","pageContext","challengeMeta","initTests","updateChallengeMeta","current","focus","componentDidUpdate","prevProps","prevTitle","currentTitle","render","translationPending","blockName","openHelpModal","nextChallengePath","prevChallengePath","blockNameTitle","Hotkeys","containerRef","LearnLayout","Helmet","Container","Row","Col","md","mdOffset","sm","smOffset","xs","ChallengeTitle","CompletionModal","HelpModal","challengeTitle","challengeBlock","updateSolutionFormValues","openCompletionModal","openModal","withTranslation","exports","valid","error","validCharsRE","str","output","parseInt","isNaN","test","length","url","URL","correctDomain","hostname","correctPath","pathname","match","notPlaceholder"],"sourceRoot":""}
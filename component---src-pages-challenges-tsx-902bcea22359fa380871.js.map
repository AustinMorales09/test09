{"version":3,"file":"component---src-pages-challenges-tsx-902bcea22359fa380871.js","mappings":"oNAeA,SAASA,EAASC,GAKhB,MAJsB,oBAAXC,SACJC,EAAAA,EAAAA,UCHM,SAAoBC,GAIJ,IAJK,MAClCC,EAAK,UACLC,EAAS,WACTC,GACkBH,EAIlB,MAFgB,CAACG,EAAYF,EAAOC,GAErBE,QAAO,CAACC,EAAcC,IAC/BA,EACQD,EAAI,IAAIC,EAGbD,IACNE,EAAAA,EAAAA,YAAW,UAChB,CDZkBC,CAAYX,IAGrB,IACT,CAEA,SAASY,IACP,OACEC,EAAAA,cAACC,EAAAA,OAAM,CAACC,UAAUL,EAAAA,EAAAA,YAAW,gBAC3BG,EAAAA,cAACd,EAAQ,CAACS,KAAK,kBACfK,EAAAA,cAACd,EAAQ,CAACS,KAAK,yBACfK,EAAAA,cAACd,EAAQ,CAACS,KAAK,mCACfK,EAAAA,cAACd,EAAQ,CAACiB,SAAS,IAGzB,CAEAJ,EAAWK,YAAc,aAEzB,O","sources":["webpack://@freecodecamp/client/./src/pages/challenges.tsx","webpack://@freecodecamp/client/./src/utils/to-learn-path.ts"],"sourcesContent":["// This exists purely to redirect legacy challenge paths to /learn that could\n// exist in the web (posts, url shares, etc).\n\nimport { Router, RouteComponentProps } from '@reach/router';\nimport { navigate, withPrefix } from 'gatsby';\nimport React from 'react';\n\nimport toLearnPath from '../utils/to-learn-path';\n\ntype RouteComponentPropsExtended = RouteComponentProps & {\n  block?: string;\n  challenge?: string;\n  superBlock?: string;\n};\n\nfunction Redirect(props: RouteComponentPropsExtended): null {\n  if (typeof window !== 'undefined') {\n    void navigate(toLearnPath(props));\n  }\n\n  return null;\n}\n\nfunction Challenges(): JSX.Element {\n  return (\n    <Router basepath={withPrefix('/challenges')}>\n      <Redirect path='/:superBlock/' />\n      <Redirect path='/:superBlock/:block/' />\n      <Redirect path='/:superBlock/:block/:challenge' />\n      <Redirect default={true} />\n    </Router>\n  );\n}\n\nChallenges.displayName = 'Challenges';\n\nexport default Challenges;\n","import { withPrefix } from 'gatsby';\n\ninterface ToLearnPathKwargs {\n  block?: string;\n  challenge?: string;\n  superBlock?: string;\n}\n\n/**\n * Builds a learning url path from folders.\n * - /learn/:superBlock/:block/:challenge\n * @params {Object} Path kwargs.\n * @returns {string} A learning url path.\n */\nexport default function toLearnPath({\n  block,\n  challenge,\n  superBlock\n}: ToLearnPathKwargs): string {\n  // Match path order /:super-block/:block/:challenge\n  const folders = [superBlock, block, challenge];\n\n  return folders.reduce((path: string, folder) => {\n    if (folder) {\n      return `${path}/${folder}`;\n    }\n\n    return path;\n  }, withPrefix('/learn'));\n}\n"],"names":["Redirect","props","window","navigate","_ref","block","challenge","superBlock","reduce","path","folder","withPrefix","toLearnPath","Challenges","React","Router","basepath","default","displayName"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-challenges-dialogue-show-tsx-278ae99887e5d1301638.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/components/settings/keyboard-shortcuts.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/challenge-heading.tsx","webpack://@freecodecamp/client/./src/assets/icons/closedcaptions.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/scene/scene-assets.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/scene/character.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/scene/scene.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/components/shortcuts-modal.tsx","webpack://@freecodecamp/client/./src/templates/Challenges/dialogue/show.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer } from '../helpers';\n\nimport ToggleButtonSetting from './toggle-button-setting';\n\ntype KeyboardShortcutsProps = {\n  keyboardShortcuts: boolean;\n  toggleKeyboardShortcuts: (sound: boolean) => void;\n  explain?: string;\n};\n\nexport default function KeyboardShortcutsSettings({\n  keyboardShortcuts,\n  toggleKeyboardShortcuts,\n  explain\n}: KeyboardShortcutsProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <ToggleButtonSetting\n        action={t('settings.labels.keyboard-shortcuts')}\n        explain={explain}\n        flag={keyboardShortcuts}\n        flagName='keyboard-shortcuts'\n        offLabel={t('buttons.off')}\n        onLabel={t('buttons.on')}\n        toggleFlag={() => {\n          toggleKeyboardShortcuts(keyboardShortcuts ? false : true);\n        }}\n      />\n      <Spacer size='medium'></Spacer>\n    </>\n  );\n}\n\nKeyboardShortcutsSettings.displayName = 'KeyboardShortcutsSettings';\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GreenPass from '../../../assets/icons/green-pass';\n\nimport './challenge-heading.css';\n\ninterface ChallengeHeadingProps {\n  heading: string;\n  isCompleted?: boolean;\n}\n\nfunction ChallengeHeading({\n  heading,\n  isCompleted = false\n}: ChallengeHeadingProps): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <div className='challenge-heading-wrap'>\n      <h2 className='challenge-heading'>{t(heading)}</h2>\n      {isCompleted && <GreenPass />}\n    </div>\n  );\n}\n\nChallengeHeading.displayName = 'ChallengeHeading';\n\nexport default ChallengeHeading;\n","import React from 'react';\n\nfunction ClosedCaptionsIcon(\n  props: JSX.IntrinsicAttributes & React.SVGProps<SVGSVGElement>\n): JSX.Element {\n  return (\n    <>\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        viewBox='0 0 256 256'\n        fill={props.fill || 'var(--gray-00)'}\n      >\n        <rect width='256' height='256' fill='none' />\n        <path d='M216,40H40A16.01833,16.01833,0,0,0,24,56V200a16.01833,16.01833,0,0,0,16,16H216a16.01833,16.01833,0,0,0,16-16V56A16.01833,16.01833,0,0,0,216,40ZM96,148a19.85259,19.85259,0,0,0,14.28613-6.00293,7.99956,7.99956,0,0,1,11.42774,11.19727,36,36,0,1,1,0-50.38868,7.99956,7.99956,0,0,1-11.42774,11.19727A20.00012,20.00012,0,1,0,96,148Zm72,0a19.85259,19.85259,0,0,0,14.28613-6.00293,7.99956,7.99956,0,0,1,11.42774,11.19727,36,36,0,1,1,0-50.38868,7.99956,7.99956,0,0,1-11.42774,11.19727A20.00012,20.00012,0,1,0,168,148Z' />\n      </svg>\n    </>\n  );\n}\n\nClosedCaptionsIcon.displayName = 'ClosedCaptionsIcon';\n\nexport default ClosedCaptionsIcon;\n","// TODO: get domain from env\nconst domain =\n  'https://cdn.freecodecamp.org/curriculum/english/animation-assets';\n\nexport const sounds = `${domain}/sounds`;\nexport const images = `${domain}/images`;\nexport const backgrounds = `${images}/backgrounds`;\nexport const characters = `${images}/characters`;\n\nconst alice = `${characters}/alice`;\nconst anna = `${characters}/anna`;\nconst bob = `${characters}/bob`;\nconst brian = `${characters}/brian`;\nconst candidate = `${characters}/npc`;\nconst david = `${characters}/david`;\nconst expert = `${characters}/npc`;\nconst jake = `${characters}/jake`;\nconst james = `${characters}/james`;\nconst linda = `${characters}/linda`;\nconst lisa = `${characters}/lisa`;\nconst maria = `${characters}/maria`;\nconst sarah = `${characters}/sarah`;\nconst secondCandidate = `${characters}/npc`;\nconst sophie = `${characters}/sophie`;\nconst tom = `${characters}/tom`;\nconst mark = `${characters}/npc`;\nconst amy = `${characters}/npc`;\nconst deliveryMan = `${characters}/npc`;\n\nexport const characterAssets = {\n  Alice: {\n    base: `${alice}/base.png`,\n    brows: `${alice}/brows-neutral.png`,\n    eyesClosed: `${alice}/eyes-closed.png`,\n    eyesOpen: `${alice}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${alice}/mouth-smile.png`,\n    mouthOpen: `${alice}/mouth-laugh.png`\n  },\n  Amy: {\n    base: `${amy}/girl-base.png`,\n    brows: `${amy}/girl-base.png`,\n    eyesClosed: `${amy}/girl-eyes-closed.png`,\n    eyesOpen: `${amy}/girl-eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${amy}/girl-mouth-smile.png`,\n    mouthOpen: `${amy}/girl-mouth-laugh.png`\n  },\n  Anna: {\n    base: `${anna}/base.png`,\n    brows: `${anna}/brows-normal.png`,\n    eyesClosed: `${anna}/eyes-closed.png`,\n    eyesOpen: `${anna}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${anna}/mouth-smile.png`,\n    mouthOpen: `${anna}/mouth-laugh.png`\n  },\n  Bob: {\n    base: `${bob}/base.png`,\n    brows: `${bob}/brows-neutral.png`,\n    eyesClosed: `${bob}/eyes-closed.png`,\n    eyesOpen: `${bob}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${bob}/mouth-smile.png`,\n    mouthOpen: `${bob}/mouth-laugh.png`\n  },\n  Brian: {\n    base: `${brian}/base.png`,\n    brows: `${brian}/brows-neutral.png`,\n    eyesClosed: `${brian}/eyes-closed.png`,\n    eyesOpen: `${brian}/eyes-open.png`,\n    glasses: `${brian}/glasses.png`,\n    mouthClosed: `${brian}/mouth-smile.png`,\n    mouthOpen: `${brian}/mouth-laugh.png`\n  },\n  Candidate: {\n    base: `${candidate}/boy-base.png`,\n    brows: `${candidate}/boy-base.png`,\n    eyesClosed: `${candidate}/boy-eyes-closed.png`,\n    eyesOpen: `${candidate}/boy-eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${candidate}/boy-mouth-smile.png`,\n    mouthOpen: `${candidate}/boy-mouth-laugh.png`\n  },\n  David: {\n    base: `${david}/base.png`,\n    brows: `${david}/brows-neutral.png`,\n    eyesClosed: `${david}/eyes-closed.png`,\n    eyesOpen: `${david}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${david}/mouth-smile.png`,\n    mouthOpen: `${david}/mouth-laugh.png`\n  },\n  'Delivery Man': {\n    base: `${deliveryMan}/man-base.png`,\n    brows: `${deliveryMan}/man-base.png`,\n    eyesClosed: `${deliveryMan}/man-eyes-closed.png`,\n    eyesOpen: `${deliveryMan}/man-eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${deliveryMan}/man-mouth-smile.png`,\n    mouthOpen: `${deliveryMan}/man-mouth-laugh.png`\n  },\n  Expert: {\n    base: `${expert}/man-base.png`,\n    brows: `${expert}/man-base.png`,\n    eyesClosed: `${expert}/man-eyes-closed.png`,\n    eyesOpen: `${expert}/man-eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${expert}/man-mouth-smile.png`,\n    mouthOpen: `${expert}/man-mouth-laugh.png`\n  },\n  Jake: {\n    base: `${jake}/base.png`,\n    brows: `${jake}/brows.png`,\n    eyesClosed: `${jake}/eyes-closed.png`,\n    eyesOpen: `${jake}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${jake}/mouth-smile.png`,\n    mouthOpen: `${jake}/mouth-laugh.png`\n  },\n  James: {\n    base: `${james}/base.png`,\n    brows: `${james}/brows-neutral.png`,\n    eyesClosed: `${james}/eyes-closed.png`,\n    eyesOpen: `${james}/eyes-open.png`,\n    glasses: `${james}/glasses.png`,\n    mouthClosed: `${james}/mouth-smile.png`,\n    mouthOpen: `${james}/mouth-laugh.png`\n  },\n  Linda: {\n    base: `${linda}/base.png`,\n    brows: `${linda}/brows-neutral.png`,\n    eyesClosed: `${linda}/eyes-closed.png`,\n    eyesOpen: `${linda}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${linda}/mouth-smile.png`,\n    mouthOpen: `${linda}/mouth-laugh.png`\n  },\n  Lisa: {\n    base: `${lisa}/base.png`,\n    brows: `${lisa}/brows-neutral.png`,\n    eyesClosed: `${lisa}/eyes-closed.png`,\n    eyesOpen: `${lisa}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${lisa}/mouth-smile.png`,\n    mouthOpen: `${lisa}/mouth-laugh.png`\n  },\n  Maria: {\n    base: `${maria}/base.png`,\n    brows: `${maria}/brows-normal.png`,\n    eyesClosed: `${maria}/eyes-closed.png`,\n    eyesOpen: `${maria}/eyes-open.png`,\n    glasses: `${maria}/glasses.png`,\n    mouthClosed: `${maria}/mouth-smile.png`,\n    mouthOpen: `${maria}/mouth-laugh.png`\n  },\n  Mark: {\n    base: `${mark}/boy-base.png`,\n    brows: `${mark}/boy-base.png`,\n    eyesClosed: `${mark}/boy-eyes-closed.png`,\n    eyesOpen: `${mark}/boy-eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${mark}/boy-mouth-smile.png`,\n    mouthOpen: `${mark}/boy-mouth-laugh.png`\n  },\n  Sarah: {\n    base: `${sarah}/base.png`,\n    brows: `${sarah}/brows-normal.png`,\n    eyesClosed: `${sarah}/eyes-closed.png`,\n    eyesOpen: `${sarah}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${sarah}/mouth-smile.png`,\n    mouthOpen: `${sarah}/mouth-laugh.png`\n  },\n  'Second Candidate': {\n    base: `${secondCandidate}/man-base.png`,\n    brows: `${secondCandidate}/man-base.png`,\n    eyesClosed: `${secondCandidate}/man-eyes-closed.png`,\n    eyesOpen: `${secondCandidate}/man-eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${secondCandidate}/man-mouth-smile.png`,\n    mouthOpen: `${secondCandidate}/man-mouth-laugh.png`\n  },\n  Sophie: {\n    base: `${sophie}/base.png`,\n    brows: `${sophie}/brows-neutral.png`,\n    eyesClosed: `${sophie}/eyes-closed.png`,\n    eyesOpen: `${sophie}/eyes-open.png`,\n    glasses: `${sophie}/glasses.png`,\n    mouthClosed: `${sophie}/mouth-smile.png`,\n    mouthOpen: `${sophie}/mouth-laugh.png`\n  },\n  Tom: {\n    base: `${tom}/base.png`,\n    brows: `${tom}/brows-normal.png`,\n    eyesClosed: `${tom}/eyes-closed.png`,\n    eyesOpen: `${tom}/eyes-open.png`,\n    glasses: null,\n    mouthClosed: `${tom}/mouth-smile.png`,\n    mouthOpen: `${tom}/mouth-laugh.png`\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { Characters, CharacterPosition } from '../../../../redux/prop-types';\nimport { characterAssets } from './scene-assets';\n\nimport './character.css';\n\ninterface CharacterProps {\n  position: CharacterPosition;\n  opacity: number;\n  name: Characters;\n  isBlinking: boolean;\n  isTalking: boolean;\n}\n\ninterface CharacterStyles {\n  left?: string;\n  top?: string;\n  transform?: string;\n  opacity?: number;\n}\n\nexport function Character({\n  position,\n  opacity,\n  name,\n  isBlinking,\n  isTalking\n}: CharacterProps): JSX.Element {\n  const [eyesAreOpen, setEyesAreOpen] = useState(true);\n  const [mouthIsOpen, setMouthIsOpen] = useState(false);\n\n  useEffect(() => {\n    let blinkInterval: NodeJS.Timeout | null = null;\n    let talkInterval: NodeJS.Timeout | null = null;\n\n    if (isBlinking) {\n      const msBetweenIntervals = Math.floor(Math.random() * 3000) + 2000;\n      blinkInterval = setInterval(() => {\n        const msBlinkDelay = Math.floor(Math.random() * 1000);\n        setTimeout(() => {\n          setEyesAreOpen(false);\n\n          setTimeout(() => {\n            setEyesAreOpen(true);\n          }, 30); // always unblink after 30ms\n        }, msBlinkDelay);\n      }, msBetweenIntervals);\n    }\n\n    if (isTalking) {\n      const talk = () => {\n        const openTimeout = getRandomInt(0, 100);\n        const closeTimeout = getRandomInt(150, 300);\n\n        setTimeout(() => {\n          setMouthIsOpen(true);\n        }, openTimeout);\n\n        setTimeout(() => {\n          setMouthIsOpen(false);\n        }, closeTimeout);\n      };\n\n      talk();\n      talkInterval = setInterval(() => {\n        talk();\n      }, 300);\n    }\n\n    function getRandomInt(min: number, max: number): number {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    // Clear intervals when component is unmounted or conditions change\n    return () => {\n      setEyesAreOpen(true);\n      setMouthIsOpen(false);\n      if (blinkInterval) clearInterval(blinkInterval);\n      if (talkInterval) clearInterval(talkInterval);\n    };\n  }, [isBlinking, isTalking]);\n\n  const characterWrapStyles: CharacterStyles = {\n    opacity\n  };\n  if (position.x) characterWrapStyles.left = `${position.x}%`;\n  if (position.y) characterWrapStyles.top = `${position.y}%`;\n\n  const characterFeatureStyles: CharacterStyles = {\n    transform: position.z\n      ? `translate(-${50 * position.z}%) scale(${position.z})`\n      : `translate(-50%)`\n  };\n\n  const { base, brows, eyesOpen, eyesClosed, mouthOpen, mouthClosed, glasses } =\n    characterAssets[name];\n\n  return (\n    <div style={characterWrapStyles} className='character-wrap'>\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={base}\n        alt=''\n      />\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={brows}\n        alt=''\n      />\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={eyesAreOpen ? eyesOpen : eyesClosed}\n        alt=''\n      />\n      <img\n        style={characterFeatureStyles}\n        className='character-feature'\n        src={mouthIsOpen ? mouthOpen : mouthClosed}\n        alt=''\n      />\n      {glasses && (\n        <img\n          style={characterFeatureStyles}\n          className='character-feature'\n          src={glasses}\n          alt=''\n        />\n      )}\n    </div>\n  );\n}\n\nCharacter.displayName = 'Character';\n\nexport default Character;\n","import React, { useEffect, useState, useRef } from 'react'; //, ReactElement } from 'react';\nimport { Col } from '@freecodecamp/ui';\nimport { useTranslation } from 'react-i18next';\nimport { FullScene } from '../../../../redux/prop-types';\nimport { Loader } from '../../../../components/helpers';\nimport ClosedCaptionsIcon from '../../../../assets/icons/closedcaptions';\nimport { sounds, images, backgrounds, characterAssets } from './scene-assets';\nimport Character from './character';\n\nimport './scene.css';\n\nconst sToMs = (n: number) => {\n  return n * 1000;\n};\n\nconst loadImage = (src: string | null) => {\n  if (src) new Image().src = src;\n};\n\nexport function Scene({\n  scene,\n  isPlaying,\n  setIsPlaying\n}: {\n  scene: FullScene;\n  isPlaying: boolean;\n  setIsPlaying: (shouldPlay: boolean) => void;\n}): JSX.Element {\n  const { t } = useTranslation();\n  const { setup, commands } = scene;\n  const { audio, alwaysShowDialogue } = setup;\n  const { startTimestamp = null, finishTimestamp = null } = audio;\n\n  const hasTimestamps = startTimestamp !== null && finishTimestamp !== null;\n  const audioTimestamp = hasTimestamps ? `#t=${startTimestamp}` : '';\n\n  const audioRef = useRef<HTMLAudioElement>(\n    new Audio(`${sounds}/${audio.filename}${audioTimestamp}`)\n  );\n\n  // if there are timestamps, we use the difference between them as the duration\n  // if not, we assume we're playing the whole audio file.\n  const duration = hasTimestamps\n    ? sToMs(finishTimestamp - startTimestamp)\n    : Infinity;\n\n  // on mount\n  useEffect(() => {\n    audioRef.current.addEventListener('canplaythrough', audioLoaded);\n\n    // preload images\n    loadImage(`${backgrounds}/${setup.background}`);\n\n    setup.characters\n      .map(({ character }) => Object.values(characterAssets[character]))\n      .flat()\n      .forEach(loadImage);\n\n    commands\n      .map(({ background }) =>\n        background ? `${backgrounds}/${background}` : null\n      )\n      .forEach(loadImage);\n\n    // on unmount\n    return () => {\n      const { current } = audioRef;\n\n      current.pause();\n      current.currentTime = 0;\n      current.removeEventListener('canplaythrough', audioLoaded);\n    };\n  }, [audioRef, setup.background, setup.characters, commands]);\n\n  const initBackground = setup.background;\n  const initDialogue = { label: '', text: '', align: 'left' };\n  const initCharacters = setup.characters.map(character => {\n    return {\n      ...character,\n      opacity: character.opacity ?? 1,\n      isTalking: false\n    };\n  });\n\n  const [sceneIsReady, setSceneIsReady] = useState(false);\n  const [showDialogue, setShowDialogue] = useState(false);\n  const [accessibilityOn, setAccessibilityOn] = useState(false);\n  const [characters, setCharacters] = useState(initCharacters);\n  const [dialogue, setDialogue] = useState(initDialogue);\n  const [background, setBackground] = useState(initBackground);\n\n  useEffect(() => {\n    if (isPlaying) {\n      playScene();\n    } else {\n      finishScene();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPlaying]);\n\n  const audioLoaded = () => {\n    setSceneIsReady(true);\n  };\n\n  let start = 0;\n  let stopAudio = false;\n\n  // this function exists because we couldn't reliably stop the audio when\n  // playing only part of the audio file. So it would get cut off\n  function maybeStopAudio() {\n    const runningTime = Date.now() - start;\n\n    if (runningTime >= duration) {\n      stopAudio = true;\n      audioRef.current.pause();\n    }\n\n    if (!stopAudio) {\n      window.requestAnimationFrame(maybeStopAudio);\n    }\n  }\n\n  const playScene = () => {\n    setShowDialogue(true);\n\n    setTimeout(() => {\n      if (audioRef.current.paused) {\n        start = Date.now();\n        void audioRef.current.play();\n      }\n      // if there are no timestamps, we can let the audio play to the end\n      if (hasTimestamps) maybeStopAudio();\n    }, sToMs(audio.startTime));\n\n    commands.forEach((command, commandIndex) => {\n      // Start command timeout\n      setTimeout(() => {\n        if (command.background) setBackground(command.background);\n\n        setDialogue(\n          command.dialogue\n            ? { ...command.dialogue, label: command.character }\n            : initDialogue\n        );\n\n        setCharacters(prevCharacters => {\n          const newCharacters = prevCharacters.map(character => {\n            if (character.character === command.character) {\n              return {\n                ...character,\n                position: command.position ?? character.position,\n                opacity: command.opacity ?? character.opacity,\n                isTalking: command.dialogue ? true : false\n              };\n            }\n            return character;\n          });\n          return newCharacters;\n        });\n      }, sToMs(command.startTime));\n\n      // Finish command timeout, only used when there's a dialogue\n      if (command.dialogue) {\n        setTimeout(\n          () => {\n            setCharacters(prevCharacters => {\n              const newCharacters = prevCharacters.map(character => {\n                if (character.character === command.character) {\n                  return {\n                    ...character,\n                    isTalking: false\n                  };\n                }\n                return character;\n              });\n              return newCharacters;\n            });\n          },\n          sToMs(command.finishTime as number)\n        );\n      }\n\n      // Last command timeout\n      if (commandIndex === commands.length - 1) {\n        setTimeout(\n          () => {\n            setIsPlaying(false);\n          },\n          // an extra 500ms at the end to let the characters fade out (CSS transition)\n          command.finishTime\n            ? sToMs(command.finishTime) + 500\n            : sToMs(command.startTime) + 500\n        );\n      }\n    });\n  };\n\n  const finishScene = () => {\n    audioRef.current.pause();\n    audioRef.current.src = `${sounds}/${audio.filename}${audioTimestamp}`;\n    audioRef.current.currentTime = audio.startTimestamp || 0;\n    setShowDialogue(false);\n    setDialogue(initDialogue);\n    setCharacters(initCharacters);\n    setBackground(initBackground);\n  };\n\n  return (\n    <Col lg={10} lgOffset={1} md={10} mdOffset={1}>\n      <div\n        className='scene-wrapper'\n        style={{\n          backgroundImage: `url(\"${backgrounds}/${background}\")`,\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center center',\n          aspectRatio: '16 / 9'\n        }}\n      >\n        {!sceneIsReady ? (\n          <Loader />\n        ) : (\n          <>\n            {characters.map(\n              (\n                { character, position = {}, opacity = 1, isTalking = false },\n                i\n              ) => {\n                return (\n                  <Character\n                    key={i}\n                    name={character}\n                    position={position}\n                    opacity={opacity}\n                    isTalking={isTalking}\n                    isBlinking={isPlaying}\n                  />\n                );\n              }\n            )}\n\n            {showDialogue && (alwaysShowDialogue || accessibilityOn) && (\n              <div\n                className={`scene-dialogue-wrap ${\n                  dialogue.align ? `scene-dialogue-align-${dialogue.align}` : ''\n                }`}\n              >\n                <div className='scene-dialogue-label'>{dialogue.label}</div>\n                <div className='scene-dialogue-text'>{dialogue.text}</div>\n              </div>\n            )}\n\n            {!isPlaying && (\n              <div className='scene-start-screen'>\n                <button\n                  className='scene-start-btn scene-play-btn'\n                  onClick={() => {\n                    setIsPlaying(true);\n                  }}\n                >\n                  <img\n                    src={`${images}/play-button.png`}\n                    alt={t('buttons.play-scene')}\n                  />\n                </button>\n\n                {!alwaysShowDialogue && (\n                  <button\n                    className='scene-start-btn scene-a11y-btn'\n                    aria-label='closed captions'\n                    aria-pressed={accessibilityOn}\n                    onClick={() => setAccessibilityOn(!accessibilityOn)}\n                  >\n                    <ClosedCaptionsIcon\n                      fill={\n                        accessibilityOn ? 'var(--gray-00)' : 'var(--gray-15)'\n                      }\n                    />\n                  </button>\n                )}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </Col>\n  );\n}\n\nScene.displayName = 'Scene';\n\nexport default Scene;\n","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Button, Modal } from '@freecodecamp/ui';\n\nimport { closeModal } from '../redux/actions';\nimport { isShortcutsModalOpenSelector } from '../redux/selectors';\nimport { updateMyKeyboardShortcuts } from '../../../redux/settings/actions';\nimport { userSelector } from '../../../redux/selectors';\nimport { User } from '../../../redux/prop-types';\nimport KeyboardShortcutsSettings from '../../../components/settings/keyboard-shortcuts';\n\nimport './shortcuts-modal.css';\n\ninterface ShortcutsModalProps {\n  closeShortcutsModal: () => void;\n  toggleKeyboardShortcuts: (keyboardShortcuts: boolean) => void;\n  isOpen: boolean;\n  t: (text: string) => string;\n  user: User;\n}\n\nconst mapStateToProps = createSelector(\n  isShortcutsModalOpenSelector,\n  userSelector,\n  (isOpen: boolean, user: User) => ({ isOpen, user })\n);\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      closeShortcutsModal: () => closeModal('shortcuts'),\n      toggleKeyboardShortcuts: (keyboardShortcuts: boolean) =>\n        updateMyKeyboardShortcuts({ keyboardShortcuts })\n    },\n    dispatch\n  );\n\nfunction ShortcutsModal({\n  closeShortcutsModal,\n  toggleKeyboardShortcuts,\n  isOpen,\n  t,\n  user: { keyboardShortcuts }\n}: ShortcutsModalProps): JSX.Element {\n  return (\n    <Modal onClose={closeShortcutsModal} open={isOpen}>\n      <Modal.Header showCloseButton={false}>\n        {t('shortcuts.title')}\n      </Modal.Header>\n      <Modal.Body alignment='start'>\n        <table className='shortcuts-modal-table'>\n          <thead>\n            <tr>\n              <th scope='col'>{t('shortcuts.table-header-action')}</th>\n              <th scope='col'>{t('shortcuts.table-header-key')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{t('shortcuts.navigation-mode')}</td>\n              <td>ESC</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.execute-challenge')}</td>\n              <td>CTRL/Command + Enter</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.play-scene')}</td>\n              <td>CTRL + Space</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.focus-editor')}</td>\n              <td>e</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.focus-instructions-panel')}</td>\n              <td>r</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.navigate-previous')}</td>\n              <td>p</td>\n            </tr>\n            <tr>\n              <td>{t('shortcuts.navigate-next')}</td>\n              <td>n</td>\n            </tr>\n          </tbody>\n        </table>\n      </Modal.Body>\n      <Modal.Footer>\n        <KeyboardShortcutsSettings\n          keyboardShortcuts={keyboardShortcuts}\n          toggleKeyboardShortcuts={toggleKeyboardShortcuts}\n        />\n        <Button\n          block={true}\n          size='small'\n          variant='primary'\n          onClick={closeShortcutsModal}\n        >\n          {t('buttons.close')}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nShortcutsModal.displayName = 'ShortcutsModal';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShortcutsModal));\n","// Package Utilities\nimport { graphql } from 'gatsby';\nimport React, { Component } from 'react';\nimport Helmet from 'react-helmet';\nimport { ObserveKeys } from 'react-hotkeys';\nimport type { TFunction } from 'i18next';\nimport { withTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport type { Dispatch } from 'redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row, Button } from '@freecodecamp/ui';\nimport ShortcutsModal from '../components/shortcuts-modal';\n\n// Local Utilities\nimport Spacer from '../../../components/helpers/spacer';\nimport LearnLayout from '../../../components/layouts/learn';\nimport { ChallengeNode, ChallengeMeta, Test } from '../../../redux/prop-types';\nimport Hotkeys from '../components/hotkeys';\nimport CompletionModal from '../components/completion-modal';\nimport ChallengeTitle from '../components/challenge-title';\nimport ChallengeHeading from '../components/challenge-heading';\nimport HelpModal from '../components/help-modal';\nimport PrismFormatted from '../components/prism-formatted';\nimport {\n  challengeMounted,\n  updateChallengeMeta,\n  openModal,\n  initTests\n} from '../redux/actions';\nimport { isChallengeCompletedSelector } from '../redux/selectors';\nimport Scene from '../components/scene/scene';\n\n// Styles\nimport '../odin/show.css';\nimport '../video.css';\n\n// Redux Setup\nconst mapStateToProps = createSelector(\n  isChallengeCompletedSelector,\n  (isChallengeCompleted: boolean) => ({\n    isChallengeCompleted\n  })\n);\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      initTests,\n      updateChallengeMeta,\n      challengeMounted,\n      openCompletionModal: () => openModal('completion'),\n      openHelpModal: () => openModal('help')\n    },\n    dispatch\n  );\n\n// Types\ninterface ShowDialogueProps {\n  challengeMounted: (arg0: string) => void;\n  data: { challengeNode: ChallengeNode };\n  description: string;\n  initTests: (xs: Test[]) => void;\n  isChallengeCompleted: boolean;\n  openCompletionModal: () => void;\n  openHelpModal: () => void;\n  pageContext: {\n    challengeMeta: ChallengeMeta;\n  };\n  t: TFunction;\n  updateChallengeMeta: (arg0: ChallengeMeta) => void;\n}\n\ninterface ShowDialogueState {\n  subtitles: string;\n  downloadURL: string | null;\n  assignmentsCompleted: number;\n  allAssignmentsCompleted: boolean;\n  videoIsLoaded: boolean;\n  isScenePlaying: boolean;\n}\n\n// Component\nclass ShowDialogue extends Component<ShowDialogueProps, ShowDialogueState> {\n  static displayName: string;\n  private container: React.RefObject<HTMLElement> = React.createRef();\n\n  constructor(props: ShowDialogueProps) {\n    super(props);\n    this.state = {\n      isScenePlaying: false,\n      subtitles: '',\n      downloadURL: null,\n      assignmentsCompleted: 0,\n      allAssignmentsCompleted: false,\n      videoIsLoaded: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount(): void {\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: {\n            fields: { tests },\n            title,\n            challengeType,\n            helpCategory\n          }\n        }\n      },\n      pageContext: { challengeMeta },\n      initTests,\n      updateChallengeMeta\n    } = this.props;\n    initTests(tests);\n    updateChallengeMeta({\n      ...challengeMeta,\n      title,\n      challengeType,\n      helpCategory\n    });\n    challengeMounted(challengeMeta.id);\n    this.container.current?.focus();\n  }\n\n  componentDidUpdate(prevProps: ShowDialogueProps): void {\n    const {\n      data: {\n        challengeNode: {\n          challenge: { title: prevTitle }\n        }\n      }\n    } = prevProps;\n    const {\n      challengeMounted,\n      data: {\n        challengeNode: {\n          challenge: { title: currentTitle, challengeType, helpCategory }\n        }\n      },\n      pageContext: { challengeMeta },\n      updateChallengeMeta\n    } = this.props;\n    if (prevTitle !== currentTitle) {\n      updateChallengeMeta({\n        ...challengeMeta,\n        title: currentTitle,\n        challengeType,\n        helpCategory\n      });\n      challengeMounted(challengeMeta.id);\n    }\n  }\n\n  handleSubmit() {\n    const { openCompletionModal } = this.props;\n    if (this.state.allAssignmentsCompleted) {\n      openCompletionModal();\n    }\n  }\n\n  handleAssignmentChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    totalAssignments: number\n  ): void => {\n    const assignmentsCompleted = event.target.checked\n      ? this.state.assignmentsCompleted + 1\n      : this.state.assignmentsCompleted - 1;\n    const allAssignmentsCompleted = totalAssignments === assignmentsCompleted;\n\n    this.setState({\n      assignmentsCompleted,\n      allAssignmentsCompleted\n    });\n  };\n\n  onVideoLoad = () => {\n    this.setState({\n      videoIsLoaded: true\n    });\n  };\n\n  setIsScenePlaying = (shouldPlay: boolean) => {\n    this.setState({\n      isScenePlaying: shouldPlay\n    });\n  };\n\n  render() {\n    const {\n      data: {\n        challengeNode: {\n          challenge: {\n            title,\n            description,\n            superBlock,\n            block,\n            fields: { blockName },\n            assignments,\n            translationPending,\n            scene\n          }\n        }\n      },\n      openHelpModal,\n      pageContext: {\n        challengeMeta: { nextChallengePath, prevChallengePath }\n      },\n      isChallengeCompleted,\n      t\n    } = this.props;\n\n    const blockNameTitle = `${t(\n      `intro:${superBlock}.blocks.${block}.title`\n    )} - ${title}`;\n\n    return (\n      <Hotkeys\n        executeChallenge={() => this.handleSubmit()}\n        containerRef={this.container}\n        nextChallengePath={nextChallengePath}\n        prevChallengePath={prevChallengePath}\n        playScene={() => this.setIsScenePlaying(true)}\n      >\n        <LearnLayout>\n          <Helmet\n            title={`${blockNameTitle} | ${t('learn.learn')} | freeCodeCamp.org`}\n          />\n          <Container>\n            <Row>\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer size='medium' />\n\n                <ChallengeTitle\n                  isCompleted={isChallengeCompleted}\n                  translationPending={translationPending}\n                >\n                  {title}\n                </ChallengeTitle>\n                <PrismFormatted className={'line-numbers'} text={description} />\n                <Spacer size='medium' />\n              </Col>\n\n              {scene && (\n                <Scene\n                  scene={scene}\n                  isPlaying={this.state.isScenePlaying}\n                  setIsPlaying={this.setIsScenePlaying}\n                />\n              )}\n\n              <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n                <Spacer size='medium' />\n                <ObserveKeys>\n                  <ChallengeHeading heading={t('learn.assignments')} />\n                  <div className='video-quiz-options'>\n                    {assignments.map((assignment, index) => (\n                      <label className='video-quiz-option-label' key={index}>\n                        <input\n                          name='assignment'\n                          type='checkbox'\n                          onChange={event =>\n                            this.handleAssignmentChange(\n                              event,\n                              assignments.length\n                            )\n                          }\n                        />\n\n                        <PrismFormatted\n                          className={'video-quiz-option'}\n                          text={assignment}\n                        />\n                        <Spacer size='medium' />\n                      </label>\n                    ))}\n                  </div>\n                  <Spacer size='medium' />\n                </ObserveKeys>\n\n                <div\n                  style={{\n                    textAlign: 'center'\n                  }}\n                >\n                  {!this.state.allAssignmentsCompleted &&\n                    assignments.length > 0 && (\n                      <>\n                        <br />\n                        <span>{t('learn.assignment-not-complete')}</span>\n                      </>\n                    )}\n                </div>\n                <Spacer size='medium' />\n                <Button\n                  block={true}\n                  variant='primary'\n                  disabled={!this.state.allAssignmentsCompleted}\n                  onClick={() => this.handleSubmit()}\n                >\n                  {t('buttons.submit')}\n                </Button>\n                <Spacer size='xxSmall' />\n                <Button block={true} variant='primary' onClick={openHelpModal}>\n                  {t('buttons.ask-for-help')}\n                </Button>\n                <Spacer size='large' />\n              </Col>\n              <CompletionModal />\n              <HelpModal challengeTitle={title} challengeBlock={blockName} />\n            </Row>\n          </Container>\n          <ShortcutsModal />\n        </LearnLayout>\n      </Hotkeys>\n    );\n  }\n}\n\nShowDialogue.displayName = 'ShowDialogue';\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withTranslation()(ShowDialogue));\n\nexport const query = graphql`\n  query Dialogue($slug: String!) {\n    challengeNode(challenge: { fields: { slug: { eq: $slug } } }) {\n      challenge {\n        videoId\n        title\n        description\n        challengeType\n        helpCategory\n        superBlock\n        block\n        fields {\n          slug\n          blockName\n          tests {\n            text\n            testString\n          }\n        }\n        translationPending\n        assignments\n        scene {\n          setup {\n            background\n            characters {\n              character\n              position {\n                x\n                y\n                z\n              }\n              opacity\n            }\n            audio {\n              filename\n              startTime\n              startTimestamp\n              finishTimestamp\n            }\n            alwaysShowDialogue\n          }\n          commands {\n            background\n            character\n            position {\n              x\n              y\n              z\n            }\n            opacity\n            startTime\n            finishTime\n            dialogue {\n              text\n              align\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["KeyboardShortcutsSettings","_ref","keyboardShortcuts","toggleKeyboardShortcuts","explain","t","useTranslation","React","ToggleButtonSetting","action","flag","flagName","offLabel","onLabel","toggleFlag","Spacer","size","displayName","ChallengeHeading","heading","isCompleted","className","GreenPass","ClosedCaptionsIcon","props","xmlns","viewBox","fill","width","height","d","domain","sounds","images","backgrounds","characters","alice","anna","bob","brian","candidate","david","expert","jake","james","linda","lisa","maria","sarah","secondCandidate","sophie","tom","mark","amy","deliveryMan","characterAssets","Alice","base","brows","eyesClosed","eyesOpen","glasses","mouthClosed","mouthOpen","Amy","Anna","Bob","Brian","Candidate","David","Expert","Jake","James","Linda","Lisa","Maria","Mark","Sarah","Sophie","Tom","Character","position","opacity","name","isBlinking","isTalking","eyesAreOpen","setEyesAreOpen","useState","mouthIsOpen","setMouthIsOpen","useEffect","blinkInterval","talkInterval","msBetweenIntervals","Math","floor","random","setInterval","msBlinkDelay","setTimeout","talk","openTimeout","getRandomInt","closeTimeout","min","max","clearInterval","characterWrapStyles","x","left","y","top","characterFeatureStyles","transform","z","style","src","alt","sToMs","n","loadImage","Image","Scene","scene","isPlaying","setIsPlaying","setup","commands","audio","alwaysShowDialogue","startTimestamp","finishTimestamp","hasTimestamps","audioTimestamp","audioRef","useRef","Audio","filename","duration","Infinity","current","addEventListener","audioLoaded","background","map","_ref2","character","Object","values","flat","forEach","_ref3","pause","currentTime","removeEventListener","initBackground","initDialogue","label","text","align","initCharacters","_character$opacity","sceneIsReady","setSceneIsReady","showDialogue","setShowDialogue","accessibilityOn","setAccessibilityOn","setCharacters","dialogue","setDialogue","setBackground","playScene","finishScene","start","stopAudio","maybeStopAudio","Date","now","window","requestAnimationFrame","paused","play","startTime","command","commandIndex","prevCharacters","_command$position","_command$opacity","finishTime","length","Col","lg","lgOffset","md","mdOffset","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","aspectRatio","_ref4","i","key","onClick","Loader","mapStateToProps","createSelector","isShortcutsModalOpenSelector","userSelector","isOpen","user","ShortcutsModal","closeShortcutsModal","Modal","onClose","open","Header","showCloseButton","Body","alignment","scope","Footer","Button","block","variant","connect","dispatch","bindActionCreators","closeModal","updateMyKeyboardShortcuts","withTranslation","isChallengeCompletedSelector","isChallengeCompleted","ShowDialogue","Component","constructor","super","container","handleAssignmentChange","event","totalAssignments","assignmentsCompleted","target","checked","this","state","allAssignmentsCompleted","setState","onVideoLoad","videoIsLoaded","setIsScenePlaying","shouldPlay","isScenePlaying","subtitles","downloadURL","handleSubmit","bind","componentDidMount","_this$container$curre","challengeMounted","data","challengeNode","challenge","fields","tests","title","challengeType","helpCategory","pageContext","challengeMeta","initTests","updateChallengeMeta","id","focus","componentDidUpdate","prevProps","prevTitle","currentTitle","openCompletionModal","render","description","superBlock","blockName","assignments","translationPending","openHelpModal","nextChallengePath","prevChallengePath","blockNameTitle","Hotkeys","executeChallenge","containerRef","LearnLayout","Helmet","Container","Row","sm","smOffset","xs","ChallengeTitle","PrismFormatted","ObserveKeys","assignment","index","type","onChange","textAlign","disabled","CompletionModal","HelpModal","challengeTitle","challengeBlock","openModal"],"sourceRoot":""}
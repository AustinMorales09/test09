{"version":3,"file":"8231-ac4d42a4f451653a5ae6.js","mappings":"0NAKWA,EAAO,CAChBC,SAAU,CACRC,aAAc,CAAC,UAAQ,WAEzBC,SAAU,CAAC,CAAC,IAAK,MACjBC,iBAAkB,CAAC,CACjBC,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETC,iBAAkB,CAAC,CACjBF,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,KACN,CACDD,KAAM,IACNC,MAAO,MAETE,aAAc,CAAC,CACbC,WAAY,IAAIC,OAAO,8CAA+C,KACtEC,UAAW,gCACXC,OAAQ,CACNC,aAAc,KAAUC,aAAaC,gBAEtC,CACDN,WAAY,IAAIC,OAAO,sCAAuC,KAC9DE,OAAQ,CACNC,aAAc,KAAUC,aAAaE,WAIhCC,EAAW,CACpBC,aAAc,GACdC,aAAc,OACdC,YAAY,EAEZC,cAAe,2BACfC,UAAW,CACTC,KAAM,CAAC,CAAC,SAAU,IAAK,CACrBC,QAAS,eAGX,CAAC,sBAAuB,CAAC,CACvBC,MAAO,aACN,CACDA,MAAO,MACPC,KAAM,UAGR,CAAC,gCAAiC,CAAC,CACjCD,MAAO,aACN,CACDA,MAAO,OACN,GAAI,CACLA,MAAO,eAGT,CAAC,wBAAyB,CAAC,CACzBA,MAAO,aACN,CACDA,MAAO,UACPC,KAAM,UAGR,CAAC,wBAAyB,CAAC,CACzBD,MAAO,aACN,CACDA,MAAO,UACPC,KAAM,UAGR,CAAC,eAAgB,CACfD,MAAO,kBACPC,KAAM,WACJ,CAAC,QAAS,kBACdC,MAAO,CAAC,CAAC,SAAU,IAAK,CAAC,QAAS,CAChCF,MAAO,kBACPC,KAAM,SACJ,CAAC,KAAM,KACXE,IAAK,CAAC,CAAC,aAAc,IAAK,CAAC,6CAA8C,CAAC,iBAAkB,GAAI,oBAAqB,CAAC,+DAAgE,CAAC,iBAAkB,GAAI,oBAAqB,CAAC,6CAA8C,CAAC,iBAAkB,GAAI,oBAAqB,CAAC,iBAAkB,kBAAmB,CAAC,MAAO,CACzWH,MAAO,YACPC,KAAM,SACJ,CAAC,UAAW,CAAC,CACfD,MAAO,OACN,CACDA,MAAO,YACPC,KAAM,UACH,CAAC,IAAK,CACTD,MAAO,YACPC,KAAM,UAERG,WAAY,CAAC,CAAC,aAAc,IAAK,CAAC,OAAQ,CACxCJ,MAAO,UACPC,KAAM,cAERI,QAAS,CAAC,CAAC,UAAW,mBAAoB,CAAC,MAAO,CAChDL,MAAO,UACPC,KAAM,SACJ,CAAC,OAAQ,2BAA4B,CAAC,QAAS,qB","sources":["webpack://@freecodecamp/client/../node_modules/.pnpm/monaco-editor@0.28.1/node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nexport var conf = {\n  comments: {\n    blockComment: ['<!--', '-->']\n  },\n  brackets: [['<', '>']],\n  autoClosingPairs: [{\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  surroundingPairs: [{\n    open: '<',\n    close: '>'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }],\n  onEnterRules: [{\n    beforeText: new RegExp(\"<([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\n    action: {\n      indentAction: languages.IndentAction.IndentOutdent\n    }\n  }, {\n    beforeText: new RegExp(\"<(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n    action: {\n      indentAction: languages.IndentAction.Indent\n    }\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.xml',\n  ignoreCase: true,\n  // Useful regular expressions\n  qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n  tokenizer: {\n    root: [[/[^<&]+/, ''], {\n      include: '@whitespace'\n    },\n    // Standard opening tag\n    [/(<)(@qualifiedName)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'tag',\n      next: '@tag'\n    }]],\n    // Standard closing tag\n    [/(<\\/)(@qualifiedName)(\\s*)(>)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'tag'\n    }, '', {\n      token: 'delimiter'\n    }]],\n    // Meta tags - instruction\n    [/(<\\?)(@qualifiedName)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'metatag',\n      next: '@tag'\n    }]],\n    // Meta tags - declaration\n    [/(<\\!)(@qualifiedName)/, [{\n      token: 'delimiter'\n    }, {\n      token: 'metatag',\n      next: '@tag'\n    }]],\n    // CDATA\n    [/<\\!\\[CDATA\\[/, {\n      token: 'delimiter.cdata',\n      next: '@cdata'\n    }], [/&\\w+;/, 'string.escape']],\n    cdata: [[/[^\\]]+/, ''], [/\\]\\]>/, {\n      token: 'delimiter.cdata',\n      next: '@pop'\n    }], [/\\]/, '']],\n    tag: [[/[ \\t\\r\\n]+/, ''], [/(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name', '', 'attribute.value']], [/(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/, ['attribute.name', '', 'attribute.value']], [/(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/, ['attribute.name', '', 'attribute.value']], [/@qualifiedName/, 'attribute.name'], [/\\?>/, {\n      token: 'delimiter',\n      next: '@pop'\n    }], [/(\\/)(>)/, [{\n      token: 'tag'\n    }, {\n      token: 'delimiter',\n      next: '@pop'\n    }]], [/>/, {\n      token: 'delimiter',\n      next: '@pop'\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, ''], [/<!--/, {\n      token: 'comment',\n      next: '@comment'\n    }]],\n    comment: [[/[^<\\-]+/, 'comment.content'], [/-->/, {\n      token: 'comment',\n      next: '@pop'\n    }], [/<!--/, 'comment.content.invalid'], [/[<\\-]/, 'comment.content']]\n  }\n};"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","language","defaultToken","tokenPostfix","ignoreCase","qualifiedName","tokenizer","root","include","token","next","cdata","tag","whitespace","comment"],"sourceRoot":""}
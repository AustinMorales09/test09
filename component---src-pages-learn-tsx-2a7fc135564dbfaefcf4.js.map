{"version":3,"file":"component---src-pages-learn-tsx-2a7fc135564dbfaefcf4.js","mappings":"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","sources":["webpack://@freecodecamp/client/./src/components/Intro/components/intro-description.tsx","webpack://@freecodecamp/client/./src/components/Progress/progress-bar.tsx","webpack://@freecodecamp/client/./src/components/layouts/learn.tsx","webpack://@freecodecamp/client/./src/components/Intro/learn-alert.tsx","webpack://@freecodecamp/client/./src/components/Intro/index.tsx","webpack://@freecodecamp/client/./src/pages/learn.tsx"],"sourcesContent":["import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport envData from '../../../../config/env.json';\nimport { Link, Spacer } from '../../helpers';\n\nimport '../intro.css';\n\nconst { forumLocation } = envData;\nfunction IntroDescription(): JSX.Element {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className='intro-description'\n      data-playwright-test-label='learn-read-this-section'\n    >\n      <Spacer size='medium' />\n      <p\n        className='text-center'\n        data-playwright-test-label='learn-read-this-heading'\n      >\n        <strong>{t('learn.read-this.heading')}</strong>\n      </p>\n      <Spacer size='medium' />\n      {[...Array(8).keys()].map(i => (\n        <p key={i} data-playwright-test-label='learn-read-this-p'>\n          {t(`learn.read-this.p${i + 1}`)}\n        </p>\n      ))}\n      <p>\n        <Trans\n          i18nKey='learn.read-this.p9'\n          data-playwright-test-label='learn-read-this-p'\n        >\n          <Link className='inline' to='https://youtube.com/freecodecamp' />\n        </Trans>\n      </p>\n      <p data-playwright-test-label='learn-read-this-p'>\n        {t('learn.read-this.p10')}\n      </p>\n      <p>\n        <Trans\n          i18nKey='learn.read-this.p11'\n          data-playwright-test-label='learn-read-this-p'\n        >\n          <Link className='inline' to={forumLocation} />\n        </Trans>\n      </p>\n      <p data-playwright-test-label='learn-read-this-p'>\n        {t('learn.read-this.p12')}\n      </p>\n      <strong>{t('misc.quincy')}</strong>\n    </div>\n  );\n}\n\nIntroDescription.displayName = 'IntroDescription';\n\nexport default IntroDescription;\n","import React from 'react';\n\nexport function ProgressBar({ now }: { now: number }) {\n  return (\n    <>\n      <div className='progress-bar-background'></div>\n      <div\n        className='progress-bar-percent'\n        data-testid='fcc-progress-bar-percent'\n        style={{ width: `${now}%` }}\n      ></div>\n    </>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Loader } from '../../components/helpers';\nimport { tryToShowDonationModal } from '../../redux/actions';\nimport { userFetchStateSelector } from '../../redux/selectors';\nimport DonateModal from '../Donation/donation-modal';\n\nimport './prism.css';\nimport './prism-night.css';\nimport 'react-reflex/styles.css';\nimport './learn.css';\n\ntype FetchState = {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n};\n\nconst mapStateToProps = createSelector(\n  userFetchStateSelector,\n  (fetchState: FetchState) => ({\n    fetchState\n  })\n);\n\nconst mapDispatchToProps = {\n  tryToShowDonationModal\n};\n\ntype LearnLayoutProps = {\n  fetchState: FetchState;\n  tryToShowDonationModal: () => void;\n  children?: React.ReactNode;\n  hasEditableBoundaries?: boolean;\n};\n\nfunction LearnLayout({\n  fetchState,\n  tryToShowDonationModal,\n  children,\n  hasEditableBoundaries\n}: LearnLayoutProps): JSX.Element {\n  useEffect(() => {\n    tryToShowDonationModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      const metaTag = document.querySelector(`meta[name=\"robots\"]`);\n      if (metaTag) {\n        metaTag.remove();\n      }\n    };\n  }, []);\n\n  if (fetchState.pending && !fetchState.complete) {\n    return <Loader fullScreen={true} />;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <meta content='noindex' name='robots' />\n      </Helmet>\n      <main\n        id='learn-app-wrapper'\n        {...(hasEditableBoundaries && { 'data-has-editable-boundaries': true })}\n      >\n        {children}\n      </main>\n      <DonateModal />\n    </>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LearnLayout);\n","import React from 'react';\nimport { Alert } from '@freecodecamp/ui';\nimport { useFeature } from '@growthbook/growthbook-react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, Spacer } from '../helpers';\nimport { ProgressBar } from '../Progress/progress-bar';\n\ninterface LearnAlertProps {\n  onLearnDonationAlertClick: () => void;\n  isDonating: boolean;\n}\n\nconst LearnAlert = ({\n  onLearnDonationAlertClick,\n  isDonating\n}: LearnAlertProps): JSX.Element | null => {\n  const { t } = useTranslation();\n  const seasonalAlertFlag = useFeature('seasonal-alert');\n  const progressAlertFlag2024 = useFeature('progress-alert-2024');\n  const createUniversityFlag = useFeature('university-alert');\n  const progressAlertDefault = (text: string, value?: number) => (\n    <Alert variant='info' className='annual-donation-alert'>\n      {value && (\n        <>\n          <div className='text-center'>\n            <h2>{t('learn.donation-heading')}</h2>\n            <Spacer size='small' />\n            <b className='m-0 progress-percent-value'>{`${value}%`}</b>\n          </div>\n          <div aria-hidden='true' className='progress-wrapper'>\n            <div>\n              <ProgressBar now={value} />\n            </div>\n          </div>\n        </>\n      )}\n      <p>{text}</p>\n      <Spacer size='medium' />\n      <div className={'text-center'}>\n        <Link\n          className='btn'\n          key='donate'\n          sameTab={false}\n          to='/donate'\n          onClick={onLearnDonationAlertClick}\n        >\n          {t('buttons.donate')}\n        </Link>\n      </div>\n    </Alert>\n  );\n\n  const seasonalAlertFlagAlert = (\n    <Alert variant='info' className='annual-donation-alert'>\n      <p>\n        <b>{t('learn.season-greetings-fcc')}</b>\n      </p>\n      <p>{t('learn.if-getting-value')}</p>\n      <hr />\n      <p className={'text-center'}>\n        <Link\n          className='btn'\n          key='donate'\n          sameTab={false}\n          to='/donate'\n          onClick={onLearnDonationAlertClick}\n        >\n          {t('buttons.donate')}\n        </Link>\n      </p>\n    </Alert>\n  );\n\n  const progressAlert2024 = progressAlertDefault(\n    t('donate.help-us-reach-20k'),\n    Number(progressAlertFlag2024.value)\n  );\n\n  const universityAlert = (\n    <Alert variant='info' className='university-alert'>\n      <p>\n        <b>{t('learn.building-a-university')}</b>\n      </p>\n      <p>{t('learn.if-help-university')}</p>\n      <Spacer size='medium' />\n      <p className={'text-center'}>\n        <Link\n          className='btn'\n          key='donate'\n          sameTab={false}\n          to='/donate'\n          onClick={onLearnDonationAlertClick}\n        >\n          {t('buttons.donate')}\n        </Link>\n      </p>\n    </Alert>\n  );\n\n  if (!isDonating) {\n    if (createUniversityFlag.on) return universityAlert;\n    if (progressAlertFlag2024.on) return progressAlert2024;\n    if (seasonalAlertFlag.on) return seasonalAlertFlagAlert;\n  }\n  return null;\n};\n\nLearnAlert.displayName = 'LearnAlert';\n\nexport default LearnAlert;\n","import React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { randomQuote } from '../../utils/get-words';\nimport Login from '../Header/components/login';\nimport { Link, Spacer, Loader } from '../helpers';\nimport IntroDescription from './components/intro-description';\n\nimport './intro.css';\nimport LearnAlert from './learn-alert';\n\ninterface IntroProps {\n  complete?: boolean;\n  completedChallengeCount?: number;\n  isSignedIn?: boolean;\n  name?: string;\n  pending?: boolean;\n  slug?: string;\n  username?: string;\n  onLearnDonationAlertClick: () => void;\n  isDonating: boolean;\n}\n\nconst Intro = ({\n  isSignedIn,\n  name,\n  pending,\n  complete,\n  completedChallengeCount,\n  slug,\n  onLearnDonationAlertClick,\n  isDonating\n}: IntroProps): JSX.Element => {\n  const { t } = useTranslation();\n  if (pending && !complete) {\n    return (\n      <>\n        <Spacer size='medium' />\n        <Loader />\n        <Spacer size='medium' />\n      </>\n    );\n  } else if (isSignedIn) {\n    const { quote, author } = randomQuote();\n    return (\n      <>\n        <Spacer size='medium' />\n        <h1 id='content-start' className='text-center'>\n          {name\n            ? `${t('learn.welcome-1', { name: name })}`\n            : `${t('learn.welcome-2')}`}\n        </h1>\n        <Spacer size='medium' />\n        <div className='text-center quote-partial'>\n          <blockquote className='blockquote' data-testid='quote-block'>\n            <span>\n              <q data-playwright-test-label='random-quote'>{quote}</q>\n              <footer className='quote-author blockquote-footer'>\n                <cite data-playwright-test-label='random-author'>{author}</cite>\n              </footer>\n            </span>\n          </blockquote>\n        </div>\n        <LearnAlert\n          onLearnDonationAlertClick={onLearnDonationAlertClick}\n          isDonating={isDonating}\n        />\n        {completedChallengeCount && slug && completedChallengeCount < 15 ? (\n          <div className='intro-description'>\n            <Spacer size='medium' />\n            <p>\n              <Trans i18nKey='learn.start-at-beginning'>\n                <Link to={slug} />\n              </Trans>\n            </p>\n          </div>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Spacer size='medium' />\n        <h1\n          id='content-start'\n          className='text-center'\n          data-playwright-test-label='learn-heading'\n        >\n          {t('learn.heading')}\n        </h1>\n        <Spacer size='medium' />\n        <IntroDescription />\n        <Spacer size='medium' />\n        <Login block={true}>{t('buttons.logged-out-cta-btn')}</Login>\n        <Spacer size='medium' />\n      </>\n    );\n  }\n};\n\nIntro.displayName = 'Intro';\n\nexport default Intro;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { Container, Col, Row } from '@freecodecamp/ui';\n\nimport Intro from '../components/Intro';\nimport Map from '../components/Map';\nimport { Spacer } from '../components/helpers';\nimport LearnLayout from '../components/layouts/learn';\nimport {\n  isSignedInSelector,\n  userSelector,\n  userFetchStateSelector\n} from '../redux/selectors';\n\nimport callGA from '../analytics/call-ga';\n\ninterface FetchState {\n  pending: boolean;\n  complete: boolean;\n  errored: boolean;\n}\n\ninterface User {\n  name: string;\n  username: string;\n  completedChallengeCount: number;\n  isDonating: boolean;\n}\n\nconst mapStateToProps = createSelector(\n  userFetchStateSelector,\n  isSignedInSelector,\n  userSelector,\n  (fetchState: FetchState, isSignedIn: boolean, user: User) => ({\n    fetchState,\n    isSignedIn,\n    user\n  })\n);\n\ninterface Slug {\n  slug: string;\n}\n\ninterface LearnPageProps {\n  isSignedIn: boolean;\n  fetchState: FetchState;\n  state: Record<string, unknown>;\n  user: User;\n  data: {\n    challengeNode: {\n      challenge: {\n        fields: Slug;\n      };\n    };\n  };\n}\n\nfunction LearnPage({\n  isSignedIn,\n  fetchState: { pending, complete },\n  user: { name = '', completedChallengeCount = 0, isDonating = false },\n  data: {\n    challengeNode: {\n      challenge: {\n        fields: { slug }\n      }\n    }\n  }\n}: LearnPageProps) {\n  const { t } = useTranslation();\n\n  const onLearnDonationAlertClick = () => {\n    callGA({\n      event: 'donation_related',\n      action: `Learn Donation Alert Click`\n    });\n  };\n  return (\n    <LearnLayout>\n      <Helmet title={t('metaTags:title')} />\n      <Container>\n        <Row>\n          <Col md={8} mdOffset={2} sm={10} smOffset={1} xs={12}>\n            <Intro\n              complete={complete}\n              completedChallengeCount={completedChallengeCount}\n              isSignedIn={isSignedIn}\n              name={name}\n              pending={pending}\n              slug={slug}\n              onLearnDonationAlertClick={onLearnDonationAlertClick}\n              isDonating={isDonating}\n            />\n            <Map />\n            <Spacer size='large' />\n          </Col>\n        </Row>\n      </Container>\n    </LearnLayout>\n  );\n}\n\nLearnPage.displayName = 'LearnPage';\n\nexport default connect(mapStateToProps)(LearnPage);\n\nexport const query = graphql`\n  query FirstChallenge {\n    challengeNode(\n      challenge: {\n        superOrder: { eq: 0 }\n        order: { eq: 0 }\n        challengeOrder: { eq: 0 }\n      }\n    ) {\n      challenge {\n        fields {\n          slug\n        }\n      }\n    }\n  }\n`;\n"],"names":["forumLocation","envData","IntroDescription","t","useTranslation","React","className","Spacer","size","Array","keys","map","i","key","Trans","i18nKey","Link","to","displayName","ProgressBar","_ref","now","style","width","mapStateToProps","createSelector","userFetchStateSelector","fetchState","mapDispatchToProps","tryToShowDonationModal","connect","children","hasEditableBoundaries","useEffect","metaTag","document","querySelector","remove","pending","complete","Loader","fullScreen","Helmet","content","name","Object","assign","id","DonateModal","LearnAlert","onLearnDonationAlertClick","isDonating","seasonalAlertFlag","useFeature","progressAlertFlag2024","createUniversityFlag","seasonalAlertFlagAlert","Alert","variant","sameTab","onClick","progressAlert2024","text","value","Number","progressAlertDefault","universityAlert","on","Intro","isSignedIn","completedChallengeCount","slug","quote","author","randomQuote","Login","block","isSignedInSelector","userSelector","user","LearnPage","data","challengeNode","challenge","fields","LearnLayout","title","Container","Row","Col","md","mdOffset","sm","smOffset","xs","callGA","event","action","Map"],"sourceRoot":""}